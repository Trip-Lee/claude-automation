{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "f8707bff3349a2107b18bc534d5c7b35",
    "extracted_at": "2025-09-19T21:48:28.861Z",
    "display_value": "OptionsApiMS",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "5",
    "display_value": "5"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-06-13 18:02:04",
    "display_value": "2025-06-13 11:02:04 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const OptionsApiMS = Class.create();\r\nOptionsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    get: function({\r\n\t\ttableGr,\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n\t\tif (tableGr) {\r\n\t\t\treturn this.getChoice({ tableGr, allowHTML });\r\n\t\t} else {\r\n\t\t\treturn this.getChoices({ query, limit, allowHTML });\r\n\t\t}\r\n    },\r\n\r\n    getChoice: function({\r\n        tableGr,\r\n        allowHTML\r\n    }) {\r\n        const choice = {\r\n            label: tableGr.getDisplayValue('label') || '(Empty Display Value)',\r\n            displayValue: tableGr.getDisplayValue() || '(Empty Display Value)',\r\n            value: tableGr.getValue('value') || '',\r\n            sysId: tableGr.getUniqueValue(),\r\n            name: tableGr.getValue('name') || '',\r\n            description: tableGr.getValue('description') || '',\r\n            icon: tableGr.getValue('icon') || '',\r\n            iconType: tableGr.getValue('icon_type') || '',\r\n        };\r\n\r\n\t\tchoice.label = gs.getMessage(choice.label);\r\n\t\tchoice.title = choice.label;\r\n\t\tchoice.displayValue = gs.getMessage(choice.displayValue);\r\n\r\n        if (!allowHTML) {\r\n            choice.description = choice.description.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n        }\r\n\t\t\r\n\t\tchoice.description = gs.getMessage(choice.description);\r\n\r\n        return choice;\r\n    },\r\n\t\r\n\tgetChoices: function({\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n        const tableGr = new GlideRecordSecure('x_cadso_core_option');\r\n        if (query) {\r\n            tableGr.addEncodedQuery(query);\r\n        }\r\n        const displayField = tableGr.getDisplayName();\r\n        tableGr.orderBy(displayField);\r\n        tableGr.setLimit(limit);\r\n        tableGr.query();\r\n\r\n        const choices = [];\r\n        while (tableGr.next()) {\r\n            choices.push(this.getChoice({\r\n                tableGr,\r\n                allowHTML\r\n            }));\r\n        }\r\n\r\n        return choices;\r\n    },\r\n\r\n    type: \"OptionsApiMS\",\r\n};",
    "display_value": "const OptionsApiMS = Class.create();\r\nOptionsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    get: function({\r\n\t\ttableGr,\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n\t\tif (tableGr) {\r\n\t\t\treturn this.getChoice({ tableGr, allowHTML });\r\n\t\t} else {\r\n\t\t\treturn this.getChoices({ query, limit, allowHTML });\r\n\t\t}\r\n    },\r\n\r\n    getChoice: function({\r\n        tableGr,\r\n        allowHTML\r\n    }) {\r\n        const choice = {\r\n            label: tableGr.getDisplayValue('label') || '(Empty Display Value)',\r\n            displayValue: tableGr.getDisplayValue() || '(Empty Display Value)',\r\n            value: tableGr.getValue('value') || '',\r\n            sysId: tableGr.getUniqueValue(),\r\n            name: tableGr.getValue('name') || '',\r\n            description: tableGr.getValue('description') || '',\r\n            icon: tableGr.getValue('icon') || '',\r\n            iconType: tableGr.getValue('icon_type') || '',\r\n        };\r\n\r\n\t\tchoice.label = gs.getMessage(choice.label);\r\n\t\tchoice.title = choice.label;\r\n\t\tchoice.displayValue = gs.getMessage(choice.displayValue);\r\n\r\n        if (!allowHTML) {\r\n            choice.description = choice.description.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n        }\r\n\t\t\r\n\t\tchoice.description = gs.getMessage(choice.description);\r\n\r\n        return choice;\r\n    },\r\n\t\r\n\tgetChoices: function({\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n        const tableGr = new GlideRecordSecure('x_cadso_core_option');\r\n        if (query) {\r\n            tableGr.addEncodedQuery(query);\r\n        }\r\n        const displayField = tableGr.getDisplayName();\r\n        tableGr.orderBy(displayField);\r\n        tableGr.setLimit(limit);\r\n        tableGr.query();\r\n\r\n        const choices = [];\r\n        while (tableGr.next()) {\r\n            choices.push(this.getChoice({\r\n                tableGr,\r\n                allowHTML\r\n            }));\r\n        }\r\n\r\n        return choices;\r\n    },\r\n\r\n    type: \"OptionsApiMS\",\r\n};",
    "formatted_script": {
      "line_count": 72,
      "char_count": 1995,
      "preview": "const OptionsApiMS = Class.create();\r\nOptionsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    get: function({\r\n\t\ttableGr,\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r...",
      "full_script": "const OptionsApiMS = Class.create();\r\nOptionsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    get: function({\r\n\t\ttableGr,\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n\t\tif (tableGr) {\r\n\t\t\treturn this.getChoice({ tableGr, allowHTML });\r\n\t\t} else {\r\n\t\t\treturn this.getChoices({ query, limit, allowHTML });\r\n\t\t}\r\n    },\r\n\r\n    getChoice: function({\r\n        tableGr,\r\n        allowHTML\r\n    }) {\r\n        const choice = {\r\n            label: tableGr.getDisplayValue('label') || '(Empty Display Value)',\r\n            displayValue: tableGr.getDisplayValue() || '(Empty Display Value)',\r\n            value: tableGr.getValue('value') || '',\r\n            sysId: tableGr.getUniqueValue(),\r\n            name: tableGr.getValue('name') || '',\r\n            description: tableGr.getValue('description') || '',\r\n            icon: tableGr.getValue('icon') || '',\r\n            iconType: tableGr.getValue('icon_type') || '',\r\n        };\r\n\r\n\t\tchoice.label = gs.getMessage(choice.label);\r\n\t\tchoice.title = choice.label;\r\n\t\tchoice.displayValue = gs.getMessage(choice.displayValue);\r\n\r\n        if (!allowHTML) {\r\n            choice.description = choice.description.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n        }\r\n\t\t\r\n\t\tchoice.description = gs.getMessage(choice.description);\r\n\r\n        return choice;\r\n    },\r\n\t\r\n\tgetChoices: function({\r\n        query = '',\r\n        limit = 7,\r\n        allowHTML = false\r\n    }) {\r\n        const tableGr = new GlideRecordSecure('x_cadso_core_option');\r\n        if (query) {\r\n            tableGr.addEncodedQuery(query);\r\n        }\r\n        const displayField = tableGr.getDisplayName();\r\n        tableGr.orderBy(displayField);\r\n        tableGr.setLimit(limit);\r\n        tableGr.query();\r\n\r\n        const choices = [];\r\n        while (tableGr.next()) {\r\n            choices.push(this.getChoice({\r\n                tableGr,\r\n                allowHTML\r\n            }));\r\n        }\r\n\r\n        return choices;\r\n    },\r\n\r\n    type: \"OptionsApiMS\",\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_script_include_f8707bff3349a2107b18bc534d5c7b35",
    "display_value": "sys_script_include_f8707bff3349a2107b18bc534d5c7b35"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_core.OptionsApiMS",
    "display_value": "x_cadso_core.OptionsApiMS"
  },
  "sys_created_on": {
    "value": "2025-04-28 23:00:31",
    "display_value": "2025-04-28 04:00:31 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "OptionsApiMS",
    "display_value": "OptionsApiMS"
  },
  "sys_name": {
    "value": "OptionsApiMS",
    "display_value": "OptionsApiMS"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
