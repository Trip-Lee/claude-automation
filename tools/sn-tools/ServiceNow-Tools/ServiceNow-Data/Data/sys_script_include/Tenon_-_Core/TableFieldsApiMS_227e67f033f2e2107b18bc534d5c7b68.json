{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "227e67f033f2e2107b18bc534d5c7b68",
    "extracted_at": "2025-09-19T21:48:28.707Z",
    "display_value": "TableFieldsApiMS",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "66",
    "display_value": "66"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-08-07 16:08:55",
    "display_value": "2025-08-07 09:08:55 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var TableFieldsApiMS = Class.create();\r\nTableFieldsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        const {\r\n            table,\r\n\t\t\tsysId,\r\n            options\r\n        } = request.body.data;\r\n\r\n        // orderByField (string, default: \"name\")\r\n        // Specifies the field by which to sort the query results.\r\n        // If not provided, defaults to \"name\".\r\n        // Example:\r\n        // orderByField: \"created_on\"\r\n\r\n        // orderDirection (string, default: \"ASC\")\r\n        // Determines the sort direction for the results.\r\n        // Accepted values are \"ASC\" (ascending) or \"DESC\" (descending).\r\n        // Defaults to \"ASC\".\r\n        // Example:\r\n        // orderDirection: \"DESC\"\r\n\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            orderByField = \"name\", orderDirection = \"ASC\", fields = [], encodedQuery, queries = [], getMoreDataFrom = null\r\n        } = options;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value === \"sysId\" ? sysId : value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (orderDirection === 'DESC') {\r\n            tableGR.orderByDesc(orderByField);\r\n        } else {\r\n            tableGR.orderBy(orderByField);\r\n        }\r\n\r\n        tableGR.query()\r\n        while (tableGR.next()) {\r\n            var obj = {};\r\n            if (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    obj[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    obj[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n\r\n            if (getMoreDataFrom) {\r\n                var utmOptionsGr = new GlideRecord(getMoreDataFrom.table);\r\n                if (utmOptionsGr.get(obj[getMoreDataFrom.sysIdField])) {\r\n                    if (getMoreDataFrom.fields.length > 0) {\r\n                        getMoreDataFrom.fields.forEach(({\r\n                            label,\r\n                            field\r\n                        }) => {\r\n                            obj[label] = utmOptionsGr.getValue(field)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            items.push(obj);\r\n        }\r\n\r\n        // How do i know if this didnt go through? Do I put all this in a try catch?\r\n        response.setStatus(200);\r\n        response.setBody({\r\n            success: true,\r\n            message: \"Fetched UTM Parameters Successfully.\",\r\n            items\r\n        });\r\n\r\n    },\r\n\r\n    saveOneRecord: function(request, respond) {\r\n        const {\r\n            table,\r\n            sysId,\r\n            fields,\r\n\t\t\tupdatedFields\r\n        } = request.body.data;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        if (tableGR.get(sysId)) {\r\n\t\t\tconst item = {};\r\n            if (fields.length > 0) {\r\n                updatedFields.forEach(({\r\n                    label,\r\n                    value\r\n                }) => {\r\n                    tableGR.setValue(label, value);\r\n                });\r\n            }\r\n\r\n            const sysId = tableGR.update();\r\n\t\t\tif (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    item[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    item[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated Successfully.\",\r\n                item\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n    },\r\n\r\n    update: function(request, response) {\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            table,\r\n            fields = [],\r\n            encodedQuery,\r\n            queries = []\r\n        } = request.body.data;\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (tableGR.query()) {\r\n            while (tableGR.next()) {\r\n                if (fields.length > 0) {\r\n                    fields.forEach(({\r\n                        field,\r\n                        value\r\n                    }) => {\r\n                        tableGR.setValue(field, value);\r\n                    });\r\n                }\r\n            }\r\n\r\n            tableGR.update();\r\n\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated UTM Parameters Successfully.\",\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    _getTableSchema(table) {\r\n        const schema = global.Schema.of(table, ['*']);\r\n        let fields = Object.keys(schema[table]);\r\n        fields = fields.filter(field => !field.includes('sys_') || field == 'sys_id' || field == 'sys_class_name');\r\n        return fields.sort();\r\n    },\r\n\r\n    type: 'TableFieldsApiMS'\r\n};",
    "display_value": "var TableFieldsApiMS = Class.create();\r\nTableFieldsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        const {\r\n            table,\r\n\t\t\tsysId,\r\n            options\r\n        } = request.body.data;\r\n\r\n        // orderByField (string, default: \"name\")\r\n        // Specifies the field by which to sort the query results.\r\n        // If not provided, defaults to \"name\".\r\n        // Example:\r\n        // orderByField: \"created_on\"\r\n\r\n        // orderDirection (string, default: \"ASC\")\r\n        // Determines the sort direction for the results.\r\n        // Accepted values are \"ASC\" (ascending) or \"DESC\" (descending).\r\n        // Defaults to \"ASC\".\r\n        // Example:\r\n        // orderDirection: \"DESC\"\r\n\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            orderByField = \"name\", orderDirection = \"ASC\", fields = [], encodedQuery, queries = [], getMoreDataFrom = null\r\n        } = options;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value === \"sysId\" ? sysId : value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (orderDirection === 'DESC') {\r\n            tableGR.orderByDesc(orderByField);\r\n        } else {\r\n            tableGR.orderBy(orderByField);\r\n        }\r\n\r\n        tableGR.query()\r\n        while (tableGR.next()) {\r\n            var obj = {};\r\n            if (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    obj[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    obj[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n\r\n            if (getMoreDataFrom) {\r\n                var utmOptionsGr = new GlideRecord(getMoreDataFrom.table);\r\n                if (utmOptionsGr.get(obj[getMoreDataFrom.sysIdField])) {\r\n                    if (getMoreDataFrom.fields.length > 0) {\r\n                        getMoreDataFrom.fields.forEach(({\r\n                            label,\r\n                            field\r\n                        }) => {\r\n                            obj[label] = utmOptionsGr.getValue(field)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            items.push(obj);\r\n        }\r\n\r\n        // How do i know if this didnt go through? Do I put all this in a try catch?\r\n        response.setStatus(200);\r\n        response.setBody({\r\n            success: true,\r\n            message: \"Fetched UTM Parameters Successfully.\",\r\n            items\r\n        });\r\n\r\n    },\r\n\r\n    saveOneRecord: function(request, respond) {\r\n        const {\r\n            table,\r\n            sysId,\r\n            fields,\r\n\t\t\tupdatedFields\r\n        } = request.body.data;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        if (tableGR.get(sysId)) {\r\n\t\t\tconst item = {};\r\n            if (fields.length > 0) {\r\n                updatedFields.forEach(({\r\n                    label,\r\n                    value\r\n                }) => {\r\n                    tableGR.setValue(label, value);\r\n                });\r\n            }\r\n\r\n            const sysId = tableGR.update();\r\n\t\t\tif (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    item[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    item[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated Successfully.\",\r\n                item\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n    },\r\n\r\n    update: function(request, response) {\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            table,\r\n            fields = [],\r\n            encodedQuery,\r\n            queries = []\r\n        } = request.body.data;\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (tableGR.query()) {\r\n            while (tableGR.next()) {\r\n                if (fields.length > 0) {\r\n                    fields.forEach(({\r\n                        field,\r\n                        value\r\n                    }) => {\r\n                        tableGR.setValue(field, value);\r\n                    });\r\n                }\r\n            }\r\n\r\n            tableGR.update();\r\n\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated UTM Parameters Successfully.\",\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    _getTableSchema(table) {\r\n        const schema = global.Schema.of(table, ['*']);\r\n        let fields = Object.keys(schema[table]);\r\n        fields = fields.filter(field => !field.includes('sys_') || field == 'sys_id' || field == 'sys_class_name');\r\n        return fields.sort();\r\n    },\r\n\r\n    type: 'TableFieldsApiMS'\r\n};",
    "formatted_script": {
      "line_count": 249,
      "char_count": 7887,
      "preview": "var TableFieldsApiMS = Class.create();\r\nTableFieldsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        const {\r\n            table,\r\n\t\t\tsysId,\r\n    ...",
      "full_script": "var TableFieldsApiMS = Class.create();\r\nTableFieldsApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        const {\r\n            table,\r\n\t\t\tsysId,\r\n            options\r\n        } = request.body.data;\r\n\r\n        // orderByField (string, default: \"name\")\r\n        // Specifies the field by which to sort the query results.\r\n        // If not provided, defaults to \"name\".\r\n        // Example:\r\n        // orderByField: \"created_on\"\r\n\r\n        // orderDirection (string, default: \"ASC\")\r\n        // Determines the sort direction for the results.\r\n        // Accepted values are \"ASC\" (ascending) or \"DESC\" (descending).\r\n        // Defaults to \"ASC\".\r\n        // Example:\r\n        // orderDirection: \"DESC\"\r\n\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            orderByField = \"name\", orderDirection = \"ASC\", fields = [], encodedQuery, queries = [], getMoreDataFrom = null\r\n        } = options;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value === \"sysId\" ? sysId : value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (orderDirection === 'DESC') {\r\n            tableGR.orderByDesc(orderByField);\r\n        } else {\r\n            tableGR.orderBy(orderByField);\r\n        }\r\n\r\n        tableGR.query()\r\n        while (tableGR.next()) {\r\n            var obj = {};\r\n            if (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    obj[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    obj[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n\r\n            if (getMoreDataFrom) {\r\n                var utmOptionsGr = new GlideRecord(getMoreDataFrom.table);\r\n                if (utmOptionsGr.get(obj[getMoreDataFrom.sysIdField])) {\r\n                    if (getMoreDataFrom.fields.length > 0) {\r\n                        getMoreDataFrom.fields.forEach(({\r\n                            label,\r\n                            field\r\n                        }) => {\r\n                            obj[label] = utmOptionsGr.getValue(field)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            items.push(obj);\r\n        }\r\n\r\n        // How do i know if this didnt go through? Do I put all this in a try catch?\r\n        response.setStatus(200);\r\n        response.setBody({\r\n            success: true,\r\n            message: \"Fetched UTM Parameters Successfully.\",\r\n            items\r\n        });\r\n\r\n    },\r\n\r\n    saveOneRecord: function(request, respond) {\r\n        const {\r\n            table,\r\n            sysId,\r\n            fields,\r\n\t\t\tupdatedFields\r\n        } = request.body.data;\r\n\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        if (tableGR.get(sysId)) {\r\n\t\t\tconst item = {};\r\n            if (fields.length > 0) {\r\n                updatedFields.forEach(({\r\n                    label,\r\n                    value\r\n                }) => {\r\n                    tableGR.setValue(label, value);\r\n                });\r\n            }\r\n\r\n            const sysId = tableGR.update();\r\n\t\t\tif (fields.length > 0) {\r\n                fields.forEach(({\r\n                    label,\r\n                    field\r\n                }) => {\r\n                    item[label] = tableGR.getValue(field);\r\n                })\r\n            } else {\r\n                this._getTableSchema(table).forEach(field => {\r\n                    item[field] = tableGR.getValue(field);\r\n                });\r\n            }\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated Successfully.\",\r\n                item\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n    },\r\n\r\n    update: function(request, response) {\r\n        // fields (array of objects, default: [])\r\n        // An array of field names to include in the query results.\r\n        // If empty, all fields may be returned.\r\n        // Example:\r\n        // fields: [{\r\n        //   label: 'sysId',\r\n        //   field: 'sys_id\r\n        // }]\r\n\r\n        // encodedQuery (string, optional)\r\n        // A ServiceNow encoded query string to filter the results.\r\n        // Allows complex filtering using ServiceNow’s encoded query syntax.\r\n        // Example:\r\n        // encodedQuery: \"active=true^category=hardware\"\r\n\r\n        // queries (array, optional)\r\n        // An array of individual query conditions, each typically an object with field, operator, and value properties.\r\n        // Used to build up multiple filter conditions programmatically.\r\n        // Example:\r\n        // queries: [\r\n        //   { field: \"active\", value: true },\r\n        //   { field: \"category\", value: \"hardware\" }\r\n        // ]\r\n        const {\r\n            table,\r\n            fields = [],\r\n            encodedQuery,\r\n            queries = []\r\n        } = request.body.data;\r\n        const tableGR = new GlideRecord(table);\r\n\r\n        var items = [];\r\n        if (queries.length > 0) {\r\n            queries.forEach(({\r\n                field,\r\n                value\r\n            }) => {\r\n                tableGR.addQuery(field, value);\r\n            });\r\n        }\r\n\r\n        if (encodedQuery) {\r\n            tableGR.addEncodedQuery(encodedQuery);\r\n        }\r\n\r\n        if (tableGR.query()) {\r\n            while (tableGR.next()) {\r\n                if (fields.length > 0) {\r\n                    fields.forEach(({\r\n                        field,\r\n                        value\r\n                    }) => {\r\n                        tableGR.setValue(field, value);\r\n                    });\r\n                }\r\n            }\r\n\r\n            tableGR.update();\r\n\r\n            response.setStatus(201);\r\n            response.setBody({\r\n                success: true,\r\n                message: \"Updated UTM Parameters Successfully.\",\r\n            });\r\n        } else {\r\n            response.setStatus(404);\r\n            response.setBody({\r\n                success: false,\r\n                message: \"Cannot find resource\",\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    _getTableSchema(table) {\r\n        const schema = global.Schema.of(table, ['*']);\r\n        let fields = Object.keys(schema[table]);\r\n        fields = fields.filter(field => !field.includes('sys_') || field == 'sys_id' || field == 'sys_class_name');\r\n        return fields.sort();\r\n    },\r\n\r\n    type: 'TableFieldsApiMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_script_include_227e67f033f2e2107b18bc534d5c7b68",
    "display_value": "sys_script_include_227e67f033f2e2107b18bc534d5c7b68"
  },
  "sys_updated_by": {
    "value": "dennis.huh",
    "display_value": "dennis.huh"
  },
  "api_name": {
    "value": "x_cadso_core.TableFieldsApiMS",
    "display_value": "x_cadso_core.TableFieldsApiMS"
  },
  "sys_created_on": {
    "value": "2025-07-15 15:10:15",
    "display_value": "2025-07-15 08:10:15 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "TableFieldsApiMS",
    "display_value": "TableFieldsApiMS"
  },
  "sys_name": {
    "value": "TableFieldsApiMS",
    "display_value": "TableFieldsApiMS"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "dennis.huh",
    "display_value": "dennis.huh"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
