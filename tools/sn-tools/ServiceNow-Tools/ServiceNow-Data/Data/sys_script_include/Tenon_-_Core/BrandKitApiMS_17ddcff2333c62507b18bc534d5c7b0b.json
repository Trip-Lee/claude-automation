{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "17ddcff2333c62507b18bc534d5c7b0b",
    "extracted_at": "2025-09-19T21:48:28.970Z",
    "display_value": "BrandKitApiMS",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "44",
    "display_value": "44"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-04-24 17:07:25",
    "display_value": "2025-04-24 10:07:25 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "/* eslint-disable no-undef */\n/* eslint-disable max-lines */\nconst BrandKitApiMS = Class.create();\nBrandKitApiMS.prototype = {\n    initialize: function() {\n        this.buttonSize = \"22px\";\n    },\n\n    /** ************** CREATE STYLE KIT ****************/\n    createBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n\n        const socialMediaIds = [];\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        brandKitGR.initialize();\n        brandKitGR.newRecord();\n        brandKitGR.setValue(\n            \"name\",\n            requestBody.brandName || requestBody.brand_name || requestBody.name || \"New Brand Kit\"\n        );\n        const brandKitId = brandKitGR.insert();\n        if (!brandKitId) {\n            response.setStatus(500);\n            response.setBody({\n                success: false,\n                message: \"Failed to create Brand Kit.\",\n            });\n            return response;\n        }\n\n        const colors = [];\n\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                colorGR.initialize();\n                colorGR.newRecord();\n                colorGR.setValue(\"active\", true);\n                colorGR.setValue(\"color\", color);\n                colorGR.setValue(\"name\", color);\n                colorGR.setValue(\"type\", \"color\");\n                colorGR.setValue(\"brand_kit\", brandKitId);\n                colors.push(colorGR.insert());\n            });\n        }\n\n        const fonts = [];\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.fonts.forEach(function(font) {\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n                fontGR.initialize();\n                fontGR.newRecord();\n                fontGR.setValue(\"name\", font.name || \"\");\n                fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                fontGR.setValue(\"url\", font.url && font.url.trim() !== \"\" ? font.url : \"\");\n                fontGR.setValue(\"active\", active || false);\n                fontGR.setValue(\"custom\", custom || false);\n                fontGR.setValue(\"brand_kit\", brandKitId);\n                fontGR.setValue(\"type\", \"font\");\n                fonts.push(fontGR.insert());\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                socialGR.initialize();\n                socialGR.newRecord();\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialMediaId = socialGR.insert();\n                if (socialMediaId) {\n                    socialMediaIds.push(socialMediaId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\") || \"\");\n        brandKitGR.setValue(\"fonts\", fonts.join(\",\") || \"\");\n        brandKitGR.setValue(\"colors\", colors.join(\",\") || \"\");\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(201);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit Created Successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n        });\n    },\n\n    setBrandKitGr: function(brandKitGR, brandKitId, requestBody) {\n        brandKitGR.setValue(\"email_width\", requestBody.contentWidths.email || \"\");\n        brandKitGR.setValue(\"page_width\", requestBody.contentWidths.page || \"\");\n\n        const titleSysId = this.setTitle({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('title') || ''\n        });\n\n        brandKitGR.setValue(\"title\", titleSysId);\n\n        const buttonSysId = this.setButton({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('button') || ''\n        });\n\n        brandKitGR.setValue(\"button\", buttonSysId);\n\n        const textSysId = this.setText({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('text') || ''\n        });\n\n        brandKitGR.setValue(\"text\", textSysId);\n    },\n\n    /** ************** GET STYLE KIT ****************/\n\n\t_getBrandKit: function({ sysId }) {\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(sysId)) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst colorVals = this.getRelatedRecordIds(sysId, \"color\");\n        const fontIds = this.getRelatedRecordIds(sysId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(sysId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this.getBrandKitObj({\n            brandKitGR,\n            colors,\n            fonts\n        });\n\t\t\n\t\treturn brandKitData;\n\t},\n\n    getBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return ;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n        const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(brandKitId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this._getBrandKit({ sysId: brandKitId });\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: brandKitData,\n        });\n    },\n\n    /** ************** GET STYLE KITS ****************/\n    getBrandKits: function(request, response) {\n        const responseBody = [];\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        // if (query) {\n        // \tbrandKitGR.addEncodedQuery(query);\n        // }\n        brandKitGR.orderBy(\"name\");\n        brandKitGR.query();\n        while (brandKitGR.next()) {\n            const brandKitId = brandKitGR.getUniqueValue();\n            const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n            const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n\n            const colors = colorVals;\n\n            const fonts = fontIds.map(function(fontId) {\n                return this.getFontDetails(fontId);\n            }, this);\n\n            const brandKitData = this.getBrandKitObj({\n                brandKitGR,\n                colors,\n                fonts\n            });\n\n            responseBody.push(brandKitData);\n        }\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: responseBody,\n        });\n    },\n\n    /** ************** UPDATE STYLE KIT ****************/\n    updateBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"No Brand Kit ID provided.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorIds = [];\n        const fontIds = [];\n        const socialMediaIds = [];\n        const recordsNotUpdated = [];\n\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                colorGR.addQuery(\"color\", color);\n                colorGR.addQuery(\"name\", color);\n                colorGR.addQuery(\"type\", \"color\");\n                colorGR.addQuery(\"brand_kit\", brandKitId);\n                colorGR.query();\n                if (colorGR.next()) {\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.update();\n                    colorIds.push(colorGR.getUniqueValue());\n                } else {\n                    colorGR.initialize();\n                    colorGR.newRecord();\n                    colorGR.setValue(\"active\", true);\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.setValue(\"brand_kit\", brandKitId);\n                    const colorId = colorGR.insert();\n                    if (colorId) {\n                        colorIds.push(colorId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            requestBody.fonts.forEach(function(font) {\n                const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                fontGR.addQuery(\"name\", font.name);\n                fontGR.addQuery(\"type\", \"font\");\n                fontGR.addQuery(\"brand_kit\", brandKitId);\n                fontGR.query();\n\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n\n                if (fontGR.next()) {\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"type\", \"font\");\n                    fontGR.update();\n                    fontIds.push(fontGR.getUniqueValue());\n                } else {\n                    fontGR.initialize();\n                    fontGR.newRecord();\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"brand_kit\", brandKitId);\n                    fontGR.setValue(\"type\", \"font\");\n                    const fontId = fontGR.insert();\n                    if (fontId) {\n                        fontIds.push(fontId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                socialGR.addQuery(\"name\", socialIcon.name);\n                socialGR.addQuery(\"type\", \"socialMedia\");\n                socialGR.addQuery(\"social_media_type\", socialIcon.type);\n                socialGR.addQuery(\"brand_kit\", brandKitId);\n                socialGR.query();\n                if (!socialGR.next()) {\n                    socialGR.initialize();\n                    socialGR.newRecord();\n                }\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialId = socialGR.update();\n                if (socialId) {\n                    socialMediaIds.push(socialId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\"));\n        brandKitGR.setValue(\"fonts\", fontIds.join(\",\"));\n        brandKitGR.setValue(\"colors\", colorIds.join(\",\"));\n\n        if (requestBody.deleteItems) {\n            if (Array.isArray(requestBody.deleteItems.colors)) {\n                requestBody.deleteItems.colors.forEach(function(color) {\n                    const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    colorGR.addQuery(\"name\", color);\n                    colorGR.addQuery(\"color\", color);\n                    colorGR.addQuery(\"type\", \"color\");\n                    colorGR.addQuery(\"brand_kit\", brandKitId);\n                    colorGR.query();\n                    while (colorGR.next()) {\n                        colorGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.fonts)) {\n                requestBody.deleteItems.fonts.forEach(function(font) {\n                    const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    fontGR.addQuery(\"name\", font);\n                    fontGR.addQuery(\"type\", \"font\");\n                    fontGR.addQuery(\"brand_kit\", brandKitId);\n                    fontGR.query();\n                    while (fontGR.next()) {\n                        fontGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.socialIcons)) {\n                requestBody.deleteItems.socialIcons.forEach(function(socialIcon) {\n                    const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    socialGR.addQuery(\"name\", socialIcon);\n                    socialGR.addQuery(\"type\", \"socialMedia\");\n                    socialGR.addQuery(\"brand_kit\", brandKitId);\n                    socialGR.query();\n\n                    while (socialGR.next()) {\n                        const socialSysId = socialGR.getUniqueValue();\n                        socialGR.deleteRecord();\n                    }\n                });\n            }\n        }\n\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit updated successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n            recordsNotUpdated,\n        });\n    },\n\n    getBrandKitObj: function({\n        brandKitGR,\n        colors,\n        fonts\n    }) {\n        const button = this.getButton({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"button\")\n        });\n        const text = this.getText({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"text\")\n        });\n        const header = this.getTitle({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"title\")\n        });\n        return {\n            sysId: brandKitGR.getUniqueValue(),\n            brandName: brandKitGR.getValue(\"name\") || '',\n            colors,\n            fonts,\n            contentWidths: {\n                email: brandKitGR.getValue(\"email_width\") || '',\n                page: brandKitGR.getValue(\"page_width\") || '',\n            },\n            header,\n            text,\n            button,\n            socialIcons: this.getSocialMediaDetails(brandKitGR.getValue(\"social_links\")) || {},\n            general: {\n                linkColor: text.linkColor,\n                defaultFont: text.font,\n                contentAreaBackgroundColor: '',\n                backgroundColor: ''\n            },\n            form: {\n                styles: text,\n                buttonsOptions: button\n            },\n            menu: {\n                styles: text\n            },\n            paragraph: {\n                styles: text\n            },\n            list: {\n                styles: text\n            },\n            table: {\n                styles: text\n            }\n        };\n    },\n\n    getReferenceName: function(tableName, sysId) {\n        const tableGR = new GlideRecordSecure(tableName);\n        if (tableGR.get(sysId)) {\n            return tableGR.getValue(\"name\");\n        } else {\n            return null;\n        }\n    },\n\n    setSocialMediaResource: function({\n        socialGR,\n        socialIcon,\n        brandKitId\n    }) {\n        socialGR.setValue(\"name\", socialIcon.name || socialIcon.text || \"\");\n        socialGR.setValue(\"social_media_type\", socialIcon.type || \"\");\n        socialGR.setValue(\"image_prefix\", socialIcon.image.prefix || \"\");\n        socialGR.setValue(\"image_alt\", socialIcon.image.alt || \"\");\n        socialGR.setValue(\"url\", socialIcon.image.src || \"\");\n        socialGR.setValue(\"image_title\", socialIcon.image.title || \"\");\n        socialGR.setValue(\"image_href\", socialIcon.image.href || \"\");\n        socialGR.setValue(\"text\", socialIcon.text || \"\");\n        socialGR.setValue(\"brand_kit\", brandKitId);\n        socialGR.setValue(\"active\", true);\n        if (socialIcon.type === 'custom' || socialIcon.type === 'Custom') {\n            socialGR.setValue(\"custom\", true);\n        }\n        socialGR.setValue(\"type\", \"socialMedia\");\n    },\n\n    /** ************** DELETE STYLE KIT ****************/\n    deleteBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const brandKitResourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        brandKitResourceGr.addQuery(\"brand_kit\", brandKitId);\n        brandKitResourceGr.query();\n\n        while (brandKitResourceGr.next()) {\n            brandKitResourceGr.deleteRecord();\n        }\n\n        brandKitGR.deleteRecord();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit deleted successfully.\",\n        });\n    },\n\n    getRelatedRecordIds: function(brandKitId, type) {\n        const ids = [];\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        while (tableGR.next()) {\n            if (type === \"color\") {\n                ids.push(tableGR.getValue(\"color\") || '');\n            } else {\n                ids.push(tableGR.getUniqueValue());\n            }\n        }\n        return ids;\n    },\n\n    getFontDetails: function(fontId) {\n        const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (fontGR.get(fontId)) {\n            return {\n                active: fontGR.getValue(\"active\") === \"1\" || '',\n                custom: fontGR.getValue(\"custom\") === \"1\" || '',\n                name: fontGR.getValue(\"name\") || '',\n                fontFamily: fontGR.getValue(\"font_family\") || '',\n                url: fontGR.getValue(\"url\") || '',\n            };\n        }\n\n        return {\n            active: false,\n            custom: false,\n            name: '',\n            fontFamily: '',\n            url: ''\n        };\n    },\n\n    getRefColors: function(colorId) {\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (colorGR.get(colorId)) {\n            return colorGR.getValue(\"color\") || '';\n        } else {\n            return null;\n        }\n    },\n\n    getSocialMediaDetails: function(socialIds) {\n        const socialMediaDetails = [];\n\n        if (!socialIds || (Array.isArray(socialIds) && socialIds.length === 0)) {\n            return socialMediaDetails;\n        }\n\n        const ids = Array.isArray(socialIds) ? socialIds : socialIds.split(\",\");\n\n        ids.forEach(function(id) {\n            const socMediaGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            if (socMediaGR.get(id)) {\n                socialMediaDetails.push({\n                    type: socMediaGR.getValue(\"social_media_type\") || '',\n                    name: socMediaGR.getValue(\"name\") || '',\n                    image: {\n                        prefix: socMediaGR.getValue(\"image_prefix\") || '',\n                        alt: socMediaGR.getValue(\"image_alt\") || '',\n                        src: socMediaGR.getValue(\"url\") || '',\n                        title: socMediaGR.getValue(\"image_title\") || '',\n                        href: socMediaGR.getValue(\"image_href\") || '',\n                    },\n                    text: socMediaGR.getValue(\"text\") || '',\n                });\n            }\n        });\n\n        return socialMediaDetails;\n    },\n\n    getColorValue: function(brandKitId, color) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"color\", color);\n        tableGR.addQuery(\"name\", color);\n        tableGR.addQuery(\"type\", \"color\");\n        tableGR.orderBy('sys_created_on');\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getValue(\"color\") || '';\n        } else {\n            return \"\";\n        }\n    },\n\n    getRefId: function(brandKitId, name, type) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"name\", name);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getUniqueValue();\n        } else {\n            return \"\";\n        }\n    },\n\n    setButton: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n\t\t\n\t\tresourceGr.setValue(\n            \"padding\",\n            this.convertObject({ value: requestBody.button.padding || { top: \"13px\", right: \"14px\", bottom: \"13px\", left: \"14px\"} })\n        );\n\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.button.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.button.textColor\n        );\n        resourceGr.setValue(\n            \"font_size\",\n            requestBody.button.fontSize\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.button.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.button.lineHeightName\n        );\n        resourceGr.setValue(\n            \"background_color\",\n            requestBody.button.backgroundColor\n        );\n        resourceGr.setValue(\n            \"text\",\n            requestBody.button.label\n        );\n        resourceGr.setValue('name', 'Button');\n        resourceGr.setValue('type', 'button');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getButton: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const button = {\n            label: '',\n            font: '',\n            textColor: '',\n            backgroundColor: '',\n            sysId: sysId,\n            fontSize: '',\n            lineHeight: '',\n            lineHeightName: '',\n\t\t\tpadding: {}\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'button');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return button;\n            }\n        }\n\t\tconst padding = this.convertString({ value: resourceGr.getValue('padding') });\n        button.padding = padding;\n        button.label = resourceGr.getValue('text') || '';\n        button.font = this.getFontDetails(resourceGr.getValue('font'));\n        button.textColor = resourceGr.getValue('color') || '';\n        button.fontSize = resourceGr.getValue('font_size') || '';\n        button.lineHeight = resourceGr.getValue('line_height') || '';\n        button.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        button.backgroundColor = resourceGr.getValue('background_color') || '';\n        button.sysId = sysId || resourceGr.getUniqueValue();\n        return button;\n    },\n\n    setText: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"text\", requestBody.text.html || \"Text\");\n        resourceGr.setValue(\"font_size\", requestBody.text.fontSize || \"\");\n        resourceGr.setValue(\"line_height\", requestBody.text.lineHeight || \"\");\n        resourceGr.setValue(\"line_height_name\", requestBody.text.lineHeightName || \"\");\n        resourceGr.setValue(\"font\", this.getRefId(brandKitId, requestBody.text.font.name, \"font\"));\n        resourceGr.setValue(\"color\", requestBody.text.textColor);\n        resourceGr.setValue(\"link_color\", requestBody.text.linkColor);\n        resourceGr.setValue('name', 'Text');\n        resourceGr.setValue('type', 'text');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getText: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const text = {\n            html: '',\n            font: '',\n            fontSize: '',\n            textColor: '',\n            linkColor: '',\n            backgroundColor: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'text');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return text;\n            }\n        }\n\n        text.html = resourceGr.getValue('text') || '';\n        text.font = this.getFontDetails(resourceGr.getValue('font'));\n        text.fontSize = resourceGr.getValue('font_size') || '';\n        text.textColor = resourceGr.getValue('color') || '';\n        text.linkColor = resourceGr.getValue('link_color') || '';\n        text.backgroundColor = resourceGr.getValue('background_color') || '';\n        text.lineHeight = resourceGr.getValue('line_height') || '';\n        text.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        text.sysId = sysId || resourceGr.getUniqueValue();\n        return text;\n    },\n\n    setTitle: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"font_scale\", requestBody.header.fontScale || \"\");\n        const fontScalesOptions = [\"38px,30px,24px\", \"64px,44px,32px\", \"110px,68px,42px\"];\n        const fontScale = requestBody.header.fontScale || \"\";\n        if (fontScalesOptions.indexOf(fontScale) > -1) {\n            resourceGr.setValue(\"font_scale\", fontScale);\n        }\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.header.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.header.textColor\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.header.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.header.lineHeightName\n        );\n        resourceGr.setValue('name', 'Title');\n        resourceGr.setValue('text', 'Title');\n        resourceGr.setValue('type', 'title');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getTitle: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const title = {\n            html: '',\n            font: '',\n            textColor: '',\n            fontScale: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId: sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'title');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return title;\n            }\n        }\n\n        title.html = resourceGr.getValue('text') || '';\n        title.font = this.getFontDetails(resourceGr.getValue('font'));\n        title.textColor = resourceGr.getValue('color') || '';\n        title.fontScale = resourceGr.getValue('font_scale') || '';\n        title.lineHeight = resourceGr.getValue('line_height') || '';\n        title.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        title.sysId = sysId || resourceGr.getUniqueValue();\n        return title;\n    },\n\n\tconvertString: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn {};\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.parse(value);\n\t\t} catch (e) {\n\t\t\tvalue = {};\n\t\t}\n\t\treturn value;\n\t},\n\n\tconvertObject: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn '';\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.stringify(value);\n\t\t} catch (e) {\n\t\t\tvalue = '';\n\t\t}\n\t\treturn value;\n\t},\n\n    type: \"BrandKitApiMS\",\n};",
    "display_value": "/* eslint-disable no-undef */\n/* eslint-disable max-lines */\nconst BrandKitApiMS = Class.create();\nBrandKitApiMS.prototype = {\n    initialize: function() {\n        this.buttonSize = \"22px\";\n    },\n\n    /** ************** CREATE STYLE KIT ****************/\n    createBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n\n        const socialMediaIds = [];\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        brandKitGR.initialize();\n        brandKitGR.newRecord();\n        brandKitGR.setValue(\n            \"name\",\n            requestBody.brandName || requestBody.brand_name || requestBody.name || \"New Brand Kit\"\n        );\n        const brandKitId = brandKitGR.insert();\n        if (!brandKitId) {\n            response.setStatus(500);\n            response.setBody({\n                success: false,\n                message: \"Failed to create Brand Kit.\",\n            });\n            return response;\n        }\n\n        const colors = [];\n\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                colorGR.initialize();\n                colorGR.newRecord();\n                colorGR.setValue(\"active\", true);\n                colorGR.setValue(\"color\", color);\n                colorGR.setValue(\"name\", color);\n                colorGR.setValue(\"type\", \"color\");\n                colorGR.setValue(\"brand_kit\", brandKitId);\n                colors.push(colorGR.insert());\n            });\n        }\n\n        const fonts = [];\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.fonts.forEach(function(font) {\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n                fontGR.initialize();\n                fontGR.newRecord();\n                fontGR.setValue(\"name\", font.name || \"\");\n                fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                fontGR.setValue(\"url\", font.url && font.url.trim() !== \"\" ? font.url : \"\");\n                fontGR.setValue(\"active\", active || false);\n                fontGR.setValue(\"custom\", custom || false);\n                fontGR.setValue(\"brand_kit\", brandKitId);\n                fontGR.setValue(\"type\", \"font\");\n                fonts.push(fontGR.insert());\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                socialGR.initialize();\n                socialGR.newRecord();\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialMediaId = socialGR.insert();\n                if (socialMediaId) {\n                    socialMediaIds.push(socialMediaId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\") || \"\");\n        brandKitGR.setValue(\"fonts\", fonts.join(\",\") || \"\");\n        brandKitGR.setValue(\"colors\", colors.join(\",\") || \"\");\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(201);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit Created Successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n        });\n    },\n\n    setBrandKitGr: function(brandKitGR, brandKitId, requestBody) {\n        brandKitGR.setValue(\"email_width\", requestBody.contentWidths.email || \"\");\n        brandKitGR.setValue(\"page_width\", requestBody.contentWidths.page || \"\");\n\n        const titleSysId = this.setTitle({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('title') || ''\n        });\n\n        brandKitGR.setValue(\"title\", titleSysId);\n\n        const buttonSysId = this.setButton({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('button') || ''\n        });\n\n        brandKitGR.setValue(\"button\", buttonSysId);\n\n        const textSysId = this.setText({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('text') || ''\n        });\n\n        brandKitGR.setValue(\"text\", textSysId);\n    },\n\n    /** ************** GET STYLE KIT ****************/\n\n\t_getBrandKit: function({ sysId }) {\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(sysId)) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst colorVals = this.getRelatedRecordIds(sysId, \"color\");\n        const fontIds = this.getRelatedRecordIds(sysId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(sysId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this.getBrandKitObj({\n            brandKitGR,\n            colors,\n            fonts\n        });\n\t\t\n\t\treturn brandKitData;\n\t},\n\n    getBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return ;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n        const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(brandKitId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this._getBrandKit({ sysId: brandKitId });\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: brandKitData,\n        });\n    },\n\n    /** ************** GET STYLE KITS ****************/\n    getBrandKits: function(request, response) {\n        const responseBody = [];\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        // if (query) {\n        // \tbrandKitGR.addEncodedQuery(query);\n        // }\n        brandKitGR.orderBy(\"name\");\n        brandKitGR.query();\n        while (brandKitGR.next()) {\n            const brandKitId = brandKitGR.getUniqueValue();\n            const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n            const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n\n            const colors = colorVals;\n\n            const fonts = fontIds.map(function(fontId) {\n                return this.getFontDetails(fontId);\n            }, this);\n\n            const brandKitData = this.getBrandKitObj({\n                brandKitGR,\n                colors,\n                fonts\n            });\n\n            responseBody.push(brandKitData);\n        }\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: responseBody,\n        });\n    },\n\n    /** ************** UPDATE STYLE KIT ****************/\n    updateBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"No Brand Kit ID provided.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorIds = [];\n        const fontIds = [];\n        const socialMediaIds = [];\n        const recordsNotUpdated = [];\n\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                colorGR.addQuery(\"color\", color);\n                colorGR.addQuery(\"name\", color);\n                colorGR.addQuery(\"type\", \"color\");\n                colorGR.addQuery(\"brand_kit\", brandKitId);\n                colorGR.query();\n                if (colorGR.next()) {\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.update();\n                    colorIds.push(colorGR.getUniqueValue());\n                } else {\n                    colorGR.initialize();\n                    colorGR.newRecord();\n                    colorGR.setValue(\"active\", true);\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.setValue(\"brand_kit\", brandKitId);\n                    const colorId = colorGR.insert();\n                    if (colorId) {\n                        colorIds.push(colorId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            requestBody.fonts.forEach(function(font) {\n                const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                fontGR.addQuery(\"name\", font.name);\n                fontGR.addQuery(\"type\", \"font\");\n                fontGR.addQuery(\"brand_kit\", brandKitId);\n                fontGR.query();\n\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n\n                if (fontGR.next()) {\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"type\", \"font\");\n                    fontGR.update();\n                    fontIds.push(fontGR.getUniqueValue());\n                } else {\n                    fontGR.initialize();\n                    fontGR.newRecord();\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"brand_kit\", brandKitId);\n                    fontGR.setValue(\"type\", \"font\");\n                    const fontId = fontGR.insert();\n                    if (fontId) {\n                        fontIds.push(fontId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                socialGR.addQuery(\"name\", socialIcon.name);\n                socialGR.addQuery(\"type\", \"socialMedia\");\n                socialGR.addQuery(\"social_media_type\", socialIcon.type);\n                socialGR.addQuery(\"brand_kit\", brandKitId);\n                socialGR.query();\n                if (!socialGR.next()) {\n                    socialGR.initialize();\n                    socialGR.newRecord();\n                }\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialId = socialGR.update();\n                if (socialId) {\n                    socialMediaIds.push(socialId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\"));\n        brandKitGR.setValue(\"fonts\", fontIds.join(\",\"));\n        brandKitGR.setValue(\"colors\", colorIds.join(\",\"));\n\n        if (requestBody.deleteItems) {\n            if (Array.isArray(requestBody.deleteItems.colors)) {\n                requestBody.deleteItems.colors.forEach(function(color) {\n                    const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    colorGR.addQuery(\"name\", color);\n                    colorGR.addQuery(\"color\", color);\n                    colorGR.addQuery(\"type\", \"color\");\n                    colorGR.addQuery(\"brand_kit\", brandKitId);\n                    colorGR.query();\n                    while (colorGR.next()) {\n                        colorGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.fonts)) {\n                requestBody.deleteItems.fonts.forEach(function(font) {\n                    const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    fontGR.addQuery(\"name\", font);\n                    fontGR.addQuery(\"type\", \"font\");\n                    fontGR.addQuery(\"brand_kit\", brandKitId);\n                    fontGR.query();\n                    while (fontGR.next()) {\n                        fontGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.socialIcons)) {\n                requestBody.deleteItems.socialIcons.forEach(function(socialIcon) {\n                    const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    socialGR.addQuery(\"name\", socialIcon);\n                    socialGR.addQuery(\"type\", \"socialMedia\");\n                    socialGR.addQuery(\"brand_kit\", brandKitId);\n                    socialGR.query();\n\n                    while (socialGR.next()) {\n                        const socialSysId = socialGR.getUniqueValue();\n                        socialGR.deleteRecord();\n                    }\n                });\n            }\n        }\n\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit updated successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n            recordsNotUpdated,\n        });\n    },\n\n    getBrandKitObj: function({\n        brandKitGR,\n        colors,\n        fonts\n    }) {\n        const button = this.getButton({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"button\")\n        });\n        const text = this.getText({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"text\")\n        });\n        const header = this.getTitle({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"title\")\n        });\n        return {\n            sysId: brandKitGR.getUniqueValue(),\n            brandName: brandKitGR.getValue(\"name\") || '',\n            colors,\n            fonts,\n            contentWidths: {\n                email: brandKitGR.getValue(\"email_width\") || '',\n                page: brandKitGR.getValue(\"page_width\") || '',\n            },\n            header,\n            text,\n            button,\n            socialIcons: this.getSocialMediaDetails(brandKitGR.getValue(\"social_links\")) || {},\n            general: {\n                linkColor: text.linkColor,\n                defaultFont: text.font,\n                contentAreaBackgroundColor: '',\n                backgroundColor: ''\n            },\n            form: {\n                styles: text,\n                buttonsOptions: button\n            },\n            menu: {\n                styles: text\n            },\n            paragraph: {\n                styles: text\n            },\n            list: {\n                styles: text\n            },\n            table: {\n                styles: text\n            }\n        };\n    },\n\n    getReferenceName: function(tableName, sysId) {\n        const tableGR = new GlideRecordSecure(tableName);\n        if (tableGR.get(sysId)) {\n            return tableGR.getValue(\"name\");\n        } else {\n            return null;\n        }\n    },\n\n    setSocialMediaResource: function({\n        socialGR,\n        socialIcon,\n        brandKitId\n    }) {\n        socialGR.setValue(\"name\", socialIcon.name || socialIcon.text || \"\");\n        socialGR.setValue(\"social_media_type\", socialIcon.type || \"\");\n        socialGR.setValue(\"image_prefix\", socialIcon.image.prefix || \"\");\n        socialGR.setValue(\"image_alt\", socialIcon.image.alt || \"\");\n        socialGR.setValue(\"url\", socialIcon.image.src || \"\");\n        socialGR.setValue(\"image_title\", socialIcon.image.title || \"\");\n        socialGR.setValue(\"image_href\", socialIcon.image.href || \"\");\n        socialGR.setValue(\"text\", socialIcon.text || \"\");\n        socialGR.setValue(\"brand_kit\", brandKitId);\n        socialGR.setValue(\"active\", true);\n        if (socialIcon.type === 'custom' || socialIcon.type === 'Custom') {\n            socialGR.setValue(\"custom\", true);\n        }\n        socialGR.setValue(\"type\", \"socialMedia\");\n    },\n\n    /** ************** DELETE STYLE KIT ****************/\n    deleteBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const brandKitResourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        brandKitResourceGr.addQuery(\"brand_kit\", brandKitId);\n        brandKitResourceGr.query();\n\n        while (brandKitResourceGr.next()) {\n            brandKitResourceGr.deleteRecord();\n        }\n\n        brandKitGR.deleteRecord();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit deleted successfully.\",\n        });\n    },\n\n    getRelatedRecordIds: function(brandKitId, type) {\n        const ids = [];\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        while (tableGR.next()) {\n            if (type === \"color\") {\n                ids.push(tableGR.getValue(\"color\") || '');\n            } else {\n                ids.push(tableGR.getUniqueValue());\n            }\n        }\n        return ids;\n    },\n\n    getFontDetails: function(fontId) {\n        const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (fontGR.get(fontId)) {\n            return {\n                active: fontGR.getValue(\"active\") === \"1\" || '',\n                custom: fontGR.getValue(\"custom\") === \"1\" || '',\n                name: fontGR.getValue(\"name\") || '',\n                fontFamily: fontGR.getValue(\"font_family\") || '',\n                url: fontGR.getValue(\"url\") || '',\n            };\n        }\n\n        return {\n            active: false,\n            custom: false,\n            name: '',\n            fontFamily: '',\n            url: ''\n        };\n    },\n\n    getRefColors: function(colorId) {\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (colorGR.get(colorId)) {\n            return colorGR.getValue(\"color\") || '';\n        } else {\n            return null;\n        }\n    },\n\n    getSocialMediaDetails: function(socialIds) {\n        const socialMediaDetails = [];\n\n        if (!socialIds || (Array.isArray(socialIds) && socialIds.length === 0)) {\n            return socialMediaDetails;\n        }\n\n        const ids = Array.isArray(socialIds) ? socialIds : socialIds.split(\",\");\n\n        ids.forEach(function(id) {\n            const socMediaGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            if (socMediaGR.get(id)) {\n                socialMediaDetails.push({\n                    type: socMediaGR.getValue(\"social_media_type\") || '',\n                    name: socMediaGR.getValue(\"name\") || '',\n                    image: {\n                        prefix: socMediaGR.getValue(\"image_prefix\") || '',\n                        alt: socMediaGR.getValue(\"image_alt\") || '',\n                        src: socMediaGR.getValue(\"url\") || '',\n                        title: socMediaGR.getValue(\"image_title\") || '',\n                        href: socMediaGR.getValue(\"image_href\") || '',\n                    },\n                    text: socMediaGR.getValue(\"text\") || '',\n                });\n            }\n        });\n\n        return socialMediaDetails;\n    },\n\n    getColorValue: function(brandKitId, color) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"color\", color);\n        tableGR.addQuery(\"name\", color);\n        tableGR.addQuery(\"type\", \"color\");\n        tableGR.orderBy('sys_created_on');\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getValue(\"color\") || '';\n        } else {\n            return \"\";\n        }\n    },\n\n    getRefId: function(brandKitId, name, type) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"name\", name);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getUniqueValue();\n        } else {\n            return \"\";\n        }\n    },\n\n    setButton: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n\t\t\n\t\tresourceGr.setValue(\n            \"padding\",\n            this.convertObject({ value: requestBody.button.padding || { top: \"13px\", right: \"14px\", bottom: \"13px\", left: \"14px\"} })\n        );\n\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.button.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.button.textColor\n        );\n        resourceGr.setValue(\n            \"font_size\",\n            requestBody.button.fontSize\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.button.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.button.lineHeightName\n        );\n        resourceGr.setValue(\n            \"background_color\",\n            requestBody.button.backgroundColor\n        );\n        resourceGr.setValue(\n            \"text\",\n            requestBody.button.label\n        );\n        resourceGr.setValue('name', 'Button');\n        resourceGr.setValue('type', 'button');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getButton: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const button = {\n            label: '',\n            font: '',\n            textColor: '',\n            backgroundColor: '',\n            sysId: sysId,\n            fontSize: '',\n            lineHeight: '',\n            lineHeightName: '',\n\t\t\tpadding: {}\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'button');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return button;\n            }\n        }\n\t\tconst padding = this.convertString({ value: resourceGr.getValue('padding') });\n        button.padding = padding;\n        button.label = resourceGr.getValue('text') || '';\n        button.font = this.getFontDetails(resourceGr.getValue('font'));\n        button.textColor = resourceGr.getValue('color') || '';\n        button.fontSize = resourceGr.getValue('font_size') || '';\n        button.lineHeight = resourceGr.getValue('line_height') || '';\n        button.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        button.backgroundColor = resourceGr.getValue('background_color') || '';\n        button.sysId = sysId || resourceGr.getUniqueValue();\n        return button;\n    },\n\n    setText: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"text\", requestBody.text.html || \"Text\");\n        resourceGr.setValue(\"font_size\", requestBody.text.fontSize || \"\");\n        resourceGr.setValue(\"line_height\", requestBody.text.lineHeight || \"\");\n        resourceGr.setValue(\"line_height_name\", requestBody.text.lineHeightName || \"\");\n        resourceGr.setValue(\"font\", this.getRefId(brandKitId, requestBody.text.font.name, \"font\"));\n        resourceGr.setValue(\"color\", requestBody.text.textColor);\n        resourceGr.setValue(\"link_color\", requestBody.text.linkColor);\n        resourceGr.setValue('name', 'Text');\n        resourceGr.setValue('type', 'text');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getText: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const text = {\n            html: '',\n            font: '',\n            fontSize: '',\n            textColor: '',\n            linkColor: '',\n            backgroundColor: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'text');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return text;\n            }\n        }\n\n        text.html = resourceGr.getValue('text') || '';\n        text.font = this.getFontDetails(resourceGr.getValue('font'));\n        text.fontSize = resourceGr.getValue('font_size') || '';\n        text.textColor = resourceGr.getValue('color') || '';\n        text.linkColor = resourceGr.getValue('link_color') || '';\n        text.backgroundColor = resourceGr.getValue('background_color') || '';\n        text.lineHeight = resourceGr.getValue('line_height') || '';\n        text.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        text.sysId = sysId || resourceGr.getUniqueValue();\n        return text;\n    },\n\n    setTitle: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"font_scale\", requestBody.header.fontScale || \"\");\n        const fontScalesOptions = [\"38px,30px,24px\", \"64px,44px,32px\", \"110px,68px,42px\"];\n        const fontScale = requestBody.header.fontScale || \"\";\n        if (fontScalesOptions.indexOf(fontScale) > -1) {\n            resourceGr.setValue(\"font_scale\", fontScale);\n        }\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.header.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.header.textColor\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.header.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.header.lineHeightName\n        );\n        resourceGr.setValue('name', 'Title');\n        resourceGr.setValue('text', 'Title');\n        resourceGr.setValue('type', 'title');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getTitle: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const title = {\n            html: '',\n            font: '',\n            textColor: '',\n            fontScale: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId: sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'title');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return title;\n            }\n        }\n\n        title.html = resourceGr.getValue('text') || '';\n        title.font = this.getFontDetails(resourceGr.getValue('font'));\n        title.textColor = resourceGr.getValue('color') || '';\n        title.fontScale = resourceGr.getValue('font_scale') || '';\n        title.lineHeight = resourceGr.getValue('line_height') || '';\n        title.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        title.sysId = sysId || resourceGr.getUniqueValue();\n        return title;\n    },\n\n\tconvertString: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn {};\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.parse(value);\n\t\t} catch (e) {\n\t\t\tvalue = {};\n\t\t}\n\t\treturn value;\n\t},\n\n\tconvertObject: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn '';\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.stringify(value);\n\t\t} catch (e) {\n\t\t\tvalue = '';\n\t\t}\n\t\treturn value;\n\t},\n\n    type: \"BrandKitApiMS\",\n};",
    "formatted_script": {
      "line_count": 910,
      "char_count": 31877,
      "preview": "/* eslint-disable no-undef */\n/* eslint-disable max-lines */\nconst BrandKitApiMS = Class.create();\nBrandKitApiMS.prototype = {\n    initialize: function() {\n        this.buttonSize = \"22px\";\n    },\n\n  ...",
      "full_script": "/* eslint-disable no-undef */\n/* eslint-disable max-lines */\nconst BrandKitApiMS = Class.create();\nBrandKitApiMS.prototype = {\n    initialize: function() {\n        this.buttonSize = \"22px\";\n    },\n\n    /** ************** CREATE STYLE KIT ****************/\n    createBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n\n        const socialMediaIds = [];\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        brandKitGR.initialize();\n        brandKitGR.newRecord();\n        brandKitGR.setValue(\n            \"name\",\n            requestBody.brandName || requestBody.brand_name || requestBody.name || \"New Brand Kit\"\n        );\n        const brandKitId = brandKitGR.insert();\n        if (!brandKitId) {\n            response.setStatus(500);\n            response.setBody({\n                success: false,\n                message: \"Failed to create Brand Kit.\",\n            });\n            return response;\n        }\n\n        const colors = [];\n\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                colorGR.initialize();\n                colorGR.newRecord();\n                colorGR.setValue(\"active\", true);\n                colorGR.setValue(\"color\", color);\n                colorGR.setValue(\"name\", color);\n                colorGR.setValue(\"type\", \"color\");\n                colorGR.setValue(\"brand_kit\", brandKitId);\n                colors.push(colorGR.insert());\n            });\n        }\n\n        const fonts = [];\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.fonts.forEach(function(font) {\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n                fontGR.initialize();\n                fontGR.newRecord();\n                fontGR.setValue(\"name\", font.name || \"\");\n                fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                fontGR.setValue(\"url\", font.url && font.url.trim() !== \"\" ? font.url : \"\");\n                fontGR.setValue(\"active\", active || false);\n                fontGR.setValue(\"custom\", custom || false);\n                fontGR.setValue(\"brand_kit\", brandKitId);\n                fontGR.setValue(\"type\", \"font\");\n                fonts.push(fontGR.insert());\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                socialGR.initialize();\n                socialGR.newRecord();\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialMediaId = socialGR.insert();\n                if (socialMediaId) {\n                    socialMediaIds.push(socialMediaId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\") || \"\");\n        brandKitGR.setValue(\"fonts\", fonts.join(\",\") || \"\");\n        brandKitGR.setValue(\"colors\", colors.join(\",\") || \"\");\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(201);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit Created Successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n        });\n    },\n\n    setBrandKitGr: function(brandKitGR, brandKitId, requestBody) {\n        brandKitGR.setValue(\"email_width\", requestBody.contentWidths.email || \"\");\n        brandKitGR.setValue(\"page_width\", requestBody.contentWidths.page || \"\");\n\n        const titleSysId = this.setTitle({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('title') || ''\n        });\n\n        brandKitGR.setValue(\"title\", titleSysId);\n\n        const buttonSysId = this.setButton({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('button') || ''\n        });\n\n        brandKitGR.setValue(\"button\", buttonSysId);\n\n        const textSysId = this.setText({\n            brandKitId,\n            requestBody,\n            sysId: brandKitGR.getValue('text') || ''\n        });\n\n        brandKitGR.setValue(\"text\", textSysId);\n    },\n\n    /** ************** GET STYLE KIT ****************/\n\n\t_getBrandKit: function({ sysId }) {\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(sysId)) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst colorVals = this.getRelatedRecordIds(sysId, \"color\");\n        const fontIds = this.getRelatedRecordIds(sysId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(sysId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this.getBrandKitObj({\n            brandKitGR,\n            colors,\n            fonts\n        });\n\t\t\n\t\treturn brandKitData;\n\t},\n\n    getBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return ;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n        const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n        const socialMediaIds = this.getRelatedRecordIds(brandKitId, \"socialMedia\");\n\n        const colors = colorVals;\n\n        const fonts = fontIds.map(function(fontId) {\n            return this.getFontDetails(fontId) || {};\n        }, this);\n\n        const brandKitData = this._getBrandKit({ sysId: brandKitId });\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: brandKitData,\n        });\n    },\n\n    /** ************** GET STYLE KITS ****************/\n    getBrandKits: function(request, response) {\n        const responseBody = [];\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        // if (query) {\n        // \tbrandKitGR.addEncodedQuery(query);\n        // }\n        brandKitGR.orderBy(\"name\");\n        brandKitGR.query();\n        while (brandKitGR.next()) {\n            const brandKitId = brandKitGR.getUniqueValue();\n            const colorVals = this.getRelatedRecordIds(brandKitId, \"color\");\n            const fontIds = this.getRelatedRecordIds(brandKitId, \"font\");\n\n            const colors = colorVals;\n\n            const fonts = fontIds.map(function(fontId) {\n                return this.getFontDetails(fontId);\n            }, this);\n\n            const brandKitData = this.getBrandKitObj({\n                brandKitGR,\n                colors,\n                fonts\n            });\n\n            responseBody.push(brandKitData);\n        }\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            data: responseBody,\n        });\n    },\n\n    /** ************** UPDATE STYLE KIT ****************/\n    updateBrandKit: function(request, response) {\n        const requestBody = request.body.data;\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"No Brand Kit ID provided.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const colorIds = [];\n        const fontIds = [];\n        const socialMediaIds = [];\n        const recordsNotUpdated = [];\n\n        if (requestBody.colors && Array.isArray(requestBody.colors)) {\n            requestBody.colors.forEach(function(color) {\n                const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                colorGR.addQuery(\"color\", color);\n                colorGR.addQuery(\"name\", color);\n                colorGR.addQuery(\"type\", \"color\");\n                colorGR.addQuery(\"brand_kit\", brandKitId);\n                colorGR.query();\n                if (colorGR.next()) {\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.update();\n                    colorIds.push(colorGR.getUniqueValue());\n                } else {\n                    colorGR.initialize();\n                    colorGR.newRecord();\n                    colorGR.setValue(\"active\", true);\n                    colorGR.setValue(\"color\", color);\n                    colorGR.setValue(\"name\", color);\n                    colorGR.setValue(\"type\", \"color\");\n                    colorGR.setValue(\"brand_kit\", brandKitId);\n                    const colorId = colorGR.insert();\n                    if (colorId) {\n                        colorIds.push(colorId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.fonts && Array.isArray(requestBody.fonts)) {\n            requestBody.fonts.forEach(function(font) {\n                const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                fontGR.addQuery(\"name\", font.name);\n                fontGR.addQuery(\"type\", \"font\");\n                fontGR.addQuery(\"brand_kit\", brandKitId);\n                fontGR.query();\n\n                const active = font.active === \"true\" || font.active === true || font.active === \"1\";\n                const custom = font.custom === \"true\" || font.custom === true || font.custom === \"1\";\n\n                if (fontGR.next()) {\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"type\", \"font\");\n                    fontGR.update();\n                    fontIds.push(fontGR.getUniqueValue());\n                } else {\n                    fontGR.initialize();\n                    fontGR.newRecord();\n                    fontGR.setValue(\"name\", font.name || \"\");\n                    fontGR.setValue(\"font_family\", font.fontFamily || \"\");\n                    fontGR.setValue(\"url\", font.url || \"\");\n                    fontGR.setValue(\"active\", active || false);\n                    fontGR.setValue(\"custom\", custom || false);\n                    fontGR.setValue(\"brand_kit\", brandKitId);\n                    fontGR.setValue(\"type\", \"font\");\n                    const fontId = fontGR.insert();\n                    if (fontId) {\n                        fontIds.push(fontId);\n                    }\n                }\n            });\n        }\n\n        if (requestBody.socialIcons && Array.isArray(requestBody.socialIcons)) {\n            requestBody.socialIcons.forEach(function(socialIcon) {\n                const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                socialGR.addQuery(\"name\", socialIcon.name);\n                socialGR.addQuery(\"type\", \"socialMedia\");\n                socialGR.addQuery(\"social_media_type\", socialIcon.type);\n                socialGR.addQuery(\"brand_kit\", brandKitId);\n                socialGR.query();\n                if (!socialGR.next()) {\n                    socialGR.initialize();\n                    socialGR.newRecord();\n                }\n                this.setSocialMediaResource({\n                    socialGR,\n                    socialIcon,\n                    brandKitId\n                });\n                const socialId = socialGR.update();\n                if (socialId) {\n                    socialMediaIds.push(socialId);\n                }\n            }, this);\n        }\n\n        brandKitGR.setValue(\"social_links\", socialMediaIds.join(\",\"));\n        brandKitGR.setValue(\"fonts\", fontIds.join(\",\"));\n        brandKitGR.setValue(\"colors\", colorIds.join(\",\"));\n\n        if (requestBody.deleteItems) {\n            if (Array.isArray(requestBody.deleteItems.colors)) {\n                requestBody.deleteItems.colors.forEach(function(color) {\n                    const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    colorGR.addQuery(\"name\", color);\n                    colorGR.addQuery(\"color\", color);\n                    colorGR.addQuery(\"type\", \"color\");\n                    colorGR.addQuery(\"brand_kit\", brandKitId);\n                    colorGR.query();\n                    while (colorGR.next()) {\n                        colorGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.fonts)) {\n                requestBody.deleteItems.fonts.forEach(function(font) {\n                    const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    fontGR.addQuery(\"name\", font);\n                    fontGR.addQuery(\"type\", \"font\");\n                    fontGR.addQuery(\"brand_kit\", brandKitId);\n                    fontGR.query();\n                    while (fontGR.next()) {\n                        fontGR.deleteRecord();\n                    }\n                });\n            }\n\n            if (Array.isArray(requestBody.deleteItems.socialIcons)) {\n                requestBody.deleteItems.socialIcons.forEach(function(socialIcon) {\n                    const socialGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n                    socialGR.addQuery(\"name\", socialIcon);\n                    socialGR.addQuery(\"type\", \"socialMedia\");\n                    socialGR.addQuery(\"brand_kit\", brandKitId);\n                    socialGR.query();\n\n                    while (socialGR.next()) {\n                        const socialSysId = socialGR.getUniqueValue();\n                        socialGR.deleteRecord();\n                    }\n                });\n            }\n        }\n\n        this.setBrandKitGr(brandKitGR, brandKitId, requestBody);\n        brandKitGR.update();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit updated successfully.\",\n            styleKitId: brandKitId,\n            brandKitId,\n            recordsNotUpdated,\n        });\n    },\n\n    getBrandKitObj: function({\n        brandKitGR,\n        colors,\n        fonts\n    }) {\n        const button = this.getButton({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"button\")\n        });\n        const text = this.getText({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"text\")\n        });\n        const header = this.getTitle({\n            brandKitId: brandKitGR.getUniqueValue(),\n            sysId: brandKitGR.getValue(\"title\")\n        });\n        return {\n            sysId: brandKitGR.getUniqueValue(),\n            brandName: brandKitGR.getValue(\"name\") || '',\n            colors,\n            fonts,\n            contentWidths: {\n                email: brandKitGR.getValue(\"email_width\") || '',\n                page: brandKitGR.getValue(\"page_width\") || '',\n            },\n            header,\n            text,\n            button,\n            socialIcons: this.getSocialMediaDetails(brandKitGR.getValue(\"social_links\")) || {},\n            general: {\n                linkColor: text.linkColor,\n                defaultFont: text.font,\n                contentAreaBackgroundColor: '',\n                backgroundColor: ''\n            },\n            form: {\n                styles: text,\n                buttonsOptions: button\n            },\n            menu: {\n                styles: text\n            },\n            paragraph: {\n                styles: text\n            },\n            list: {\n                styles: text\n            },\n            table: {\n                styles: text\n            }\n        };\n    },\n\n    getReferenceName: function(tableName, sysId) {\n        const tableGR = new GlideRecordSecure(tableName);\n        if (tableGR.get(sysId)) {\n            return tableGR.getValue(\"name\");\n        } else {\n            return null;\n        }\n    },\n\n    setSocialMediaResource: function({\n        socialGR,\n        socialIcon,\n        brandKitId\n    }) {\n        socialGR.setValue(\"name\", socialIcon.name || socialIcon.text || \"\");\n        socialGR.setValue(\"social_media_type\", socialIcon.type || \"\");\n        socialGR.setValue(\"image_prefix\", socialIcon.image.prefix || \"\");\n        socialGR.setValue(\"image_alt\", socialIcon.image.alt || \"\");\n        socialGR.setValue(\"url\", socialIcon.image.src || \"\");\n        socialGR.setValue(\"image_title\", socialIcon.image.title || \"\");\n        socialGR.setValue(\"image_href\", socialIcon.image.href || \"\");\n        socialGR.setValue(\"text\", socialIcon.text || \"\");\n        socialGR.setValue(\"brand_kit\", brandKitId);\n        socialGR.setValue(\"active\", true);\n        if (socialIcon.type === 'custom' || socialIcon.type === 'Custom') {\n            socialGR.setValue(\"custom\", true);\n        }\n        socialGR.setValue(\"type\", \"socialMedia\");\n    },\n\n    /** ************** DELETE STYLE KIT ****************/\n    deleteBrandKit: function(request, response) {\n        const brandKitId = request.pathParams.sysId;\n\n        if (!brandKitId) {\n            response.setStatus(400);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit ID is required.\",\n            });\n            return;\n        }\n\n        const brandKitGR = new GlideRecordSecure(\"x_cadso_core_brand_kit\");\n        if (!brandKitGR.get(brandKitId)) {\n            response.setStatus(404);\n            response.setBody({\n                success: false,\n                message: \"Brand Kit not found.\",\n            });\n            return;\n        }\n\n        const brandKitResourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        brandKitResourceGr.addQuery(\"brand_kit\", brandKitId);\n        brandKitResourceGr.query();\n\n        while (brandKitResourceGr.next()) {\n            brandKitResourceGr.deleteRecord();\n        }\n\n        brandKitGR.deleteRecord();\n\n        response.setStatus(200);\n        response.setBody({\n            success: true,\n            message: \"Brand Kit deleted successfully.\",\n        });\n    },\n\n    getRelatedRecordIds: function(brandKitId, type) {\n        const ids = [];\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        while (tableGR.next()) {\n            if (type === \"color\") {\n                ids.push(tableGR.getValue(\"color\") || '');\n            } else {\n                ids.push(tableGR.getUniqueValue());\n            }\n        }\n        return ids;\n    },\n\n    getFontDetails: function(fontId) {\n        const fontGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (fontGR.get(fontId)) {\n            return {\n                active: fontGR.getValue(\"active\") === \"1\" || '',\n                custom: fontGR.getValue(\"custom\") === \"1\" || '',\n                name: fontGR.getValue(\"name\") || '',\n                fontFamily: fontGR.getValue(\"font_family\") || '',\n                url: fontGR.getValue(\"url\") || '',\n            };\n        }\n\n        return {\n            active: false,\n            custom: false,\n            name: '',\n            fontFamily: '',\n            url: ''\n        };\n    },\n\n    getRefColors: function(colorId) {\n        const colorGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n\n        if (colorGR.get(colorId)) {\n            return colorGR.getValue(\"color\") || '';\n        } else {\n            return null;\n        }\n    },\n\n    getSocialMediaDetails: function(socialIds) {\n        const socialMediaDetails = [];\n\n        if (!socialIds || (Array.isArray(socialIds) && socialIds.length === 0)) {\n            return socialMediaDetails;\n        }\n\n        const ids = Array.isArray(socialIds) ? socialIds : socialIds.split(\",\");\n\n        ids.forEach(function(id) {\n            const socMediaGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n            if (socMediaGR.get(id)) {\n                socialMediaDetails.push({\n                    type: socMediaGR.getValue(\"social_media_type\") || '',\n                    name: socMediaGR.getValue(\"name\") || '',\n                    image: {\n                        prefix: socMediaGR.getValue(\"image_prefix\") || '',\n                        alt: socMediaGR.getValue(\"image_alt\") || '',\n                        src: socMediaGR.getValue(\"url\") || '',\n                        title: socMediaGR.getValue(\"image_title\") || '',\n                        href: socMediaGR.getValue(\"image_href\") || '',\n                    },\n                    text: socMediaGR.getValue(\"text\") || '',\n                });\n            }\n        });\n\n        return socialMediaDetails;\n    },\n\n    getColorValue: function(brandKitId, color) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"color\", color);\n        tableGR.addQuery(\"name\", color);\n        tableGR.addQuery(\"type\", \"color\");\n        tableGR.orderBy('sys_created_on');\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getValue(\"color\") || '';\n        } else {\n            return \"\";\n        }\n    },\n\n    getRefId: function(brandKitId, name, type) {\n        const tableGR = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        tableGR.addQuery(\"brand_kit\", brandKitId);\n        tableGR.addQuery(\"name\", name);\n        tableGR.addQuery(\"type\", type);\n        if (type === 'color') {\n            tableGR.orderBy('sys_created_on');\n        }\n        tableGR.query();\n        if (tableGR.next()) {\n            return tableGR.getUniqueValue();\n        } else {\n            return \"\";\n        }\n    },\n\n    setButton: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n\t\t\n\t\tresourceGr.setValue(\n            \"padding\",\n            this.convertObject({ value: requestBody.button.padding || { top: \"13px\", right: \"14px\", bottom: \"13px\", left: \"14px\"} })\n        );\n\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.button.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.button.textColor\n        );\n        resourceGr.setValue(\n            \"font_size\",\n            requestBody.button.fontSize\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.button.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.button.lineHeightName\n        );\n        resourceGr.setValue(\n            \"background_color\",\n            requestBody.button.backgroundColor\n        );\n        resourceGr.setValue(\n            \"text\",\n            requestBody.button.label\n        );\n        resourceGr.setValue('name', 'Button');\n        resourceGr.setValue('type', 'button');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getButton: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const button = {\n            label: '',\n            font: '',\n            textColor: '',\n            backgroundColor: '',\n            sysId: sysId,\n            fontSize: '',\n            lineHeight: '',\n            lineHeightName: '',\n\t\t\tpadding: {}\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'button');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return button;\n            }\n        }\n\t\tconst padding = this.convertString({ value: resourceGr.getValue('padding') });\n        button.padding = padding;\n        button.label = resourceGr.getValue('text') || '';\n        button.font = this.getFontDetails(resourceGr.getValue('font'));\n        button.textColor = resourceGr.getValue('color') || '';\n        button.fontSize = resourceGr.getValue('font_size') || '';\n        button.lineHeight = resourceGr.getValue('line_height') || '';\n        button.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        button.backgroundColor = resourceGr.getValue('background_color') || '';\n        button.sysId = sysId || resourceGr.getUniqueValue();\n        return button;\n    },\n\n    setText: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"text\", requestBody.text.html || \"Text\");\n        resourceGr.setValue(\"font_size\", requestBody.text.fontSize || \"\");\n        resourceGr.setValue(\"line_height\", requestBody.text.lineHeight || \"\");\n        resourceGr.setValue(\"line_height_name\", requestBody.text.lineHeightName || \"\");\n        resourceGr.setValue(\"font\", this.getRefId(brandKitId, requestBody.text.font.name, \"font\"));\n        resourceGr.setValue(\"color\", requestBody.text.textColor);\n        resourceGr.setValue(\"link_color\", requestBody.text.linkColor);\n        resourceGr.setValue('name', 'Text');\n        resourceGr.setValue('type', 'text');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getText: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const text = {\n            html: '',\n            font: '',\n            fontSize: '',\n            textColor: '',\n            linkColor: '',\n            backgroundColor: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'text');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return text;\n            }\n        }\n\n        text.html = resourceGr.getValue('text') || '';\n        text.font = this.getFontDetails(resourceGr.getValue('font'));\n        text.fontSize = resourceGr.getValue('font_size') || '';\n        text.textColor = resourceGr.getValue('color') || '';\n        text.linkColor = resourceGr.getValue('link_color') || '';\n        text.backgroundColor = resourceGr.getValue('background_color') || '';\n        text.lineHeight = resourceGr.getValue('line_height') || '';\n        text.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        text.sysId = sysId || resourceGr.getUniqueValue();\n        return text;\n    },\n\n    setTitle: function({\n        brandKitId,\n        requestBody,\n        sysId\n    }) {\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.newRecord();\n        }\n        resourceGr.setValue(\"font_scale\", requestBody.header.fontScale || \"\");\n        const fontScalesOptions = [\"38px,30px,24px\", \"64px,44px,32px\", \"110px,68px,42px\"];\n        const fontScale = requestBody.header.fontScale || \"\";\n        if (fontScalesOptions.indexOf(fontScale) > -1) {\n            resourceGr.setValue(\"font_scale\", fontScale);\n        }\n        resourceGr.setValue(\n            \"font\",\n            this.getRefId(brandKitId, requestBody.header.font.name, \"font\")\n        );\n        resourceGr.setValue(\n            \"color\",\n            requestBody.header.textColor\n        );\n        resourceGr.setValue(\n            \"line_height\",\n            requestBody.header.lineHeight\n        );\n        resourceGr.setValue(\n            \"line_height_name\",\n            requestBody.header.lineHeightName\n        );\n        resourceGr.setValue('name', 'Title');\n        resourceGr.setValue('text', 'Title');\n        resourceGr.setValue('type', 'title');\n        resourceGr.setValue('active', true);\n        resourceGr.setValue('brand_kit', brandKitId);\n        return resourceGr.update();\n    },\n\n    getTitle: function({\n        brandKitId,\n        sysId = ''\n    }) {\n        const title = {\n            html: '',\n            font: '',\n            textColor: '',\n            fontScale: '',\n            lineHeight: '',\n            lineHeightName: '',\n            sysId: sysId\n        };\n\n        const resourceGr = new GlideRecordSecure(\"x_cadso_core_brand_kit_resource\");\n        if (!sysId || !resourceGr.get(sysId)) {\n            resourceGr.initialize();\n            resourceGr.addQuery('brand_kit', brandKitId);\n            resourceGr.addQuery('type', 'title');\n            resourceGr.setLimit(1);\n            resourceGr.orderByDesc('sys_updated_on');\n            resourceGr.query();\n            if (!resourceGr.next()) {\n                return title;\n            }\n        }\n\n        title.html = resourceGr.getValue('text') || '';\n        title.font = this.getFontDetails(resourceGr.getValue('font'));\n        title.textColor = resourceGr.getValue('color') || '';\n        title.fontScale = resourceGr.getValue('font_scale') || '';\n        title.lineHeight = resourceGr.getValue('line_height') || '';\n        title.lineHeightName = resourceGr.getValue('line_height_name') || '';\n        title.sysId = sysId || resourceGr.getUniqueValue();\n        return title;\n    },\n\n\tconvertString: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn {};\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.parse(value);\n\t\t} catch (e) {\n\t\t\tvalue = {};\n\t\t}\n\t\treturn value;\n\t},\n\n\tconvertObject: function({ value }) {\n\t\tif (!value) {\n\t\t\treturn '';\n\t\t}\n\t\ttry {\n\t\t\tvalue = JSON.stringify(value);\n\t\t} catch (e) {\n\t\t\tvalue = '';\n\t\t}\n\t\treturn value;\n\t},\n\n    type: \"BrandKitApiMS\",\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_script_include_17ddcff2333c62507b18bc534d5c7b0b",
    "display_value": "sys_script_include_17ddcff2333c62507b18bc534d5c7b0b"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_core.BrandKitApiMS",
    "display_value": "x_cadso_core.BrandKitApiMS"
  },
  "sys_created_on": {
    "value": "2025-04-13 07:39:48",
    "display_value": "2025-04-13 12:39:48 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "BrandKitApiMS",
    "display_value": "BrandKitApiMS"
  },
  "sys_name": {
    "value": "BrandKitApiMS",
    "display_value": "BrandKitApiMS"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
