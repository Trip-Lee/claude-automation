{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "057edca7c3832a90d4ddf1db0501318e",
    "extracted_at": "2025-09-19T21:48:28.676Z",
    "display_value": "RelatedListFilterMS",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "122",
    "display_value": "122"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-09-04 22:10:28",
    "display_value": "2025-09-04 03:10:28 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "true",
    "display_value": "true"
  },
  "script": {
    "value": "const RelatedListFilterMS = Class.create();\nRelatedListFilterMS.prototype = {\n\tinitialize: function (props = {}) {\n\t\tconst { maxLevels = 10 } = props;\n\t\tthis.maxLevels = maxLevels;\n\t\tthis.infiniteLoopCap = 20;\n\t\tthis.alreadyCreatedFilters = {};\n\t\tthis.alreadyCreatedTables = {};\n\t\tthis.excludeTables = {\n\t\t\tstartsWith: [\n\t\t\t\t\"cmdb\",\n\t\t\t\t\"wm_\",\n\t\t\t\t\"var_\",\n\t\t\t\t\"v_\",\n\t\t\t\t\"vz_\",\n\t\t\t\t\"sc_\",\n\t\t\t\t\"item_\",\n\t\t\t\t\"kb_\",\n\t\t\t\t\"sn_install\",\n\t\t\t\t\"task_\",\n\t\t\t\t\"vtb_\",\n\t\t\t\t\"sn_pss\",\n\t\t\t\t\"promin_\",\n\t\t\t\t\"dscy_\",\n\t\t\t\t\"sla_\",\n\t\t\t\t\"oauth_oidc\",\n\t\t\t\t\"sys_cs_\",\n\t\t\t\t\"sys_aw_\",\n\t\t\t\t\"sys_ui\",\n\t\t\t\t\"sys_cb_\",\n\t\t\t\t\"sn_ins_\",\n\t\t\t\t\"sn_access_\",\n\t\t\t\t\"snpar_\",\n\t\t\t\t\"sys_app_\",\n\t\t\t\t\"pa_\",\n\t\t\t\t\"sys_report\",\n\t\t\t\t\"nlu_\",\n\t\t\t\t\"sysrule_\",\n\t\t\t\t\"sp_\",\n\t\t\t\t\"dms_\",\n\t\t\t\t\"sys_import_\",\n\t\t\t\t\"sys_concurrent_\",\n\t\t\t\t\"sys_data_\",\n\t\t\t\t\"sys_template\",\n\t\t\t\t\"import_\",\n\t\t\t\t\"imp_\",\n\t\t\t\t\"ecc_event\",\n\t\t\t\t\"dl_\",\n\t\t\t\t\"chg_soc_definition\",\n\t\t\t\t\"change_request_imac\",\n\t\t\t\t\"catalog_\",\n\t\t\t\t\"group_\",\n\t\t\t\t\"ts_\",\n\t\t\t\t\"unallocated_\",\n\t\t\t],\n\t\t\tequals: [\"sla\"],\n\t\t};\n\t},\n\n\tgetAll: function (params) {\n\t\tconst relatedFilterGr = new GlideRecord(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"source_table\", params.table);\n\t\trelatedFilterGr.addActiveQuery();\n\t\trelatedFilterGr.orderBy(\"label\");\n\t\trelatedFilterGr.orderBy(\"table\");\n\t\trelatedFilterGr.orderBy(\"field\");\n\t\trelatedFilterGr.query();\n\t\tconst relatedFilters = [];\n\t\twhile (relatedFilterGr.next()) {\n\t\t\trelatedFilters.push(this._get({ relatedFilterGr }));\n\t\t}\n\t\treturn relatedFilters;\n\t},\n\n\teval: function _eval(table, field, condition) {\n\t\t/*\n    Use: javascript: new x_cadso_core.RelatedListFilter().eval(table, field, condition)\n    */\n\t\tvar tableGa = new GlideAggregate(table);\n\t\ttableGa.addNotNullQuery(field);\n\t\tif (condition) {\n\t\t\ttableGa.addEncodedQuery(condition);\n\t\t}\n\t\ttableGa.addAggregate(\"COUNT\", field);\n\t\ttableGa.query();\n\t\tvar query = [];\n\t\twhile (tableGa.next()) {\n\t\t\tquery.push(tableGa.getValue(field));\n\t\t}\n\t\treturn query.length ? query.join(\",\") : \"\";\n\t},\n\n\t_get: function ({ sysId, relatedFilterGr: _relatedFilterGr }) {\n\t\tconst relatedFilterGr = _relatedFilterGr || new GlideRecord(\"x_cadso_core_related_filter\");\n\t\tconst filter = {};\n\t\tif ((sysId && relatedFilterGr.get(sysId)) || _relatedFilterGr) {\n\t\t\tfilter.displayValue = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.label = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.name = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.active = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"active\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"active\"),\n\t\t\t};\n\t\t\tfilter.table = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"table\"),\n\t\t\t};\n\t\t\tfilter.field = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"field\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"field\"),\n\t\t\t};\n\t\t\tfilter.source = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source\"),\n\t\t\t};\n\t\t\tfilter.sourceTable = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source_table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source_table\"),\n\t\t\t};\n\t\t\tfilter.value = relatedFilterGr.getUniqueValue();\n\t\t\tfilter.sysId = relatedFilterGr.getUniqueValue();\n\t\t}\n\t\treturn filter;\n\t},\n\n\tgenerate: function (tables, currentLevel = 0) {\n\t\ttables = tables || \"sn_lead_mgmt_core_lead,customer_contact,sys_user,csm_consumer\";\n\t\ttables = typeof tables === \"string\" ? tables.split(\",\") : tables;\n\t\tconst nextLevelTables = {};\n\t\tfor (var x = 0; x < tables.length; x++) {\n\t\t\tvar sourceTable = tables[x];\n\n\t\t\tif (this.alreadyCreatedTables[sourceTable]) continue;\n\t\t\tthis.alreadyCreatedTables[sourceTable] = true;\n\n\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\treturn sourceTable.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\treturn sourceTable.toLowerCase() === _table.toLowerCase();\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar sysDictGr = new GlideRecordSecure(\"sys_dictionary\");\n\t\t\tsysDictGr.addQuery(\"reference\", sourceTable);\n\t\t\tsysDictGr.addQuery(\"name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addQuery(\"reference.name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addActiveQuery();\n\t\t\tsysDictGr.addQuery(\"internal_type\", \"reference\");\n\t\t\tsysDictGr.query();\n\n\t\t\twhile (sysDictGr.next()) {\n\t\t\t\tvar table = sysDictGr.getValue(\"name\");\n\n\t\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\t\treturn table.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\t\treturn table.toLowerCase() === _table.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst continueGenerating = this._generateRecord({ sysDictGr, sourceTable });\n\t\t\t\tconst hasNotBeenProcessedYet = !this.alreadyCreatedTables[table] && !nextLevelTables[table];\n\t\t\t\tconst notTheUserTable = table !== \"sys_user\";\n\n\t\t\t\tif (continueGenerating && hasNotBeenProcessedYet && notTheUserTable) {\n\t\t\t\t\tnextLevelTables[table] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentLevel < this.maxLevels && currentLevel < this.infiniteLoopCap) {\n\t\t\tthis.generate(Object.keys(nextLevelTables), currentLevel + 1);\n\t\t}\n\t},\n\n\t_generateRecord: function (props = {}) {\n\t\tconst { sysDictGr, sourceTable } = props;\n\t\tvar table = sysDictGr.getValue(\"name\");\n\t\tvar field = sysDictGr.getValue(\"element\");\n\t\tvar fieldLabel = sysDictGr.getDisplayValue(\"element\");\n\t\tvar active = sysDictGr.getValue(\"active\");\n\t\tvar sourceField = \"sys_id\";\n\t\tvar tableGr = new GlideRecord(table);\n\t\tvar label = tableGr.getClassDisplayValue();\n\t\tif (!label) return false;\n\t\tlabel += ` (${fieldLabel})`;\n\n\t\tif (this.alreadyCreatedFilters[`${table}.${field}`]) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar relatedFilterGr = new GlideRecordSecure(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"field\", field);\n\t\trelatedFilterGr.addQuery(\"table\", table);\n\t\trelatedFilterGr.query();\n\n\t\tif (relatedFilterGr.next()) {\n\t\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = true;\n\t\t\treturn true;\n\t\t}\n\n\t\trelatedFilterGr.initialize();\n\t\trelatedFilterGr.setValue(\"source_field\", sourceField);\n\t\trelatedFilterGr.setValue(\"field\", field);\n\t\trelatedFilterGr.setValue(\"table\", table);\n\t\trelatedFilterGr.setValue(\"source_table\", sourceTable);\n\t\trelatedFilterGr.setValue(\"active\", active);\n\t\trelatedFilterGr.setValue(\"label\", label);\n\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = !!relatedFilterGr.insert();\n\t\treturn true;\n\t},\n\n\t_transformRelatedFilterToField: function ({\n\t\ttable,\n\t\tdisplayValue,\n\t\tlabel,\n\t\tfield,\n\t\tsource,\n\t\tsourceTable,\n\t\tsysId,\n\t\tquery = \"\",\n\t}) {\n\t\t// Transform a Related Filter record into a field format for Complex Filter\n\t\treturn {\n\t\t\ttype: \"related_list_filter\",\n\t\t\tname: displayValue || label,\n\t\t\tlabel: displayValue || label,\n\t\t\tdisplayValue: displayValue || label,\n\t\t\tvalue: \"sys_id\", // sys_id of the related filter record\n\t\t\tisRelatedFilter: true,\n\t\t\trelatedFilter: {\n\t\t\t\tsysId: sysId,\n\t\t\t\ttable: table.value,\n\t\t\t\tfield: field.value,\n\t\t\t\tsource: source.value,\n\t\t\t\tsourceTable: sourceTable.value,\n\t\t\t\t// Template for condition evaluation - will be evaluated at runtime\n\t\t\t\tvalue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"${query}\")`,\n\t\t\t\t// Initial default value without condition\n\t\t\t\tdefaultValue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"\")`,\n\t\t\t},\n\t\t\tisChoice: false,\n\t\t\tchoices: [], // Related filters don't have static choices\n\t\t\treferences: [], // Related filters use dynamic references\n\t\t\tmaxLength: null,\n\t\t\tcanWrite: true, // Computed field, always writable in filter context\n\t\t\tcanClear: true, // Can be cleared from filter\n\t\t\tcanSearch: false, // Related filters use pre-defined queries\n\t\t};\n\t},\n\n\ttype: \"RelatedListFilterMS\",\n};\n",
    "display_value": "const RelatedListFilterMS = Class.create();\nRelatedListFilterMS.prototype = {\n\tinitialize: function (props = {}) {\n\t\tconst { maxLevels = 10 } = props;\n\t\tthis.maxLevels = maxLevels;\n\t\tthis.infiniteLoopCap = 20;\n\t\tthis.alreadyCreatedFilters = {};\n\t\tthis.alreadyCreatedTables = {};\n\t\tthis.excludeTables = {\n\t\t\tstartsWith: [\n\t\t\t\t\"cmdb\",\n\t\t\t\t\"wm_\",\n\t\t\t\t\"var_\",\n\t\t\t\t\"v_\",\n\t\t\t\t\"vz_\",\n\t\t\t\t\"sc_\",\n\t\t\t\t\"item_\",\n\t\t\t\t\"kb_\",\n\t\t\t\t\"sn_install\",\n\t\t\t\t\"task_\",\n\t\t\t\t\"vtb_\",\n\t\t\t\t\"sn_pss\",\n\t\t\t\t\"promin_\",\n\t\t\t\t\"dscy_\",\n\t\t\t\t\"sla_\",\n\t\t\t\t\"oauth_oidc\",\n\t\t\t\t\"sys_cs_\",\n\t\t\t\t\"sys_aw_\",\n\t\t\t\t\"sys_ui\",\n\t\t\t\t\"sys_cb_\",\n\t\t\t\t\"sn_ins_\",\n\t\t\t\t\"sn_access_\",\n\t\t\t\t\"snpar_\",\n\t\t\t\t\"sys_app_\",\n\t\t\t\t\"pa_\",\n\t\t\t\t\"sys_report\",\n\t\t\t\t\"nlu_\",\n\t\t\t\t\"sysrule_\",\n\t\t\t\t\"sp_\",\n\t\t\t\t\"dms_\",\n\t\t\t\t\"sys_import_\",\n\t\t\t\t\"sys_concurrent_\",\n\t\t\t\t\"sys_data_\",\n\t\t\t\t\"sys_template\",\n\t\t\t\t\"import_\",\n\t\t\t\t\"imp_\",\n\t\t\t\t\"ecc_event\",\n\t\t\t\t\"dl_\",\n\t\t\t\t\"chg_soc_definition\",\n\t\t\t\t\"change_request_imac\",\n\t\t\t\t\"catalog_\",\n\t\t\t\t\"group_\",\n\t\t\t\t\"ts_\",\n\t\t\t\t\"unallocated_\",\n\t\t\t],\n\t\t\tequals: [\"sla\"],\n\t\t};\n\t},\n\n\tgetAll: function (params) {\n\t\tconst relatedFilterGr = new GlideRecord(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"source_table\", params.table);\n\t\trelatedFilterGr.addActiveQuery();\n\t\trelatedFilterGr.orderBy(\"label\");\n\t\trelatedFilterGr.orderBy(\"table\");\n\t\trelatedFilterGr.orderBy(\"field\");\n\t\trelatedFilterGr.query();\n\t\tconst relatedFilters = [];\n\t\twhile (relatedFilterGr.next()) {\n\t\t\trelatedFilters.push(this._get({ relatedFilterGr }));\n\t\t}\n\t\treturn relatedFilters;\n\t},\n\n\teval: function _eval(table, field, condition) {\n\t\t/*\n    Use: javascript: new x_cadso_core.RelatedListFilter().eval(table, field, condition)\n    */\n\t\tvar tableGa = new GlideAggregate(table);\n\t\ttableGa.addNotNullQuery(field);\n\t\tif (condition) {\n\t\t\ttableGa.addEncodedQuery(condition);\n\t\t}\n\t\ttableGa.addAggregate(\"COUNT\", field);\n\t\ttableGa.query();\n\t\tvar query = [];\n\t\twhile (tableGa.next()) {\n\t\t\tquery.push(tableGa.getValue(field));\n\t\t}\n\t\treturn query.length ? query.join(\",\") : \"\";\n\t},\n\n\t_get: function ({ sysId, relatedFilterGr: _relatedFilterGr }) {\n\t\tconst relatedFilterGr = _relatedFilterGr || new GlideRecord(\"x_cadso_core_related_filter\");\n\t\tconst filter = {};\n\t\tif ((sysId && relatedFilterGr.get(sysId)) || _relatedFilterGr) {\n\t\t\tfilter.displayValue = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.label = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.name = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.active = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"active\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"active\"),\n\t\t\t};\n\t\t\tfilter.table = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"table\"),\n\t\t\t};\n\t\t\tfilter.field = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"field\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"field\"),\n\t\t\t};\n\t\t\tfilter.source = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source\"),\n\t\t\t};\n\t\t\tfilter.sourceTable = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source_table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source_table\"),\n\t\t\t};\n\t\t\tfilter.value = relatedFilterGr.getUniqueValue();\n\t\t\tfilter.sysId = relatedFilterGr.getUniqueValue();\n\t\t}\n\t\treturn filter;\n\t},\n\n\tgenerate: function (tables, currentLevel = 0) {\n\t\ttables = tables || \"sn_lead_mgmt_core_lead,customer_contact,sys_user,csm_consumer\";\n\t\ttables = typeof tables === \"string\" ? tables.split(\",\") : tables;\n\t\tconst nextLevelTables = {};\n\t\tfor (var x = 0; x < tables.length; x++) {\n\t\t\tvar sourceTable = tables[x];\n\n\t\t\tif (this.alreadyCreatedTables[sourceTable]) continue;\n\t\t\tthis.alreadyCreatedTables[sourceTable] = true;\n\n\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\treturn sourceTable.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\treturn sourceTable.toLowerCase() === _table.toLowerCase();\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar sysDictGr = new GlideRecordSecure(\"sys_dictionary\");\n\t\t\tsysDictGr.addQuery(\"reference\", sourceTable);\n\t\t\tsysDictGr.addQuery(\"name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addQuery(\"reference.name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addActiveQuery();\n\t\t\tsysDictGr.addQuery(\"internal_type\", \"reference\");\n\t\t\tsysDictGr.query();\n\n\t\t\twhile (sysDictGr.next()) {\n\t\t\t\tvar table = sysDictGr.getValue(\"name\");\n\n\t\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\t\treturn table.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\t\treturn table.toLowerCase() === _table.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst continueGenerating = this._generateRecord({ sysDictGr, sourceTable });\n\t\t\t\tconst hasNotBeenProcessedYet = !this.alreadyCreatedTables[table] && !nextLevelTables[table];\n\t\t\t\tconst notTheUserTable = table !== \"sys_user\";\n\n\t\t\t\tif (continueGenerating && hasNotBeenProcessedYet && notTheUserTable) {\n\t\t\t\t\tnextLevelTables[table] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentLevel < this.maxLevels && currentLevel < this.infiniteLoopCap) {\n\t\t\tthis.generate(Object.keys(nextLevelTables), currentLevel + 1);\n\t\t}\n\t},\n\n\t_generateRecord: function (props = {}) {\n\t\tconst { sysDictGr, sourceTable } = props;\n\t\tvar table = sysDictGr.getValue(\"name\");\n\t\tvar field = sysDictGr.getValue(\"element\");\n\t\tvar fieldLabel = sysDictGr.getDisplayValue(\"element\");\n\t\tvar active = sysDictGr.getValue(\"active\");\n\t\tvar sourceField = \"sys_id\";\n\t\tvar tableGr = new GlideRecord(table);\n\t\tvar label = tableGr.getClassDisplayValue();\n\t\tif (!label) return false;\n\t\tlabel += ` (${fieldLabel})`;\n\n\t\tif (this.alreadyCreatedFilters[`${table}.${field}`]) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar relatedFilterGr = new GlideRecordSecure(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"field\", field);\n\t\trelatedFilterGr.addQuery(\"table\", table);\n\t\trelatedFilterGr.query();\n\n\t\tif (relatedFilterGr.next()) {\n\t\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = true;\n\t\t\treturn true;\n\t\t}\n\n\t\trelatedFilterGr.initialize();\n\t\trelatedFilterGr.setValue(\"source_field\", sourceField);\n\t\trelatedFilterGr.setValue(\"field\", field);\n\t\trelatedFilterGr.setValue(\"table\", table);\n\t\trelatedFilterGr.setValue(\"source_table\", sourceTable);\n\t\trelatedFilterGr.setValue(\"active\", active);\n\t\trelatedFilterGr.setValue(\"label\", label);\n\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = !!relatedFilterGr.insert();\n\t\treturn true;\n\t},\n\n\t_transformRelatedFilterToField: function ({\n\t\ttable,\n\t\tdisplayValue,\n\t\tlabel,\n\t\tfield,\n\t\tsource,\n\t\tsourceTable,\n\t\tsysId,\n\t\tquery = \"\",\n\t}) {\n\t\t// Transform a Related Filter record into a field format for Complex Filter\n\t\treturn {\n\t\t\ttype: \"related_list_filter\",\n\t\t\tname: displayValue || label,\n\t\t\tlabel: displayValue || label,\n\t\t\tdisplayValue: displayValue || label,\n\t\t\tvalue: \"sys_id\", // sys_id of the related filter record\n\t\t\tisRelatedFilter: true,\n\t\t\trelatedFilter: {\n\t\t\t\tsysId: sysId,\n\t\t\t\ttable: table.value,\n\t\t\t\tfield: field.value,\n\t\t\t\tsource: source.value,\n\t\t\t\tsourceTable: sourceTable.value,\n\t\t\t\t// Template for condition evaluation - will be evaluated at runtime\n\t\t\t\tvalue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"${query}\")`,\n\t\t\t\t// Initial default value without condition\n\t\t\t\tdefaultValue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"\")`,\n\t\t\t},\n\t\t\tisChoice: false,\n\t\t\tchoices: [], // Related filters don't have static choices\n\t\t\treferences: [], // Related filters use dynamic references\n\t\t\tmaxLength: null,\n\t\t\tcanWrite: true, // Computed field, always writable in filter context\n\t\t\tcanClear: true, // Can be cleared from filter\n\t\t\tcanSearch: false, // Related filters use pre-defined queries\n\t\t};\n\t},\n\n\ttype: \"RelatedListFilterMS\",\n};\n",
    "formatted_script": {
      "line_count": 272,
      "char_count": 7915,
      "preview": "const RelatedListFilterMS = Class.create();\nRelatedListFilterMS.prototype = {\n\tinitialize: function (props = {}) {\n\t\tconst { maxLevels = 10 } = props;\n\t\tthis.maxLevels = maxLevels;\n\t\tthis.infiniteLoop...",
      "full_script": "const RelatedListFilterMS = Class.create();\nRelatedListFilterMS.prototype = {\n\tinitialize: function (props = {}) {\n\t\tconst { maxLevels = 10 } = props;\n\t\tthis.maxLevels = maxLevels;\n\t\tthis.infiniteLoopCap = 20;\n\t\tthis.alreadyCreatedFilters = {};\n\t\tthis.alreadyCreatedTables = {};\n\t\tthis.excludeTables = {\n\t\t\tstartsWith: [\n\t\t\t\t\"cmdb\",\n\t\t\t\t\"wm_\",\n\t\t\t\t\"var_\",\n\t\t\t\t\"v_\",\n\t\t\t\t\"vz_\",\n\t\t\t\t\"sc_\",\n\t\t\t\t\"item_\",\n\t\t\t\t\"kb_\",\n\t\t\t\t\"sn_install\",\n\t\t\t\t\"task_\",\n\t\t\t\t\"vtb_\",\n\t\t\t\t\"sn_pss\",\n\t\t\t\t\"promin_\",\n\t\t\t\t\"dscy_\",\n\t\t\t\t\"sla_\",\n\t\t\t\t\"oauth_oidc\",\n\t\t\t\t\"sys_cs_\",\n\t\t\t\t\"sys_aw_\",\n\t\t\t\t\"sys_ui\",\n\t\t\t\t\"sys_cb_\",\n\t\t\t\t\"sn_ins_\",\n\t\t\t\t\"sn_access_\",\n\t\t\t\t\"snpar_\",\n\t\t\t\t\"sys_app_\",\n\t\t\t\t\"pa_\",\n\t\t\t\t\"sys_report\",\n\t\t\t\t\"nlu_\",\n\t\t\t\t\"sysrule_\",\n\t\t\t\t\"sp_\",\n\t\t\t\t\"dms_\",\n\t\t\t\t\"sys_import_\",\n\t\t\t\t\"sys_concurrent_\",\n\t\t\t\t\"sys_data_\",\n\t\t\t\t\"sys_template\",\n\t\t\t\t\"import_\",\n\t\t\t\t\"imp_\",\n\t\t\t\t\"ecc_event\",\n\t\t\t\t\"dl_\",\n\t\t\t\t\"chg_soc_definition\",\n\t\t\t\t\"change_request_imac\",\n\t\t\t\t\"catalog_\",\n\t\t\t\t\"group_\",\n\t\t\t\t\"ts_\",\n\t\t\t\t\"unallocated_\",\n\t\t\t],\n\t\t\tequals: [\"sla\"],\n\t\t};\n\t},\n\n\tgetAll: function (params) {\n\t\tconst relatedFilterGr = new GlideRecord(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"source_table\", params.table);\n\t\trelatedFilterGr.addActiveQuery();\n\t\trelatedFilterGr.orderBy(\"label\");\n\t\trelatedFilterGr.orderBy(\"table\");\n\t\trelatedFilterGr.orderBy(\"field\");\n\t\trelatedFilterGr.query();\n\t\tconst relatedFilters = [];\n\t\twhile (relatedFilterGr.next()) {\n\t\t\trelatedFilters.push(this._get({ relatedFilterGr }));\n\t\t}\n\t\treturn relatedFilters;\n\t},\n\n\teval: function _eval(table, field, condition) {\n\t\t/*\n    Use: javascript: new x_cadso_core.RelatedListFilter().eval(table, field, condition)\n    */\n\t\tvar tableGa = new GlideAggregate(table);\n\t\ttableGa.addNotNullQuery(field);\n\t\tif (condition) {\n\t\t\ttableGa.addEncodedQuery(condition);\n\t\t}\n\t\ttableGa.addAggregate(\"COUNT\", field);\n\t\ttableGa.query();\n\t\tvar query = [];\n\t\twhile (tableGa.next()) {\n\t\t\tquery.push(tableGa.getValue(field));\n\t\t}\n\t\treturn query.length ? query.join(\",\") : \"\";\n\t},\n\n\t_get: function ({ sysId, relatedFilterGr: _relatedFilterGr }) {\n\t\tconst relatedFilterGr = _relatedFilterGr || new GlideRecord(\"x_cadso_core_related_filter\");\n\t\tconst filter = {};\n\t\tif ((sysId && relatedFilterGr.get(sysId)) || _relatedFilterGr) {\n\t\t\tfilter.displayValue = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.label = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.name = relatedFilterGr.getDisplayValue(\"label\");\n\t\t\tfilter.active = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"active\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"active\"),\n\t\t\t};\n\t\t\tfilter.table = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"table\"),\n\t\t\t};\n\t\t\tfilter.field = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"field\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"field\"),\n\t\t\t};\n\t\t\tfilter.source = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source\"),\n\t\t\t};\n\t\t\tfilter.sourceTable = {\n\t\t\t\tvalue: relatedFilterGr.getValue(\"source_table\"),\n\t\t\t\tdisplayValue: relatedFilterGr.getDisplayValue(\"source_table\"),\n\t\t\t};\n\t\t\tfilter.value = relatedFilterGr.getUniqueValue();\n\t\t\tfilter.sysId = relatedFilterGr.getUniqueValue();\n\t\t}\n\t\treturn filter;\n\t},\n\n\tgenerate: function (tables, currentLevel = 0) {\n\t\ttables = tables || \"sn_lead_mgmt_core_lead,customer_contact,sys_user,csm_consumer\";\n\t\ttables = typeof tables === \"string\" ? tables.split(\",\") : tables;\n\t\tconst nextLevelTables = {};\n\t\tfor (var x = 0; x < tables.length; x++) {\n\t\t\tvar sourceTable = tables[x];\n\n\t\t\tif (this.alreadyCreatedTables[sourceTable]) continue;\n\t\t\tthis.alreadyCreatedTables[sourceTable] = true;\n\n\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\treturn sourceTable.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\treturn sourceTable.toLowerCase() === _table.toLowerCase();\n\t\t\t});\n\n\t\t\tif (isExcluded) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar sysDictGr = new GlideRecordSecure(\"sys_dictionary\");\n\t\t\tsysDictGr.addQuery(\"reference\", sourceTable);\n\t\t\tsysDictGr.addQuery(\"name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addQuery(\"reference.name\", \"!=\", \"sys_user\");\n\t\t\tsysDictGr.addActiveQuery();\n\t\t\tsysDictGr.addQuery(\"internal_type\", \"reference\");\n\t\t\tsysDictGr.query();\n\n\t\t\twhile (sysDictGr.next()) {\n\t\t\t\tvar table = sysDictGr.getValue(\"name\");\n\n\t\t\t\tlet isExcluded = this.excludeTables.startsWith.find(function (prefix) {\n\t\t\t\t\treturn table.toLowerCase().startsWith(prefix.toLowerCase());\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tisExcluded = this.excludeTables.equals.find(function (_table) {\n\t\t\t\t\treturn table.toLowerCase() === _table.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (isExcluded) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst continueGenerating = this._generateRecord({ sysDictGr, sourceTable });\n\t\t\t\tconst hasNotBeenProcessedYet = !this.alreadyCreatedTables[table] && !nextLevelTables[table];\n\t\t\t\tconst notTheUserTable = table !== \"sys_user\";\n\n\t\t\t\tif (continueGenerating && hasNotBeenProcessedYet && notTheUserTable) {\n\t\t\t\t\tnextLevelTables[table] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentLevel < this.maxLevels && currentLevel < this.infiniteLoopCap) {\n\t\t\tthis.generate(Object.keys(nextLevelTables), currentLevel + 1);\n\t\t}\n\t},\n\n\t_generateRecord: function (props = {}) {\n\t\tconst { sysDictGr, sourceTable } = props;\n\t\tvar table = sysDictGr.getValue(\"name\");\n\t\tvar field = sysDictGr.getValue(\"element\");\n\t\tvar fieldLabel = sysDictGr.getDisplayValue(\"element\");\n\t\tvar active = sysDictGr.getValue(\"active\");\n\t\tvar sourceField = \"sys_id\";\n\t\tvar tableGr = new GlideRecord(table);\n\t\tvar label = tableGr.getClassDisplayValue();\n\t\tif (!label) return false;\n\t\tlabel += ` (${fieldLabel})`;\n\n\t\tif (this.alreadyCreatedFilters[`${table}.${field}`]) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar relatedFilterGr = new GlideRecordSecure(\"x_cadso_core_related_filter\");\n\t\trelatedFilterGr.addQuery(\"field\", field);\n\t\trelatedFilterGr.addQuery(\"table\", table);\n\t\trelatedFilterGr.query();\n\n\t\tif (relatedFilterGr.next()) {\n\t\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = true;\n\t\t\treturn true;\n\t\t}\n\n\t\trelatedFilterGr.initialize();\n\t\trelatedFilterGr.setValue(\"source_field\", sourceField);\n\t\trelatedFilterGr.setValue(\"field\", field);\n\t\trelatedFilterGr.setValue(\"table\", table);\n\t\trelatedFilterGr.setValue(\"source_table\", sourceTable);\n\t\trelatedFilterGr.setValue(\"active\", active);\n\t\trelatedFilterGr.setValue(\"label\", label);\n\t\tthis.alreadyCreatedFilters[`${table}.${field}`] = !!relatedFilterGr.insert();\n\t\treturn true;\n\t},\n\n\t_transformRelatedFilterToField: function ({\n\t\ttable,\n\t\tdisplayValue,\n\t\tlabel,\n\t\tfield,\n\t\tsource,\n\t\tsourceTable,\n\t\tsysId,\n\t\tquery = \"\",\n\t}) {\n\t\t// Transform a Related Filter record into a field format for Complex Filter\n\t\treturn {\n\t\t\ttype: \"related_list_filter\",\n\t\t\tname: displayValue || label,\n\t\t\tlabel: displayValue || label,\n\t\t\tdisplayValue: displayValue || label,\n\t\t\tvalue: \"sys_id\", // sys_id of the related filter record\n\t\t\tisRelatedFilter: true,\n\t\t\trelatedFilter: {\n\t\t\t\tsysId: sysId,\n\t\t\t\ttable: table.value,\n\t\t\t\tfield: field.value,\n\t\t\t\tsource: source.value,\n\t\t\t\tsourceTable: sourceTable.value,\n\t\t\t\t// Template for condition evaluation - will be evaluated at runtime\n\t\t\t\tvalue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"${query}\")`,\n\t\t\t\t// Initial default value without condition\n\t\t\t\tdefaultValue: `javascript: new x_cadso_core.RelatedListFilter().eval(\"${table.value}\", \"${field.value}\", \"\")`,\n\t\t\t},\n\t\t\tisChoice: false,\n\t\t\tchoices: [], // Related filters don't have static choices\n\t\t\treferences: [], // Related filters use dynamic references\n\t\t\tmaxLength: null,\n\t\t\tcanWrite: true, // Computed field, always writable in filter context\n\t\t\tcanClear: true, // Can be cleared from filter\n\t\t\tcanSearch: false, // Related filters use pre-defined queries\n\t\t};\n\t},\n\n\ttype: \"RelatedListFilterMS\",\n};\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_script_include_057edca7c3832a90d4ddf1db0501318e",
    "display_value": "sys_script_include_057edca7c3832a90d4ddf1db0501318e"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_core.RelatedListFilterMS",
    "display_value": "x_cadso_core.RelatedListFilterMS"
  },
  "sys_created_on": {
    "value": "2025-08-04 23:10:09",
    "display_value": "2025-08-04 04:10:09 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "RelatedListFilterMS",
    "display_value": "RelatedListFilterMS"
  },
  "sys_name": {
    "value": "RelatedListFilterMS",
    "display_value": "RelatedListFilterMS"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
