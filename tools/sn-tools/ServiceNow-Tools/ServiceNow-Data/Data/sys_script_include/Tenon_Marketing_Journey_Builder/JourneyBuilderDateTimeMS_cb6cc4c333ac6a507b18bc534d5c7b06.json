{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "cb6cc4c333ac6a507b18bc534d5c7b06",
    "extracted_at": "2025-09-19T21:48:29.035Z",
    "display_value": "JourneyBuilderDateTimeMS",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "20",
    "display_value": "20"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "Get the correct datetime object back",
    "display_value": "Get the correct datetime object back"
  },
  "sys_updated_on": {
    "value": "2025-04-03 03:36:19",
    "display_value": "2025-04-02 08:36:19 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var JourneyBuilderDateTimeMS = Class.create();\r\nJourneyBuilderDateTimeMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getNextDayOfMonthDateTime: function({\r\n        time = '',\r\n        dayOfMonth = 1,\r\n        useDisplayValue = false\r\n    }) {\r\n        let currentDateTime = new GlideDateTime();\r\n        let currentDay = currentDateTime.getDayOfMonthLocalTime();\r\n        const {\r\n            glideDateTime: preGlideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        currentDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n        const {\r\n            glideDateTime\r\n        } = this.findNextDay({\r\n            now: currentDateTime,\r\n            glideDateTime: preGlideDateTime,\r\n            addMonths: 1,\r\n            dayOfMonth\r\n        });\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextTimeDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime,\r\n            glideTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 1\r\n        });\r\n\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            now,\r\n            glideDateTime,\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getNextDayDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        let now = new GlideDateTime();\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(1);\r\n        }\r\n\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextDayOfWeekDateTime: function({\r\n        time = '',\r\n        dayOfTheWeek = 0,\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current day of the week\r\n        // Tenon starts with Sunday as 0 and ends with Saturday as 6\r\n        const targetDayOfWeek = dayOfTheWeek;\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Get the current day of the week\r\n        // ServiceNow starts with Monday as 1 and ends with Sunday as 7\r\n        // We will convert it to 0-6, where 0 is Sunday and 6 is Saturday\r\n        let gdtDayOfWeek = glideDateTime.getDayOfWeekLocalTime();\r\n        if (gdtDayOfWeek === 7) {\r\n            gdtDayOfWeek = 0;\r\n        }\r\n\r\n        // Get the right amount of days to add to the current date\r\n        const daysToAdd = this.getCorrectedDayOfWeekAddCount({\r\n            gdtDayOfWeek,\r\n            targetDayOfWeek\r\n        });\r\n        glideDateTime.addDaysLocalTime(daysToAdd);\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 7\r\n        });\r\n\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            glideDateTime\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration\r\n        };\r\n    },\r\n\r\n    getTimeToday: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideTime\r\n        } = this.getTime({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        // Get the internal date from the GlideDateTime and internal time from the GlideTime\r\n        const internalTime = glideTime.getDisplayValueInternal();\r\n        const gdt = new GlideDateTime();\r\n        let internalDate = gdt.getDisplayValueInternal();\r\n        internalDate = internalDate.split(\" \")[0];\r\n\r\n        // Set the GlideDateTime to the correct internal date and time\r\n        gdt.setDisplayValueInternal(internalDate + \" \" + internalTime);\r\n        return {\r\n            glideDateTime: gdt,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getDateTimeDuration: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n    }) {\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        let gdt = new GlideDateTime();\r\n        gdt.setGlideDateTime(glideDateTime);\r\n        let gdtDuration = GlideDateTime.subtract(now, gdt);\r\n        var duration = gdtDuration.getNumericValue();\r\n        var glideDuration = new GlideDuration(duration);\r\n\r\n        return {\r\n            duration,\r\n            glideDuration\r\n        };\r\n    },\r\n\r\n    getTime: function({\r\n        time = '',\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current time and create a GlideTime object\r\n        var gt = new GlideTime();\r\n        if (time && useDisplayValue) {\r\n            gt.setDisplayValue(time);\r\n        } else if (time) {\r\n            gt.setValue(time);\r\n        }\r\n        return {\r\n            glideTime: gt\r\n        };\r\n    },\r\n\r\n    findNextDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false,\r\n        addMonths = false,\r\n        dayOfMonth = false,\r\n        functionName = '',\r\n        amount = 1\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (typeof addDays === \"number\") {\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else if (typeof addMonths === \"number\") {\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else if (functionName) {\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        }\r\n    },\r\n\r\n    findNextDayFn: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        amount = 1,\r\n        functionName = 'addDaysLocalTime'\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime[functionName](amount);\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextWeekDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(addDays);\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextMonthDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addMonths = false,\r\n        dayOfMonth = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addMonthsLocalTime(addMonths);\r\n            if (typeof dayOfMonth === \"number\") {\r\n                glideDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n            }\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    getCorrectedDayOfWeekAddCount: function({\r\n        dayOfWeek,\r\n        targetDayOfWeek\r\n    }) {\r\n        // Find the number of days to add to the current date to reach the target day of the week\r\n        let daysToAdd = 0;\r\n        if (targetDayOfWeek > dayOfWeek) {\r\n            daysToAdd = 7 - (dayOfWeek - targetDayOfWeek);\r\n        } else if (targetDayOfWeek < dayOfWeek) {\r\n            daysToAdd = targetDayOfWeek - dayOfWeek;\r\n        }\r\n        return daysToAdd;\r\n    },\r\n\r\n    updateDateTime: function({\r\n        versionStepGr\r\n    }) {\r\n        let dateTime = versionStepGr.getValue('datetime');\r\n        let frequency = versionStepGr.getValue('frequency');\r\n\r\n        const gdt = new GlideDateTime();\r\n        gdt.setValue(dateTime);\r\n\r\n        if (frequency === 'annually') {\r\n            this.findNextDay({\r\n                functionName: 'addYearsLocalTime',\r\n                amount: 1,\r\n                glideDateTime: gdt\r\n            });\r\n        } else if (frequency === 'monthly') {\r\n            let dayOfMonth = versionStepGr.getValue('day_of_month') || '';\r\n            try {\r\n                dayOfMonth = dayOfMonth !== '' ? Number(dayOfMonth) : 0;\r\n            } catch (e) {\r\n                dayOfMonth = 0;\r\n                gs.error('Tenon Journey Builder: Version Step is missing a day of the month. SysId: ' + versionStepGr.getUniqueValue());\r\n            }\r\n            gs.info(dayOfMonth)\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addMonths: 1,\r\n                dayOfMonth\r\n            });\r\n        } else if (frequency === 'weekly') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addDays: 7\r\n            });\r\n        } else if (frequency === 'daily') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                functionName: 'addDaysLocalTime',\r\n                amount: 1,\r\n            });\r\n        }\r\n\r\n        versionStepGr.setValue('datetime', gdt);\r\n        versionStepGr.update();\r\n    },\r\n\r\n    type: \"JourneyBuilderDateTimeMS\",\r\n};",
    "display_value": "var JourneyBuilderDateTimeMS = Class.create();\r\nJourneyBuilderDateTimeMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getNextDayOfMonthDateTime: function({\r\n        time = '',\r\n        dayOfMonth = 1,\r\n        useDisplayValue = false\r\n    }) {\r\n        let currentDateTime = new GlideDateTime();\r\n        let currentDay = currentDateTime.getDayOfMonthLocalTime();\r\n        const {\r\n            glideDateTime: preGlideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        currentDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n        const {\r\n            glideDateTime\r\n        } = this.findNextDay({\r\n            now: currentDateTime,\r\n            glideDateTime: preGlideDateTime,\r\n            addMonths: 1,\r\n            dayOfMonth\r\n        });\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextTimeDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime,\r\n            glideTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 1\r\n        });\r\n\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            now,\r\n            glideDateTime,\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getNextDayDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        let now = new GlideDateTime();\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(1);\r\n        }\r\n\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextDayOfWeekDateTime: function({\r\n        time = '',\r\n        dayOfTheWeek = 0,\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current day of the week\r\n        // Tenon starts with Sunday as 0 and ends with Saturday as 6\r\n        const targetDayOfWeek = dayOfTheWeek;\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Get the current day of the week\r\n        // ServiceNow starts with Monday as 1 and ends with Sunday as 7\r\n        // We will convert it to 0-6, where 0 is Sunday and 6 is Saturday\r\n        let gdtDayOfWeek = glideDateTime.getDayOfWeekLocalTime();\r\n        if (gdtDayOfWeek === 7) {\r\n            gdtDayOfWeek = 0;\r\n        }\r\n\r\n        // Get the right amount of days to add to the current date\r\n        const daysToAdd = this.getCorrectedDayOfWeekAddCount({\r\n            gdtDayOfWeek,\r\n            targetDayOfWeek\r\n        });\r\n        glideDateTime.addDaysLocalTime(daysToAdd);\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 7\r\n        });\r\n\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            glideDateTime\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration\r\n        };\r\n    },\r\n\r\n    getTimeToday: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideTime\r\n        } = this.getTime({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        // Get the internal date from the GlideDateTime and internal time from the GlideTime\r\n        const internalTime = glideTime.getDisplayValueInternal();\r\n        const gdt = new GlideDateTime();\r\n        let internalDate = gdt.getDisplayValueInternal();\r\n        internalDate = internalDate.split(\" \")[0];\r\n\r\n        // Set the GlideDateTime to the correct internal date and time\r\n        gdt.setDisplayValueInternal(internalDate + \" \" + internalTime);\r\n        return {\r\n            glideDateTime: gdt,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getDateTimeDuration: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n    }) {\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        let gdt = new GlideDateTime();\r\n        gdt.setGlideDateTime(glideDateTime);\r\n        let gdtDuration = GlideDateTime.subtract(now, gdt);\r\n        var duration = gdtDuration.getNumericValue();\r\n        var glideDuration = new GlideDuration(duration);\r\n\r\n        return {\r\n            duration,\r\n            glideDuration\r\n        };\r\n    },\r\n\r\n    getTime: function({\r\n        time = '',\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current time and create a GlideTime object\r\n        var gt = new GlideTime();\r\n        if (time && useDisplayValue) {\r\n            gt.setDisplayValue(time);\r\n        } else if (time) {\r\n            gt.setValue(time);\r\n        }\r\n        return {\r\n            glideTime: gt\r\n        };\r\n    },\r\n\r\n    findNextDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false,\r\n        addMonths = false,\r\n        dayOfMonth = false,\r\n        functionName = '',\r\n        amount = 1\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (typeof addDays === \"number\") {\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else if (typeof addMonths === \"number\") {\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else if (functionName) {\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        }\r\n    },\r\n\r\n    findNextDayFn: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        amount = 1,\r\n        functionName = 'addDaysLocalTime'\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime[functionName](amount);\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextWeekDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(addDays);\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextMonthDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addMonths = false,\r\n        dayOfMonth = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addMonthsLocalTime(addMonths);\r\n            if (typeof dayOfMonth === \"number\") {\r\n                glideDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n            }\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    getCorrectedDayOfWeekAddCount: function({\r\n        dayOfWeek,\r\n        targetDayOfWeek\r\n    }) {\r\n        // Find the number of days to add to the current date to reach the target day of the week\r\n        let daysToAdd = 0;\r\n        if (targetDayOfWeek > dayOfWeek) {\r\n            daysToAdd = 7 - (dayOfWeek - targetDayOfWeek);\r\n        } else if (targetDayOfWeek < dayOfWeek) {\r\n            daysToAdd = targetDayOfWeek - dayOfWeek;\r\n        }\r\n        return daysToAdd;\r\n    },\r\n\r\n    updateDateTime: function({\r\n        versionStepGr\r\n    }) {\r\n        let dateTime = versionStepGr.getValue('datetime');\r\n        let frequency = versionStepGr.getValue('frequency');\r\n\r\n        const gdt = new GlideDateTime();\r\n        gdt.setValue(dateTime);\r\n\r\n        if (frequency === 'annually') {\r\n            this.findNextDay({\r\n                functionName: 'addYearsLocalTime',\r\n                amount: 1,\r\n                glideDateTime: gdt\r\n            });\r\n        } else if (frequency === 'monthly') {\r\n            let dayOfMonth = versionStepGr.getValue('day_of_month') || '';\r\n            try {\r\n                dayOfMonth = dayOfMonth !== '' ? Number(dayOfMonth) : 0;\r\n            } catch (e) {\r\n                dayOfMonth = 0;\r\n                gs.error('Tenon Journey Builder: Version Step is missing a day of the month. SysId: ' + versionStepGr.getUniqueValue());\r\n            }\r\n            gs.info(dayOfMonth)\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addMonths: 1,\r\n                dayOfMonth\r\n            });\r\n        } else if (frequency === 'weekly') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addDays: 7\r\n            });\r\n        } else if (frequency === 'daily') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                functionName: 'addDaysLocalTime',\r\n                amount: 1,\r\n            });\r\n        }\r\n\r\n        versionStepGr.setValue('datetime', gdt);\r\n        versionStepGr.update();\r\n    },\r\n\r\n    type: \"JourneyBuilderDateTimeMS\",\r\n};",
    "formatted_script": {
      "line_count": 364,
      "char_count": 10471,
      "preview": "var JourneyBuilderDateTimeMS = Class.create();\r\nJourneyBuilderDateTimeMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getNextDayOfMonthDateTime: function({\r\n        time = '',\r\n       ...",
      "full_script": "var JourneyBuilderDateTimeMS = Class.create();\r\nJourneyBuilderDateTimeMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getNextDayOfMonthDateTime: function({\r\n        time = '',\r\n        dayOfMonth = 1,\r\n        useDisplayValue = false\r\n    }) {\r\n        let currentDateTime = new GlideDateTime();\r\n        let currentDay = currentDateTime.getDayOfMonthLocalTime();\r\n        const {\r\n            glideDateTime: preGlideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        currentDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n        const {\r\n            glideDateTime\r\n        } = this.findNextDay({\r\n            now: currentDateTime,\r\n            glideDateTime: preGlideDateTime,\r\n            addMonths: 1,\r\n            dayOfMonth\r\n        });\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextTimeDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime,\r\n            glideTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 1\r\n        });\r\n\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            now,\r\n            glideDateTime,\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getNextDayDateTime: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        let now = new GlideDateTime();\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(1);\r\n        }\r\n\r\n        return {\r\n            glideDateTime\r\n        };\r\n    },\r\n\r\n    getNextDayOfWeekDateTime: function({\r\n        time = '',\r\n        dayOfTheWeek = 0,\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current day of the week\r\n        // Tenon starts with Sunday as 0 and ends with Saturday as 6\r\n        const targetDayOfWeek = dayOfTheWeek;\r\n        const {\r\n            glideDateTime\r\n        } = this.getTimeToday({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n\r\n        // Get the current day of the week\r\n        // ServiceNow starts with Monday as 1 and ends with Sunday as 7\r\n        // We will convert it to 0-6, where 0 is Sunday and 6 is Saturday\r\n        let gdtDayOfWeek = glideDateTime.getDayOfWeekLocalTime();\r\n        if (gdtDayOfWeek === 7) {\r\n            gdtDayOfWeek = 0;\r\n        }\r\n\r\n        // Get the right amount of days to add to the current date\r\n        const daysToAdd = this.getCorrectedDayOfWeekAddCount({\r\n            gdtDayOfWeek,\r\n            targetDayOfWeek\r\n        });\r\n        glideDateTime.addDaysLocalTime(daysToAdd);\r\n\r\n        // Figure out the next occurrence of the target day of the week\r\n        const {\r\n            now\r\n        } = this.findNextDay({\r\n            glideDateTime,\r\n            addDays: 7\r\n        });\r\n\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        const {\r\n            duration,\r\n            glideDuration\r\n        } = this.getDateTimeDuration({\r\n            glideDateTime\r\n        });\r\n\r\n        return {\r\n            glideDateTime: glideDateTime,\r\n            glideDuration,\r\n            duration\r\n        };\r\n    },\r\n\r\n    getTimeToday: function({\r\n        time,\r\n        useDisplayValue = false\r\n    }) {\r\n        const {\r\n            glideTime\r\n        } = this.getTime({\r\n            time,\r\n            useDisplayValue\r\n        });\r\n        // Get the internal date from the GlideDateTime and internal time from the GlideTime\r\n        const internalTime = glideTime.getDisplayValueInternal();\r\n        const gdt = new GlideDateTime();\r\n        let internalDate = gdt.getDisplayValueInternal();\r\n        internalDate = internalDate.split(\" \")[0];\r\n\r\n        // Set the GlideDateTime to the correct internal date and time\r\n        gdt.setDisplayValueInternal(internalDate + \" \" + internalTime);\r\n        return {\r\n            glideDateTime: gdt,\r\n            glideTime\r\n        };\r\n    },\r\n\r\n    getDateTimeDuration: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n    }) {\r\n        // Get the time between now and the next occurrence of the target day of the week\r\n        let gdt = new GlideDateTime();\r\n        gdt.setGlideDateTime(glideDateTime);\r\n        let gdtDuration = GlideDateTime.subtract(now, gdt);\r\n        var duration = gdtDuration.getNumericValue();\r\n        var glideDuration = new GlideDuration(duration);\r\n\r\n        return {\r\n            duration,\r\n            glideDuration\r\n        };\r\n    },\r\n\r\n    getTime: function({\r\n        time = '',\r\n        useDisplayValue = false\r\n    }) {\r\n        // Use the current time and create a GlideTime object\r\n        var gt = new GlideTime();\r\n        if (time && useDisplayValue) {\r\n            gt.setDisplayValue(time);\r\n        } else if (time) {\r\n            gt.setValue(time);\r\n        }\r\n        return {\r\n            glideTime: gt\r\n        };\r\n    },\r\n\r\n    findNextDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false,\r\n        addMonths = false,\r\n        dayOfMonth = false,\r\n        functionName = '',\r\n        amount = 1\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (typeof addDays === \"number\") {\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else if (typeof addMonths === \"number\") {\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else if (functionName) {\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        }\r\n    },\r\n\r\n    findNextDayFn: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        amount = 1,\r\n        functionName = 'addDaysLocalTime'\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime[functionName](amount);\r\n            return this.findNextDayFn({\r\n                now,\r\n                glideDateTime,\r\n                amount,\r\n                functionName\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextWeekDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addDays = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the week or month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addDaysLocalTime(addDays);\r\n            return this.findNextWeekDay({\r\n                now,\r\n                glideDateTime,\r\n                addDays\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    findNextMonthDay: function({\r\n        now = new GlideDateTime(),\r\n        glideDateTime,\r\n        addMonths = false,\r\n        dayOfMonth = false\r\n    }) {\r\n        // Find the next occurrence of the target day of the month\r\n        if (now.after(glideDateTime)) {\r\n            glideDateTime.addMonthsLocalTime(addMonths);\r\n            if (typeof dayOfMonth === \"number\") {\r\n                glideDateTime.setDayOfMonthLocalTime(dayOfMonth);\r\n            }\r\n            return this.findNextMonthDay({\r\n                now,\r\n                glideDateTime,\r\n                addMonths,\r\n                dayOfMonth\r\n            });\r\n        } else {\r\n            return {\r\n                glideDateTime: glideDateTime,\r\n                now\r\n            };\r\n        }\r\n    },\r\n\r\n    getCorrectedDayOfWeekAddCount: function({\r\n        dayOfWeek,\r\n        targetDayOfWeek\r\n    }) {\r\n        // Find the number of days to add to the current date to reach the target day of the week\r\n        let daysToAdd = 0;\r\n        if (targetDayOfWeek > dayOfWeek) {\r\n            daysToAdd = 7 - (dayOfWeek - targetDayOfWeek);\r\n        } else if (targetDayOfWeek < dayOfWeek) {\r\n            daysToAdd = targetDayOfWeek - dayOfWeek;\r\n        }\r\n        return daysToAdd;\r\n    },\r\n\r\n    updateDateTime: function({\r\n        versionStepGr\r\n    }) {\r\n        let dateTime = versionStepGr.getValue('datetime');\r\n        let frequency = versionStepGr.getValue('frequency');\r\n\r\n        const gdt = new GlideDateTime();\r\n        gdt.setValue(dateTime);\r\n\r\n        if (frequency === 'annually') {\r\n            this.findNextDay({\r\n                functionName: 'addYearsLocalTime',\r\n                amount: 1,\r\n                glideDateTime: gdt\r\n            });\r\n        } else if (frequency === 'monthly') {\r\n            let dayOfMonth = versionStepGr.getValue('day_of_month') || '';\r\n            try {\r\n                dayOfMonth = dayOfMonth !== '' ? Number(dayOfMonth) : 0;\r\n            } catch (e) {\r\n                dayOfMonth = 0;\r\n                gs.error('Tenon Journey Builder: Version Step is missing a day of the month. SysId: ' + versionStepGr.getUniqueValue());\r\n            }\r\n            gs.info(dayOfMonth)\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addMonths: 1,\r\n                dayOfMonth\r\n            });\r\n        } else if (frequency === 'weekly') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                addDays: 7\r\n            });\r\n        } else if (frequency === 'daily') {\r\n            this.findNextDay({\r\n                glideDateTime: gdt,\r\n                functionName: 'addDaysLocalTime',\r\n                amount: 1,\r\n            });\r\n        }\r\n\r\n        versionStepGr.setValue('datetime', gdt);\r\n        versionStepGr.update();\r\n    },\r\n\r\n    type: \"JourneyBuilderDateTimeMS\",\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_update_name": {
    "value": "sys_script_include_cb6cc4c333ac6a507b18bc534d5c7b06",
    "display_value": "sys_script_include_cb6cc4c333ac6a507b18bc534d5c7b06"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_journey.JourneyBuilderDateTimeMS",
    "display_value": "x_cadso_journey.JourneyBuilderDateTimeMS"
  },
  "sys_created_on": {
    "value": "2025-04-01 01:57:26",
    "display_value": "2025-03-31 06:57:26 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "JourneyBuilderDateTimeMS",
    "display_value": "JourneyBuilderDateTimeMS"
  },
  "sys_name": {
    "value": "JourneyBuilderDateTimeMS",
    "display_value": "JourneyBuilderDateTimeMS"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
