{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "9ffe547587cd9210369f33373cbb35c4",
    "extracted_at": "2025-09-19T21:48:29.235Z",
    "display_value": "JourneyBuilderMS",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "111",
    "display_value": "111"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-05-22 22:47:50",
    "display_value": "2025-05-22 03:47:50 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var JourneyBuilderMS = Class.create();\r\nJourneyBuilderMS.prototype = {\r\n    initialize: function() {\r\n        this.mainAPI = new JourneyBuilderMain();\r\n    },\r\n\r\n    fetch: function({\r\n        request,\r\n        response\r\n    }) {\r\n        const {\r\n            sysId,\r\n            optionSysId,\r\n            versionSysId: versionSysIdParams\r\n        } = request.pathParams;\r\n        const {\r\n            versionGr,\r\n            versionSysId,\r\n            validVersion,\r\n            journey\r\n        } = this._fetchVersionBeingEdited({\r\n            sysId,\r\n            versionSysIdParams,\r\n            optionSysId,\r\n\t\t\tgetVersion: true\r\n        });\r\n        const {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        } = this._fetchTriggers({\r\n            optionSysId\r\n        });\r\n        const {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType\r\n        } = this._fetchActions({\r\n            optionSysId\r\n        });\r\n        const {\r\n            trigger\r\n        } = this._fetchTrigger({\r\n            versionSysId,\r\n            validVersion,\r\n            triggers,\r\n\t\t\ttriggerObj,\r\n\t\t\ttriggersCategoryObj,\r\n\t\t\toptionSysId\r\n        });\r\n        const {\r\n            steps\r\n        } = this._fetchVersionSteps({\r\n            versionSysId,\r\n            validVersion,\r\n            trigger,\r\n            actions: actionsObj\r\n        });\r\n        const {\r\n            option\r\n        } = this._fetchOption({\r\n            optionSysId\r\n        });\r\n\r\n\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\t\r\n\t\tconst plugins = {\r\n\t\t\tleads: this.pluginCheck({ scope: 'sn_lead_mgmt_core' }),\r\n\t\t\ttenonEmailSpoke: this.pluginCheck({ scope: 'x_cadso_email_spok' }),\r\n\t\t\ttenonTextSpoke: this.pluginCheck({ scope: 'x_cadso_text_spoke' })\r\n\t\t};\r\n\r\n        return {\r\n            triggers,\r\n            actions,\r\n            trigger,\r\n            journey,\r\n            steps,\r\n            option,\r\n            branches,\r\n            recordType,\r\n\t\t\tplugins\r\n        };\r\n    },\r\n\r\n\tpluginCheck: function({ scope }) {\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\tlet active = pMgr.isActive(scope);\r\n\t\tif (!active && scope.startsWith('x_cadso_')) {\r\n\t\t\tvar grSysApp = new GlideRecord('sys_app');\r\n\t\t\tgrSysApp.addActiveQuery();\r\n\t\t\tgrSysApp.addQuery('scope', scope);\r\n\t\t\tgrSysApp.setLimit(1);\r\n\t\t\tgrSysApp.query();\r\n\r\n\t\t\twhile (grSysApp.next()) {\r\n\t\t\t\tactive = true; \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn active;\r\n\t},\r\n\r\n    _fetchTriggers: function({\r\n        optionSysId\r\n    }) {\r\n        const triggersCategoryObj = {};\r\n        const triggerObj = {};\r\n        const optionsObj = {};\r\n        const triggers = [];\r\n\r\n        // This gets the subcategories of triggers, which is our triggers\r\n        const categoryGr = new GlideRecordSecure('x_cadso_journey_action_category');\r\n        categoryGr.addEncodedQuery('parent.short_descriptionLIKETrigger');\r\n        categoryGr.addQuery('active', true);\r\n        categoryGr.orderBy('order');\r\n        categoryGr.orderBy('short_description');\r\n        categoryGr.query();\r\n\r\n        while (categoryGr.next()) {\r\n            const categorySysId = categoryGr.getUniqueValue();\r\n            if (triggersCategoryObj[categorySysId] === undefined) {\r\n                let panelIcon = categoryGr.getDisplayValue('panel_icon');\r\n                panelIcon = panelIcon ? panelIcon + '' : '';\r\n                let icon = categoryGr.getDisplayValue('icon');\r\n                icon = icon ? icon + '' : '';\r\n                triggersCategoryObj[categorySysId] = triggers.push({\r\n                    displayValue: categoryGr.getDisplayValue(),\r\n                    description: categoryGr.getDisplayValue('description'),\r\n                    type: categoryGr.getDisplayValue('type'),\r\n                    moreInfo: categoryGr.getDisplayValue('more_info'),\r\n                    hint: categoryGr.getDisplayValue('hint'),\r\n                    panelIcon,\r\n                    panelIconIsImage: panelIcon.indexOf('.') > -1,\r\n                    icon,\r\n                    iconIsImage: icon.indexOf('.') > -1,\r\n                    value: categorySysId,\r\n                    items: [],\r\n                    action: {\r\n                        displayValue: '',\r\n                        value: ''\r\n                    },\r\n                    trigger: true,\r\n                    isTrigger: true\r\n                });\r\n            }\r\n        }\r\n\r\n        this._fetchTriggerItems({\r\n            subcategoryQuery: Object.keys(triggersCategoryObj).join(),\r\n            optionSysId,\r\n            triggersCategoryObj,\r\n            triggers,\r\n            triggerObj,\r\n            fetchItems: false\r\n        });\r\n\r\n        return {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        };\r\n    },\r\n\r\n    _fetchTriggerItems: function({\r\n        subcategoryQuery,\r\n        optionSysId,\r\n        triggersCategoryObj,\r\n        triggers = [],\r\n        triggerObj = {},\r\n        fetchItems = false\r\n    }) {\r\n        const items = [];\r\n        // Using the subcategories, we only want the actions for the triggers related to the option selected.\r\n        var m2mOptionActionGr = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionActionGr.addQuery('option', optionSysId);\r\n        m2mOptionActionGr.addEncodedQuery('action.subcategoryIN' + subcategoryQuery);\r\n        m2mOptionActionGr.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionActionGr.addQuery('active', true);\r\n        m2mOptionActionGr.addQuery('action.active', true);\r\n        m2mOptionActionGr.orderBy('action.type');\r\n        m2mOptionActionGr.orderBy('action.order');\r\n        m2mOptionActionGr.query();\r\n\r\n        while (m2mOptionActionGr.next()) {\r\n            const triggerGr = m2mOptionActionGr.action.getRefRecord();\r\n            if (!triggerGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const optionGr = m2mOptionActionGr.option.getRefRecord();\r\n            if (!optionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const categorySysId = triggerGr.getValue('subcategory');\r\n            const triggerIndex = triggersCategoryObj[categorySysId];\r\n            if (triggerIndex === undefined) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid subcategory. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n\r\n            let icon = triggerGr.getDisplayValue('icon') || triggers[triggerIndex - 1].icon;\r\n            icon = icon ? icon + '' : '';\r\n\r\n            let configurations = triggerGr.getValue(\"configurations\") ? JSON.parse(triggerGr.getValue(\"configurations\")) || {} : {};\r\n            try {\r\n                if (!configurations) {\r\n                    configurations = {\r\n                        valid: true,\r\n                        fields: []\r\n                    };\r\n                } else {\r\n                    configurations.valid = true;\r\n                }\r\n\r\n                if (!configurations.fields) {\r\n                    configurations.fields = [];\r\n                }\r\n            } catch (e) {\r\n                configurations = {\r\n                    valid: false,\r\n                    _error: \"Not a valid object\",\r\n                    fields: []\r\n                };\r\n            }\r\n\r\n            for (var x = 0; x < configurations.fields.length; x++) {\r\n                const field = configurations.fields[x];\r\n                if (field.useOptionTable) {\r\n                    const optionTable = optionGr.getValue('table');\r\n                    if (field.element === 'table') {\r\n                        configurations.fields[x].value = optionTable;\r\n                        configurations.fields[x].displayValue = optionTable;\r\n                    }\r\n                    configurations.fields[x].table = optionTable;\r\n                }\r\n            }\r\n\r\n            const triggerAction = {\r\n                displayValue: triggerGr.getDisplayValue(),\r\n                description: triggerGr.getDisplayValue('description'),\r\n                icon,\r\n                iconIsImage: icon.indexOf('.') > -1,\r\n                value: triggerGr.getUniqueValue(),\r\n                configurations,\r\n                trigger: true,\r\n                isTrigger: true,\r\n                type: triggers[triggerIndex - 1].type,\r\n                actionType: triggerGr.getValue('action_type')\r\n            };\r\n\r\n            if (fetchItems) {\r\n                items.push(triggerAction);\r\n            } else {\r\n                const itemsIndex = triggers[triggerIndex - 1].items.push(triggerAction);\r\n                triggerObj[triggerAction.value] = triggerAction;\r\n                if (itemsIndex - 1 === 0) {\r\n                    triggers[triggerIndex - 1].action = triggerAction;\r\n                }\r\n            }\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n    _fetchActions: function({\r\n        optionSysId\r\n    }) {\r\n        const actions = [];\r\n        const actionsCategoryObj = {};\r\n        const actionsObj = {};\r\n        const branches = {};\r\n        const m2mOptionAction = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionAction.addQuery('option', optionSysId);\r\n        m2mOptionAction.addEncodedQuery('action.category.short_descriptionSTARTSWITHActions');\r\n        m2mOptionAction.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionAction.addEncodedQuery('action.subcategoryISNOTEMPTY');\r\n        m2mOptionAction.orderBy('action.subcategory.order');\r\n        m2mOptionAction.orderBy('action.order');\r\n        m2mOptionAction.orderBy('action.short_description');\r\n        m2mOptionAction.query();\r\n        let optionDisplayValue = '';\r\n        while (m2mOptionAction.next()) {\r\n            const actionGr = m2mOptionAction.action.getRefRecord();\r\n            if (!actionGr.isValidRecord() || !actionGr.active) continue;\r\n            optionDisplayValue = optionDisplayValue || m2mOptionAction ? m2mOptionAction.getDisplayValue('option') : '';\r\n            optionDisplayValue = optionDisplayValue.split('-')[0];\r\n            this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                m2mOptionAction,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n        }\r\n\r\n        const actionGr = new GlideRecordSecure('x_cadso_journey_action');\r\n        actionGr.addEncodedQuery('action_type!=split');\r\n        actionGr.addEncodedQuery('action_typeSTARTSWITHsplit');\r\n        actionGr.query();\r\n\r\n        while (actionGr.next()) {\r\n            const action = this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                visible: false,\r\n                m2mOptionAction: null,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n            branches[action.actionType] = action;\r\n        }\r\n\r\n        return {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType: optionDisplayValue\r\n        };\r\n    },\r\n\r\n    _fetchVersionBeingEdited: function({\r\n        sysId,\r\n        versionSysIdParams,\r\n        optionSysId,\r\n        getVersion\r\n    }) {\r\n        const journeyVersionGr = new GlideRecordSecure('x_cadso_journey_version');\r\n        let validVersion = false;\r\n        if (!!getVersion && !!versionSysIdParams && journeyVersionGr.get(versionSysIdParams)) {\r\n            validVersion = true;\r\n        } else if (!!getVersion && sysId && sysId !== '-1') {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        } else if (!getVersion) {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        const versionSysId = validVersion ? journeyVersionGr.getUniqueValue() : '-1';\r\n        let journeyGr = journeyVersionGr.journey.getRefRecord();\r\n        let description = journeyVersionGr.getDisplayValue('description');\r\n        let shortDescription = journeyVersionGr.getDisplayValue('short_description');\r\n\r\n        if (journeyGr.isValidRecord()) {\r\n            description = description || journeyGr.getDisplayValue('description');\r\n            shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n        } else if (sysId) {\r\n            journeyGr = new GlideRecordSecure('x_cadso_journey_flow');\r\n            if (journeyGr.get(sysId)) {\r\n                description = description || journeyGr.getDisplayValue('description');\r\n                shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n                journeyVersionGr.initialize();\r\n                journeyVersionGr.newRecord();\r\n                journeyVersionGr.setValue('short_description', shortDescription);\r\n                journeyVersionGr.setValue('description', description);\r\n                journeyVersionGr.setValue('journey', sysId);\r\n                journeyVersionGr.setValue('option', optionSysId);\r\n                journeyVersionGr.setValue('version', '1');\r\n                journeyVersionGr.insert();\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        return {\r\n            validVersion,\r\n            versionGr: journeyVersionGr,\r\n            versionSysId,\r\n            journey: {\r\n                totalActions: 0,\r\n                totalEndPoints: 0,\r\n                description,\r\n                shortDescription,\r\n                version: journeyVersionGr.getDisplayValue('version'),\r\n                status: {\r\n                    displayValue: journeyVersionGr.getDisplayValue('status'),\r\n                    value: journeyVersionGr.getValue('status')\r\n                },\r\n                published: journeyVersionGr.getDisplayValue('published') === 'true',\r\n                active: journeyVersionGr.getDisplayValue('active') === 'true',\r\n                sysId,\r\n                sys_id: sysId,\r\n                versionSysId,\r\n                enrollmentFrequency: journeyVersionGr.getValue('enrollment_frequency'),\r\n                schedule: {\r\n\t\t\t\t\tdisplayValue: journeyVersionGr.schedule.getDisplayValue(),\r\n\t\t\t\t\tvalue: journeyVersionGr.getValue('schedule')\r\n\t\t\t\t},\r\n                scheduleMode: journeyVersionGr.getValue('schedule_mode'),\r\n                scheduledActivation: journeyVersionGr.getValue('scheduled_activation'),\r\n                scheduledStarDate: journeyVersionGr.getValue('scheduled_start_date'),\r\n                scheduledDeactivation: journeyVersionGr.getValue('scheduled_deactivation'),\r\n                scheduledEndDate: journeyVersionGr.getValue('scheduled_end_date')\r\n            }\r\n        };\r\n    },\r\n\r\n    _fetchTrigger: function({\r\n        versionSysId,\r\n        validVersion,\r\n        triggers,\r\n\t\ttriggerObj,\r\n\t\ttriggersCategoryObj,\r\n\t\toptionSysId\r\n    }) {\r\n        let trigger = {\r\n            valid: false\r\n        };\r\n\r\n        if (!validVersion) {\r\n            return {\r\n                trigger\r\n            };\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', true);\r\n        versionStepGr.query();\r\n\r\n        if (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            const actionGr = versionStepGr.action.getRefRecord();\r\n            if (!actionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an Version Step without a valid action. [0]', [versionStepGr.getUniqueValue()]);\r\n                return { trigger };\r\n            }\r\n            if (triggerObj[actionSysId]) {\r\n                action = triggerObj[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            trigger = {\r\n                ...step,\r\n                trigger: true\r\n            };\r\n            trigger.items = this._fetchTriggerItems({\r\n                subcategoryQuery: actionGr.getValue('subcategory'),\r\n                optionSysId,\r\n                triggersCategoryObj,\r\n                triggers,\r\n                triggerObj,\r\n                fetchItems: true\r\n            });\r\n        }\r\n\r\n        return {\r\n            trigger\r\n        };\r\n    },\r\n\r\n    _fetchVersionSteps: function({\r\n        versionSysId,\r\n        validVersion,\r\n        trigger,\r\n        actions,\r\n        parent = null,\r\n        steps = [],\r\n        hasSplitParent = false\r\n    }) {\r\n        if (!validVersion) {\r\n            return steps;\r\n        }\r\n\r\n        if (trigger && trigger.value && !parent) {\r\n            steps.push({\r\n                ...trigger,\r\n                hidden: true\r\n            });\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', false);\r\n        if (parent) {\r\n            versionStepGr.addQuery('parents', parent);\r\n        } else {\r\n            versionStepGr.addEncodedQuery('parentsISEMPTY');\r\n        }\r\n        versionStepGr.orderBy('order');\r\n        versionStepGr.query();\r\n\r\n        while (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            if (actions[actionSysId]) {\r\n                action = actions[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            if (!step.trigger) {\r\n                step.action = actionSysId;\r\n            }\r\n\r\n            step.order = versionStepGr.getValue('order');\r\n\r\n            if (action.actionType === 'split') {\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: step.items,\r\n                    hasSplitParent: true\r\n                });\r\n                step.items = items;\r\n                steps.push({\r\n                    ...step\r\n                });\r\n            } else {\r\n                let index = -1;\r\n                if (hasSplitParent) {\r\n                    index = steps.push([step]);\r\n                }\r\n                if (!hasSplitParent) {\r\n                    steps.push({\r\n                        ...step\r\n                    });\r\n                }\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: hasSplitParent ? steps[index - 1] : steps,\r\n                    hasSplitParent: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            steps\r\n        };\r\n    },\r\n\r\n    _fetchOption: function({\r\n        optionSysId\r\n    }) {\r\n        var optionGr = new GlideRecordSecure('x_cadso_journey_option');\r\n        let option = {\r\n            action: false,\r\n            description: '',\r\n            displayValue: '',\r\n            value: optionSysId,\r\n            table: ''\r\n        };\r\n        if (optionGr.get(optionSysId)) {\r\n            option = {\r\n                active: optionGr.getDisplayValue('active'),\r\n                description: optionGr.getDisplayValue('description'),\r\n                displayValue: optionGr.getDisplayValue('short_description'),\r\n                table: optionGr.getDisplayValue('table'),\r\n                value: optionSysId,\r\n            };\r\n        }\r\n        return {\r\n            option\r\n        };\r\n    },\r\n\r\n    getAction: function({\r\n        actionsObj,\r\n        actions,\r\n        actionGr,\r\n        m2mOptionAction,\r\n        visible = true,\r\n        actionsCategoryObj,\r\n        optionDisplayValue\r\n    }) {\r\n        const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n        if (!subcategoryGr.isValidRecord()) return;\r\n        const subcategorySysId = subcategoryGr.getUniqueValue();\r\n        if (actionsCategoryObj[subcategorySysId] === undefined) {\r\n            actionsCategoryObj[subcategorySysId] = actions.push({\r\n                displayValue: subcategoryGr.getDisplayValue(),\r\n                value: subcategoryGr.getUniqueValue(),\r\n                description: subcategoryGr.getDisplayValue('description'),\r\n                iconBgColor: subcategoryGr.getDisplayValue('icon_background_color'),\r\n                iconColor: subcategoryGr.getDisplayValue('icon_color'),\r\n                items: [],\r\n            });\r\n        }\r\n\r\n        const actionIndex = actionsCategoryObj[subcategorySysId] - 1;\r\n        let icon = actionGr.getDisplayValue('icon');\r\n        icon = icon ? icon + '' : '';\r\n        let configurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n\r\n        if (m2mOptionAction) {\r\n            const optionGr = m2mOptionAction.option.getRefRecord();\r\n            if (optionGr.isValidRecord()) {\r\n                for (var x = 0; x < configurations.fields.length; x++) {\r\n                    const field = configurations.fields[x];\r\n                    if (field.useOptionTable) {\r\n                        const optionTable = optionGr.getValue('table');\r\n                        if (field.element === 'table') {\r\n                            configurations.fields[x].value = optionTable;\r\n                            configurations.fields[x].displayValue = optionTable;\r\n                        }\r\n                        configurations.fields[x].table = optionTable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const description = (actionGr.getDisplayValue('description') + '').replaceAll(\"{recordType}\", optionDisplayValue + 's');\r\n        const action = {\r\n            displayValue: actionGr.getDisplayValue(),\r\n            description,\r\n            icon,\r\n            iconIsImage: icon.indexOf('.') > -1,\r\n            iconBgColor: actionGr.getDisplayValue('icon_background_color') || actions[actionIndex].iconBgColor,\r\n            iconColor: actionGr.getDisplayValue('icon_color') || actions[actionIndex].iconColor,\r\n            iconType: actionGr.getDisplayValue('icon_type'),\r\n            type: actionGr.getValue('type'),\r\n            actionType: actionGr.getValue('action_type'),\r\n            value: actionGr.getUniqueValue(),\r\n            configurations\r\n        };\r\n\r\n        if (visible) {\r\n            actionsObj[action.value] = action;\r\n            actions[actionIndex].items.push(action);\r\n        }\r\n\r\n        return action;\r\n    },\r\n\r\n    type: 'JourneyBuilderMS'\r\n};",
    "display_value": "var JourneyBuilderMS = Class.create();\r\nJourneyBuilderMS.prototype = {\r\n    initialize: function() {\r\n        this.mainAPI = new JourneyBuilderMain();\r\n    },\r\n\r\n    fetch: function({\r\n        request,\r\n        response\r\n    }) {\r\n        const {\r\n            sysId,\r\n            optionSysId,\r\n            versionSysId: versionSysIdParams\r\n        } = request.pathParams;\r\n        const {\r\n            versionGr,\r\n            versionSysId,\r\n            validVersion,\r\n            journey\r\n        } = this._fetchVersionBeingEdited({\r\n            sysId,\r\n            versionSysIdParams,\r\n            optionSysId,\r\n\t\t\tgetVersion: true\r\n        });\r\n        const {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        } = this._fetchTriggers({\r\n            optionSysId\r\n        });\r\n        const {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType\r\n        } = this._fetchActions({\r\n            optionSysId\r\n        });\r\n        const {\r\n            trigger\r\n        } = this._fetchTrigger({\r\n            versionSysId,\r\n            validVersion,\r\n            triggers,\r\n\t\t\ttriggerObj,\r\n\t\t\ttriggersCategoryObj,\r\n\t\t\toptionSysId\r\n        });\r\n        const {\r\n            steps\r\n        } = this._fetchVersionSteps({\r\n            versionSysId,\r\n            validVersion,\r\n            trigger,\r\n            actions: actionsObj\r\n        });\r\n        const {\r\n            option\r\n        } = this._fetchOption({\r\n            optionSysId\r\n        });\r\n\r\n\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\t\r\n\t\tconst plugins = {\r\n\t\t\tleads: this.pluginCheck({ scope: 'sn_lead_mgmt_core' }),\r\n\t\t\ttenonEmailSpoke: this.pluginCheck({ scope: 'x_cadso_email_spok' }),\r\n\t\t\ttenonTextSpoke: this.pluginCheck({ scope: 'x_cadso_text_spoke' })\r\n\t\t};\r\n\r\n        return {\r\n            triggers,\r\n            actions,\r\n            trigger,\r\n            journey,\r\n            steps,\r\n            option,\r\n            branches,\r\n            recordType,\r\n\t\t\tplugins\r\n        };\r\n    },\r\n\r\n\tpluginCheck: function({ scope }) {\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\tlet active = pMgr.isActive(scope);\r\n\t\tif (!active && scope.startsWith('x_cadso_')) {\r\n\t\t\tvar grSysApp = new GlideRecord('sys_app');\r\n\t\t\tgrSysApp.addActiveQuery();\r\n\t\t\tgrSysApp.addQuery('scope', scope);\r\n\t\t\tgrSysApp.setLimit(1);\r\n\t\t\tgrSysApp.query();\r\n\r\n\t\t\twhile (grSysApp.next()) {\r\n\t\t\t\tactive = true; \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn active;\r\n\t},\r\n\r\n    _fetchTriggers: function({\r\n        optionSysId\r\n    }) {\r\n        const triggersCategoryObj = {};\r\n        const triggerObj = {};\r\n        const optionsObj = {};\r\n        const triggers = [];\r\n\r\n        // This gets the subcategories of triggers, which is our triggers\r\n        const categoryGr = new GlideRecordSecure('x_cadso_journey_action_category');\r\n        categoryGr.addEncodedQuery('parent.short_descriptionLIKETrigger');\r\n        categoryGr.addQuery('active', true);\r\n        categoryGr.orderBy('order');\r\n        categoryGr.orderBy('short_description');\r\n        categoryGr.query();\r\n\r\n        while (categoryGr.next()) {\r\n            const categorySysId = categoryGr.getUniqueValue();\r\n            if (triggersCategoryObj[categorySysId] === undefined) {\r\n                let panelIcon = categoryGr.getDisplayValue('panel_icon');\r\n                panelIcon = panelIcon ? panelIcon + '' : '';\r\n                let icon = categoryGr.getDisplayValue('icon');\r\n                icon = icon ? icon + '' : '';\r\n                triggersCategoryObj[categorySysId] = triggers.push({\r\n                    displayValue: categoryGr.getDisplayValue(),\r\n                    description: categoryGr.getDisplayValue('description'),\r\n                    type: categoryGr.getDisplayValue('type'),\r\n                    moreInfo: categoryGr.getDisplayValue('more_info'),\r\n                    hint: categoryGr.getDisplayValue('hint'),\r\n                    panelIcon,\r\n                    panelIconIsImage: panelIcon.indexOf('.') > -1,\r\n                    icon,\r\n                    iconIsImage: icon.indexOf('.') > -1,\r\n                    value: categorySysId,\r\n                    items: [],\r\n                    action: {\r\n                        displayValue: '',\r\n                        value: ''\r\n                    },\r\n                    trigger: true,\r\n                    isTrigger: true\r\n                });\r\n            }\r\n        }\r\n\r\n        this._fetchTriggerItems({\r\n            subcategoryQuery: Object.keys(triggersCategoryObj).join(),\r\n            optionSysId,\r\n            triggersCategoryObj,\r\n            triggers,\r\n            triggerObj,\r\n            fetchItems: false\r\n        });\r\n\r\n        return {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        };\r\n    },\r\n\r\n    _fetchTriggerItems: function({\r\n        subcategoryQuery,\r\n        optionSysId,\r\n        triggersCategoryObj,\r\n        triggers = [],\r\n        triggerObj = {},\r\n        fetchItems = false\r\n    }) {\r\n        const items = [];\r\n        // Using the subcategories, we only want the actions for the triggers related to the option selected.\r\n        var m2mOptionActionGr = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionActionGr.addQuery('option', optionSysId);\r\n        m2mOptionActionGr.addEncodedQuery('action.subcategoryIN' + subcategoryQuery);\r\n        m2mOptionActionGr.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionActionGr.addQuery('active', true);\r\n        m2mOptionActionGr.addQuery('action.active', true);\r\n        m2mOptionActionGr.orderBy('action.type');\r\n        m2mOptionActionGr.orderBy('action.order');\r\n        m2mOptionActionGr.query();\r\n\r\n        while (m2mOptionActionGr.next()) {\r\n            const triggerGr = m2mOptionActionGr.action.getRefRecord();\r\n            if (!triggerGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const optionGr = m2mOptionActionGr.option.getRefRecord();\r\n            if (!optionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const categorySysId = triggerGr.getValue('subcategory');\r\n            const triggerIndex = triggersCategoryObj[categorySysId];\r\n            if (triggerIndex === undefined) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid subcategory. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n\r\n            let icon = triggerGr.getDisplayValue('icon') || triggers[triggerIndex - 1].icon;\r\n            icon = icon ? icon + '' : '';\r\n\r\n            let configurations = triggerGr.getValue(\"configurations\") ? JSON.parse(triggerGr.getValue(\"configurations\")) || {} : {};\r\n            try {\r\n                if (!configurations) {\r\n                    configurations = {\r\n                        valid: true,\r\n                        fields: []\r\n                    };\r\n                } else {\r\n                    configurations.valid = true;\r\n                }\r\n\r\n                if (!configurations.fields) {\r\n                    configurations.fields = [];\r\n                }\r\n            } catch (e) {\r\n                configurations = {\r\n                    valid: false,\r\n                    _error: \"Not a valid object\",\r\n                    fields: []\r\n                };\r\n            }\r\n\r\n            for (var x = 0; x < configurations.fields.length; x++) {\r\n                const field = configurations.fields[x];\r\n                if (field.useOptionTable) {\r\n                    const optionTable = optionGr.getValue('table');\r\n                    if (field.element === 'table') {\r\n                        configurations.fields[x].value = optionTable;\r\n                        configurations.fields[x].displayValue = optionTable;\r\n                    }\r\n                    configurations.fields[x].table = optionTable;\r\n                }\r\n            }\r\n\r\n            const triggerAction = {\r\n                displayValue: triggerGr.getDisplayValue(),\r\n                description: triggerGr.getDisplayValue('description'),\r\n                icon,\r\n                iconIsImage: icon.indexOf('.') > -1,\r\n                value: triggerGr.getUniqueValue(),\r\n                configurations,\r\n                trigger: true,\r\n                isTrigger: true,\r\n                type: triggers[triggerIndex - 1].type,\r\n                actionType: triggerGr.getValue('action_type')\r\n            };\r\n\r\n            if (fetchItems) {\r\n                items.push(triggerAction);\r\n            } else {\r\n                const itemsIndex = triggers[triggerIndex - 1].items.push(triggerAction);\r\n                triggerObj[triggerAction.value] = triggerAction;\r\n                if (itemsIndex - 1 === 0) {\r\n                    triggers[triggerIndex - 1].action = triggerAction;\r\n                }\r\n            }\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n    _fetchActions: function({\r\n        optionSysId\r\n    }) {\r\n        const actions = [];\r\n        const actionsCategoryObj = {};\r\n        const actionsObj = {};\r\n        const branches = {};\r\n        const m2mOptionAction = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionAction.addQuery('option', optionSysId);\r\n        m2mOptionAction.addEncodedQuery('action.category.short_descriptionSTARTSWITHActions');\r\n        m2mOptionAction.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionAction.addEncodedQuery('action.subcategoryISNOTEMPTY');\r\n        m2mOptionAction.orderBy('action.subcategory.order');\r\n        m2mOptionAction.orderBy('action.order');\r\n        m2mOptionAction.orderBy('action.short_description');\r\n        m2mOptionAction.query();\r\n        let optionDisplayValue = '';\r\n        while (m2mOptionAction.next()) {\r\n            const actionGr = m2mOptionAction.action.getRefRecord();\r\n            if (!actionGr.isValidRecord() || !actionGr.active) continue;\r\n            optionDisplayValue = optionDisplayValue || m2mOptionAction ? m2mOptionAction.getDisplayValue('option') : '';\r\n            optionDisplayValue = optionDisplayValue.split('-')[0];\r\n            this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                m2mOptionAction,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n        }\r\n\r\n        const actionGr = new GlideRecordSecure('x_cadso_journey_action');\r\n        actionGr.addEncodedQuery('action_type!=split');\r\n        actionGr.addEncodedQuery('action_typeSTARTSWITHsplit');\r\n        actionGr.query();\r\n\r\n        while (actionGr.next()) {\r\n            const action = this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                visible: false,\r\n                m2mOptionAction: null,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n            branches[action.actionType] = action;\r\n        }\r\n\r\n        return {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType: optionDisplayValue\r\n        };\r\n    },\r\n\r\n    _fetchVersionBeingEdited: function({\r\n        sysId,\r\n        versionSysIdParams,\r\n        optionSysId,\r\n        getVersion\r\n    }) {\r\n        const journeyVersionGr = new GlideRecordSecure('x_cadso_journey_version');\r\n        let validVersion = false;\r\n        if (!!getVersion && !!versionSysIdParams && journeyVersionGr.get(versionSysIdParams)) {\r\n            validVersion = true;\r\n        } else if (!!getVersion && sysId && sysId !== '-1') {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        } else if (!getVersion) {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        const versionSysId = validVersion ? journeyVersionGr.getUniqueValue() : '-1';\r\n        let journeyGr = journeyVersionGr.journey.getRefRecord();\r\n        let description = journeyVersionGr.getDisplayValue('description');\r\n        let shortDescription = journeyVersionGr.getDisplayValue('short_description');\r\n\r\n        if (journeyGr.isValidRecord()) {\r\n            description = description || journeyGr.getDisplayValue('description');\r\n            shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n        } else if (sysId) {\r\n            journeyGr = new GlideRecordSecure('x_cadso_journey_flow');\r\n            if (journeyGr.get(sysId)) {\r\n                description = description || journeyGr.getDisplayValue('description');\r\n                shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n                journeyVersionGr.initialize();\r\n                journeyVersionGr.newRecord();\r\n                journeyVersionGr.setValue('short_description', shortDescription);\r\n                journeyVersionGr.setValue('description', description);\r\n                journeyVersionGr.setValue('journey', sysId);\r\n                journeyVersionGr.setValue('option', optionSysId);\r\n                journeyVersionGr.setValue('version', '1');\r\n                journeyVersionGr.insert();\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        return {\r\n            validVersion,\r\n            versionGr: journeyVersionGr,\r\n            versionSysId,\r\n            journey: {\r\n                totalActions: 0,\r\n                totalEndPoints: 0,\r\n                description,\r\n                shortDescription,\r\n                version: journeyVersionGr.getDisplayValue('version'),\r\n                status: {\r\n                    displayValue: journeyVersionGr.getDisplayValue('status'),\r\n                    value: journeyVersionGr.getValue('status')\r\n                },\r\n                published: journeyVersionGr.getDisplayValue('published') === 'true',\r\n                active: journeyVersionGr.getDisplayValue('active') === 'true',\r\n                sysId,\r\n                sys_id: sysId,\r\n                versionSysId,\r\n                enrollmentFrequency: journeyVersionGr.getValue('enrollment_frequency'),\r\n                schedule: {\r\n\t\t\t\t\tdisplayValue: journeyVersionGr.schedule.getDisplayValue(),\r\n\t\t\t\t\tvalue: journeyVersionGr.getValue('schedule')\r\n\t\t\t\t},\r\n                scheduleMode: journeyVersionGr.getValue('schedule_mode'),\r\n                scheduledActivation: journeyVersionGr.getValue('scheduled_activation'),\r\n                scheduledStarDate: journeyVersionGr.getValue('scheduled_start_date'),\r\n                scheduledDeactivation: journeyVersionGr.getValue('scheduled_deactivation'),\r\n                scheduledEndDate: journeyVersionGr.getValue('scheduled_end_date')\r\n            }\r\n        };\r\n    },\r\n\r\n    _fetchTrigger: function({\r\n        versionSysId,\r\n        validVersion,\r\n        triggers,\r\n\t\ttriggerObj,\r\n\t\ttriggersCategoryObj,\r\n\t\toptionSysId\r\n    }) {\r\n        let trigger = {\r\n            valid: false\r\n        };\r\n\r\n        if (!validVersion) {\r\n            return {\r\n                trigger\r\n            };\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', true);\r\n        versionStepGr.query();\r\n\r\n        if (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            const actionGr = versionStepGr.action.getRefRecord();\r\n            if (!actionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an Version Step without a valid action. [0]', [versionStepGr.getUniqueValue()]);\r\n                return { trigger };\r\n            }\r\n            if (triggerObj[actionSysId]) {\r\n                action = triggerObj[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            trigger = {\r\n                ...step,\r\n                trigger: true\r\n            };\r\n            trigger.items = this._fetchTriggerItems({\r\n                subcategoryQuery: actionGr.getValue('subcategory'),\r\n                optionSysId,\r\n                triggersCategoryObj,\r\n                triggers,\r\n                triggerObj,\r\n                fetchItems: true\r\n            });\r\n        }\r\n\r\n        return {\r\n            trigger\r\n        };\r\n    },\r\n\r\n    _fetchVersionSteps: function({\r\n        versionSysId,\r\n        validVersion,\r\n        trigger,\r\n        actions,\r\n        parent = null,\r\n        steps = [],\r\n        hasSplitParent = false\r\n    }) {\r\n        if (!validVersion) {\r\n            return steps;\r\n        }\r\n\r\n        if (trigger && trigger.value && !parent) {\r\n            steps.push({\r\n                ...trigger,\r\n                hidden: true\r\n            });\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', false);\r\n        if (parent) {\r\n            versionStepGr.addQuery('parents', parent);\r\n        } else {\r\n            versionStepGr.addEncodedQuery('parentsISEMPTY');\r\n        }\r\n        versionStepGr.orderBy('order');\r\n        versionStepGr.query();\r\n\r\n        while (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            if (actions[actionSysId]) {\r\n                action = actions[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            if (!step.trigger) {\r\n                step.action = actionSysId;\r\n            }\r\n\r\n            step.order = versionStepGr.getValue('order');\r\n\r\n            if (action.actionType === 'split') {\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: step.items,\r\n                    hasSplitParent: true\r\n                });\r\n                step.items = items;\r\n                steps.push({\r\n                    ...step\r\n                });\r\n            } else {\r\n                let index = -1;\r\n                if (hasSplitParent) {\r\n                    index = steps.push([step]);\r\n                }\r\n                if (!hasSplitParent) {\r\n                    steps.push({\r\n                        ...step\r\n                    });\r\n                }\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: hasSplitParent ? steps[index - 1] : steps,\r\n                    hasSplitParent: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            steps\r\n        };\r\n    },\r\n\r\n    _fetchOption: function({\r\n        optionSysId\r\n    }) {\r\n        var optionGr = new GlideRecordSecure('x_cadso_journey_option');\r\n        let option = {\r\n            action: false,\r\n            description: '',\r\n            displayValue: '',\r\n            value: optionSysId,\r\n            table: ''\r\n        };\r\n        if (optionGr.get(optionSysId)) {\r\n            option = {\r\n                active: optionGr.getDisplayValue('active'),\r\n                description: optionGr.getDisplayValue('description'),\r\n                displayValue: optionGr.getDisplayValue('short_description'),\r\n                table: optionGr.getDisplayValue('table'),\r\n                value: optionSysId,\r\n            };\r\n        }\r\n        return {\r\n            option\r\n        };\r\n    },\r\n\r\n    getAction: function({\r\n        actionsObj,\r\n        actions,\r\n        actionGr,\r\n        m2mOptionAction,\r\n        visible = true,\r\n        actionsCategoryObj,\r\n        optionDisplayValue\r\n    }) {\r\n        const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n        if (!subcategoryGr.isValidRecord()) return;\r\n        const subcategorySysId = subcategoryGr.getUniqueValue();\r\n        if (actionsCategoryObj[subcategorySysId] === undefined) {\r\n            actionsCategoryObj[subcategorySysId] = actions.push({\r\n                displayValue: subcategoryGr.getDisplayValue(),\r\n                value: subcategoryGr.getUniqueValue(),\r\n                description: subcategoryGr.getDisplayValue('description'),\r\n                iconBgColor: subcategoryGr.getDisplayValue('icon_background_color'),\r\n                iconColor: subcategoryGr.getDisplayValue('icon_color'),\r\n                items: [],\r\n            });\r\n        }\r\n\r\n        const actionIndex = actionsCategoryObj[subcategorySysId] - 1;\r\n        let icon = actionGr.getDisplayValue('icon');\r\n        icon = icon ? icon + '' : '';\r\n        let configurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n\r\n        if (m2mOptionAction) {\r\n            const optionGr = m2mOptionAction.option.getRefRecord();\r\n            if (optionGr.isValidRecord()) {\r\n                for (var x = 0; x < configurations.fields.length; x++) {\r\n                    const field = configurations.fields[x];\r\n                    if (field.useOptionTable) {\r\n                        const optionTable = optionGr.getValue('table');\r\n                        if (field.element === 'table') {\r\n                            configurations.fields[x].value = optionTable;\r\n                            configurations.fields[x].displayValue = optionTable;\r\n                        }\r\n                        configurations.fields[x].table = optionTable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const description = (actionGr.getDisplayValue('description') + '').replaceAll(\"{recordType}\", optionDisplayValue + 's');\r\n        const action = {\r\n            displayValue: actionGr.getDisplayValue(),\r\n            description,\r\n            icon,\r\n            iconIsImage: icon.indexOf('.') > -1,\r\n            iconBgColor: actionGr.getDisplayValue('icon_background_color') || actions[actionIndex].iconBgColor,\r\n            iconColor: actionGr.getDisplayValue('icon_color') || actions[actionIndex].iconColor,\r\n            iconType: actionGr.getDisplayValue('icon_type'),\r\n            type: actionGr.getValue('type'),\r\n            actionType: actionGr.getValue('action_type'),\r\n            value: actionGr.getUniqueValue(),\r\n            configurations\r\n        };\r\n\r\n        if (visible) {\r\n            actionsObj[action.value] = action;\r\n            actions[actionIndex].items.push(action);\r\n        }\r\n\r\n        return action;\r\n    },\r\n\r\n    type: 'JourneyBuilderMS'\r\n};",
    "formatted_script": {
      "line_count": 682,
      "char_count": 24369,
      "preview": "var JourneyBuilderMS = Class.create();\r\nJourneyBuilderMS.prototype = {\r\n    initialize: function() {\r\n        this.mainAPI = new JourneyBuilderMain();\r\n    },\r\n\r\n    fetch: function({\r\n        request...",
      "full_script": "var JourneyBuilderMS = Class.create();\r\nJourneyBuilderMS.prototype = {\r\n    initialize: function() {\r\n        this.mainAPI = new JourneyBuilderMain();\r\n    },\r\n\r\n    fetch: function({\r\n        request,\r\n        response\r\n    }) {\r\n        const {\r\n            sysId,\r\n            optionSysId,\r\n            versionSysId: versionSysIdParams\r\n        } = request.pathParams;\r\n        const {\r\n            versionGr,\r\n            versionSysId,\r\n            validVersion,\r\n            journey\r\n        } = this._fetchVersionBeingEdited({\r\n            sysId,\r\n            versionSysIdParams,\r\n            optionSysId,\r\n\t\t\tgetVersion: true\r\n        });\r\n        const {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        } = this._fetchTriggers({\r\n            optionSysId\r\n        });\r\n        const {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType\r\n        } = this._fetchActions({\r\n            optionSysId\r\n        });\r\n        const {\r\n            trigger\r\n        } = this._fetchTrigger({\r\n            versionSysId,\r\n            validVersion,\r\n            triggers,\r\n\t\t\ttriggerObj,\r\n\t\t\ttriggersCategoryObj,\r\n\t\t\toptionSysId\r\n        });\r\n        const {\r\n            steps\r\n        } = this._fetchVersionSteps({\r\n            versionSysId,\r\n            validVersion,\r\n            trigger,\r\n            actions: actionsObj\r\n        });\r\n        const {\r\n            option\r\n        } = this._fetchOption({\r\n            optionSysId\r\n        });\r\n\r\n\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\t\r\n\t\tconst plugins = {\r\n\t\t\tleads: this.pluginCheck({ scope: 'sn_lead_mgmt_core' }),\r\n\t\t\ttenonEmailSpoke: this.pluginCheck({ scope: 'x_cadso_email_spok' }),\r\n\t\t\ttenonTextSpoke: this.pluginCheck({ scope: 'x_cadso_text_spoke' })\r\n\t\t};\r\n\r\n        return {\r\n            triggers,\r\n            actions,\r\n            trigger,\r\n            journey,\r\n            steps,\r\n            option,\r\n            branches,\r\n            recordType,\r\n\t\t\tplugins\r\n        };\r\n    },\r\n\r\n\tpluginCheck: function({ scope }) {\r\n\t\tlet pMgr = new GlidePluginManager();\r\n\t\tlet active = pMgr.isActive(scope);\r\n\t\tif (!active && scope.startsWith('x_cadso_')) {\r\n\t\t\tvar grSysApp = new GlideRecord('sys_app');\r\n\t\t\tgrSysApp.addActiveQuery();\r\n\t\t\tgrSysApp.addQuery('scope', scope);\r\n\t\t\tgrSysApp.setLimit(1);\r\n\t\t\tgrSysApp.query();\r\n\r\n\t\t\twhile (grSysApp.next()) {\r\n\t\t\t\tactive = true; \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn active;\r\n\t},\r\n\r\n    _fetchTriggers: function({\r\n        optionSysId\r\n    }) {\r\n        const triggersCategoryObj = {};\r\n        const triggerObj = {};\r\n        const optionsObj = {};\r\n        const triggers = [];\r\n\r\n        // This gets the subcategories of triggers, which is our triggers\r\n        const categoryGr = new GlideRecordSecure('x_cadso_journey_action_category');\r\n        categoryGr.addEncodedQuery('parent.short_descriptionLIKETrigger');\r\n        categoryGr.addQuery('active', true);\r\n        categoryGr.orderBy('order');\r\n        categoryGr.orderBy('short_description');\r\n        categoryGr.query();\r\n\r\n        while (categoryGr.next()) {\r\n            const categorySysId = categoryGr.getUniqueValue();\r\n            if (triggersCategoryObj[categorySysId] === undefined) {\r\n                let panelIcon = categoryGr.getDisplayValue('panel_icon');\r\n                panelIcon = panelIcon ? panelIcon + '' : '';\r\n                let icon = categoryGr.getDisplayValue('icon');\r\n                icon = icon ? icon + '' : '';\r\n                triggersCategoryObj[categorySysId] = triggers.push({\r\n                    displayValue: categoryGr.getDisplayValue(),\r\n                    description: categoryGr.getDisplayValue('description'),\r\n                    type: categoryGr.getDisplayValue('type'),\r\n                    moreInfo: categoryGr.getDisplayValue('more_info'),\r\n                    hint: categoryGr.getDisplayValue('hint'),\r\n                    panelIcon,\r\n                    panelIconIsImage: panelIcon.indexOf('.') > -1,\r\n                    icon,\r\n                    iconIsImage: icon.indexOf('.') > -1,\r\n                    value: categorySysId,\r\n                    items: [],\r\n                    action: {\r\n                        displayValue: '',\r\n                        value: ''\r\n                    },\r\n                    trigger: true,\r\n                    isTrigger: true\r\n                });\r\n            }\r\n        }\r\n\r\n        this._fetchTriggerItems({\r\n            subcategoryQuery: Object.keys(triggersCategoryObj).join(),\r\n            optionSysId,\r\n            triggersCategoryObj,\r\n            triggers,\r\n            triggerObj,\r\n            fetchItems: false\r\n        });\r\n\r\n        return {\r\n            triggers,\r\n            triggerObj,\r\n\t\t\ttriggersCategoryObj\r\n        };\r\n    },\r\n\r\n    _fetchTriggerItems: function({\r\n        subcategoryQuery,\r\n        optionSysId,\r\n        triggersCategoryObj,\r\n        triggers = [],\r\n        triggerObj = {},\r\n        fetchItems = false\r\n    }) {\r\n        const items = [];\r\n        // Using the subcategories, we only want the actions for the triggers related to the option selected.\r\n        var m2mOptionActionGr = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionActionGr.addQuery('option', optionSysId);\r\n        m2mOptionActionGr.addEncodedQuery('action.subcategoryIN' + subcategoryQuery);\r\n        m2mOptionActionGr.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionActionGr.addQuery('active', true);\r\n        m2mOptionActionGr.addQuery('action.active', true);\r\n        m2mOptionActionGr.orderBy('action.type');\r\n        m2mOptionActionGr.orderBy('action.order');\r\n        m2mOptionActionGr.query();\r\n\r\n        while (m2mOptionActionGr.next()) {\r\n            const triggerGr = m2mOptionActionGr.action.getRefRecord();\r\n            if (!triggerGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const optionGr = m2mOptionActionGr.option.getRefRecord();\r\n            if (!optionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid action. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n            const categorySysId = triggerGr.getValue('subcategory');\r\n            const triggerIndex = triggersCategoryObj[categorySysId];\r\n            if (triggerIndex === undefined) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an M2M Option Action without a valid subcategory. [0]', [m2mOptionActionGr.getUniqueValue()]);\r\n                continue;\r\n            }\r\n\r\n            let icon = triggerGr.getDisplayValue('icon') || triggers[triggerIndex - 1].icon;\r\n            icon = icon ? icon + '' : '';\r\n\r\n            let configurations = triggerGr.getValue(\"configurations\") ? JSON.parse(triggerGr.getValue(\"configurations\")) || {} : {};\r\n            try {\r\n                if (!configurations) {\r\n                    configurations = {\r\n                        valid: true,\r\n                        fields: []\r\n                    };\r\n                } else {\r\n                    configurations.valid = true;\r\n                }\r\n\r\n                if (!configurations.fields) {\r\n                    configurations.fields = [];\r\n                }\r\n            } catch (e) {\r\n                configurations = {\r\n                    valid: false,\r\n                    _error: \"Not a valid object\",\r\n                    fields: []\r\n                };\r\n            }\r\n\r\n            for (var x = 0; x < configurations.fields.length; x++) {\r\n                const field = configurations.fields[x];\r\n                if (field.useOptionTable) {\r\n                    const optionTable = optionGr.getValue('table');\r\n                    if (field.element === 'table') {\r\n                        configurations.fields[x].value = optionTable;\r\n                        configurations.fields[x].displayValue = optionTable;\r\n                    }\r\n                    configurations.fields[x].table = optionTable;\r\n                }\r\n            }\r\n\r\n            const triggerAction = {\r\n                displayValue: triggerGr.getDisplayValue(),\r\n                description: triggerGr.getDisplayValue('description'),\r\n                icon,\r\n                iconIsImage: icon.indexOf('.') > -1,\r\n                value: triggerGr.getUniqueValue(),\r\n                configurations,\r\n                trigger: true,\r\n                isTrigger: true,\r\n                type: triggers[triggerIndex - 1].type,\r\n                actionType: triggerGr.getValue('action_type')\r\n            };\r\n\r\n            if (fetchItems) {\r\n                items.push(triggerAction);\r\n            } else {\r\n                const itemsIndex = triggers[triggerIndex - 1].items.push(triggerAction);\r\n                triggerObj[triggerAction.value] = triggerAction;\r\n                if (itemsIndex - 1 === 0) {\r\n                    triggers[triggerIndex - 1].action = triggerAction;\r\n                }\r\n            }\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n    _fetchActions: function({\r\n        optionSysId\r\n    }) {\r\n        const actions = [];\r\n        const actionsCategoryObj = {};\r\n        const actionsObj = {};\r\n        const branches = {};\r\n        const m2mOptionAction = new GlideRecordSecure('x_cadso_journey_m2m_option_action');\r\n        m2mOptionAction.addQuery('option', optionSysId);\r\n        m2mOptionAction.addEncodedQuery('action.category.short_descriptionSTARTSWITHActions');\r\n        m2mOptionAction.addEncodedQuery('actionISNOTEMPTY');\r\n        m2mOptionAction.addEncodedQuery('action.subcategoryISNOTEMPTY');\r\n        m2mOptionAction.orderBy('action.subcategory.order');\r\n        m2mOptionAction.orderBy('action.order');\r\n        m2mOptionAction.orderBy('action.short_description');\r\n        m2mOptionAction.query();\r\n        let optionDisplayValue = '';\r\n        while (m2mOptionAction.next()) {\r\n            const actionGr = m2mOptionAction.action.getRefRecord();\r\n            if (!actionGr.isValidRecord() || !actionGr.active) continue;\r\n            optionDisplayValue = optionDisplayValue || m2mOptionAction ? m2mOptionAction.getDisplayValue('option') : '';\r\n            optionDisplayValue = optionDisplayValue.split('-')[0];\r\n            this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                m2mOptionAction,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n        }\r\n\r\n        const actionGr = new GlideRecordSecure('x_cadso_journey_action');\r\n        actionGr.addEncodedQuery('action_type!=split');\r\n        actionGr.addEncodedQuery('action_typeSTARTSWITHsplit');\r\n        actionGr.query();\r\n\r\n        while (actionGr.next()) {\r\n            const action = this.getAction({\r\n                actions,\r\n                actionsObj,\r\n                actionGr,\r\n                visible: false,\r\n                m2mOptionAction: null,\r\n                actionsCategoryObj,\r\n                optionDisplayValue\r\n            });\r\n            branches[action.actionType] = action;\r\n        }\r\n\r\n        return {\r\n            actions,\r\n            actionsObj,\r\n            branches,\r\n            recordType: optionDisplayValue\r\n        };\r\n    },\r\n\r\n    _fetchVersionBeingEdited: function({\r\n        sysId,\r\n        versionSysIdParams,\r\n        optionSysId,\r\n        getVersion\r\n    }) {\r\n        const journeyVersionGr = new GlideRecordSecure('x_cadso_journey_version');\r\n        let validVersion = false;\r\n        if (!!getVersion && !!versionSysIdParams && journeyVersionGr.get(versionSysIdParams)) {\r\n            validVersion = true;\r\n        } else if (!!getVersion && sysId && sysId !== '-1') {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        } else if (!getVersion) {\r\n            journeyVersionGr.initialize();\r\n            journeyVersionGr.addQuery('journey', sysId);\r\n            journeyVersionGr.orderByDesc('version');\r\n            journeyVersionGr.setLimit(1);\r\n            journeyVersionGr.query();\r\n            if (journeyVersionGr.next()) {\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        const versionSysId = validVersion ? journeyVersionGr.getUniqueValue() : '-1';\r\n        let journeyGr = journeyVersionGr.journey.getRefRecord();\r\n        let description = journeyVersionGr.getDisplayValue('description');\r\n        let shortDescription = journeyVersionGr.getDisplayValue('short_description');\r\n\r\n        if (journeyGr.isValidRecord()) {\r\n            description = description || journeyGr.getDisplayValue('description');\r\n            shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n        } else if (sysId) {\r\n            journeyGr = new GlideRecordSecure('x_cadso_journey_flow');\r\n            if (journeyGr.get(sysId)) {\r\n                description = description || journeyGr.getDisplayValue('description');\r\n                shortDescription = shortDescription || journeyGr.getDisplayValue('name');\r\n                journeyVersionGr.initialize();\r\n                journeyVersionGr.newRecord();\r\n                journeyVersionGr.setValue('short_description', shortDescription);\r\n                journeyVersionGr.setValue('description', description);\r\n                journeyVersionGr.setValue('journey', sysId);\r\n                journeyVersionGr.setValue('option', optionSysId);\r\n                journeyVersionGr.setValue('version', '1');\r\n                journeyVersionGr.insert();\r\n                validVersion = true;\r\n            }\r\n        }\r\n\r\n        return {\r\n            validVersion,\r\n            versionGr: journeyVersionGr,\r\n            versionSysId,\r\n            journey: {\r\n                totalActions: 0,\r\n                totalEndPoints: 0,\r\n                description,\r\n                shortDescription,\r\n                version: journeyVersionGr.getDisplayValue('version'),\r\n                status: {\r\n                    displayValue: journeyVersionGr.getDisplayValue('status'),\r\n                    value: journeyVersionGr.getValue('status')\r\n                },\r\n                published: journeyVersionGr.getDisplayValue('published') === 'true',\r\n                active: journeyVersionGr.getDisplayValue('active') === 'true',\r\n                sysId,\r\n                sys_id: sysId,\r\n                versionSysId,\r\n                enrollmentFrequency: journeyVersionGr.getValue('enrollment_frequency'),\r\n                schedule: {\r\n\t\t\t\t\tdisplayValue: journeyVersionGr.schedule.getDisplayValue(),\r\n\t\t\t\t\tvalue: journeyVersionGr.getValue('schedule')\r\n\t\t\t\t},\r\n                scheduleMode: journeyVersionGr.getValue('schedule_mode'),\r\n                scheduledActivation: journeyVersionGr.getValue('scheduled_activation'),\r\n                scheduledStarDate: journeyVersionGr.getValue('scheduled_start_date'),\r\n                scheduledDeactivation: journeyVersionGr.getValue('scheduled_deactivation'),\r\n                scheduledEndDate: journeyVersionGr.getValue('scheduled_end_date')\r\n            }\r\n        };\r\n    },\r\n\r\n    _fetchTrigger: function({\r\n        versionSysId,\r\n        validVersion,\r\n        triggers,\r\n\t\ttriggerObj,\r\n\t\ttriggersCategoryObj,\r\n\t\toptionSysId\r\n    }) {\r\n        let trigger = {\r\n            valid: false\r\n        };\r\n\r\n        if (!validVersion) {\r\n            return {\r\n                trigger\r\n            };\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', true);\r\n        versionStepGr.query();\r\n\r\n        if (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            const actionGr = versionStepGr.action.getRefRecord();\r\n            if (!actionGr.isValidRecord()) {\r\n                gs.error('Tenon: JourneyBuilderMS - Returned an Version Step without a valid action. [0]', [versionStepGr.getUniqueValue()]);\r\n                return { trigger };\r\n            }\r\n            if (triggerObj[actionSysId]) {\r\n                action = triggerObj[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            trigger = {\r\n                ...step,\r\n                trigger: true\r\n            };\r\n            trigger.items = this._fetchTriggerItems({\r\n                subcategoryQuery: actionGr.getValue('subcategory'),\r\n                optionSysId,\r\n                triggersCategoryObj,\r\n                triggers,\r\n                triggerObj,\r\n                fetchItems: true\r\n            });\r\n        }\r\n\r\n        return {\r\n            trigger\r\n        };\r\n    },\r\n\r\n    _fetchVersionSteps: function({\r\n        versionSysId,\r\n        validVersion,\r\n        trigger,\r\n        actions,\r\n        parent = null,\r\n        steps = [],\r\n        hasSplitParent = false\r\n    }) {\r\n        if (!validVersion) {\r\n            return steps;\r\n        }\r\n\r\n        if (trigger && trigger.value && !parent) {\r\n            steps.push({\r\n                ...trigger,\r\n                hidden: true\r\n            });\r\n        }\r\n\r\n        var versionStepGr = new GlideRecordSecure('x_cadso_journey_version_step');\r\n        versionStepGr.addQuery('version', versionSysId);\r\n        versionStepGr.addQuery('trigger', false);\r\n        if (parent) {\r\n            versionStepGr.addQuery('parents', parent);\r\n        } else {\r\n            versionStepGr.addEncodedQuery('parentsISEMPTY');\r\n        }\r\n        versionStepGr.orderBy('order');\r\n        versionStepGr.query();\r\n\r\n        while (versionStepGr.next()) {\r\n            let action = {};\r\n            const actionSysId = versionStepGr.getValue('action');\r\n            if (actions[actionSysId]) {\r\n                action = actions[actionSysId];\r\n            }\r\n            const {\r\n                step\r\n            } = this.mainAPI.fetchVersionStep({\r\n                versionStepGr,\r\n                action\r\n            });\r\n            if (!step.trigger) {\r\n                step.action = actionSysId;\r\n            }\r\n\r\n            step.order = versionStepGr.getValue('order');\r\n\r\n            if (action.actionType === 'split') {\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: step.items,\r\n                    hasSplitParent: true\r\n                });\r\n                step.items = items;\r\n                steps.push({\r\n                    ...step\r\n                });\r\n            } else {\r\n                let index = -1;\r\n                if (hasSplitParent) {\r\n                    index = steps.push([step]);\r\n                }\r\n                if (!hasSplitParent) {\r\n                    steps.push({\r\n                        ...step\r\n                    });\r\n                }\r\n                const {\r\n                    steps: items = []\r\n                } = this._fetchVersionSteps({\r\n                    versionSysId,\r\n                    validVersion,\r\n                    trigger,\r\n                    actions,\r\n                    parent: versionStepGr.getUniqueValue(),\r\n                    steps: hasSplitParent ? steps[index - 1] : steps,\r\n                    hasSplitParent: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            steps\r\n        };\r\n    },\r\n\r\n    _fetchOption: function({\r\n        optionSysId\r\n    }) {\r\n        var optionGr = new GlideRecordSecure('x_cadso_journey_option');\r\n        let option = {\r\n            action: false,\r\n            description: '',\r\n            displayValue: '',\r\n            value: optionSysId,\r\n            table: ''\r\n        };\r\n        if (optionGr.get(optionSysId)) {\r\n            option = {\r\n                active: optionGr.getDisplayValue('active'),\r\n                description: optionGr.getDisplayValue('description'),\r\n                displayValue: optionGr.getDisplayValue('short_description'),\r\n                table: optionGr.getDisplayValue('table'),\r\n                value: optionSysId,\r\n            };\r\n        }\r\n        return {\r\n            option\r\n        };\r\n    },\r\n\r\n    getAction: function({\r\n        actionsObj,\r\n        actions,\r\n        actionGr,\r\n        m2mOptionAction,\r\n        visible = true,\r\n        actionsCategoryObj,\r\n        optionDisplayValue\r\n    }) {\r\n        const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n        if (!subcategoryGr.isValidRecord()) return;\r\n        const subcategorySysId = subcategoryGr.getUniqueValue();\r\n        if (actionsCategoryObj[subcategorySysId] === undefined) {\r\n            actionsCategoryObj[subcategorySysId] = actions.push({\r\n                displayValue: subcategoryGr.getDisplayValue(),\r\n                value: subcategoryGr.getUniqueValue(),\r\n                description: subcategoryGr.getDisplayValue('description'),\r\n                iconBgColor: subcategoryGr.getDisplayValue('icon_background_color'),\r\n                iconColor: subcategoryGr.getDisplayValue('icon_color'),\r\n                items: [],\r\n            });\r\n        }\r\n\r\n        const actionIndex = actionsCategoryObj[subcategorySysId] - 1;\r\n        let icon = actionGr.getDisplayValue('icon');\r\n        icon = icon ? icon + '' : '';\r\n        let configurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n\r\n        if (m2mOptionAction) {\r\n            const optionGr = m2mOptionAction.option.getRefRecord();\r\n            if (optionGr.isValidRecord()) {\r\n                for (var x = 0; x < configurations.fields.length; x++) {\r\n                    const field = configurations.fields[x];\r\n                    if (field.useOptionTable) {\r\n                        const optionTable = optionGr.getValue('table');\r\n                        if (field.element === 'table') {\r\n                            configurations.fields[x].value = optionTable;\r\n                            configurations.fields[x].displayValue = optionTable;\r\n                        }\r\n                        configurations.fields[x].table = optionTable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const description = (actionGr.getDisplayValue('description') + '').replaceAll(\"{recordType}\", optionDisplayValue + 's');\r\n        const action = {\r\n            displayValue: actionGr.getDisplayValue(),\r\n            description,\r\n            icon,\r\n            iconIsImage: icon.indexOf('.') > -1,\r\n            iconBgColor: actionGr.getDisplayValue('icon_background_color') || actions[actionIndex].iconBgColor,\r\n            iconColor: actionGr.getDisplayValue('icon_color') || actions[actionIndex].iconColor,\r\n            iconType: actionGr.getDisplayValue('icon_type'),\r\n            type: actionGr.getValue('type'),\r\n            actionType: actionGr.getValue('action_type'),\r\n            value: actionGr.getUniqueValue(),\r\n            configurations\r\n        };\r\n\r\n        if (visible) {\r\n            actionsObj[action.value] = action;\r\n            actions[actionIndex].items.push(action);\r\n        }\r\n\r\n        return action;\r\n    },\r\n\r\n    type: 'JourneyBuilderMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_update_name": {
    "value": "sys_script_include_9ffe547587cd9210369f33373cbb35c4",
    "display_value": "sys_script_include_9ffe547587cd9210369f33373cbb35c4"
  },
  "sys_updated_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "api_name": {
    "value": "x_cadso_journey.JourneyBuilderMS",
    "display_value": "x_cadso_journey.JourneyBuilderMS"
  },
  "sys_created_on": {
    "value": "2024-10-05 06:27:44",
    "display_value": "2024-10-04 11:27:44 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "JourneyBuilderMS",
    "display_value": "JourneyBuilderMS"
  },
  "sys_name": {
    "value": "JourneyBuilderMS",
    "display_value": "JourneyBuilderMS"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
