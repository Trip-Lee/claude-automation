{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "9e324677c3c99a10d4ddf1db050131d0",
    "extracted_at": "2025-09-19T21:48:29.200Z",
    "display_value": "JourneyBuilderMainMS",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "100",
    "display_value": "100"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-19 06:55:06",
    "display_value": "2025-03-18 11:55:06 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var JourneyBuilderMainMS = Class.create();\r\nJourneyBuilderMainMS.prototype = {\r\n    initialize: function() {\r\n        this.subcategories = {};\r\n    },\r\n\r\n    fetchVersionStep: function({\r\n        versionStepGr,\r\n        label,\r\n        action\r\n    }) {\r\n        let step = {};\r\n\r\n        const actionGr = versionStepGr.action.getRefRecord();\r\n        if (!actionGr.isValidRecord()) {\r\n            step._error = \"Action not found\";\r\n            return {\r\n                step\r\n            };\r\n        }\r\n\r\n        const subcategorySysId = actionGr.getValue(\"subcategory\") || 'none';\r\n        if (!this.subcategories[subcategorySysId]) {\r\n            const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n            if (subcategoryGr.isValidRecord()) {\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: subcategoryGr.getDisplayValue(\"icon_background_color\"),\r\n                    iconColor: subcategoryGr.getDisplayValue(\"icon_color\"),\r\n                    icon: subcategoryGr.getDisplayValue(\"icon\"),\r\n                };\r\n            } else {\r\n                // Prevents errors on the lines below when we assign these values\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: \"\",\r\n                    iconColor: \"\",\r\n                    icon: '',\r\n                };\r\n            }\r\n        }\r\n\r\n        let iconBgColor =\r\n            actionGr.getDisplayValue(\"icon_background_color\") ||\r\n            this.subcategories[subcategorySysId].iconBgColor;\r\n        let iconColor =\r\n            actionGr.getDisplayValue(\"icon_color\") || this.subcategories[subcategorySysId].iconColor;\r\n\r\n        let icon = actionGr.getDisplayValue(\"icon\");\r\n        icon = icon ? icon + \"\" : \"\";\r\n\r\n        const actionConfigurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        let configurations = versionStepGr.getValue(\"configurations\") ? JSON.parse(versionStepGr.getValue(\"configurations\")) || {} : {};\r\n        if (label) {\r\n            action.label = label;\r\n        }\r\n        step = {\r\n            //valid: true,\r\n            ...action,\r\n            action: action,\r\n            type: action.type,\r\n            displayValue: versionStepGr.getDisplayValue(),\r\n            order: versionStepGr.getDisplayValue('order'),\r\n            actionType: versionStepGr.getValue(\"action_type\") || action.actionType,\r\n            shortDescription: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription || action.name,\r\n            short_description: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription,\r\n            description: versionStepGr.getDisplayValue(\"description\") || action.description,\r\n            icon: icon || action.icon,\r\n            iconIsImage: icon.indexOf(\".\") > -1 || action.iconIsImage,\r\n            iconBgColor: iconBgColor || action.iconBgColor,\r\n            iconColor: iconColor || action.iconColor,\r\n            iconType: actionGr.getDisplayValue(\"icon_type\") || action.iconType,\r\n            value: versionStepGr.getUniqueValue(),\r\n            sys_id: versionStepGr.getUniqueValue(),\r\n            items: [],\r\n            journey: versionStepGr.getValue(\"journey\"),\r\n            trigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n            isTrigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n        };\r\n\r\n        // Look for the key 'fields' on the action's configurations object\r\n        // Map over the array of objects and return a new object with 'displayValue' and 'value'\r\n        // Get the values from the Version Step's configurations object\r\n        // Override label with elements label\r\n        // Assign the new object to the key 'configurations' on the step object\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n        configurations.fields = configurations.fields.map((field) => {\r\n            let {\r\n                element,\r\n                displayValue,\r\n                value\r\n            } = field;\r\n            let newValue = value;\r\n\r\n            if (element) {\r\n                var glideElement = versionStepGr.getElement(element);\r\n                if (glideElement) {\r\n                    var descriptor = glideElement.getED();\r\n                    if (descriptor) {\r\n                        var type = descriptor.getInternalType();\r\n                        if (type === 'boolean' || type === 'true/false') {\r\n                            newValue = newValue === '0' ? false : newValue === '1' ? true : value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...field,\r\n                displayValue,\r\n                value: newValue,\r\n            };\r\n        });\r\n\r\n        step.configurations = configurations;\r\n        step.label = label;\r\n\r\n        if (step.trigger) {\r\n            step.action = {\r\n                ...action,\r\n                configurations\r\n            };\r\n            step.label = \"Trigger\";\r\n            step.title = action.displayValue;\r\n        }\r\n\r\n        return {\r\n            step\r\n        };\r\n    },\r\n\r\n    type: \"JourneyBuilderMainMS\",\r\n};",
    "display_value": "var JourneyBuilderMainMS = Class.create();\r\nJourneyBuilderMainMS.prototype = {\r\n    initialize: function() {\r\n        this.subcategories = {};\r\n    },\r\n\r\n    fetchVersionStep: function({\r\n        versionStepGr,\r\n        label,\r\n        action\r\n    }) {\r\n        let step = {};\r\n\r\n        const actionGr = versionStepGr.action.getRefRecord();\r\n        if (!actionGr.isValidRecord()) {\r\n            step._error = \"Action not found\";\r\n            return {\r\n                step\r\n            };\r\n        }\r\n\r\n        const subcategorySysId = actionGr.getValue(\"subcategory\") || 'none';\r\n        if (!this.subcategories[subcategorySysId]) {\r\n            const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n            if (subcategoryGr.isValidRecord()) {\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: subcategoryGr.getDisplayValue(\"icon_background_color\"),\r\n                    iconColor: subcategoryGr.getDisplayValue(\"icon_color\"),\r\n                    icon: subcategoryGr.getDisplayValue(\"icon\"),\r\n                };\r\n            } else {\r\n                // Prevents errors on the lines below when we assign these values\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: \"\",\r\n                    iconColor: \"\",\r\n                    icon: '',\r\n                };\r\n            }\r\n        }\r\n\r\n        let iconBgColor =\r\n            actionGr.getDisplayValue(\"icon_background_color\") ||\r\n            this.subcategories[subcategorySysId].iconBgColor;\r\n        let iconColor =\r\n            actionGr.getDisplayValue(\"icon_color\") || this.subcategories[subcategorySysId].iconColor;\r\n\r\n        let icon = actionGr.getDisplayValue(\"icon\");\r\n        icon = icon ? icon + \"\" : \"\";\r\n\r\n        const actionConfigurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        let configurations = versionStepGr.getValue(\"configurations\") ? JSON.parse(versionStepGr.getValue(\"configurations\")) || {} : {};\r\n        if (label) {\r\n            action.label = label;\r\n        }\r\n        step = {\r\n            //valid: true,\r\n            ...action,\r\n            action: action,\r\n            type: action.type,\r\n            displayValue: versionStepGr.getDisplayValue(),\r\n            order: versionStepGr.getDisplayValue('order'),\r\n            actionType: versionStepGr.getValue(\"action_type\") || action.actionType,\r\n            shortDescription: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription || action.name,\r\n            short_description: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription,\r\n            description: versionStepGr.getDisplayValue(\"description\") || action.description,\r\n            icon: icon || action.icon,\r\n            iconIsImage: icon.indexOf(\".\") > -1 || action.iconIsImage,\r\n            iconBgColor: iconBgColor || action.iconBgColor,\r\n            iconColor: iconColor || action.iconColor,\r\n            iconType: actionGr.getDisplayValue(\"icon_type\") || action.iconType,\r\n            value: versionStepGr.getUniqueValue(),\r\n            sys_id: versionStepGr.getUniqueValue(),\r\n            items: [],\r\n            journey: versionStepGr.getValue(\"journey\"),\r\n            trigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n            isTrigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n        };\r\n\r\n        // Look for the key 'fields' on the action's configurations object\r\n        // Map over the array of objects and return a new object with 'displayValue' and 'value'\r\n        // Get the values from the Version Step's configurations object\r\n        // Override label with elements label\r\n        // Assign the new object to the key 'configurations' on the step object\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n        configurations.fields = configurations.fields.map((field) => {\r\n            let {\r\n                element,\r\n                displayValue,\r\n                value\r\n            } = field;\r\n            let newValue = value;\r\n\r\n            if (element) {\r\n                var glideElement = versionStepGr.getElement(element);\r\n                if (glideElement) {\r\n                    var descriptor = glideElement.getED();\r\n                    if (descriptor) {\r\n                        var type = descriptor.getInternalType();\r\n                        if (type === 'boolean' || type === 'true/false') {\r\n                            newValue = newValue === '0' ? false : newValue === '1' ? true : value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...field,\r\n                displayValue,\r\n                value: newValue,\r\n            };\r\n        });\r\n\r\n        step.configurations = configurations;\r\n        step.label = label;\r\n\r\n        if (step.trigger) {\r\n            step.action = {\r\n                ...action,\r\n                configurations\r\n            };\r\n            step.label = \"Trigger\";\r\n            step.title = action.displayValue;\r\n        }\r\n\r\n        return {\r\n            step\r\n        };\r\n    },\r\n\r\n    type: \"JourneyBuilderMainMS\",\r\n};",
    "formatted_script": {
      "line_count": 150,
      "char_count": 5694,
      "preview": "var JourneyBuilderMainMS = Class.create();\r\nJourneyBuilderMainMS.prototype = {\r\n    initialize: function() {\r\n        this.subcategories = {};\r\n    },\r\n\r\n    fetchVersionStep: function({\r\n        vers...",
      "full_script": "var JourneyBuilderMainMS = Class.create();\r\nJourneyBuilderMainMS.prototype = {\r\n    initialize: function() {\r\n        this.subcategories = {};\r\n    },\r\n\r\n    fetchVersionStep: function({\r\n        versionStepGr,\r\n        label,\r\n        action\r\n    }) {\r\n        let step = {};\r\n\r\n        const actionGr = versionStepGr.action.getRefRecord();\r\n        if (!actionGr.isValidRecord()) {\r\n            step._error = \"Action not found\";\r\n            return {\r\n                step\r\n            };\r\n        }\r\n\r\n        const subcategorySysId = actionGr.getValue(\"subcategory\") || 'none';\r\n        if (!this.subcategories[subcategorySysId]) {\r\n            const subcategoryGr = actionGr.subcategory.getRefRecord();\r\n            if (subcategoryGr.isValidRecord()) {\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: subcategoryGr.getDisplayValue(\"icon_background_color\"),\r\n                    iconColor: subcategoryGr.getDisplayValue(\"icon_color\"),\r\n                    icon: subcategoryGr.getDisplayValue(\"icon\"),\r\n                };\r\n            } else {\r\n                // Prevents errors on the lines below when we assign these values\r\n                this.subcategories[subcategorySysId] = {\r\n                    iconBgColor: \"\",\r\n                    iconColor: \"\",\r\n                    icon: '',\r\n                };\r\n            }\r\n        }\r\n\r\n        let iconBgColor =\r\n            actionGr.getDisplayValue(\"icon_background_color\") ||\r\n            this.subcategories[subcategorySysId].iconBgColor;\r\n        let iconColor =\r\n            actionGr.getDisplayValue(\"icon_color\") || this.subcategories[subcategorySysId].iconColor;\r\n\r\n        let icon = actionGr.getDisplayValue(\"icon\");\r\n        icon = icon ? icon + \"\" : \"\";\r\n\r\n        const actionConfigurations = actionGr.getValue(\"configurations\") ? JSON.parse(actionGr.getValue(\"configurations\")) || {} : {};\r\n        let configurations = versionStepGr.getValue(\"configurations\") ? JSON.parse(versionStepGr.getValue(\"configurations\")) || {} : {};\r\n        if (label) {\r\n            action.label = label;\r\n        }\r\n        step = {\r\n            //valid: true,\r\n            ...action,\r\n            action: action,\r\n            type: action.type,\r\n            displayValue: versionStepGr.getDisplayValue(),\r\n            order: versionStepGr.getDisplayValue('order'),\r\n            actionType: versionStepGr.getValue(\"action_type\") || action.actionType,\r\n            shortDescription: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription || action.name,\r\n            short_description: versionStepGr.getDisplayValue(\"short_description\") || action.shortDescription,\r\n            description: versionStepGr.getDisplayValue(\"description\") || action.description,\r\n            icon: icon || action.icon,\r\n            iconIsImage: icon.indexOf(\".\") > -1 || action.iconIsImage,\r\n            iconBgColor: iconBgColor || action.iconBgColor,\r\n            iconColor: iconColor || action.iconColor,\r\n            iconType: actionGr.getDisplayValue(\"icon_type\") || action.iconType,\r\n            value: versionStepGr.getUniqueValue(),\r\n            sys_id: versionStepGr.getUniqueValue(),\r\n            items: [],\r\n            journey: versionStepGr.getValue(\"journey\"),\r\n            trigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n            isTrigger: actionGr.getDisplayValue(\"trigger\") === \"true\",\r\n        };\r\n\r\n        // Look for the key 'fields' on the action's configurations object\r\n        // Map over the array of objects and return a new object with 'displayValue' and 'value'\r\n        // Get the values from the Version Step's configurations object\r\n        // Override label with elements label\r\n        // Assign the new object to the key 'configurations' on the step object\r\n        try {\r\n            if (!configurations) {\r\n                configurations = {\r\n                    valid: true,\r\n                    fields: []\r\n                };\r\n            } else {\r\n                configurations.valid = true;\r\n            }\r\n\r\n            if (!configurations.fields) {\r\n                configurations.fields = [];\r\n            }\r\n        } catch (e) {\r\n            configurations = {\r\n                valid: false,\r\n                _error: \"Not a valid object\",\r\n                fields: []\r\n            };\r\n        }\r\n        configurations.fields = configurations.fields.map((field) => {\r\n            let {\r\n                element,\r\n                displayValue,\r\n                value\r\n            } = field;\r\n            let newValue = value;\r\n\r\n            if (element) {\r\n                var glideElement = versionStepGr.getElement(element);\r\n                if (glideElement) {\r\n                    var descriptor = glideElement.getED();\r\n                    if (descriptor) {\r\n                        var type = descriptor.getInternalType();\r\n                        if (type === 'boolean' || type === 'true/false') {\r\n                            newValue = newValue === '0' ? false : newValue === '1' ? true : value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...field,\r\n                displayValue,\r\n                value: newValue,\r\n            };\r\n        });\r\n\r\n        step.configurations = configurations;\r\n        step.label = label;\r\n\r\n        if (step.trigger) {\r\n            step.action = {\r\n                ...action,\r\n                configurations\r\n            };\r\n            step.label = \"Trigger\";\r\n            step.title = action.displayValue;\r\n        }\r\n\r\n        return {\r\n            step\r\n        };\r\n    },\r\n\r\n    type: \"JourneyBuilderMainMS\",\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_update_name": {
    "value": "sys_script_include_9e324677c3c99a10d4ddf1db050131d0",
    "display_value": "sys_script_include_9e324677c3c99a10d4ddf1db050131d0"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_journey.JourneyBuilderMainMS",
    "display_value": "x_cadso_journey.JourneyBuilderMainMS"
  },
  "sys_created_on": {
    "value": "2024-10-11 18:47:48",
    "display_value": "2024-10-11 11:47:48 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "JourneyBuilderMainMS",
    "display_value": "JourneyBuilderMainMS"
  },
  "sys_name": {
    "value": "JourneyBuilderMainMS",
    "display_value": "JourneyBuilderMainMS"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
