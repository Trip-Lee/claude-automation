{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "674a2742c3922210d4ddf1db05013193",
    "extracted_at": "2025-09-19T21:48:28.792Z",
    "display_value": "UIListFieldsApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "4",
    "display_value": "4"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-06-24 16:20:16",
    "display_value": "2025-06-24 09:20:16 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var UIListFieldsApiMS = Class.create();\r\nUIListFieldsApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.view = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.fields = [];\r\n\t\tthis.lazyLoads = 0;\r\n\t\tthis.groupBy = '';\r\n\t\tthis.orderAsc = false;\r\n\t\tthis.sortedColumn = '';\r\n\t\tthis.limit = 0;\r\n\t\tthis.getFields = false;\r\n\t\tthis.count = 0;\r\n\t\tthis.requiredFields = [];\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.types = {};\r\n\t\tthis.maxLength = {};\r\n\t\tthis.refTables = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.refColors = {};\r\n\t\tthis.fullWindow = false;\r\n\t\tthis.startWindow = 0;\r\n\t\tthis.endWindow = 0;\r\n\t\tthis.maxRecordCount = 0;\r\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\r\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\r\n\t\tthis.toggleFields = [];\r\n\t\tthis.avatarUtils = new x_cadso_core.AvatarUtils();\r\n\t},\r\n\r\n\tgetColorsForField: function(field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === 'priority' || field === 'state';\r\n\t},\r\n\r\n\tgetWindowCounts: function() {\r\n\t\tlet limit = parseInt(this.limit);\r\n\t\tlet lazyLoads = parseInt(this.lazyLoads);\r\n\t\tconst lazyLoadPlusOne = parseInt(lazyLoads + 1);\r\n\t\tlet start = parseInt(limit * lazyLoads);\r\n\t\tlet end = parseInt(limit * lazyLoadPlusOne);\r\n\r\n\t\tif (this.fullWindow) {\r\n\t\t\tstart = this.startWindow;\r\n\t\t\tend = this.endWindow;\r\n\t\t}\r\n\t\treturn { start, end };\r\n\t},\r\n\r\n\tgetColor: function(field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif(GR.get(sys_id))\r\n\t\t{\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetRefColor: function({tableGr, element, colorField, value}) {\r\n\t\tvar color = '';\r\n\t\tif (value && !this.refColors[value]) {\r\n\t\t\tvar refTableGr = tableGr[element].getRefRecord();\r\n\t\t\tif (refTableGr.isValidRecord()) {\r\n\t\t\t\tcolor = refTableGr.getValue(colorField);\r\n\t\t\t\tthis.refColors[value] = color;\r\n\t\t\t}\r\n\t\t} else if (this.refColors[value]) {\r\n\t\t\tcolor = this.refColors[value];\r\n\t\t}\r\n\t\treturn color;\r\n\t},\r\n\r\n\tgetList: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, view, query, lazyLoads = 0, groupBy, orderAsc, sortedColumn, limit = 10, fields = [], requiredFields = '', startWindow = 0, endWindow = 0, improvedAvatar = false } = queryParams;\r\n\r\n\t\tthis.table = table.toString();\r\n\t\tthis.startWindow = startWindow;\r\n\t\tthis.endWindow = endWindow;\r\n\t\tthis.requiredFields = (requiredFields + '').split(',') || [];\r\n\t\tthis.view = view + '';\r\n\t\tthis.query = query;\r\n\t\tthis.lazyLoads = parseInt(lazyLoads);\r\n\t\tthis.groupBy = groupBy;\r\n\t\tthis.orderAsc = orderAsc;\r\n\t\tthis.sortedColumn = sortedColumn;\r\n\t\tthis.limit = parseInt(limit);\r\n\t\tthis.fields = fields;\r\n\t\tthis.getFields = !this.fields.length;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\titems: {},\r\n\t\t\tlabels: [],\r\n\t\t\tfields: [], \r\n\t\t\tdropDownData: [],\r\n\t\t\tsortedColumn\r\n\t\t};\r\n\r\n\t\tif (this.getFields) {\r\n\t\t\tthis._getListView();\r\n\t\t}\r\n\r\n\t\tdata.currentUser = gs.getUserName();\r\n\t\tdata.items = this._getList({ improvedAvatar });\r\n\t\tdata.labels = this.labels;\r\n\t\tdata.fullWindow = this.fullWindow;\r\n\t\tdata.fields = this.fields;\r\n\t\tdata.query = this.query;\r\n\t\tdata.count = this.count;\r\n\t\tdata.window = this.getWindowCounts();\r\n\t\tvar isList = true;\r\n\t\tdata.dropDownData = new x_cadso_work.GetTableDropdownsData().getData(this.table, true);\r\n\t\tdata.dateTimeFormat = this.dateTimeFormat;\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getList: function({ improvedAvatar = false }) {\r\n\t\tgs.info(\"TO: debug - \" + this.table)\r\n\t\tthis.getColorsForField(''); // initialize\r\n\t\tconst { start, end } = this.getWindowCounts();\r\n\t\tlet nonSecurelistGr = new GlideRecord(this.table);\r\n\t\tlet listGr = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.table === 'sysapproval_approver') {\r\n\t\t\tlistGr = new GlideRecord(this.table);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistGr.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc && typeof this.orderAsc !== 'string' && this.orderAsc.length) {\r\n\t\t\tthis.orderAsc = this.orderAsc[0];\r\n\t\t}\r\n\r\n\t\tif (this.sortedColumn && typeof this.sortedColumn !== 'string' && this.sortedColumn.length) {\r\n\t\t\tthis.sortedColumn = this.sortedColumn[0];\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc === true || this.orderAsc === \"true\") {\r\n\t\t\tlistGr.orderBy(this.sortedColumn);\r\n\t\t} else if (this.sortedColumn) {\r\n\t\t\tlistGr.orderByDesc(this.sortedColumn);\r\n\t\t}\r\n\t\t// listGr.orderBy('short_description');\r\n\r\n\t\tlistGr.chooseWindow(start, end);\t\t\r\n\t\tlistGr.query();\r\n\t\t\r\n\t\t// this.maxRecordCount = this.countTotalRecords();\r\n\t\tvar tenonTimeApi = new TenonTime();\r\n\t\tconst formatOfDateTime = tenonTimeApi.getFormat();\r\n\t\tconst refTablesForExtendedFields = {};\r\n\t\r\n\t\t//This will exclude certain fields when we get all the data for each field. \r\n\t\tvar fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\r\n\t\tlet runTimeError = false;\r\n\t\tif (this.getFields) {\r\n\t\t\tthis.labels = this.fields.filter((element) => !!element && element !== 'null' && element !== 'undefined').map((element) => {\r\n\t\t\t\tif(!element) return;\r\n\r\n\t\t\t\tlet elementListGr = nonSecurelistGr;\r\n\r\n\t\t\t\tlet elm = null;\r\n\r\n\t\t\t\t// SH - do we need this element.indexof? fields is being updated in _getListView\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length == 2) {\r\n\t\t\t\t\t\tvar baselineElement = splitElement[0];\r\n\r\n\t\t\t\t\t\tif (!elementListGr.isValidField(baselineElement)) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not Valid. {0}', [element]);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\telm = elementListGr.getElement(baselineElement);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar _refTable = elm.getReferenceTable();\r\n\t\t\t\t\t\t\tif (!refTablesForExtendedFields[_refTable]) {\r\n\t\t\t\t\t\t\t\trefTablesForExtendedFields[_refTable] = new GlideRecord(_refTable);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telementListGr = refTablesForExtendedFields[_refTable];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not A Valid Reference Field. {0}', [element]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvar label = {};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst elementDescriptor = elm.getED();\r\n\t\t\t\t\tthis.maxLength[element] = elementDescriptor.getLength();\r\n\t\t\t\t\tthis.types[element] = elementDescriptor.getInternalType();\r\n\t\t\t\t\tconst type = this.types[element];\r\n\t\t\t\t\tconst isChoice = elementDescriptor.isChoiceTable();\r\n\t\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || '';\r\n\t\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table);\r\n\t\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\t\t\t\t\tlet fieldLabel = elm.getLabel();\r\n\t\t\t\t\t\r\n\t\t\t\t\tlabel = {\r\n\t\t\t\t\t\tdisplay_value: fieldLabel,\r\n\t\t\t\t\t\tvalue: element,\r\n\t\t\t\t\t\tpluralLabel: elementDescriptor.getPlural(),\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tcanWrite: elementListGr[element].canWrite(),\r\n\t\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolors: false,\r\n\t\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t\t\treferences: [],\r\n\t\t\t\t\t\tchoices: [],\r\n\t\t\t\t\t\tisToggle: this.toggleFields.includes(element)\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\t\tlabel.colors = this.colors[element];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ('glide_date_time,glide_time,due_date'.indexOf(type) > -1) {\r\n\t\t\t\t\t\tlabel.format = formatOfDateTime;\r\n\t\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\t\tthis.refTables[element] = elm.getReferenceTable();\r\n\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\tif (!label.icon) {\r\n\t\t\t\t\t\t\tlabel.icon = this.colors.icons[label.refTable] || '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\t\tvar glideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\tglideListDictGr.addQuery('name', this.table);\r\n\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!label.refTable) {\r\n\t\t\t\t\t\t\tglideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('name', 'task');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\trunTimeError = true;\r\n\t\t\t\t\tgs.error('Tenon List API Error: Table \"{0}\" does not have field \"{1}\" in the view \"{2}\"', [this.table, element, this.view]);\r\n\t\t\t\t\tgs.error(e)\r\n\t\t\t\t\tlabel = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn label;\r\n\r\n\t\t\t}, this);\r\n\r\n\t\t\tif (runTimeError) {\r\n\t\t\t\tthis.labels = this.labels.filter((element) => !!element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst items = [];\r\n\r\n\t\tconst refRecordGrs = {};\r\n\t\tconst combinedFields = this.fields.concat(this.requiredFields.filter((item) => this.fields.indexOf(item) < 0));\r\n\t\t\r\n\t\t\r\n\t\twhile (listGr.next()) {\r\n\t\t\t\r\n\t\t\tconst item = {\r\n\t\t\t\tcanWrite: listGr.canWrite(),\r\n\t\t\t\tcanRead: listGr.canRead(),\r\n\t\t\t\tcanCreate: listGr.canCreate(),\r\n\t\t\t\tcanDelete: listGr.canDelete(),\r\n\t\t\t};\r\n\t\t\tthis.count++;\r\n\t\t\tcombinedFields.filter((element) => !!element && element !== 'null' && element !== 'undefined').forEach((element) => {\r\n\r\n\t\t\t\tlet fieldGr = listGr;\r\n\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length) {\r\n\t\t\t\t\t\tvar f = splitElement[0];\r\n\t\t\t\t\t\tif (!listGr.isValidField(f)) return;\r\n\t\t\t\t\t\tvar refRecordSysId = listGr.getValue(f);\r\n\t\t\t\t\t\tif (!refRecordGrs[refRecordSysId]) {\r\n\t\t\t\t\t\t\trefRecordGrs[refRecordSysId] = listGr[f].getRefRecord();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (refRecordGrs[refRecordSysId].isValidRecord()) {\r\n\t\t\t\t\t\t\tfieldGr = refRecordGrs[refRecordSysId];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Record is not valid on field {0} for record {1} on table {2} because of the reference record.', [element, listGr.getUniqueValue(), this.table]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table, listGr.getUniqueValue());\r\n\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\r\n\t\t\t\tconst type = this.types[element];\r\n\t\t\t\tlet displayValue = fieldGr.getDisplayValue(element);\r\n\t\t\t\tif (type === 'due_date' && displayValue === 'UNKNOWN') {\r\n\t\t\t\t\tdisplayValue = '';\r\n\t\t\t\t} else if (displayValue) {\r\n\t\t\t\t\t// \t\t\t\t\tdisplayValue = 'glide_date_time,due_date'.indexOf(type) > -1 ? tenonTimeApi.format(displayValue) : displayValue;\r\n\t\t\t\t}\r\n\t\t\t\tconst value = fieldGr.getValue(element);\r\n\r\n\t\t\t\titem[element] = {\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tdisplay_value: displayValue,\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\ticon: false,\r\n\t\t\t\t\tcolor: false,\r\n\t\t\t\t\tclassName: false,\r\n\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\titem[element].canWrite = listGr[element].canWrite() || false;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\titem[element].canWrite = false;\r\n\t\t\t\t\titem[element]._error = 'Field is not on listGr: ' + element;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\r\n\t\t\t\tif (fetchColors && type !== 'reference') {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (type === 'boolean' && item[element] && item[element].display_value) {\r\n\t\t\t\t\tvar str = item[element].display_value;\r\n\t\t\t\t\titem[element].display_value = str.charAt(0).toUpperCase() + str.slice(1);\r\n\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\tif (!item[element]) {\r\n\t\t\t\t\t\titem[element] = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\r\n\t\t\t\t\tif (!improvedAvatar && type === 'reference' && refTable === 'sys_user') {\r\n\t\t\t\t\t\tif (item[element] && item[element].value) {\r\n\t\t\t\t\t\t\titem[element].avatar = this._getCachedAvatar({ userSysId: item[element].value, recordGr: fieldGr, fieldName: element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (improvedAvatar && type === 'reference') {\r\n\t\t\t\t\t\tif (refTable === 'sys_user') {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userSysId: item[element].value });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ tableGr: fieldGr, element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\t\t\t\t} else if (improvedAvatar && (element === 'sys_created_by' || element === 'sys_updated_by')) {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userName: item[element].value });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst refTable = this.refTables[element];\r\n\r\n\t\t\t\tif ('x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign'.indexOf(refTable) > -1 && type !== \"glide_list\") {\r\n\t\t\t\t\tlet colorField = refTable === 'x_cadso_work_status' ? 'color' : 'glyph_color';\r\n\t\t\t\t\tvar color = this.getRefColor({tableGr: fieldGr, element, colorField, value});\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t} else if (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\titem.sys_id = {\r\n\t\t\t\tvalue: listGr.getUniqueValue(),\r\n\t\t\t\tdisplay_value: listGr.getUniqueValue()\r\n\t\t\t};\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t\t\r\n\t\tgs.info(\"listGr items length \" + items.length);\r\n\t\treturn items;\r\n\t},\r\n\r\n\t_getCachedAvatar: function({ userSysId, recordGr, fieldName }) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\t_getListView: function() {\r\n\t\tvar sysUiViewGr = new GlideRecord('sys_ui_view');\r\n\t\tsysUiViewGr.addEncodedQuery(`name=NULL^ORname=${this.view}^ORDERBYDESCname`);\r\n\t\tsysUiViewGr.setLimit(1);\r\n\t\tsysUiViewGr.query();\r\n\r\n\t\tgs.info()\r\n\t\twhile (sysUiViewGr.next()) {\r\n\t\t\tgs.info()\r\n\t\t\tvar sysUiListGr = new GlideRecord('sys_ui_list');\r\n\t\t\tsysUiListGr.addQuery('name', this.table);\r\n\t\t\tsysUiListGr.addQuery('view', sysUiViewGr.getUniqueValue());\r\n\t\t\tsysUiListGr.addEncodedQuery('sys_user=NULL'); // ^ORsys_userDYNAMIC90d1921e5f510100a9ad2572f2b477fe'); // This gets the users configuration but disabled for now\r\n\t\t\tsysUiListGr.orderByDesc('sys_user');\r\n\t\t\tsysUiListGr.setLimit(1);\r\n\t\t\tsysUiListGr.query();\r\n\r\n\t\t\twhile (sysUiListGr.next()) {\r\n\t\t\t\tvar sysUiListElement = new GlideRecord('sys_ui_list_element');\r\n\t\t\t\tsysUiListElement.addQuery('list_id', sysUiListGr.getUniqueValue());\r\n\t\t\t\tsysUiListElement.orderBy('position');\r\n\t\t\t\tsysUiListElement.query();\r\n\r\n\t\t\t\twhile (sysUiListElement.next()) {\r\n\t\t\t\t\tthis.fields.push(sysUiListElement.getValue('element'));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tcountTotalRecords: function() {\r\n\t\tvar count = 0;\r\n\t\tvar listAgg = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistAgg.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tlistAgg.query();\r\n\r\n\t\twhile (listAgg.next()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t},\r\n\r\n\ttype: 'UIListFieldsApiMS'\r\n};",
    "display_value": "var UIListFieldsApiMS = Class.create();\r\nUIListFieldsApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.view = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.fields = [];\r\n\t\tthis.lazyLoads = 0;\r\n\t\tthis.groupBy = '';\r\n\t\tthis.orderAsc = false;\r\n\t\tthis.sortedColumn = '';\r\n\t\tthis.limit = 0;\r\n\t\tthis.getFields = false;\r\n\t\tthis.count = 0;\r\n\t\tthis.requiredFields = [];\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.types = {};\r\n\t\tthis.maxLength = {};\r\n\t\tthis.refTables = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.refColors = {};\r\n\t\tthis.fullWindow = false;\r\n\t\tthis.startWindow = 0;\r\n\t\tthis.endWindow = 0;\r\n\t\tthis.maxRecordCount = 0;\r\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\r\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\r\n\t\tthis.toggleFields = [];\r\n\t\tthis.avatarUtils = new x_cadso_core.AvatarUtils();\r\n\t},\r\n\r\n\tgetColorsForField: function(field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === 'priority' || field === 'state';\r\n\t},\r\n\r\n\tgetWindowCounts: function() {\r\n\t\tlet limit = parseInt(this.limit);\r\n\t\tlet lazyLoads = parseInt(this.lazyLoads);\r\n\t\tconst lazyLoadPlusOne = parseInt(lazyLoads + 1);\r\n\t\tlet start = parseInt(limit * lazyLoads);\r\n\t\tlet end = parseInt(limit * lazyLoadPlusOne);\r\n\r\n\t\tif (this.fullWindow) {\r\n\t\t\tstart = this.startWindow;\r\n\t\t\tend = this.endWindow;\r\n\t\t}\r\n\t\treturn { start, end };\r\n\t},\r\n\r\n\tgetColor: function(field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif(GR.get(sys_id))\r\n\t\t{\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetRefColor: function({tableGr, element, colorField, value}) {\r\n\t\tvar color = '';\r\n\t\tif (value && !this.refColors[value]) {\r\n\t\t\tvar refTableGr = tableGr[element].getRefRecord();\r\n\t\t\tif (refTableGr.isValidRecord()) {\r\n\t\t\t\tcolor = refTableGr.getValue(colorField);\r\n\t\t\t\tthis.refColors[value] = color;\r\n\t\t\t}\r\n\t\t} else if (this.refColors[value]) {\r\n\t\t\tcolor = this.refColors[value];\r\n\t\t}\r\n\t\treturn color;\r\n\t},\r\n\r\n\tgetList: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, view, query, lazyLoads = 0, groupBy, orderAsc, sortedColumn, limit = 10, fields = [], requiredFields = '', startWindow = 0, endWindow = 0, improvedAvatar = false } = queryParams;\r\n\r\n\t\tthis.table = table.toString();\r\n\t\tthis.startWindow = startWindow;\r\n\t\tthis.endWindow = endWindow;\r\n\t\tthis.requiredFields = (requiredFields + '').split(',') || [];\r\n\t\tthis.view = view + '';\r\n\t\tthis.query = query;\r\n\t\tthis.lazyLoads = parseInt(lazyLoads);\r\n\t\tthis.groupBy = groupBy;\r\n\t\tthis.orderAsc = orderAsc;\r\n\t\tthis.sortedColumn = sortedColumn;\r\n\t\tthis.limit = parseInt(limit);\r\n\t\tthis.fields = fields;\r\n\t\tthis.getFields = !this.fields.length;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\titems: {},\r\n\t\t\tlabels: [],\r\n\t\t\tfields: [], \r\n\t\t\tdropDownData: [],\r\n\t\t\tsortedColumn\r\n\t\t};\r\n\r\n\t\tif (this.getFields) {\r\n\t\t\tthis._getListView();\r\n\t\t}\r\n\r\n\t\tdata.currentUser = gs.getUserName();\r\n\t\tdata.items = this._getList({ improvedAvatar });\r\n\t\tdata.labels = this.labels;\r\n\t\tdata.fullWindow = this.fullWindow;\r\n\t\tdata.fields = this.fields;\r\n\t\tdata.query = this.query;\r\n\t\tdata.count = this.count;\r\n\t\tdata.window = this.getWindowCounts();\r\n\t\tvar isList = true;\r\n\t\tdata.dropDownData = new x_cadso_work.GetTableDropdownsData().getData(this.table, true);\r\n\t\tdata.dateTimeFormat = this.dateTimeFormat;\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getList: function({ improvedAvatar = false }) {\r\n\t\tgs.info(\"TO: debug - \" + this.table)\r\n\t\tthis.getColorsForField(''); // initialize\r\n\t\tconst { start, end } = this.getWindowCounts();\r\n\t\tlet nonSecurelistGr = new GlideRecord(this.table);\r\n\t\tlet listGr = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.table === 'sysapproval_approver') {\r\n\t\t\tlistGr = new GlideRecord(this.table);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistGr.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc && typeof this.orderAsc !== 'string' && this.orderAsc.length) {\r\n\t\t\tthis.orderAsc = this.orderAsc[0];\r\n\t\t}\r\n\r\n\t\tif (this.sortedColumn && typeof this.sortedColumn !== 'string' && this.sortedColumn.length) {\r\n\t\t\tthis.sortedColumn = this.sortedColumn[0];\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc === true || this.orderAsc === \"true\") {\r\n\t\t\tlistGr.orderBy(this.sortedColumn);\r\n\t\t} else if (this.sortedColumn) {\r\n\t\t\tlistGr.orderByDesc(this.sortedColumn);\r\n\t\t}\r\n\t\t// listGr.orderBy('short_description');\r\n\r\n\t\tlistGr.chooseWindow(start, end);\t\t\r\n\t\tlistGr.query();\r\n\t\t\r\n\t\t// this.maxRecordCount = this.countTotalRecords();\r\n\t\tvar tenonTimeApi = new TenonTime();\r\n\t\tconst formatOfDateTime = tenonTimeApi.getFormat();\r\n\t\tconst refTablesForExtendedFields = {};\r\n\t\r\n\t\t//This will exclude certain fields when we get all the data for each field. \r\n\t\tvar fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\r\n\t\tlet runTimeError = false;\r\n\t\tif (this.getFields) {\r\n\t\t\tthis.labels = this.fields.filter((element) => !!element && element !== 'null' && element !== 'undefined').map((element) => {\r\n\t\t\t\tif(!element) return;\r\n\r\n\t\t\t\tlet elementListGr = nonSecurelistGr;\r\n\r\n\t\t\t\tlet elm = null;\r\n\r\n\t\t\t\t// SH - do we need this element.indexof? fields is being updated in _getListView\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length == 2) {\r\n\t\t\t\t\t\tvar baselineElement = splitElement[0];\r\n\r\n\t\t\t\t\t\tif (!elementListGr.isValidField(baselineElement)) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not Valid. {0}', [element]);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\telm = elementListGr.getElement(baselineElement);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar _refTable = elm.getReferenceTable();\r\n\t\t\t\t\t\t\tif (!refTablesForExtendedFields[_refTable]) {\r\n\t\t\t\t\t\t\t\trefTablesForExtendedFields[_refTable] = new GlideRecord(_refTable);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telementListGr = refTablesForExtendedFields[_refTable];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not A Valid Reference Field. {0}', [element]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvar label = {};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst elementDescriptor = elm.getED();\r\n\t\t\t\t\tthis.maxLength[element] = elementDescriptor.getLength();\r\n\t\t\t\t\tthis.types[element] = elementDescriptor.getInternalType();\r\n\t\t\t\t\tconst type = this.types[element];\r\n\t\t\t\t\tconst isChoice = elementDescriptor.isChoiceTable();\r\n\t\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || '';\r\n\t\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table);\r\n\t\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\t\t\t\t\tlet fieldLabel = elm.getLabel();\r\n\t\t\t\t\t\r\n\t\t\t\t\tlabel = {\r\n\t\t\t\t\t\tdisplay_value: fieldLabel,\r\n\t\t\t\t\t\tvalue: element,\r\n\t\t\t\t\t\tpluralLabel: elementDescriptor.getPlural(),\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tcanWrite: elementListGr[element].canWrite(),\r\n\t\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolors: false,\r\n\t\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t\t\treferences: [],\r\n\t\t\t\t\t\tchoices: [],\r\n\t\t\t\t\t\tisToggle: this.toggleFields.includes(element)\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\t\tlabel.colors = this.colors[element];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ('glide_date_time,glide_time,due_date'.indexOf(type) > -1) {\r\n\t\t\t\t\t\tlabel.format = formatOfDateTime;\r\n\t\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\t\tthis.refTables[element] = elm.getReferenceTable();\r\n\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\tif (!label.icon) {\r\n\t\t\t\t\t\t\tlabel.icon = this.colors.icons[label.refTable] || '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\t\tvar glideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\tglideListDictGr.addQuery('name', this.table);\r\n\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!label.refTable) {\r\n\t\t\t\t\t\t\tglideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('name', 'task');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\trunTimeError = true;\r\n\t\t\t\t\tgs.error('Tenon List API Error: Table \"{0}\" does not have field \"{1}\" in the view \"{2}\"', [this.table, element, this.view]);\r\n\t\t\t\t\tgs.error(e)\r\n\t\t\t\t\tlabel = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn label;\r\n\r\n\t\t\t}, this);\r\n\r\n\t\t\tif (runTimeError) {\r\n\t\t\t\tthis.labels = this.labels.filter((element) => !!element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst items = [];\r\n\r\n\t\tconst refRecordGrs = {};\r\n\t\tconst combinedFields = this.fields.concat(this.requiredFields.filter((item) => this.fields.indexOf(item) < 0));\r\n\t\t\r\n\t\t\r\n\t\twhile (listGr.next()) {\r\n\t\t\t\r\n\t\t\tconst item = {\r\n\t\t\t\tcanWrite: listGr.canWrite(),\r\n\t\t\t\tcanRead: listGr.canRead(),\r\n\t\t\t\tcanCreate: listGr.canCreate(),\r\n\t\t\t\tcanDelete: listGr.canDelete(),\r\n\t\t\t};\r\n\t\t\tthis.count++;\r\n\t\t\tcombinedFields.filter((element) => !!element && element !== 'null' && element !== 'undefined').forEach((element) => {\r\n\r\n\t\t\t\tlet fieldGr = listGr;\r\n\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length) {\r\n\t\t\t\t\t\tvar f = splitElement[0];\r\n\t\t\t\t\t\tif (!listGr.isValidField(f)) return;\r\n\t\t\t\t\t\tvar refRecordSysId = listGr.getValue(f);\r\n\t\t\t\t\t\tif (!refRecordGrs[refRecordSysId]) {\r\n\t\t\t\t\t\t\trefRecordGrs[refRecordSysId] = listGr[f].getRefRecord();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (refRecordGrs[refRecordSysId].isValidRecord()) {\r\n\t\t\t\t\t\t\tfieldGr = refRecordGrs[refRecordSysId];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Record is not valid on field {0} for record {1} on table {2} because of the reference record.', [element, listGr.getUniqueValue(), this.table]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table, listGr.getUniqueValue());\r\n\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\r\n\t\t\t\tconst type = this.types[element];\r\n\t\t\t\tlet displayValue = fieldGr.getDisplayValue(element);\r\n\t\t\t\tif (type === 'due_date' && displayValue === 'UNKNOWN') {\r\n\t\t\t\t\tdisplayValue = '';\r\n\t\t\t\t} else if (displayValue) {\r\n\t\t\t\t\t// \t\t\t\t\tdisplayValue = 'glide_date_time,due_date'.indexOf(type) > -1 ? tenonTimeApi.format(displayValue) : displayValue;\r\n\t\t\t\t}\r\n\t\t\t\tconst value = fieldGr.getValue(element);\r\n\r\n\t\t\t\titem[element] = {\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tdisplay_value: displayValue,\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\ticon: false,\r\n\t\t\t\t\tcolor: false,\r\n\t\t\t\t\tclassName: false,\r\n\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\titem[element].canWrite = listGr[element].canWrite() || false;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\titem[element].canWrite = false;\r\n\t\t\t\t\titem[element]._error = 'Field is not on listGr: ' + element;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\r\n\t\t\t\tif (fetchColors && type !== 'reference') {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (type === 'boolean' && item[element] && item[element].display_value) {\r\n\t\t\t\t\tvar str = item[element].display_value;\r\n\t\t\t\t\titem[element].display_value = str.charAt(0).toUpperCase() + str.slice(1);\r\n\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\tif (!item[element]) {\r\n\t\t\t\t\t\titem[element] = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\r\n\t\t\t\t\tif (!improvedAvatar && type === 'reference' && refTable === 'sys_user') {\r\n\t\t\t\t\t\tif (item[element] && item[element].value) {\r\n\t\t\t\t\t\t\titem[element].avatar = this._getCachedAvatar({ userSysId: item[element].value, recordGr: fieldGr, fieldName: element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (improvedAvatar && type === 'reference') {\r\n\t\t\t\t\t\tif (refTable === 'sys_user') {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userSysId: item[element].value });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ tableGr: fieldGr, element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\t\t\t\t} else if (improvedAvatar && (element === 'sys_created_by' || element === 'sys_updated_by')) {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userName: item[element].value });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst refTable = this.refTables[element];\r\n\r\n\t\t\t\tif ('x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign'.indexOf(refTable) > -1 && type !== \"glide_list\") {\r\n\t\t\t\t\tlet colorField = refTable === 'x_cadso_work_status' ? 'color' : 'glyph_color';\r\n\t\t\t\t\tvar color = this.getRefColor({tableGr: fieldGr, element, colorField, value});\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t} else if (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\titem.sys_id = {\r\n\t\t\t\tvalue: listGr.getUniqueValue(),\r\n\t\t\t\tdisplay_value: listGr.getUniqueValue()\r\n\t\t\t};\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t\t\r\n\t\tgs.info(\"listGr items length \" + items.length);\r\n\t\treturn items;\r\n\t},\r\n\r\n\t_getCachedAvatar: function({ userSysId, recordGr, fieldName }) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\t_getListView: function() {\r\n\t\tvar sysUiViewGr = new GlideRecord('sys_ui_view');\r\n\t\tsysUiViewGr.addEncodedQuery(`name=NULL^ORname=${this.view}^ORDERBYDESCname`);\r\n\t\tsysUiViewGr.setLimit(1);\r\n\t\tsysUiViewGr.query();\r\n\r\n\t\tgs.info()\r\n\t\twhile (sysUiViewGr.next()) {\r\n\t\t\tgs.info()\r\n\t\t\tvar sysUiListGr = new GlideRecord('sys_ui_list');\r\n\t\t\tsysUiListGr.addQuery('name', this.table);\r\n\t\t\tsysUiListGr.addQuery('view', sysUiViewGr.getUniqueValue());\r\n\t\t\tsysUiListGr.addEncodedQuery('sys_user=NULL'); // ^ORsys_userDYNAMIC90d1921e5f510100a9ad2572f2b477fe'); // This gets the users configuration but disabled for now\r\n\t\t\tsysUiListGr.orderByDesc('sys_user');\r\n\t\t\tsysUiListGr.setLimit(1);\r\n\t\t\tsysUiListGr.query();\r\n\r\n\t\t\twhile (sysUiListGr.next()) {\r\n\t\t\t\tvar sysUiListElement = new GlideRecord('sys_ui_list_element');\r\n\t\t\t\tsysUiListElement.addQuery('list_id', sysUiListGr.getUniqueValue());\r\n\t\t\t\tsysUiListElement.orderBy('position');\r\n\t\t\t\tsysUiListElement.query();\r\n\r\n\t\t\t\twhile (sysUiListElement.next()) {\r\n\t\t\t\t\tthis.fields.push(sysUiListElement.getValue('element'));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tcountTotalRecords: function() {\r\n\t\tvar count = 0;\r\n\t\tvar listAgg = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistAgg.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tlistAgg.query();\r\n\r\n\t\twhile (listAgg.next()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t},\r\n\r\n\ttype: 'UIListFieldsApiMS'\r\n};",
    "formatted_script": {
      "line_count": 519,
      "char_count": 16864,
      "preview": "var UIListFieldsApiMS = Class.create();\r\nUIListFieldsApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.view = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.fields...",
      "full_script": "var UIListFieldsApiMS = Class.create();\r\nUIListFieldsApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.view = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.fields = [];\r\n\t\tthis.lazyLoads = 0;\r\n\t\tthis.groupBy = '';\r\n\t\tthis.orderAsc = false;\r\n\t\tthis.sortedColumn = '';\r\n\t\tthis.limit = 0;\r\n\t\tthis.getFields = false;\r\n\t\tthis.count = 0;\r\n\t\tthis.requiredFields = [];\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.types = {};\r\n\t\tthis.maxLength = {};\r\n\t\tthis.refTables = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.refColors = {};\r\n\t\tthis.fullWindow = false;\r\n\t\tthis.startWindow = 0;\r\n\t\tthis.endWindow = 0;\r\n\t\tthis.maxRecordCount = 0;\r\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\r\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\r\n\t\tthis.toggleFields = [];\r\n\t\tthis.avatarUtils = new x_cadso_core.AvatarUtils();\r\n\t},\r\n\r\n\tgetColorsForField: function(field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === 'priority' || field === 'state';\r\n\t},\r\n\r\n\tgetWindowCounts: function() {\r\n\t\tlet limit = parseInt(this.limit);\r\n\t\tlet lazyLoads = parseInt(this.lazyLoads);\r\n\t\tconst lazyLoadPlusOne = parseInt(lazyLoads + 1);\r\n\t\tlet start = parseInt(limit * lazyLoads);\r\n\t\tlet end = parseInt(limit * lazyLoadPlusOne);\r\n\r\n\t\tif (this.fullWindow) {\r\n\t\t\tstart = this.startWindow;\r\n\t\t\tend = this.endWindow;\r\n\t\t}\r\n\t\treturn { start, end };\r\n\t},\r\n\r\n\tgetColor: function(field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif(GR.get(sys_id))\r\n\t\t{\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetRefColor: function({tableGr, element, colorField, value}) {\r\n\t\tvar color = '';\r\n\t\tif (value && !this.refColors[value]) {\r\n\t\t\tvar refTableGr = tableGr[element].getRefRecord();\r\n\t\t\tif (refTableGr.isValidRecord()) {\r\n\t\t\t\tcolor = refTableGr.getValue(colorField);\r\n\t\t\t\tthis.refColors[value] = color;\r\n\t\t\t}\r\n\t\t} else if (this.refColors[value]) {\r\n\t\t\tcolor = this.refColors[value];\r\n\t\t}\r\n\t\treturn color;\r\n\t},\r\n\r\n\tgetList: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, view, query, lazyLoads = 0, groupBy, orderAsc, sortedColumn, limit = 10, fields = [], requiredFields = '', startWindow = 0, endWindow = 0, improvedAvatar = false } = queryParams;\r\n\r\n\t\tthis.table = table.toString();\r\n\t\tthis.startWindow = startWindow;\r\n\t\tthis.endWindow = endWindow;\r\n\t\tthis.requiredFields = (requiredFields + '').split(',') || [];\r\n\t\tthis.view = view + '';\r\n\t\tthis.query = query;\r\n\t\tthis.lazyLoads = parseInt(lazyLoads);\r\n\t\tthis.groupBy = groupBy;\r\n\t\tthis.orderAsc = orderAsc;\r\n\t\tthis.sortedColumn = sortedColumn;\r\n\t\tthis.limit = parseInt(limit);\r\n\t\tthis.fields = fields;\r\n\t\tthis.getFields = !this.fields.length;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\titems: {},\r\n\t\t\tlabels: [],\r\n\t\t\tfields: [], \r\n\t\t\tdropDownData: [],\r\n\t\t\tsortedColumn\r\n\t\t};\r\n\r\n\t\tif (this.getFields) {\r\n\t\t\tthis._getListView();\r\n\t\t}\r\n\r\n\t\tdata.currentUser = gs.getUserName();\r\n\t\tdata.items = this._getList({ improvedAvatar });\r\n\t\tdata.labels = this.labels;\r\n\t\tdata.fullWindow = this.fullWindow;\r\n\t\tdata.fields = this.fields;\r\n\t\tdata.query = this.query;\r\n\t\tdata.count = this.count;\r\n\t\tdata.window = this.getWindowCounts();\r\n\t\tvar isList = true;\r\n\t\tdata.dropDownData = new x_cadso_work.GetTableDropdownsData().getData(this.table, true);\r\n\t\tdata.dateTimeFormat = this.dateTimeFormat;\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getList: function({ improvedAvatar = false }) {\r\n\t\tgs.info(\"TO: debug - \" + this.table)\r\n\t\tthis.getColorsForField(''); // initialize\r\n\t\tconst { start, end } = this.getWindowCounts();\r\n\t\tlet nonSecurelistGr = new GlideRecord(this.table);\r\n\t\tlet listGr = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.table === 'sysapproval_approver') {\r\n\t\t\tlistGr = new GlideRecord(this.table);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistGr.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistGr.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc && typeof this.orderAsc !== 'string' && this.orderAsc.length) {\r\n\t\t\tthis.orderAsc = this.orderAsc[0];\r\n\t\t}\r\n\r\n\t\tif (this.sortedColumn && typeof this.sortedColumn !== 'string' && this.sortedColumn.length) {\r\n\t\t\tthis.sortedColumn = this.sortedColumn[0];\r\n\t\t}\r\n\r\n\t\tif (this.orderAsc === true || this.orderAsc === \"true\") {\r\n\t\t\tlistGr.orderBy(this.sortedColumn);\r\n\t\t} else if (this.sortedColumn) {\r\n\t\t\tlistGr.orderByDesc(this.sortedColumn);\r\n\t\t}\r\n\t\t// listGr.orderBy('short_description');\r\n\r\n\t\tlistGr.chooseWindow(start, end);\t\t\r\n\t\tlistGr.query();\r\n\t\t\r\n\t\t// this.maxRecordCount = this.countTotalRecords();\r\n\t\tvar tenonTimeApi = new TenonTime();\r\n\t\tconst formatOfDateTime = tenonTimeApi.getFormat();\r\n\t\tconst refTablesForExtendedFields = {};\r\n\t\r\n\t\t//This will exclude certain fields when we get all the data for each field. \r\n\t\tvar fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\r\n\t\tlet runTimeError = false;\r\n\t\tif (this.getFields) {\r\n\t\t\tthis.labels = this.fields.filter((element) => !!element && element !== 'null' && element !== 'undefined').map((element) => {\r\n\t\t\t\tif(!element) return;\r\n\r\n\t\t\t\tlet elementListGr = nonSecurelistGr;\r\n\r\n\t\t\t\tlet elm = null;\r\n\r\n\t\t\t\t// SH - do we need this element.indexof? fields is being updated in _getListView\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length == 2) {\r\n\t\t\t\t\t\tvar baselineElement = splitElement[0];\r\n\r\n\t\t\t\t\t\tif (!elementListGr.isValidField(baselineElement)) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not Valid. {0}', [element]);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\telm = elementListGr.getElement(baselineElement);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar _refTable = elm.getReferenceTable();\r\n\t\t\t\t\t\t\tif (!refTablesForExtendedFields[_refTable]) {\r\n\t\t\t\t\t\t\t\trefTablesForExtendedFields[_refTable] = new GlideRecord(_refTable);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telementListGr = refTablesForExtendedFields[_refTable];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Field Not A Valid Reference Field. {0}', [element]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\telm = elementListGr.getElement(element);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvar label = {};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst elementDescriptor = elm.getED();\r\n\t\t\t\t\tthis.maxLength[element] = elementDescriptor.getLength();\r\n\t\t\t\t\tthis.types[element] = elementDescriptor.getInternalType();\r\n\t\t\t\t\tconst type = this.types[element];\r\n\t\t\t\t\tconst isChoice = elementDescriptor.isChoiceTable();\r\n\t\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || '';\r\n\t\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table);\r\n\t\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\t\t\t\t\tlet fieldLabel = elm.getLabel();\r\n\t\t\t\t\t\r\n\t\t\t\t\tlabel = {\r\n\t\t\t\t\t\tdisplay_value: fieldLabel,\r\n\t\t\t\t\t\tvalue: element,\r\n\t\t\t\t\t\tpluralLabel: elementDescriptor.getPlural(),\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tcanWrite: elementListGr[element].canWrite(),\r\n\t\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolors: false,\r\n\t\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t\t\treferences: [],\r\n\t\t\t\t\t\tchoices: [],\r\n\t\t\t\t\t\tisToggle: this.toggleFields.includes(element)\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\t\tlabel.colors = this.colors[element];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ('glide_date_time,glide_time,due_date'.indexOf(type) > -1) {\r\n\t\t\t\t\t\tlabel.format = formatOfDateTime;\r\n\t\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\t\tthis.refTables[element] = elm.getReferenceTable();\r\n\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\tif (!label.icon) {\r\n\t\t\t\t\t\t\tlabel.icon = this.colors.icons[label.refTable] || '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\t\tvar glideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\tglideListDictGr.addQuery('name', this.table);\r\n\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!label.refTable) {\r\n\t\t\t\t\t\t\tglideListDictGr = new GlideRecord('sys_dictionary');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('name', 'task');\r\n\t\t\t\t\t\t\tglideListDictGr.addQuery('element', element);\r\n\t\t\t\t\t\t\tglideListDictGr.setLimit(1);\r\n\t\t\t\t\t\t\tglideListDictGr.query();\r\n\r\n\t\t\t\t\t\t\twhile (glideListDictGr.next()) {\r\n\t\t\t\t\t\t\t\tthis.refTables[element] = glideListDictGr.getValue('reference');\r\n\t\t\t\t\t\t\t\tlabel.refTable = this.refTables[element];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\trunTimeError = true;\r\n\t\t\t\t\tgs.error('Tenon List API Error: Table \"{0}\" does not have field \"{1}\" in the view \"{2}\"', [this.table, element, this.view]);\r\n\t\t\t\t\tgs.error(e)\r\n\t\t\t\t\tlabel = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn label;\r\n\r\n\t\t\t}, this);\r\n\r\n\t\t\tif (runTimeError) {\r\n\t\t\t\tthis.labels = this.labels.filter((element) => !!element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst items = [];\r\n\r\n\t\tconst refRecordGrs = {};\r\n\t\tconst combinedFields = this.fields.concat(this.requiredFields.filter((item) => this.fields.indexOf(item) < 0));\r\n\t\t\r\n\t\t\r\n\t\twhile (listGr.next()) {\r\n\t\t\t\r\n\t\t\tconst item = {\r\n\t\t\t\tcanWrite: listGr.canWrite(),\r\n\t\t\t\tcanRead: listGr.canRead(),\r\n\t\t\t\tcanCreate: listGr.canCreate(),\r\n\t\t\t\tcanDelete: listGr.canDelete(),\r\n\t\t\t};\r\n\t\t\tthis.count++;\r\n\t\t\tcombinedFields.filter((element) => !!element && element !== 'null' && element !== 'undefined').forEach((element) => {\r\n\r\n\t\t\t\tlet fieldGr = listGr;\r\n\r\n\t\t\t\tif (element.indexOf('.') > -1) {\r\n\t\t\t\t\tconst splitElement = (element + '').split('.');\r\n\t\t\t\t\tif (splitElement.length) {\r\n\t\t\t\t\t\tvar f = splitElement[0];\r\n\t\t\t\t\t\tif (!listGr.isValidField(f)) return;\r\n\t\t\t\t\t\tvar refRecordSysId = listGr.getValue(f);\r\n\t\t\t\t\t\tif (!refRecordGrs[refRecordSysId]) {\r\n\t\t\t\t\t\t\trefRecordGrs[refRecordSysId] = listGr[f].getRefRecord();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (refRecordGrs[refRecordSysId].isValidRecord()) {\r\n\t\t\t\t\t\t\tfieldGr = refRecordGrs[refRecordSysId];\r\n\t\t\t\t\t\t\telement = splitElement[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tgs.info('Tenon: Record is not valid on field {0} for record {1} on table {2} because of the reference record.', [element, listGr.getUniqueValue(), this.table]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar notClearableFields = fieldChecker.getMandatoryFields(this.table, listGr.getUniqueValue());\r\n\t\t\t\tvar canClear = !fieldChecker.checkField(notClearableFields, element) && type !== 'journal';\r\n\r\n\t\t\t\tconst type = this.types[element];\r\n\t\t\t\tlet displayValue = fieldGr.getDisplayValue(element);\r\n\t\t\t\tif (type === 'due_date' && displayValue === 'UNKNOWN') {\r\n\t\t\t\t\tdisplayValue = '';\r\n\t\t\t\t} else if (displayValue) {\r\n\t\t\t\t\t// \t\t\t\t\tdisplayValue = 'glide_date_time,due_date'.indexOf(type) > -1 ? tenonTimeApi.format(displayValue) : displayValue;\r\n\t\t\t\t}\r\n\t\t\t\tconst value = fieldGr.getValue(element);\r\n\r\n\t\t\t\titem[element] = {\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tdisplay_value: displayValue,\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tmaxLength: this.maxLength[element],\r\n\t\t\t\t\ticon: false,\r\n\t\t\t\t\tcolor: false,\r\n\t\t\t\t\tclassName: false,\r\n\t\t\t\t\tcanClear: canClear,\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\titem[element].canWrite = listGr[element].canWrite() || false;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\titem[element].canWrite = false;\r\n\t\t\t\t\titem[element]._error = 'Field is not on listGr: ' + element;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar fetchColors = this.getColorsForField(element);\r\n\r\n\t\t\t\tif (fetchColors && type !== 'reference') {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (type === 'boolean' && item[element] && item[element].display_value) {\r\n\t\t\t\t\tvar str = item[element].display_value;\r\n\t\t\t\t\titem[element].display_value = str.charAt(0).toUpperCase() + str.slice(1);\r\n\t\t\t\t} else if (type === 'reference') {\r\n\t\t\t\t\tif (!item[element]) {\r\n\t\t\t\t\t\titem[element] = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\r\n\t\t\t\t\tif (!improvedAvatar && type === 'reference' && refTable === 'sys_user') {\r\n\t\t\t\t\t\tif (item[element] && item[element].value) {\r\n\t\t\t\t\t\t\titem[element].avatar = this._getCachedAvatar({ userSysId: item[element].value, recordGr: fieldGr, fieldName: element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (improvedAvatar && type === 'reference') {\r\n\t\t\t\t\t\tif (refTable === 'sys_user') {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userSysId: item[element].value });\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ tableGr: fieldGr, element });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (type === 'glide_list') {\r\n\t\t\t\t\tconst refTable = this.refTables[element];\r\n\t\t\t\t\titem[element].refTable = refTable;\r\n\t\t\t\t} else if (improvedAvatar && (element === 'sys_created_by' || element === 'sys_updated_by')) {\r\n\t\t\t\t\t\t\titem[element].avatar = this.avatarUtils.get({ userName: item[element].value });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst refTable = this.refTables[element];\r\n\r\n\t\t\t\tif ('x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign'.indexOf(refTable) > -1 && type !== \"glide_list\") {\r\n\t\t\t\t\tlet colorField = refTable === 'x_cadso_work_status' ? 'color' : 'glyph_color';\r\n\t\t\t\t\tvar color = this.getRefColor({tableGr: fieldGr, element, colorField, value});\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t} else if (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[element][value] || false;\r\n\t\t\t\t\tvar icon = this.colors.icons[element] || false;\r\n\t\t\t\t\tvar color = colors ? colors.color : false;\r\n\t\t\t\t\tvar className = colors ? colors.className : false;\r\n\t\t\t\t\titem[element].color = color;\r\n\t\t\t\t\titem[element].className = className;\r\n\t\t\t\t\titem[element].icon = icon;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\titem.sys_id = {\r\n\t\t\t\tvalue: listGr.getUniqueValue(),\r\n\t\t\t\tdisplay_value: listGr.getUniqueValue()\r\n\t\t\t};\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\t\t\r\n\t\tgs.info(\"listGr items length \" + items.length);\r\n\t\treturn items;\r\n\t},\r\n\r\n\t_getCachedAvatar: function({ userSysId, recordGr, fieldName }) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\t_getListView: function() {\r\n\t\tvar sysUiViewGr = new GlideRecord('sys_ui_view');\r\n\t\tsysUiViewGr.addEncodedQuery(`name=NULL^ORname=${this.view}^ORDERBYDESCname`);\r\n\t\tsysUiViewGr.setLimit(1);\r\n\t\tsysUiViewGr.query();\r\n\r\n\t\tgs.info()\r\n\t\twhile (sysUiViewGr.next()) {\r\n\t\t\tgs.info()\r\n\t\t\tvar sysUiListGr = new GlideRecord('sys_ui_list');\r\n\t\t\tsysUiListGr.addQuery('name', this.table);\r\n\t\t\tsysUiListGr.addQuery('view', sysUiViewGr.getUniqueValue());\r\n\t\t\tsysUiListGr.addEncodedQuery('sys_user=NULL'); // ^ORsys_userDYNAMIC90d1921e5f510100a9ad2572f2b477fe'); // This gets the users configuration but disabled for now\r\n\t\t\tsysUiListGr.orderByDesc('sys_user');\r\n\t\t\tsysUiListGr.setLimit(1);\r\n\t\t\tsysUiListGr.query();\r\n\r\n\t\t\twhile (sysUiListGr.next()) {\r\n\t\t\t\tvar sysUiListElement = new GlideRecord('sys_ui_list_element');\r\n\t\t\t\tsysUiListElement.addQuery('list_id', sysUiListGr.getUniqueValue());\r\n\t\t\t\tsysUiListElement.orderBy('position');\r\n\t\t\t\tsysUiListElement.query();\r\n\r\n\t\t\t\twhile (sysUiListElement.next()) {\r\n\t\t\t\t\tthis.fields.push(sysUiListElement.getValue('element'));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tcountTotalRecords: function() {\r\n\t\tvar count = 0;\r\n\t\tvar listAgg = new GlideRecordSecure(this.table);\r\n\r\n\t\tif (this.query && typeof this.query === 'object' && this.query.length) {\r\n\t\t\tthis.query.forEach((query) => {\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'object') {\r\n\t\t\tObject.keys(this.query).forEach((q) => {\r\n\t\t\t\tconst query = this.query[q];\r\n\t\t\t\tif (!query) return;\r\n\t\t\t\tlistAgg.addQuery(query);\r\n\t\t\t});\r\n\t\t} else if (this.query && typeof this.query === 'string') {\r\n\t\t\tlistAgg.addQuery(this.query);\r\n\t\t}\r\n\r\n\t\tlistAgg.query();\r\n\r\n\t\twhile (listAgg.next()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t},\r\n\r\n\ttype: 'UIListFieldsApiMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_674a2742c3922210d4ddf1db05013193",
    "display_value": "sys_script_include_674a2742c3922210d4ddf1db05013193"
  },
  "sys_updated_by": {
    "value": "siwen.hu",
    "display_value": "siwen.hu"
  },
  "api_name": {
    "value": "x_cadso_work.UIListFieldsApiMS",
    "display_value": "x_cadso_work.UIListFieldsApiMS"
  },
  "sys_created_on": {
    "value": "2025-06-24 15:23:07",
    "display_value": "2025-06-24 08:23:07 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "UIListFieldsApiMS",
    "display_value": "UIListFieldsApiMS"
  },
  "sys_name": {
    "value": "UIListFieldsApiMS",
    "display_value": "UIListFieldsApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "siwen.hu",
    "display_value": "siwen.hu"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
