{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "64ce693c47deb150b0361ae8036d4345",
    "extracted_at": "2025-09-19T21:48:31.259Z",
    "display_value": "ScheduleMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "223",
    "display_value": "223"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-10-11 02:45:57",
    "display_value": "2024-10-10 07:45:57 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const ScheduleMS = Class.create();\nScheduleMS.prototype = Object.extendsObject(x_cadso_work.ScheduleWrapper, {\n\tinitialize: function (props = {}) {\n\t\tconst { scheduleSysId, date, format } = props;\n\t\tx_cadso_work.ScheduleWrapper.prototype.initialize.apply(this, arguments);\n\t},\n\n\tgenerateDates: function({ start, end, duration, startDirection, endDirection, move, moveDirection, format }) {\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t}\n\n\t\tthis.setDuration({ duration });\n\n\t\tthis.setDates({ start, end });\n\n\t\tvar startDate = this.findDate({ date: this.startDate.getDisplayValueInternal(), direction: startDirection, format: this.format });\n\t\tthis.startDate.setDisplayValueInternal(startDate);\n\n\t\tvar endDate = this.findDate({ date: this.endDate.getDisplayValueInternal(), direction: endDirection, format: this.format });\n\t\tthis.endDate.setDisplayValueInternal(endDate);\n\n\t\tlet scheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\tvar time = this.timeInc;\n\t\t\n\t\twhile (this.duration > scheduleDuration) {\n\t\t\tif (moveDirection === 'forwards') {\n\t\t\t\tthis[move].add(time);\n\t\t\t} else if (moveDirection === 'backwards') {\n\t\t\t\tthis[move].subtract(time);\n\t\t\t}\n\n\t\t\tvar moveDate = this.findDate({ date: this[move].getDisplayValueInternal(), direction: moveDirection, format: this.format });\n\t\t\tthis[move].setDisplayValueInternal(moveDate);\n\n\t\t\tscheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\t}\n\n\t\treturn { startDate: this.startDate, endDate: this.endDate, scheduleDuration };\n\t},\n\n\tgetSchedule: function(assignmentGroup) {\n\t\tvar schedule = this.defaultSchedule;\n\t\tif (assignmentGroup) {\n\t\t\tvar workGroupGroupM2MGr = new GlideRecord('x_cadso_work_group_to_group_m2m');\n\t\t\tworkGroupGroupM2MGr.addQuery('group', assignmentGroup);\n\t\t\tworkGroupGroupM2MGr.setLimit(1);\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupGroupM2MGr.query();\n\n\t\t\twhile (workGroupGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr = workGroupGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar workGroupM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\n\t\t\tworkGroupM2MGr.addQuery('user', gs.getUserID());\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupM2MGr.setLimit(1);\n\t\t\tworkGroupM2MGr.query();\n\n\t\t\twhile (workGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr2 = workGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr2.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr2.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn schedule;\n\t},\n\n\tcalculateDateFromDuration: function ({ startDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\t_duration = _duration / 1000;\n\t\tconst date = new GlideDateTime();\n\t\tconst startDate2 = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(startDate);\n\t\t\tstartDate2.setDisplayValueInternal(startDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(startDate);\n\t\t\tstartDate2.setDisplayValue(startDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset() / 1000;\n\t\tconst seconds = _duration + offset;\n\t\tdate.addSeconds(seconds);\n\n\t\treturn { date, duration: _duration * 1000, startDate: startDate2 };\n\t},\n\n\tcalculateStartDateFromDuration: function ({ endDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\tconst date = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(endDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(endDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset();\n\t\tconst milSeconds = _duration - offset;\n\t\tdate.subtract(milSeconds);\n\t\treturn { date, duration: _duration };\n\t},\n\n\ttype: \"ScheduleMS\",\n});\n",
    "display_value": "const ScheduleMS = Class.create();\nScheduleMS.prototype = Object.extendsObject(x_cadso_work.ScheduleWrapper, {\n\tinitialize: function (props = {}) {\n\t\tconst { scheduleSysId, date, format } = props;\n\t\tx_cadso_work.ScheduleWrapper.prototype.initialize.apply(this, arguments);\n\t},\n\n\tgenerateDates: function({ start, end, duration, startDirection, endDirection, move, moveDirection, format }) {\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t}\n\n\t\tthis.setDuration({ duration });\n\n\t\tthis.setDates({ start, end });\n\n\t\tvar startDate = this.findDate({ date: this.startDate.getDisplayValueInternal(), direction: startDirection, format: this.format });\n\t\tthis.startDate.setDisplayValueInternal(startDate);\n\n\t\tvar endDate = this.findDate({ date: this.endDate.getDisplayValueInternal(), direction: endDirection, format: this.format });\n\t\tthis.endDate.setDisplayValueInternal(endDate);\n\n\t\tlet scheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\tvar time = this.timeInc;\n\t\t\n\t\twhile (this.duration > scheduleDuration) {\n\t\t\tif (moveDirection === 'forwards') {\n\t\t\t\tthis[move].add(time);\n\t\t\t} else if (moveDirection === 'backwards') {\n\t\t\t\tthis[move].subtract(time);\n\t\t\t}\n\n\t\t\tvar moveDate = this.findDate({ date: this[move].getDisplayValueInternal(), direction: moveDirection, format: this.format });\n\t\t\tthis[move].setDisplayValueInternal(moveDate);\n\n\t\t\tscheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\t}\n\n\t\treturn { startDate: this.startDate, endDate: this.endDate, scheduleDuration };\n\t},\n\n\tgetSchedule: function(assignmentGroup) {\n\t\tvar schedule = this.defaultSchedule;\n\t\tif (assignmentGroup) {\n\t\t\tvar workGroupGroupM2MGr = new GlideRecord('x_cadso_work_group_to_group_m2m');\n\t\t\tworkGroupGroupM2MGr.addQuery('group', assignmentGroup);\n\t\t\tworkGroupGroupM2MGr.setLimit(1);\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupGroupM2MGr.query();\n\n\t\t\twhile (workGroupGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr = workGroupGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar workGroupM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\n\t\t\tworkGroupM2MGr.addQuery('user', gs.getUserID());\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupM2MGr.setLimit(1);\n\t\t\tworkGroupM2MGr.query();\n\n\t\t\twhile (workGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr2 = workGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr2.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr2.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn schedule;\n\t},\n\n\tcalculateDateFromDuration: function ({ startDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\t_duration = _duration / 1000;\n\t\tconst date = new GlideDateTime();\n\t\tconst startDate2 = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(startDate);\n\t\t\tstartDate2.setDisplayValueInternal(startDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(startDate);\n\t\t\tstartDate2.setDisplayValue(startDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset() / 1000;\n\t\tconst seconds = _duration + offset;\n\t\tdate.addSeconds(seconds);\n\n\t\treturn { date, duration: _duration * 1000, startDate: startDate2 };\n\t},\n\n\tcalculateStartDateFromDuration: function ({ endDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\tconst date = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(endDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(endDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset();\n\t\tconst milSeconds = _duration - offset;\n\t\tdate.subtract(milSeconds);\n\t\treturn { date, duration: _duration };\n\t},\n\n\ttype: \"ScheduleMS\",\n});\n",
    "formatted_script": {
      "line_count": 120,
      "char_count": 4283,
      "preview": "const ScheduleMS = Class.create();\nScheduleMS.prototype = Object.extendsObject(x_cadso_work.ScheduleWrapper, {\n\tinitialize: function (props = {}) {\n\t\tconst { scheduleSysId, date, format } = props;\n\t\tx...",
      "full_script": "const ScheduleMS = Class.create();\nScheduleMS.prototype = Object.extendsObject(x_cadso_work.ScheduleWrapper, {\n\tinitialize: function (props = {}) {\n\t\tconst { scheduleSysId, date, format } = props;\n\t\tx_cadso_work.ScheduleWrapper.prototype.initialize.apply(this, arguments);\n\t},\n\n\tgenerateDates: function({ start, end, duration, startDirection, endDirection, move, moveDirection, format }) {\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t}\n\n\t\tthis.setDuration({ duration });\n\n\t\tthis.setDates({ start, end });\n\n\t\tvar startDate = this.findDate({ date: this.startDate.getDisplayValueInternal(), direction: startDirection, format: this.format });\n\t\tthis.startDate.setDisplayValueInternal(startDate);\n\n\t\tvar endDate = this.findDate({ date: this.endDate.getDisplayValueInternal(), direction: endDirection, format: this.format });\n\t\tthis.endDate.setDisplayValueInternal(endDate);\n\n\t\tlet scheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\tvar time = this.timeInc;\n\t\t\n\t\twhile (this.duration > scheduleDuration) {\n\t\t\tif (moveDirection === 'forwards') {\n\t\t\t\tthis[move].add(time);\n\t\t\t} else if (moveDirection === 'backwards') {\n\t\t\t\tthis[move].subtract(time);\n\t\t\t}\n\n\t\t\tvar moveDate = this.findDate({ date: this[move].getDisplayValueInternal(), direction: moveDirection, format: this.format });\n\t\t\tthis[move].setDisplayValueInternal(moveDate);\n\n\t\t\tscheduleDuration = this.findDuration({ startDate: this.startDate.getDisplayValueInternal(), endDate: this.endDate.getDisplayValueInternal() });\n\t\t}\n\n\t\treturn { startDate: this.startDate, endDate: this.endDate, scheduleDuration };\n\t},\n\n\tgetSchedule: function(assignmentGroup) {\n\t\tvar schedule = this.defaultSchedule;\n\t\tif (assignmentGroup) {\n\t\t\tvar workGroupGroupM2MGr = new GlideRecord('x_cadso_work_group_to_group_m2m');\n\t\t\tworkGroupGroupM2MGr.addQuery('group', assignmentGroup);\n\t\t\tworkGroupGroupM2MGr.setLimit(1);\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupGroupM2MGr.query();\n\n\t\t\twhile (workGroupGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr = workGroupGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar workGroupM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\n\t\t\tworkGroupM2MGr.addQuery('user', gs.getUserID());\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_groupISNOTEMPTY');\n\t\t\tworkGroupM2MGr.addEncodedQuery('work_group.scheduleISNOTEMPTY');\n\t\t\tworkGroupM2MGr.orderBy('work_group');\n\t\t\tworkGroupM2MGr.setLimit(1);\n\t\t\tworkGroupM2MGr.query();\n\n\t\t\twhile (workGroupM2MGr.next()) {\n\t\t\t\tvar workGroupGr2 = workGroupM2MGr.work_group.getRefRecord();\n\t\t\t\tif (workGroupGr2.isValidRecord()) {\n\t\t\t\t\tschedule = workGroupGr2.getValue('schedule');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn schedule;\n\t},\n\n\tcalculateDateFromDuration: function ({ startDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\t_duration = _duration / 1000;\n\t\tconst date = new GlideDateTime();\n\t\tconst startDate2 = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(startDate);\n\t\t\tstartDate2.setDisplayValueInternal(startDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(startDate);\n\t\t\tstartDate2.setDisplayValue(startDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset() / 1000;\n\t\tconst seconds = _duration + offset;\n\t\tdate.addSeconds(seconds);\n\n\t\treturn { date, duration: _duration * 1000, startDate: startDate2 };\n\t},\n\n\tcalculateStartDateFromDuration: function ({ endDate, duration, isUser = false, format = false }) {\n\t\tlet _duration = new GlideDuration();\n\t\t_duration.setValue(duration);\n\t\t_duration = _duration.getNumericValue();\n\t\tconst date = new GlideDateTime();\n\t\tif (format) {\n\t\t\tthis.format = format;\n\t\t\tdate.setDisplayValueInternal(endDate);\n\t\t} else {\n\t\t\tdate.setDisplayValue(endDate);\n\t\t}\n\t\tconst offset = isUser ? 0 : date.getTZOffset();\n\t\tconst milSeconds = _duration - offset;\n\t\tdate.subtract(milSeconds);\n\t\treturn { date, duration: _duration };\n\t},\n\n\ttype: \"ScheduleMS\",\n});\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_64ce693c47deb150b0361ae8036d4345",
    "display_value": "sys_script_include_64ce693c47deb150b0361ae8036d4345"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.ScheduleMS",
    "display_value": "x_cadso_work.ScheduleMS"
  },
  "sys_created_on": {
    "value": "2023-11-01 20:37:09",
    "display_value": "2023-11-01 01:37:09 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ScheduleMS",
    "display_value": "ScheduleMS"
  },
  "sys_name": {
    "value": "ScheduleMS",
    "display_value": "ScheduleMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
