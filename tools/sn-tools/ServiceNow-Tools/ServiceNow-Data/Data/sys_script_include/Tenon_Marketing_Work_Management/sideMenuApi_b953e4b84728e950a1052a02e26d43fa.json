{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "b953e4b84728e950a1052a02e26d43fa",
    "extracted_at": "2025-09-19T21:48:31.837Z",
    "display_value": "sideMenuApi",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "53",
    "display_value": "53"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-14 22:01:27",
    "display_value": "2025-07-14 03:01:27 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var sideMenuApi = Class.create();\r\nsideMenuApi.prototype = {\r\n    initialize: function() {\r\n        this.devMode = gs.getProperty('glide.appcreator.company.code') === 'cadso';\r\n        this.apps = [\"x_cadso_veeva\", \"x_cadso_work\", \"x_cadso_cloud\", \"x_cadso_automate\", \"x_cadso_core\", \"x_cadso_email_spok\", \"x_cadso_text_spoke\", \"x_cadso_journey\", \"x_cadso_lead\"];\r\n    },\r\n\t\r\n    getLists: function(request, response) {\r\n        const {\r\n            tables = [],\r\n            segments = '',\r\n\t\t\tshowLimit = 5\r\n        } = request.body.data;\r\n\t\tlet limit = Number(showLimit);\r\n\t\tconst plugins = this.getApps();\r\n        let data = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: {},\r\n            roles: this.getRoles(plugins),\r\n            approvalCount: this.getApprovalsCount(),\r\n            agile: gs.getProperty('x_cadso_work.agile_mode') === 'true',\r\n\t\t\tplugins\r\n        };\r\n\r\n        if (data.agile && !data.roles.admin) {\r\n            const isAgile = this.checkAgileSegment();\r\n            data.isAgile = isAgile;\r\n            data.agile = isAgile;\r\n        }\r\n\r\n        try {\r\n\t\t\tconst newTables = [];\r\n            tables.forEach((table) => {\r\n\t\t\t\tconst {\r\n                name,\r\n                orderDirection = 'orderByDesc',\r\n                orderBy = 'sys_updated_on',\r\n                agile,\r\n\t\t\t\troles = {},\r\n\t\t\t\tplugins = {},\r\n\t\t\t\tnewRecordRoles = {},\r\n            } = table;\r\n                if (agile && !data.agile) return;\r\n\r\n\t\t\t\tif (roles && Object.keys(roles || {}).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) return;\r\n\t\t\t\t\tconst hasRole = Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t\tif (!hasRole) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (plugins && Object.keys(plugins).length) {\r\n\t\t\t\t\tif (!data.plugins || !Object.keys(data.plugins).length) return;\r\n\t\t\t\t\tconst hasPlugins = Object.keys(plugins).every((plugin) => data.plugins[plugin]);\r\n\t\t\t\t\tif (!hasPlugins) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newRecordRoles && Object.keys(newRecordRoles).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) {\r\n\t\t\t\t\t\ttable.hasRoleForNewRecord = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttable.hasRoleForNewRecord =  Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttable.hasRoleForNewRecord = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewTables.push(table);\r\n                data.items[name] = [];\r\n\t\t\t\t\r\n                const tableGr = new GlideRecordSecure(name);\r\n\r\n                if (segments) {\r\n                    tableGr.addQuery(\"segment\", \"IN\", segments);\r\n                }\r\n\r\n                tableGr[orderDirection](orderBy);\r\n                tableGr.query();\r\n\t\t\t\tlet count = 0;\r\n                while (tableGr.next() && count < limit) {\r\n\t\t\t\t\tcount++;\r\n                    data.items[name].push({\r\n                        shortDescription: tableGr.getDisplayValue('short_description'),\r\n                        sysId: tableGr.getUniqueValue(),\r\n                        glyphColor: tableGr.getValue('glyph_color'),\r\n                        status: tableGr.getValue('state'),\r\n                    });\r\n                }\r\n            });\r\n\t\t\tdata.tables = newTables;\r\n        } catch (e) {\r\n            data.message = e;\r\n            data.statusCode = 500;\r\n        }\r\n\r\n        response.setStatus(data.statusCode);\r\n        response.setBody(data);\r\n        return response;\r\n    },\r\n\r\n    getRoles: function(plugins) {\r\n        const userId = gs.getUserID();\r\n        const roles = {\r\n            admin: gs.hasRole('admin')\r\n        };\r\n\r\n\t\tlet queryString = 'role.nameSTARTSWITHx_cadso';\r\n\r\n\r\n        const sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\r\n        sysUserHasRoleGr.addQuery('user', userId);\r\n\r\n        const orQuery = sysUserHasRoleGr.addQuery('role.name', 'STARTSWITH', 'x_cadso');\r\n\t\tif (plugins.sn_customerservice) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_customerservice');\r\n\t\t}\r\n\t\tif (plugins.sn_lead_mgmt_core) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_lead_mgmt_core');\r\n\t\t}\r\n\r\n        sysUserHasRoleGr.query();\r\n\r\n        while (sysUserHasRoleGr.next()) {\r\n            const roleGr = sysUserHasRoleGr.role.getRefRecord();\r\n\r\n            if (!roleGr.isValidRecord()) continue;\r\n\r\n            const name = roleGr.getValue('name');\r\n\r\n            if (!name) continue;\r\n\r\n            roles[name] = true;\r\n        }\r\n\r\n        return roles;\r\n    },\r\n\r\n    checkAgileSegment: function(userId = gs.getUserID()) {\r\n        const workUserSegmentM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\r\n        workUserSegmentM2MGr.addEncodedQuery('user=' + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery('work_group.agile=true');\r\n        workUserSegmentM2MGr.setLimit(1);\r\n        workUserSegmentM2MGr.query();\r\n        return workUserSegmentM2MGr.hasNext();\r\n    },\r\n\r\n    getApprovalsCount: function() {\r\n        var approvalGA = new GlideAggregate('sysapproval_approver');\r\n        approvalGA.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe^source_tableSTARTSWITHx_cadso_work^state=requested');\r\n        approvalGA.addAggregate('COUNT');\r\n        approvalGA.query();\r\n        let count = 0;\r\n\r\n        while (approvalGA.next()) {\r\n            count = parseInt(approvalGA.getAggregate('COUNT'));\r\n        }\r\n\r\n        return count;\r\n    },\r\n\r\n    getApps: function() {\r\n        let GPM = new GlidePluginManager();\r\n\t\tconst apps = {\r\n\t\t\tsn_lead_mgmt_core: GPM.isActive('sn_lead_mgmt_core'),\r\n\t\t\tsn_customerservice: GPM.isActive('com.sn_customerservice'),\r\n\t\t\tisContactEnabled: gs.getProperty('x_cadso_core.disable_contact_features') === 'true',\r\n\t\t\tisLeadEnabled: gs.getProperty('x_cadso_core.disable_lead_features') === 'true',\r\n\t\t\tlist: []\r\n\t\t};\r\n\r\n        for (var x = 0; x < this.apps.length; x++) {\r\n\t\t\tconst app = this.apps[x];\r\n\t\t\tapps[app] = this.devMode || GPM.isActive(app);\r\n        }\r\n\r\n\t\tconst keys = Object.keys(apps);\r\n        for (var y = 0; y < keys.length; y++) {\r\n\t\t\tconst key = keys[x];\r\n\t\t\t\r\n\t\t\tif (apps[key] === true) {\r\n\t\t\t\tapps.list.push(key);\r\n\t\t\t}\r\n        }\r\n\r\n\t\treturn apps;\r\n    },\r\n\r\n    type: 'sideMenuApi'\r\n};",
    "display_value": "var sideMenuApi = Class.create();\r\nsideMenuApi.prototype = {\r\n    initialize: function() {\r\n        this.devMode = gs.getProperty('glide.appcreator.company.code') === 'cadso';\r\n        this.apps = [\"x_cadso_veeva\", \"x_cadso_work\", \"x_cadso_cloud\", \"x_cadso_automate\", \"x_cadso_core\", \"x_cadso_email_spok\", \"x_cadso_text_spoke\", \"x_cadso_journey\", \"x_cadso_lead\"];\r\n    },\r\n\t\r\n    getLists: function(request, response) {\r\n        const {\r\n            tables = [],\r\n            segments = '',\r\n\t\t\tshowLimit = 5\r\n        } = request.body.data;\r\n\t\tlet limit = Number(showLimit);\r\n\t\tconst plugins = this.getApps();\r\n        let data = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: {},\r\n            roles: this.getRoles(plugins),\r\n            approvalCount: this.getApprovalsCount(),\r\n            agile: gs.getProperty('x_cadso_work.agile_mode') === 'true',\r\n\t\t\tplugins\r\n        };\r\n\r\n        if (data.agile && !data.roles.admin) {\r\n            const isAgile = this.checkAgileSegment();\r\n            data.isAgile = isAgile;\r\n            data.agile = isAgile;\r\n        }\r\n\r\n        try {\r\n\t\t\tconst newTables = [];\r\n            tables.forEach((table) => {\r\n\t\t\t\tconst {\r\n                name,\r\n                orderDirection = 'orderByDesc',\r\n                orderBy = 'sys_updated_on',\r\n                agile,\r\n\t\t\t\troles = {},\r\n\t\t\t\tplugins = {},\r\n\t\t\t\tnewRecordRoles = {},\r\n            } = table;\r\n                if (agile && !data.agile) return;\r\n\r\n\t\t\t\tif (roles && Object.keys(roles || {}).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) return;\r\n\t\t\t\t\tconst hasRole = Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t\tif (!hasRole) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (plugins && Object.keys(plugins).length) {\r\n\t\t\t\t\tif (!data.plugins || !Object.keys(data.plugins).length) return;\r\n\t\t\t\t\tconst hasPlugins = Object.keys(plugins).every((plugin) => data.plugins[plugin]);\r\n\t\t\t\t\tif (!hasPlugins) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newRecordRoles && Object.keys(newRecordRoles).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) {\r\n\t\t\t\t\t\ttable.hasRoleForNewRecord = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttable.hasRoleForNewRecord =  Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttable.hasRoleForNewRecord = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewTables.push(table);\r\n                data.items[name] = [];\r\n\t\t\t\t\r\n                const tableGr = new GlideRecordSecure(name);\r\n\r\n                if (segments) {\r\n                    tableGr.addQuery(\"segment\", \"IN\", segments);\r\n                }\r\n\r\n                tableGr[orderDirection](orderBy);\r\n                tableGr.query();\r\n\t\t\t\tlet count = 0;\r\n                while (tableGr.next() && count < limit) {\r\n\t\t\t\t\tcount++;\r\n                    data.items[name].push({\r\n                        shortDescription: tableGr.getDisplayValue('short_description'),\r\n                        sysId: tableGr.getUniqueValue(),\r\n                        glyphColor: tableGr.getValue('glyph_color'),\r\n                        status: tableGr.getValue('state'),\r\n                    });\r\n                }\r\n            });\r\n\t\t\tdata.tables = newTables;\r\n        } catch (e) {\r\n            data.message = e;\r\n            data.statusCode = 500;\r\n        }\r\n\r\n        response.setStatus(data.statusCode);\r\n        response.setBody(data);\r\n        return response;\r\n    },\r\n\r\n    getRoles: function(plugins) {\r\n        const userId = gs.getUserID();\r\n        const roles = {\r\n            admin: gs.hasRole('admin')\r\n        };\r\n\r\n\t\tlet queryString = 'role.nameSTARTSWITHx_cadso';\r\n\r\n\r\n        const sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\r\n        sysUserHasRoleGr.addQuery('user', userId);\r\n\r\n        const orQuery = sysUserHasRoleGr.addQuery('role.name', 'STARTSWITH', 'x_cadso');\r\n\t\tif (plugins.sn_customerservice) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_customerservice');\r\n\t\t}\r\n\t\tif (plugins.sn_lead_mgmt_core) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_lead_mgmt_core');\r\n\t\t}\r\n\r\n        sysUserHasRoleGr.query();\r\n\r\n        while (sysUserHasRoleGr.next()) {\r\n            const roleGr = sysUserHasRoleGr.role.getRefRecord();\r\n\r\n            if (!roleGr.isValidRecord()) continue;\r\n\r\n            const name = roleGr.getValue('name');\r\n\r\n            if (!name) continue;\r\n\r\n            roles[name] = true;\r\n        }\r\n\r\n        return roles;\r\n    },\r\n\r\n    checkAgileSegment: function(userId = gs.getUserID()) {\r\n        const workUserSegmentM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\r\n        workUserSegmentM2MGr.addEncodedQuery('user=' + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery('work_group.agile=true');\r\n        workUserSegmentM2MGr.setLimit(1);\r\n        workUserSegmentM2MGr.query();\r\n        return workUserSegmentM2MGr.hasNext();\r\n    },\r\n\r\n    getApprovalsCount: function() {\r\n        var approvalGA = new GlideAggregate('sysapproval_approver');\r\n        approvalGA.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe^source_tableSTARTSWITHx_cadso_work^state=requested');\r\n        approvalGA.addAggregate('COUNT');\r\n        approvalGA.query();\r\n        let count = 0;\r\n\r\n        while (approvalGA.next()) {\r\n            count = parseInt(approvalGA.getAggregate('COUNT'));\r\n        }\r\n\r\n        return count;\r\n    },\r\n\r\n    getApps: function() {\r\n        let GPM = new GlidePluginManager();\r\n\t\tconst apps = {\r\n\t\t\tsn_lead_mgmt_core: GPM.isActive('sn_lead_mgmt_core'),\r\n\t\t\tsn_customerservice: GPM.isActive('com.sn_customerservice'),\r\n\t\t\tisContactEnabled: gs.getProperty('x_cadso_core.disable_contact_features') === 'true',\r\n\t\t\tisLeadEnabled: gs.getProperty('x_cadso_core.disable_lead_features') === 'true',\r\n\t\t\tlist: []\r\n\t\t};\r\n\r\n        for (var x = 0; x < this.apps.length; x++) {\r\n\t\t\tconst app = this.apps[x];\r\n\t\t\tapps[app] = this.devMode || GPM.isActive(app);\r\n        }\r\n\r\n\t\tconst keys = Object.keys(apps);\r\n        for (var y = 0; y < keys.length; y++) {\r\n\t\t\tconst key = keys[x];\r\n\t\t\t\r\n\t\t\tif (apps[key] === true) {\r\n\t\t\t\tapps.list.push(key);\r\n\t\t\t}\r\n        }\r\n\r\n\t\treturn apps;\r\n    },\r\n\r\n    type: 'sideMenuApi'\r\n};",
    "formatted_script": {
      "line_count": 188,
      "char_count": 6103,
      "preview": "var sideMenuApi = Class.create();\r\nsideMenuApi.prototype = {\r\n    initialize: function() {\r\n        this.devMode = gs.getProperty('glide.appcreator.company.code') === 'cadso';\r\n        this.apps = [\"x...",
      "full_script": "var sideMenuApi = Class.create();\r\nsideMenuApi.prototype = {\r\n    initialize: function() {\r\n        this.devMode = gs.getProperty('glide.appcreator.company.code') === 'cadso';\r\n        this.apps = [\"x_cadso_veeva\", \"x_cadso_work\", \"x_cadso_cloud\", \"x_cadso_automate\", \"x_cadso_core\", \"x_cadso_email_spok\", \"x_cadso_text_spoke\", \"x_cadso_journey\", \"x_cadso_lead\"];\r\n    },\r\n\t\r\n    getLists: function(request, response) {\r\n        const {\r\n            tables = [],\r\n            segments = '',\r\n\t\t\tshowLimit = 5\r\n        } = request.body.data;\r\n\t\tlet limit = Number(showLimit);\r\n\t\tconst plugins = this.getApps();\r\n        let data = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: {},\r\n            roles: this.getRoles(plugins),\r\n            approvalCount: this.getApprovalsCount(),\r\n            agile: gs.getProperty('x_cadso_work.agile_mode') === 'true',\r\n\t\t\tplugins\r\n        };\r\n\r\n        if (data.agile && !data.roles.admin) {\r\n            const isAgile = this.checkAgileSegment();\r\n            data.isAgile = isAgile;\r\n            data.agile = isAgile;\r\n        }\r\n\r\n        try {\r\n\t\t\tconst newTables = [];\r\n            tables.forEach((table) => {\r\n\t\t\t\tconst {\r\n                name,\r\n                orderDirection = 'orderByDesc',\r\n                orderBy = 'sys_updated_on',\r\n                agile,\r\n\t\t\t\troles = {},\r\n\t\t\t\tplugins = {},\r\n\t\t\t\tnewRecordRoles = {},\r\n            } = table;\r\n                if (agile && !data.agile) return;\r\n\r\n\t\t\t\tif (roles && Object.keys(roles || {}).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) return;\r\n\t\t\t\t\tconst hasRole = Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t\tif (!hasRole) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (plugins && Object.keys(plugins).length) {\r\n\t\t\t\t\tif (!data.plugins || !Object.keys(data.plugins).length) return;\r\n\t\t\t\t\tconst hasPlugins = Object.keys(plugins).every((plugin) => data.plugins[plugin]);\r\n\t\t\t\t\tif (!hasPlugins) return;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newRecordRoles && Object.keys(newRecordRoles).length) {\r\n\t\t\t\t\tif (!data.roles || !Object.keys(data.roles).length) {\r\n\t\t\t\t\t\ttable.hasRoleForNewRecord = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttable.hasRoleForNewRecord =  Object.keys(roles).some((role) => data.roles[role]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttable.hasRoleForNewRecord = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewTables.push(table);\r\n                data.items[name] = [];\r\n\t\t\t\t\r\n                const tableGr = new GlideRecordSecure(name);\r\n\r\n                if (segments) {\r\n                    tableGr.addQuery(\"segment\", \"IN\", segments);\r\n                }\r\n\r\n                tableGr[orderDirection](orderBy);\r\n                tableGr.query();\r\n\t\t\t\tlet count = 0;\r\n                while (tableGr.next() && count < limit) {\r\n\t\t\t\t\tcount++;\r\n                    data.items[name].push({\r\n                        shortDescription: tableGr.getDisplayValue('short_description'),\r\n                        sysId: tableGr.getUniqueValue(),\r\n                        glyphColor: tableGr.getValue('glyph_color'),\r\n                        status: tableGr.getValue('state'),\r\n                    });\r\n                }\r\n            });\r\n\t\t\tdata.tables = newTables;\r\n        } catch (e) {\r\n            data.message = e;\r\n            data.statusCode = 500;\r\n        }\r\n\r\n        response.setStatus(data.statusCode);\r\n        response.setBody(data);\r\n        return response;\r\n    },\r\n\r\n    getRoles: function(plugins) {\r\n        const userId = gs.getUserID();\r\n        const roles = {\r\n            admin: gs.hasRole('admin')\r\n        };\r\n\r\n\t\tlet queryString = 'role.nameSTARTSWITHx_cadso';\r\n\r\n\r\n        const sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\r\n        sysUserHasRoleGr.addQuery('user', userId);\r\n\r\n        const orQuery = sysUserHasRoleGr.addQuery('role.name', 'STARTSWITH', 'x_cadso');\r\n\t\tif (plugins.sn_customerservice) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_customerservice');\r\n\t\t}\r\n\t\tif (plugins.sn_lead_mgmt_core) {\r\n\t\t\torQuery.addOrCondition('role.name', 'STARTSWITH', 'sn_lead_mgmt_core');\r\n\t\t}\r\n\r\n        sysUserHasRoleGr.query();\r\n\r\n        while (sysUserHasRoleGr.next()) {\r\n            const roleGr = sysUserHasRoleGr.role.getRefRecord();\r\n\r\n            if (!roleGr.isValidRecord()) continue;\r\n\r\n            const name = roleGr.getValue('name');\r\n\r\n            if (!name) continue;\r\n\r\n            roles[name] = true;\r\n        }\r\n\r\n        return roles;\r\n    },\r\n\r\n    checkAgileSegment: function(userId = gs.getUserID()) {\r\n        const workUserSegmentM2MGr = new GlideRecord('x_cadso_work_group_sys_user_m2m');\r\n        workUserSegmentM2MGr.addEncodedQuery('user=' + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery('work_group.agile=true');\r\n        workUserSegmentM2MGr.setLimit(1);\r\n        workUserSegmentM2MGr.query();\r\n        return workUserSegmentM2MGr.hasNext();\r\n    },\r\n\r\n    getApprovalsCount: function() {\r\n        var approvalGA = new GlideAggregate('sysapproval_approver');\r\n        approvalGA.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe^source_tableSTARTSWITHx_cadso_work^state=requested');\r\n        approvalGA.addAggregate('COUNT');\r\n        approvalGA.query();\r\n        let count = 0;\r\n\r\n        while (approvalGA.next()) {\r\n            count = parseInt(approvalGA.getAggregate('COUNT'));\r\n        }\r\n\r\n        return count;\r\n    },\r\n\r\n    getApps: function() {\r\n        let GPM = new GlidePluginManager();\r\n\t\tconst apps = {\r\n\t\t\tsn_lead_mgmt_core: GPM.isActive('sn_lead_mgmt_core'),\r\n\t\t\tsn_customerservice: GPM.isActive('com.sn_customerservice'),\r\n\t\t\tisContactEnabled: gs.getProperty('x_cadso_core.disable_contact_features') === 'true',\r\n\t\t\tisLeadEnabled: gs.getProperty('x_cadso_core.disable_lead_features') === 'true',\r\n\t\t\tlist: []\r\n\t\t};\r\n\r\n        for (var x = 0; x < this.apps.length; x++) {\r\n\t\t\tconst app = this.apps[x];\r\n\t\t\tapps[app] = this.devMode || GPM.isActive(app);\r\n        }\r\n\r\n\t\tconst keys = Object.keys(apps);\r\n        for (var y = 0; y < keys.length; y++) {\r\n\t\t\tconst key = keys[x];\r\n\t\t\t\r\n\t\t\tif (apps[key] === true) {\r\n\t\t\t\tapps.list.push(key);\r\n\t\t\t}\r\n        }\r\n\r\n\t\treturn apps;\r\n    },\r\n\r\n    type: 'sideMenuApi'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_b953e4b84728e950a1052a02e26d43fa",
    "display_value": "sys_script_include_b953e4b84728e950a1052a02e26d43fa"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.sideMenuApi",
    "display_value": "x_cadso_work.sideMenuApi"
  },
  "sys_created_on": {
    "value": "2023-01-19 19:06:38",
    "display_value": "2023-01-19 11:06:38 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "sideMenuApi",
    "display_value": "sideMenuApi"
  },
  "sys_name": {
    "value": "sideMenuApi",
    "display_value": "sideMenuApi"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
