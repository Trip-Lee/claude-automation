{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "c205510547f4025098519fd8036d4388",
    "extracted_at": "2025-09-19T21:48:31.022Z",
    "display_value": "DateCalculation",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "18",
    "display_value": "18"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-11 18:51:02",
    "display_value": "2025-03-11 11:51:02 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var DateCalculation = Class.create();\r\nDateCalculation.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tthis.timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\r\n\t\tthis.format = (this.dateFormat && this.timeFormat) ? this.dateFormat + ' ' + this.timeFormat : \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.schedule = '';\r\n\t},\r\n\r\n\tstartDateCalc: function(inputs, outputs) {\r\n\t\tthis.schedule = inputs.schedule;\r\n\t\tthis.updateStartDates({ project: inputs.project, query: 'dependenciesISEMPTY', startDateArg: '', type: inputs.type });\r\n\t},\r\n\r\n\tupdateStartDates: function({ project, query, startDateArg = '', type }) {\r\n\t\tconst workTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\tworkTaskGr.addQuery('project', project);\r\n\t\tif (startDateArg) {\r\n\t\t\tvar dateQuery = 'expected_startISEMPTY^ORexpected_start<=' + startDateArg;\r\n\t\t\tworkTaskGr.addEncodedQuery(dateQuery);\r\n\t\t}\r\n\t\tworkTaskGr.addEncodedQuery(query);\r\n\t\tworkTaskGr.setLimit(1);\r\n\t\tworkTaskGr.query();\r\n\r\n\t\twhile (workTaskGr.next()) {\r\n\t\t\tlet startDateInput = '';\r\n\t\t\tlet duration = workTaskGr.getValue('duration');\r\n\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'start' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tstartDateInput = new GlideDateTime(workTaskGr.getValue('expected_start'));\r\n\t\t\t} else if (query === 'dependenciesISEMPTY') {\r\n\t\t\t\tconst projectGr = workTaskGr.project.getRefRecord();\r\n\t\t\t\tif (projectGr.isValidRecord()) {\r\n\t\t\t\t\tstartDateInput = new GlideDateTime(projectGr.getValue('expected_start'));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstartDateInput = startDateArg;\r\n\t\t\t}\r\n\r\n\t\t\tconst { startDate, endDate } = this.getDates({ type: type, taskstartdate: startDateInput, duration: duration, schedule: this.schedule });\r\n\t\t\tworkTaskGr.setValue('expected_start', startDate);\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'end' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tworkTaskGr.setValue('expected_end', endDate);\r\n\t\t\t}\r\n\t\t\tworkTaskGr.update();\r\n\t\t\tconst dependencies = workTaskGr.getUniqueValue();\r\n\t\t\t//this.updateStartDates({ project, query: 'dependenciesLIKE' + dependencies, startDateArg: endDate, type });\r\n\t\t}\r\n\t},\r\n\r\n\tgetDates: function({ type, taskstartdate, duration: dur, schedule }) {\r\n\t\tlet endDate = '';\r\n\t\tlet duration = '';\r\n\t\tlet startDate = '';\r\n\t\tif (type == 'start') {\r\n\t\t\tconst results = this.nonScheduledStart({ taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tdur = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t} else if (type == 'startSchedule') {\r\n\t\t\tconst results = this.scheduledStart({ schedule, taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tduration = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t}\r\n\r\n\t\treturn { startDate, endDate, duration };\r\n\t},\r\n\r\n\tnonScheduledStart: function({ taskstartdate, format, duration }) {\r\n\t\tconst scheduleApi = new x_cadso_work.Schedule({}); \r\n\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tvar endDate = answer.date.getDisplayValue();\r\n\t\tvar dur = answer.duration;\r\n\t\tvar startDate = taskstartdate;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\tscheduledStart: function({ taskstartdate, schedule = { sys_id: '' }, format, duration }) {\r\n\t\tconst scheduleSysId = schedule.sys_id + '';\r\n\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\r\n\t\tvar preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tconst dates = scheduleApi2.generateDates({\r\n\t\t\tduration: duration,\r\n\t\t\tstart: taskstartdate && taskstartdate.getDisplayValueInternal ? taskstartdate.getDisplayValueInternal() : taskstartdate,\r\n\t\t\tend: preAnswer.date.getDisplayValueInternal(),\r\n\t\t\tstartDirection: \"forwards\",\r\n\t\t\tendDirection: \"forwards\",\r\n\t\t\tmove: \"endDate\",\r\n\t\t\tmoveDirection: \"forwards\",\r\n\t\t\tformat: format\r\n\t\t});\r\n\t\tvar startDate = dates.startDate.getDisplayValue();\r\n\t\tvar endDate = dates.endDate.getDisplayValue();\r\n\t\tvar dur = preAnswer.duration;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\ttype: 'DateCalculation'\r\n};",
    "display_value": "var DateCalculation = Class.create();\r\nDateCalculation.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tthis.timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\r\n\t\tthis.format = (this.dateFormat && this.timeFormat) ? this.dateFormat + ' ' + this.timeFormat : \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.schedule = '';\r\n\t},\r\n\r\n\tstartDateCalc: function(inputs, outputs) {\r\n\t\tthis.schedule = inputs.schedule;\r\n\t\tthis.updateStartDates({ project: inputs.project, query: 'dependenciesISEMPTY', startDateArg: '', type: inputs.type });\r\n\t},\r\n\r\n\tupdateStartDates: function({ project, query, startDateArg = '', type }) {\r\n\t\tconst workTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\tworkTaskGr.addQuery('project', project);\r\n\t\tif (startDateArg) {\r\n\t\t\tvar dateQuery = 'expected_startISEMPTY^ORexpected_start<=' + startDateArg;\r\n\t\t\tworkTaskGr.addEncodedQuery(dateQuery);\r\n\t\t}\r\n\t\tworkTaskGr.addEncodedQuery(query);\r\n\t\tworkTaskGr.setLimit(1);\r\n\t\tworkTaskGr.query();\r\n\r\n\t\twhile (workTaskGr.next()) {\r\n\t\t\tlet startDateInput = '';\r\n\t\t\tlet duration = workTaskGr.getValue('duration');\r\n\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'start' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tstartDateInput = new GlideDateTime(workTaskGr.getValue('expected_start'));\r\n\t\t\t} else if (query === 'dependenciesISEMPTY') {\r\n\t\t\t\tconst projectGr = workTaskGr.project.getRefRecord();\r\n\t\t\t\tif (projectGr.isValidRecord()) {\r\n\t\t\t\t\tstartDateInput = new GlideDateTime(projectGr.getValue('expected_start'));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstartDateInput = startDateArg;\r\n\t\t\t}\r\n\r\n\t\t\tconst { startDate, endDate } = this.getDates({ type: type, taskstartdate: startDateInput, duration: duration, schedule: this.schedule });\r\n\t\t\tworkTaskGr.setValue('expected_start', startDate);\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'end' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tworkTaskGr.setValue('expected_end', endDate);\r\n\t\t\t}\r\n\t\t\tworkTaskGr.update();\r\n\t\t\tconst dependencies = workTaskGr.getUniqueValue();\r\n\t\t\t//this.updateStartDates({ project, query: 'dependenciesLIKE' + dependencies, startDateArg: endDate, type });\r\n\t\t}\r\n\t},\r\n\r\n\tgetDates: function({ type, taskstartdate, duration: dur, schedule }) {\r\n\t\tlet endDate = '';\r\n\t\tlet duration = '';\r\n\t\tlet startDate = '';\r\n\t\tif (type == 'start') {\r\n\t\t\tconst results = this.nonScheduledStart({ taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tdur = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t} else if (type == 'startSchedule') {\r\n\t\t\tconst results = this.scheduledStart({ schedule, taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tduration = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t}\r\n\r\n\t\treturn { startDate, endDate, duration };\r\n\t},\r\n\r\n\tnonScheduledStart: function({ taskstartdate, format, duration }) {\r\n\t\tconst scheduleApi = new x_cadso_work.Schedule({}); \r\n\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tvar endDate = answer.date.getDisplayValue();\r\n\t\tvar dur = answer.duration;\r\n\t\tvar startDate = taskstartdate;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\tscheduledStart: function({ taskstartdate, schedule = { sys_id: '' }, format, duration }) {\r\n\t\tconst scheduleSysId = schedule.sys_id + '';\r\n\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\r\n\t\tvar preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tconst dates = scheduleApi2.generateDates({\r\n\t\t\tduration: duration,\r\n\t\t\tstart: taskstartdate && taskstartdate.getDisplayValueInternal ? taskstartdate.getDisplayValueInternal() : taskstartdate,\r\n\t\t\tend: preAnswer.date.getDisplayValueInternal(),\r\n\t\t\tstartDirection: \"forwards\",\r\n\t\t\tendDirection: \"forwards\",\r\n\t\t\tmove: \"endDate\",\r\n\t\t\tmoveDirection: \"forwards\",\r\n\t\t\tformat: format\r\n\t\t});\r\n\t\tvar startDate = dates.startDate.getDisplayValue();\r\n\t\tvar endDate = dates.endDate.getDisplayValue();\r\n\t\tvar dur = preAnswer.duration;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\ttype: 'DateCalculation'\r\n};",
    "formatted_script": {
      "line_count": 101,
      "char_count": 4215,
      "preview": "var DateCalculation = Class.create();\r\nDateCalculation.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tthis.timeFormat = (gs.getProperty('glid...",
      "full_script": "var DateCalculation = Class.create();\r\nDateCalculation.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tthis.timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\r\n\t\tthis.format = (this.dateFormat && this.timeFormat) ? this.dateFormat + ' ' + this.timeFormat : \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.schedule = '';\r\n\t},\r\n\r\n\tstartDateCalc: function(inputs, outputs) {\r\n\t\tthis.schedule = inputs.schedule;\r\n\t\tthis.updateStartDates({ project: inputs.project, query: 'dependenciesISEMPTY', startDateArg: '', type: inputs.type });\r\n\t},\r\n\r\n\tupdateStartDates: function({ project, query, startDateArg = '', type }) {\r\n\t\tconst workTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\tworkTaskGr.addQuery('project', project);\r\n\t\tif (startDateArg) {\r\n\t\t\tvar dateQuery = 'expected_startISEMPTY^ORexpected_start<=' + startDateArg;\r\n\t\t\tworkTaskGr.addEncodedQuery(dateQuery);\r\n\t\t}\r\n\t\tworkTaskGr.addEncodedQuery(query);\r\n\t\tworkTaskGr.setLimit(1);\r\n\t\tworkTaskGr.query();\r\n\r\n\t\twhile (workTaskGr.next()) {\r\n\t\t\tlet startDateInput = '';\r\n\t\t\tlet duration = workTaskGr.getValue('duration');\r\n\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'start' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tstartDateInput = new GlideDateTime(workTaskGr.getValue('expected_start'));\r\n\t\t\t} else if (query === 'dependenciesISEMPTY') {\r\n\t\t\t\tconst projectGr = workTaskGr.project.getRefRecord();\r\n\t\t\t\tif (projectGr.isValidRecord()) {\r\n\t\t\t\t\tstartDateInput = new GlideDateTime(projectGr.getValue('expected_start'));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstartDateInput = startDateArg;\r\n\t\t\t}\r\n\r\n\t\t\tconst { startDate, endDate } = this.getDates({ type: type, taskstartdate: startDateInput, duration: duration, schedule: this.schedule });\r\n\t\t\tworkTaskGr.setValue('expected_start', startDate);\r\n\t\t\tif (workTaskGr.getValue('dates_overridden') === 'end' || workTaskGr.getValue('dates_overridden') === 'startend') {\r\n\t\t\t\tworkTaskGr.setValue('expected_end', endDate);\r\n\t\t\t}\r\n\t\t\tworkTaskGr.update();\r\n\t\t\tconst dependencies = workTaskGr.getUniqueValue();\r\n\t\t\t//this.updateStartDates({ project, query: 'dependenciesLIKE' + dependencies, startDateArg: endDate, type });\r\n\t\t}\r\n\t},\r\n\r\n\tgetDates: function({ type, taskstartdate, duration: dur, schedule }) {\r\n\t\tlet endDate = '';\r\n\t\tlet duration = '';\r\n\t\tlet startDate = '';\r\n\t\tif (type == 'start') {\r\n\t\t\tconst results = this.nonScheduledStart({ taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tdur = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t} else if (type == 'startSchedule') {\r\n\t\t\tconst results = this.scheduledStart({ schedule, taskstartdate, format: this.format, duration: dur });\r\n\t\t\tendDate = results.endDate;\r\n\t\t\tduration = results.duration;\r\n\t\t\tstartDate = results.startDate;\r\n\t\t}\r\n\r\n\t\treturn { startDate, endDate, duration };\r\n\t},\r\n\r\n\tnonScheduledStart: function({ taskstartdate, format, duration }) {\r\n\t\tconst scheduleApi = new x_cadso_work.Schedule({}); \r\n\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tvar endDate = answer.date.getDisplayValue();\r\n\t\tvar dur = answer.duration;\r\n\t\tvar startDate = taskstartdate;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\tscheduledStart: function({ taskstartdate, schedule = { sys_id: '' }, format, duration }) {\r\n\t\tconst scheduleSysId = schedule.sys_id + '';\r\n\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\r\n\t\tvar preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\r\n\t\tconst dates = scheduleApi2.generateDates({\r\n\t\t\tduration: duration,\r\n\t\t\tstart: taskstartdate && taskstartdate.getDisplayValueInternal ? taskstartdate.getDisplayValueInternal() : taskstartdate,\r\n\t\t\tend: preAnswer.date.getDisplayValueInternal(),\r\n\t\t\tstartDirection: \"forwards\",\r\n\t\t\tendDirection: \"forwards\",\r\n\t\t\tmove: \"endDate\",\r\n\t\t\tmoveDirection: \"forwards\",\r\n\t\t\tformat: format\r\n\t\t});\r\n\t\tvar startDate = dates.startDate.getDisplayValue();\r\n\t\tvar endDate = dates.endDate.getDisplayValue();\r\n\t\tvar dur = preAnswer.duration;\r\n\t\treturn { startDate, endDate, duration: dur };\r\n\t},\r\n\r\n\ttype: 'DateCalculation'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_c205510547f4025098519fd8036d4388",
    "display_value": "sys_script_include_c205510547f4025098519fd8036d4388"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.DateCalculation",
    "display_value": "x_cadso_work.DateCalculation"
  },
  "sys_created_on": {
    "value": "2024-03-05 20:00:30",
    "display_value": "2024-03-05 12:00:30 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "DateCalculation",
    "display_value": "DateCalculation"
  },
  "sys_name": {
    "value": "DateCalculation",
    "display_value": "DateCalculation"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
