{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "dde2ecb84728e950a1052a02e26d4364",
    "extracted_at": "2025-09-19T21:48:31.849Z",
    "display_value": "sideMenuApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "42",
    "display_value": "42"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-10-11 02:45:53",
    "display_value": "2024-10-10 07:45:53 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var sideMenuApiMS = Class.create();\nsideMenuApiMS.prototype = {\n\tinitialize: function() {\n\t},\n\n\tgetLists: function(request, response) {\t\t\n\t\tconst { tables } = request.body.data;\n\t\tlet data = {\n\t\t\tmessage: 'Success!',\n\t\t\tstatusCode: 200,\n\t\t\titems: {},\n\t\t\troles: this.getRoles(),\n\t\t\tqueries: {}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { highestRole } = data.roles;\n\t\t\ttables.map(({ name, queries, orderDirection = 'orderByDesc', orderBy = 'sys_updated_on', limit = 5 }) => {\n\t\t\t\tlet query = queries[highestRole];\n\t\t\t\tconst createdBy = queries.createdBy;\n\t\t\t\tdata.queries[name] = query;\n\t\t\t\tconst tableGr = new GlideRecordSecure(name);\n\n\t\t\t\tif (createdBy && query) {\n\t\t\t\t\tquery += '^ORsys_created_by=' + gs.getUserName();\n\t\t\t\t}\n\n\t\t\t\tif (query) {\n\t\t\t\t\ttableGr.addEncodedQuery(query);\n\t\t\t\t}\n\t\t\t\ttableGr[orderDirection](orderBy);\n\t\t\t\ttableGr.setLimit(limit);\n\t\t\t\ttableGr.query();\n\n\t\t\t\tdata.items[name] = [];\n\n\t\t\t\twhile(tableGr.next()) {\n\t\t\t\t\tdata.items[name].push({\n\t\t\t\t\t\tshortDescription: tableGr.short_description.getDisplayValue(),\n\t\t\t\t\t\tsysId: tableGr.getUniqueValue(),\n\t\t\t\t\t\tglyphColor: tableGr.getValue(\"glyph_color\"),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tdata.message = e;\n\t\t\tdata.statusCode = 500;\n\t\t}\n\n\t\tresponse.setStatus(data.statusCode);\n\t\tresponse.setBody(data);\n\t\treturn response;\n\t},\n\n\tgetRoles: function() {\n\t\tconst userId = gs.getUserID();\n\t\tconst roles = {\n\t\t\tadmin: false,\n\t\t\tconfigurator: false,\n\t\t\tmanager: false,\n\t\t\tenhancedUser: false,\n\t\t\tuser: false,\n\t\t\thighestRole: ''\n\t\t};\n\t\tconst sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\n\t\tsysUserHasRoleGr.addQuery('user', userId);\n\t\tsysUserHasRoleGr.addEncodedQuery('role.nameSTARTSWITHx_cadso_work.');\n\t\tsysUserHasRoleGr.query();\n\n\t\twhile (sysUserHasRoleGr.next()) {\n\t\t\tconst roleGr = sysUserHasRoleGr.role.getRefRecord();\n\n\t\t\tif (!roleGr.isValidRecord()) continue;\n\n\t\t\tconst name = roleGr.getValue('name');\n\n\t\t\tif (name.indexOf('admin') > -1) {\n\t\t\t\troles.admin = true;\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('configurator') > -1) {\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('manager') > -1) {\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('enhanced_user') > -1) {\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('user') > -1) {\n\t\t\t\troles.user = true;\n\t\t\t}\n\t\t}\n\n\t\tif (roles.admin) {\n\t\t\troles.highestRole = 'admin';\n\t\t} else if (roles.configurator) {\n\t\t\troles.highestRole = 'configurator';\n\t\t} else if (roles.manager) {\n\t\t\troles.highestRole = 'manager';\n\t\t} else if (roles.enhancedUser) {\n\t\t\troles.highestRole = 'enhancedUser';\n\t\t} else if (roles.user) {\n\t\t\troles.highestRole = 'user';\n\t\t}\n\n\t\treturn roles;\n\t},\n\n\ttype: 'sideMenuApiMS'\n};",
    "display_value": "var sideMenuApiMS = Class.create();\nsideMenuApiMS.prototype = {\n\tinitialize: function() {\n\t},\n\n\tgetLists: function(request, response) {\t\t\n\t\tconst { tables } = request.body.data;\n\t\tlet data = {\n\t\t\tmessage: 'Success!',\n\t\t\tstatusCode: 200,\n\t\t\titems: {},\n\t\t\troles: this.getRoles(),\n\t\t\tqueries: {}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { highestRole } = data.roles;\n\t\t\ttables.map(({ name, queries, orderDirection = 'orderByDesc', orderBy = 'sys_updated_on', limit = 5 }) => {\n\t\t\t\tlet query = queries[highestRole];\n\t\t\t\tconst createdBy = queries.createdBy;\n\t\t\t\tdata.queries[name] = query;\n\t\t\t\tconst tableGr = new GlideRecordSecure(name);\n\n\t\t\t\tif (createdBy && query) {\n\t\t\t\t\tquery += '^ORsys_created_by=' + gs.getUserName();\n\t\t\t\t}\n\n\t\t\t\tif (query) {\n\t\t\t\t\ttableGr.addEncodedQuery(query);\n\t\t\t\t}\n\t\t\t\ttableGr[orderDirection](orderBy);\n\t\t\t\ttableGr.setLimit(limit);\n\t\t\t\ttableGr.query();\n\n\t\t\t\tdata.items[name] = [];\n\n\t\t\t\twhile(tableGr.next()) {\n\t\t\t\t\tdata.items[name].push({\n\t\t\t\t\t\tshortDescription: tableGr.short_description.getDisplayValue(),\n\t\t\t\t\t\tsysId: tableGr.getUniqueValue(),\n\t\t\t\t\t\tglyphColor: tableGr.getValue(\"glyph_color\"),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tdata.message = e;\n\t\t\tdata.statusCode = 500;\n\t\t}\n\n\t\tresponse.setStatus(data.statusCode);\n\t\tresponse.setBody(data);\n\t\treturn response;\n\t},\n\n\tgetRoles: function() {\n\t\tconst userId = gs.getUserID();\n\t\tconst roles = {\n\t\t\tadmin: false,\n\t\t\tconfigurator: false,\n\t\t\tmanager: false,\n\t\t\tenhancedUser: false,\n\t\t\tuser: false,\n\t\t\thighestRole: ''\n\t\t};\n\t\tconst sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\n\t\tsysUserHasRoleGr.addQuery('user', userId);\n\t\tsysUserHasRoleGr.addEncodedQuery('role.nameSTARTSWITHx_cadso_work.');\n\t\tsysUserHasRoleGr.query();\n\n\t\twhile (sysUserHasRoleGr.next()) {\n\t\t\tconst roleGr = sysUserHasRoleGr.role.getRefRecord();\n\n\t\t\tif (!roleGr.isValidRecord()) continue;\n\n\t\t\tconst name = roleGr.getValue('name');\n\n\t\t\tif (name.indexOf('admin') > -1) {\n\t\t\t\troles.admin = true;\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('configurator') > -1) {\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('manager') > -1) {\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('enhanced_user') > -1) {\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('user') > -1) {\n\t\t\t\troles.user = true;\n\t\t\t}\n\t\t}\n\n\t\tif (roles.admin) {\n\t\t\troles.highestRole = 'admin';\n\t\t} else if (roles.configurator) {\n\t\t\troles.highestRole = 'configurator';\n\t\t} else if (roles.manager) {\n\t\t\troles.highestRole = 'manager';\n\t\t} else if (roles.enhancedUser) {\n\t\t\troles.highestRole = 'enhancedUser';\n\t\t} else if (roles.user) {\n\t\t\troles.highestRole = 'user';\n\t\t}\n\n\t\treturn roles;\n\t},\n\n\ttype: 'sideMenuApiMS'\n};",
    "formatted_script": {
      "line_count": 116,
      "char_count": 2885,
      "preview": "var sideMenuApiMS = Class.create();\nsideMenuApiMS.prototype = {\n\tinitialize: function() {\n\t},\n\n\tgetLists: function(request, response) {\t\t\n\t\tconst { tables } = request.body.data;\n\t\tlet data = {\n\t\t\tmess...",
      "full_script": "var sideMenuApiMS = Class.create();\nsideMenuApiMS.prototype = {\n\tinitialize: function() {\n\t},\n\n\tgetLists: function(request, response) {\t\t\n\t\tconst { tables } = request.body.data;\n\t\tlet data = {\n\t\t\tmessage: 'Success!',\n\t\t\tstatusCode: 200,\n\t\t\titems: {},\n\t\t\troles: this.getRoles(),\n\t\t\tqueries: {}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { highestRole } = data.roles;\n\t\t\ttables.map(({ name, queries, orderDirection = 'orderByDesc', orderBy = 'sys_updated_on', limit = 5 }) => {\n\t\t\t\tlet query = queries[highestRole];\n\t\t\t\tconst createdBy = queries.createdBy;\n\t\t\t\tdata.queries[name] = query;\n\t\t\t\tconst tableGr = new GlideRecordSecure(name);\n\n\t\t\t\tif (createdBy && query) {\n\t\t\t\t\tquery += '^ORsys_created_by=' + gs.getUserName();\n\t\t\t\t}\n\n\t\t\t\tif (query) {\n\t\t\t\t\ttableGr.addEncodedQuery(query);\n\t\t\t\t}\n\t\t\t\ttableGr[orderDirection](orderBy);\n\t\t\t\ttableGr.setLimit(limit);\n\t\t\t\ttableGr.query();\n\n\t\t\t\tdata.items[name] = [];\n\n\t\t\t\twhile(tableGr.next()) {\n\t\t\t\t\tdata.items[name].push({\n\t\t\t\t\t\tshortDescription: tableGr.short_description.getDisplayValue(),\n\t\t\t\t\t\tsysId: tableGr.getUniqueValue(),\n\t\t\t\t\t\tglyphColor: tableGr.getValue(\"glyph_color\"),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tdata.message = e;\n\t\t\tdata.statusCode = 500;\n\t\t}\n\n\t\tresponse.setStatus(data.statusCode);\n\t\tresponse.setBody(data);\n\t\treturn response;\n\t},\n\n\tgetRoles: function() {\n\t\tconst userId = gs.getUserID();\n\t\tconst roles = {\n\t\t\tadmin: false,\n\t\t\tconfigurator: false,\n\t\t\tmanager: false,\n\t\t\tenhancedUser: false,\n\t\t\tuser: false,\n\t\t\thighestRole: ''\n\t\t};\n\t\tconst sysUserHasRoleGr = new GlideRecord('sys_user_has_role');\n\t\tsysUserHasRoleGr.addQuery('user', userId);\n\t\tsysUserHasRoleGr.addEncodedQuery('role.nameSTARTSWITHx_cadso_work.');\n\t\tsysUserHasRoleGr.query();\n\n\t\twhile (sysUserHasRoleGr.next()) {\n\t\t\tconst roleGr = sysUserHasRoleGr.role.getRefRecord();\n\n\t\t\tif (!roleGr.isValidRecord()) continue;\n\n\t\t\tconst name = roleGr.getValue('name');\n\n\t\t\tif (name.indexOf('admin') > -1) {\n\t\t\t\troles.admin = true;\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('configurator') > -1) {\n\t\t\t\troles.configurator = true;\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('manager') > -1) {\n\t\t\t\troles.manager = true;\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('enhanced_user') > -1) {\n\t\t\t\troles.enhancedUser = true;\n\t\t\t\troles.user = true;\n\t\t\t} else if (name.indexOf('user') > -1) {\n\t\t\t\troles.user = true;\n\t\t\t}\n\t\t}\n\n\t\tif (roles.admin) {\n\t\t\troles.highestRole = 'admin';\n\t\t} else if (roles.configurator) {\n\t\t\troles.highestRole = 'configurator';\n\t\t} else if (roles.manager) {\n\t\t\troles.highestRole = 'manager';\n\t\t} else if (roles.enhancedUser) {\n\t\t\troles.highestRole = 'enhancedUser';\n\t\t} else if (roles.user) {\n\t\t\troles.highestRole = 'user';\n\t\t}\n\n\t\treturn roles;\n\t},\n\n\ttype: 'sideMenuApiMS'\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_dde2ecb84728e950a1052a02e26d4364",
    "display_value": "sys_script_include_dde2ecb84728e950a1052a02e26d4364"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.sideMenuApiMS",
    "display_value": "x_cadso_work.sideMenuApiMS"
  },
  "sys_created_on": {
    "value": "2023-01-19 19:06:12",
    "display_value": "2023-01-19 11:06:12 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "sideMenuApiMS",
    "display_value": "sideMenuApiMS"
  },
  "sys_name": {
    "value": "sideMenuApiMS",
    "display_value": "sideMenuApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
