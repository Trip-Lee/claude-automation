{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "21725da447de7150b0361ae8036d439b",
    "extracted_at": "2025-09-19T21:48:31.270Z",
    "display_value": "ScheduleWrapperMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "168",
    "display_value": "168"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-11-14 22:18:51",
    "display_value": "2024-11-14 02:18:51 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const ScheduleWrapperMS = Class.create();\r\nScheduleWrapperMS.prototype = {\r\n\tinitialize: function (props = {}) {\r\n\t\tconst { scheduleSysId, date, format, duration = 0 } = props;\r\n\t\tthis.defaultSchedule = gs.getProperty('x_cadso_work.default_schedule');\r\n\t\tthis.getGapInc();\r\n\t\tthis.duration = duration;\r\n\t\tthis.date = date;\r\n\t\tthis.getUserData();\r\n\t\tthis.defaultFormat = this.user.format || \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.format = format || this.defaultFormat;\r\n\t\tthis.gdt = new GlideDateTime();\r\n\r\n\t\tif (date) {\r\n\t\t\tthis.gdt.setDisplayValue(date, this.format);\r\n\t\t}\r\n\t\tif (scheduleSysId) {\r\n\t\t\tthis.scheduleSysId = scheduleSysId;\r\n\t\t\tthis.glideSchedule = new GlideSchedule(scheduleSysId);\r\n\t\t}\r\n\t},\r\n\r\n\tgetUserFormat: function() {\r\n\t\tconst { dateFormat = \"yyyy-MM-dd\", timeFormat = \"HH:mm:ss\", format = \"yyyy-MM-dd HH:mm:ss\", dateSpliter = \"/\", timeSpliter = \":\", is24Hour = false } = this.user;\r\n\t\treturn {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tload: function ({ scheduleSysId, date, format }) {\r\n\t\tthis.initialize(scheduleSysId, date, format);\r\n\t},\r\n\r\n\tsetDate: function (props = {}) {\r\n\t\tconst { date, format = '' } = props;\r\n\t\tthis.date = date;\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.gdt = new GlideDateTime();\r\n\t\tthis.gdt.setDisplayValue(this.date, this.format);\r\n\t},\r\n\r\n\tsetDates: function (props = {}) {\r\n\t\tconst { start, end, format } = props;\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.startDate = new GlideDateTime();\r\n\t\tthis.startDate.setDisplayValueInternal(this.start);\r\n\r\n\t\tthis.endDate = new GlideDateTime();\r\n\t\tthis.endDate.setDisplayValueInternal(this.end);\r\n\t},\r\n\r\n\tisInSchedule: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.isInSchedule(date || this.gdt);\r\n\t},\r\n\r\n\twhenNext: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.whenNext(date || this.gdt);\r\n\t},\r\n\r\n\twhenPrevious: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tvar gdtDate2 = '';\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\tgdtDate2 = new GlideDateTime();\r\n\t\t\tgdtDate2.setDisplayValueInternal(date.getDisplayValueInternal());\r\n\t\t} else {\r\n\t\t\tgdtDate2 = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet timeUntilNext = 0;\r\n\t\tconst time = this.timeInc;\r\n\r\n\t\twhile (!this.isInSchedule({date: gdtDate2})) {\r\n\t\t\ttimeUntilNext += time;\r\n\t\t\tgdtDate2.subtract(time);\r\n\t\t}\r\n\r\n\t\treturn timeUntilNext;\r\n\t},\r\n\r\n\tfindDuration: function({ startDate, endDate, format }) {\r\n\t\tthis.format = format || this.format || this.defaultFormat;\r\n\t\tconst gdtSD = new GlideDateTime();\r\n\t\tgdtSD.setDisplayValueInternal(startDate);\r\n\t\tconst gdtED = new GlideDateTime();\r\n\t\tgdtED.setDisplayValueInternal(endDate);\r\n\t\tconst duration = this.glideSchedule.duration(gdtSD, gdtED);\r\n\t\treturn duration.getNumericValue();\r\n\t},\r\n\r\n\tformatDuration: function ({ duration, format = \"minutes\" }) {\r\n\t\tif (format === \"minutes\") {\r\n\t\t\tduration = duration / 1000 / 60;\r\n\t\t} else if (format === \"hours\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60;\r\n\t\t} else if (format === \"days\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60 / 24;\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\t},\r\n\r\n\tgetUserData: function() {\r\n\t\tconst userSysId = gs.getUserID();\r\n\t\tconst userGr = new GlideRecord('sys_user');\r\n\t\tlet dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tlet timeFormat = gs.getProperty('glide.sys.time_format');\r\n\t\tif (userGr.get(userSysId)) {\r\n\t\t\tdateFormat = userGr.getDisplayValue('date_format') || dateFormat;\r\n\t\t\ttimeFormat = userGr.getDisplayValue('time_format') || timeFormat;\r\n\t\t}\r\n\r\n\t\tlet dateSpliter = '-';\r\n\r\n\t\tif (dateFormat.indexOf('.') > -1) {\r\n\t\t\tdateSpliter = '.';\r\n\t\t} else if (dateFormat.indexOf('/') > -1) {\r\n\t\t\tdateSpliter = '/';\r\n\t\t}\r\n\r\n\t\tlet timeSpliter = ':';\r\n\r\n\t\tif (timeFormat.indexOf('.') > -1) {\r\n\t\t\ttimeSpliter = '.';\r\n\t\t}\r\n\r\n\t\tlet is24Hour = true;\r\n\t\t\r\n\t\tif (timeFormat.indexOf('a') > -1 || timeFormat.indexOf('12 hour') > -1) {\r\n\t\t\tis24Hour = false;\r\n\t\t}\r\n\r\n\t\ttimeFormat = timeFormat.replace(' (12 hour)', ' a');\r\n\t\ttimeFormat = timeFormat.replace(' (24 hour)', '');\r\n\r\n\t\tthis.user = {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat: dateFormat + ' ' + timeFormat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tsetDuration: function({duration = 0}) {\r\n\t\tduration = new GlideDateTime(duration);\r\n\t\t//duration.setDisplayValueInternal(duration);\r\n\t\tthis.duration = duration.getNumericValue();\r\n\t},\r\n\r\n\tfindDate: function({ date, direction, format }) {\r\n\t\tvar gdtDate = '';\r\n\t\tif (date) {\r\n\t\t\tgdtDate = new GlideDateTime();\r\n\t\t\tgdtDate.setDisplayValueInternal(date);\r\n\t\t} else {\r\n\t\t\tgdtDate = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet valid = this.isInSchedule({date: gdtDate});\r\n\r\n\t\tif (!valid && direction === 'forwards') {\r\n\t\t\tlet nextTime = this.whenNext({date: gdtDate});\r\n\t\t\tgdtDate.add(nextTime);\r\n\t\t} else if (!valid && direction === 'backwards') {\r\n\t\t\tconst previousTime = this.whenPrevious({ date: gdtDate });\r\n\t\t\tgdtDate.subtract(previousTime);\r\n\t\t}\r\n\r\n\t\treturn gdtDate.getDisplayValueInternal();\r\n\t},\r\n\r\n\tgetGapInc: function() {\r\n\t\tthis.timeInc = 1000*60*60;\r\n\t\tif (gs.getProperty('x_cadso_work.schedule_time_gap')) {\r\n\t\t\tconst timeInc = Number(gs.getProperty('x_cadso_work.schedule_time_gap'));\r\n\t\t\tthis.timeInc = timeInc >= 60000 ? timeInc : this.timeInc;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"ScheduleWrapperMS\",\r\n};\r\n",
    "display_value": "const ScheduleWrapperMS = Class.create();\r\nScheduleWrapperMS.prototype = {\r\n\tinitialize: function (props = {}) {\r\n\t\tconst { scheduleSysId, date, format, duration = 0 } = props;\r\n\t\tthis.defaultSchedule = gs.getProperty('x_cadso_work.default_schedule');\r\n\t\tthis.getGapInc();\r\n\t\tthis.duration = duration;\r\n\t\tthis.date = date;\r\n\t\tthis.getUserData();\r\n\t\tthis.defaultFormat = this.user.format || \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.format = format || this.defaultFormat;\r\n\t\tthis.gdt = new GlideDateTime();\r\n\r\n\t\tif (date) {\r\n\t\t\tthis.gdt.setDisplayValue(date, this.format);\r\n\t\t}\r\n\t\tif (scheduleSysId) {\r\n\t\t\tthis.scheduleSysId = scheduleSysId;\r\n\t\t\tthis.glideSchedule = new GlideSchedule(scheduleSysId);\r\n\t\t}\r\n\t},\r\n\r\n\tgetUserFormat: function() {\r\n\t\tconst { dateFormat = \"yyyy-MM-dd\", timeFormat = \"HH:mm:ss\", format = \"yyyy-MM-dd HH:mm:ss\", dateSpliter = \"/\", timeSpliter = \":\", is24Hour = false } = this.user;\r\n\t\treturn {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tload: function ({ scheduleSysId, date, format }) {\r\n\t\tthis.initialize(scheduleSysId, date, format);\r\n\t},\r\n\r\n\tsetDate: function (props = {}) {\r\n\t\tconst { date, format = '' } = props;\r\n\t\tthis.date = date;\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.gdt = new GlideDateTime();\r\n\t\tthis.gdt.setDisplayValue(this.date, this.format);\r\n\t},\r\n\r\n\tsetDates: function (props = {}) {\r\n\t\tconst { start, end, format } = props;\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.startDate = new GlideDateTime();\r\n\t\tthis.startDate.setDisplayValueInternal(this.start);\r\n\r\n\t\tthis.endDate = new GlideDateTime();\r\n\t\tthis.endDate.setDisplayValueInternal(this.end);\r\n\t},\r\n\r\n\tisInSchedule: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.isInSchedule(date || this.gdt);\r\n\t},\r\n\r\n\twhenNext: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.whenNext(date || this.gdt);\r\n\t},\r\n\r\n\twhenPrevious: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tvar gdtDate2 = '';\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\tgdtDate2 = new GlideDateTime();\r\n\t\t\tgdtDate2.setDisplayValueInternal(date.getDisplayValueInternal());\r\n\t\t} else {\r\n\t\t\tgdtDate2 = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet timeUntilNext = 0;\r\n\t\tconst time = this.timeInc;\r\n\r\n\t\twhile (!this.isInSchedule({date: gdtDate2})) {\r\n\t\t\ttimeUntilNext += time;\r\n\t\t\tgdtDate2.subtract(time);\r\n\t\t}\r\n\r\n\t\treturn timeUntilNext;\r\n\t},\r\n\r\n\tfindDuration: function({ startDate, endDate, format }) {\r\n\t\tthis.format = format || this.format || this.defaultFormat;\r\n\t\tconst gdtSD = new GlideDateTime();\r\n\t\tgdtSD.setDisplayValueInternal(startDate);\r\n\t\tconst gdtED = new GlideDateTime();\r\n\t\tgdtED.setDisplayValueInternal(endDate);\r\n\t\tconst duration = this.glideSchedule.duration(gdtSD, gdtED);\r\n\t\treturn duration.getNumericValue();\r\n\t},\r\n\r\n\tformatDuration: function ({ duration, format = \"minutes\" }) {\r\n\t\tif (format === \"minutes\") {\r\n\t\t\tduration = duration / 1000 / 60;\r\n\t\t} else if (format === \"hours\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60;\r\n\t\t} else if (format === \"days\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60 / 24;\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\t},\r\n\r\n\tgetUserData: function() {\r\n\t\tconst userSysId = gs.getUserID();\r\n\t\tconst userGr = new GlideRecord('sys_user');\r\n\t\tlet dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tlet timeFormat = gs.getProperty('glide.sys.time_format');\r\n\t\tif (userGr.get(userSysId)) {\r\n\t\t\tdateFormat = userGr.getDisplayValue('date_format') || dateFormat;\r\n\t\t\ttimeFormat = userGr.getDisplayValue('time_format') || timeFormat;\r\n\t\t}\r\n\r\n\t\tlet dateSpliter = '-';\r\n\r\n\t\tif (dateFormat.indexOf('.') > -1) {\r\n\t\t\tdateSpliter = '.';\r\n\t\t} else if (dateFormat.indexOf('/') > -1) {\r\n\t\t\tdateSpliter = '/';\r\n\t\t}\r\n\r\n\t\tlet timeSpliter = ':';\r\n\r\n\t\tif (timeFormat.indexOf('.') > -1) {\r\n\t\t\ttimeSpliter = '.';\r\n\t\t}\r\n\r\n\t\tlet is24Hour = true;\r\n\t\t\r\n\t\tif (timeFormat.indexOf('a') > -1 || timeFormat.indexOf('12 hour') > -1) {\r\n\t\t\tis24Hour = false;\r\n\t\t}\r\n\r\n\t\ttimeFormat = timeFormat.replace(' (12 hour)', ' a');\r\n\t\ttimeFormat = timeFormat.replace(' (24 hour)', '');\r\n\r\n\t\tthis.user = {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat: dateFormat + ' ' + timeFormat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tsetDuration: function({duration = 0}) {\r\n\t\tduration = new GlideDateTime(duration);\r\n\t\t//duration.setDisplayValueInternal(duration);\r\n\t\tthis.duration = duration.getNumericValue();\r\n\t},\r\n\r\n\tfindDate: function({ date, direction, format }) {\r\n\t\tvar gdtDate = '';\r\n\t\tif (date) {\r\n\t\t\tgdtDate = new GlideDateTime();\r\n\t\t\tgdtDate.setDisplayValueInternal(date);\r\n\t\t} else {\r\n\t\t\tgdtDate = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet valid = this.isInSchedule({date: gdtDate});\r\n\r\n\t\tif (!valid && direction === 'forwards') {\r\n\t\t\tlet nextTime = this.whenNext({date: gdtDate});\r\n\t\t\tgdtDate.add(nextTime);\r\n\t\t} else if (!valid && direction === 'backwards') {\r\n\t\t\tconst previousTime = this.whenPrevious({ date: gdtDate });\r\n\t\t\tgdtDate.subtract(previousTime);\r\n\t\t}\r\n\r\n\t\treturn gdtDate.getDisplayValueInternal();\r\n\t},\r\n\r\n\tgetGapInc: function() {\r\n\t\tthis.timeInc = 1000*60*60;\r\n\t\tif (gs.getProperty('x_cadso_work.schedule_time_gap')) {\r\n\t\t\tconst timeInc = Number(gs.getProperty('x_cadso_work.schedule_time_gap'));\r\n\t\t\tthis.timeInc = timeInc >= 60000 ? timeInc : this.timeInc;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"ScheduleWrapperMS\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 211,
      "char_count": 5515,
      "preview": "const ScheduleWrapperMS = Class.create();\r\nScheduleWrapperMS.prototype = {\r\n\tinitialize: function (props = {}) {\r\n\t\tconst { scheduleSysId, date, format, duration = 0 } = props;\r\n\t\tthis.defaultSchedule...",
      "full_script": "const ScheduleWrapperMS = Class.create();\r\nScheduleWrapperMS.prototype = {\r\n\tinitialize: function (props = {}) {\r\n\t\tconst { scheduleSysId, date, format, duration = 0 } = props;\r\n\t\tthis.defaultSchedule = gs.getProperty('x_cadso_work.default_schedule');\r\n\t\tthis.getGapInc();\r\n\t\tthis.duration = duration;\r\n\t\tthis.date = date;\r\n\t\tthis.getUserData();\r\n\t\tthis.defaultFormat = this.user.format || \"yyyy-MM-dd HH:mm:ss\";\r\n\t\tthis.format = format || this.defaultFormat;\r\n\t\tthis.gdt = new GlideDateTime();\r\n\r\n\t\tif (date) {\r\n\t\t\tthis.gdt.setDisplayValue(date, this.format);\r\n\t\t}\r\n\t\tif (scheduleSysId) {\r\n\t\t\tthis.scheduleSysId = scheduleSysId;\r\n\t\t\tthis.glideSchedule = new GlideSchedule(scheduleSysId);\r\n\t\t}\r\n\t},\r\n\r\n\tgetUserFormat: function() {\r\n\t\tconst { dateFormat = \"yyyy-MM-dd\", timeFormat = \"HH:mm:ss\", format = \"yyyy-MM-dd HH:mm:ss\", dateSpliter = \"/\", timeSpliter = \":\", is24Hour = false } = this.user;\r\n\t\treturn {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tload: function ({ scheduleSysId, date, format }) {\r\n\t\tthis.initialize(scheduleSysId, date, format);\r\n\t},\r\n\r\n\tsetDate: function (props = {}) {\r\n\t\tconst { date, format = '' } = props;\r\n\t\tthis.date = date;\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.gdt = new GlideDateTime();\r\n\t\tthis.gdt.setDisplayValue(this.date, this.format);\r\n\t},\r\n\r\n\tsetDates: function (props = {}) {\r\n\t\tconst { start, end, format } = props;\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t\tif (format) {\r\n\t\t\tthis.format = format;\r\n\t\t}\r\n\r\n\t\tthis.startDate = new GlideDateTime();\r\n\t\tthis.startDate.setDisplayValueInternal(this.start);\r\n\r\n\t\tthis.endDate = new GlideDateTime();\r\n\t\tthis.endDate.setDisplayValueInternal(this.end);\r\n\t},\r\n\r\n\tisInSchedule: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.isInSchedule(date || this.gdt);\r\n\t},\r\n\r\n\twhenNext: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\t\treturn this.glideSchedule.whenNext(date || this.gdt);\r\n\t},\r\n\r\n\twhenPrevious: function (props = {}) {\r\n\t\tconst { date, format } = props;\r\n\t\tvar gdtDate2 = '';\r\n\t\tif (date) {\r\n\t\t\tthis.setDate({date, format});\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\tgdtDate2 = new GlideDateTime();\r\n\t\t\tgdtDate2.setDisplayValueInternal(date.getDisplayValueInternal());\r\n\t\t} else {\r\n\t\t\tgdtDate2 = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet timeUntilNext = 0;\r\n\t\tconst time = this.timeInc;\r\n\r\n\t\twhile (!this.isInSchedule({date: gdtDate2})) {\r\n\t\t\ttimeUntilNext += time;\r\n\t\t\tgdtDate2.subtract(time);\r\n\t\t}\r\n\r\n\t\treturn timeUntilNext;\r\n\t},\r\n\r\n\tfindDuration: function({ startDate, endDate, format }) {\r\n\t\tthis.format = format || this.format || this.defaultFormat;\r\n\t\tconst gdtSD = new GlideDateTime();\r\n\t\tgdtSD.setDisplayValueInternal(startDate);\r\n\t\tconst gdtED = new GlideDateTime();\r\n\t\tgdtED.setDisplayValueInternal(endDate);\r\n\t\tconst duration = this.glideSchedule.duration(gdtSD, gdtED);\r\n\t\treturn duration.getNumericValue();\r\n\t},\r\n\r\n\tformatDuration: function ({ duration, format = \"minutes\" }) {\r\n\t\tif (format === \"minutes\") {\r\n\t\t\tduration = duration / 1000 / 60;\r\n\t\t} else if (format === \"hours\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60;\r\n\t\t} else if (format === \"days\") {\r\n\t\t\tduration = duration / 1000 / 60 / 60 / 24;\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\t},\r\n\r\n\tgetUserData: function() {\r\n\t\tconst userSysId = gs.getUserID();\r\n\t\tconst userGr = new GlideRecord('sys_user');\r\n\t\tlet dateFormat = gs.getProperty('glide.sys.date_format');\r\n\t\tlet timeFormat = gs.getProperty('glide.sys.time_format');\r\n\t\tif (userGr.get(userSysId)) {\r\n\t\t\tdateFormat = userGr.getDisplayValue('date_format') || dateFormat;\r\n\t\t\ttimeFormat = userGr.getDisplayValue('time_format') || timeFormat;\r\n\t\t}\r\n\r\n\t\tlet dateSpliter = '-';\r\n\r\n\t\tif (dateFormat.indexOf('.') > -1) {\r\n\t\t\tdateSpliter = '.';\r\n\t\t} else if (dateFormat.indexOf('/') > -1) {\r\n\t\t\tdateSpliter = '/';\r\n\t\t}\r\n\r\n\t\tlet timeSpliter = ':';\r\n\r\n\t\tif (timeFormat.indexOf('.') > -1) {\r\n\t\t\ttimeSpliter = '.';\r\n\t\t}\r\n\r\n\t\tlet is24Hour = true;\r\n\t\t\r\n\t\tif (timeFormat.indexOf('a') > -1 || timeFormat.indexOf('12 hour') > -1) {\r\n\t\t\tis24Hour = false;\r\n\t\t}\r\n\r\n\t\ttimeFormat = timeFormat.replace(' (12 hour)', ' a');\r\n\t\ttimeFormat = timeFormat.replace(' (24 hour)', '');\r\n\r\n\t\tthis.user = {\r\n\t\t\tdateFormat,\r\n\t\t\ttimeFormat,\r\n\t\t\tformat: dateFormat + ' ' + timeFormat,\r\n\t\t\tdateSpliter,\r\n\t\t\ttimeSpliter,\r\n\t\t\tis24Hour\r\n\t\t};\r\n\t},\r\n\r\n\tsetDuration: function({duration = 0}) {\r\n\t\tduration = new GlideDateTime(duration);\r\n\t\t//duration.setDisplayValueInternal(duration);\r\n\t\tthis.duration = duration.getNumericValue();\r\n\t},\r\n\r\n\tfindDate: function({ date, direction, format }) {\r\n\t\tvar gdtDate = '';\r\n\t\tif (date) {\r\n\t\t\tgdtDate = new GlideDateTime();\r\n\t\t\tgdtDate.setDisplayValueInternal(date);\r\n\t\t} else {\r\n\t\t\tgdtDate = this.gdt;\r\n\t\t}\r\n\r\n\t\tlet valid = this.isInSchedule({date: gdtDate});\r\n\r\n\t\tif (!valid && direction === 'forwards') {\r\n\t\t\tlet nextTime = this.whenNext({date: gdtDate});\r\n\t\t\tgdtDate.add(nextTime);\r\n\t\t} else if (!valid && direction === 'backwards') {\r\n\t\t\tconst previousTime = this.whenPrevious({ date: gdtDate });\r\n\t\t\tgdtDate.subtract(previousTime);\r\n\t\t}\r\n\r\n\t\treturn gdtDate.getDisplayValueInternal();\r\n\t},\r\n\r\n\tgetGapInc: function() {\r\n\t\tthis.timeInc = 1000*60*60;\r\n\t\tif (gs.getProperty('x_cadso_work.schedule_time_gap')) {\r\n\t\t\tconst timeInc = Number(gs.getProperty('x_cadso_work.schedule_time_gap'));\r\n\t\t\tthis.timeInc = timeInc >= 60000 ? timeInc : this.timeInc;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"ScheduleWrapperMS\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_21725da447de7150b0361ae8036d439b",
    "display_value": "sys_script_include_21725da447de7150b0361ae8036d439b"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.ScheduleWrapperMS",
    "display_value": "x_cadso_work.ScheduleWrapperMS"
  },
  "sys_created_on": {
    "value": "2023-10-31 23:56:23",
    "display_value": "2023-10-31 04:56:23 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ScheduleWrapperMS",
    "display_value": "ScheduleWrapperMS"
  },
  "sys_name": {
    "value": "ScheduleWrapperMS",
    "display_value": "ScheduleWrapperMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
