{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "58b834694701e15085d19fd8036d43e9",
    "extracted_at": "2025-09-19T21:48:31.744Z",
    "display_value": "WorkClientUtilsMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "true",
    "display_value": "true"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "103",
    "display_value": "103"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-05-16 20:48:05",
    "display_value": "2025-05-16 01:48:05 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "true",
    "display_value": "true"
  },
  "script": {
    "value": "const WorkClientUtilsMS = Class.create();\r\nWorkClientUtilsMS.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    getCalcDates: function() {\r\n        const type = this.getParameter(\"sysparm_type\") + \"\";\r\n        var preAns = {\r\n            found: false,\r\n            calcType: ''\r\n        };\r\n        var projTempGr = new GlideRecord('x_cadso_work_project_template');\r\n        projTempGr.addQuery('type', type);\r\n        projTempGr.setLimit(1);\r\n        projTempGr.query();\r\n\r\n        while (projTempGr.next()) {\r\n            var calcDates = (projTempGr.getValue('calculate_dates') + '');\r\n            preAns.found = true;\r\n            preAns.calcType = calcDates;\r\n            return calcDates;\r\n        }\r\n\r\n        var ans = '';\r\n\r\n        if (preAns.valid) {\r\n            ans = preAns.calcType;\r\n        }\r\n\r\n        return ans;\r\n    },\r\n\r\n    getAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n\r\n        if (gs.hasRole('admin', 'x_cadso_work.admin', 'x_cadso_work.configurator')) {\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        } else {\r\n            workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        }\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n    getAllSegmentsForCampaignUser: function(campaignId) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_campaign\");\r\n        workUserSegmentM2MGr.addQuery('sys_id', campaignId);\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAgileSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n        workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery(\"granted_by.work_group.agile=true\");\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInAgileWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAssignmentGroupsInWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAgileAssignmentGroupsInAgileWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getUsersInAssignmentGroup: function(group) {\r\n\t\tvar users = [];\r\n        var groupMemberGR = new GlideRecord(\"sys_user_grmember\");\r\n        groupMemberGR.addQuery(\"group\", group);\r\n        groupMemberGR.query();\r\n        while (groupMemberGR.next()) {\r\n            var roleGR = new GlideRecord(\"sys_user_has_role\");\r\n            roleGR.addEncodedQuery(\"user=\" + groupMemberGR.getValue(\"user\") + \"^role.nameSTARTSWITHx_cadso_work.user^state=active\");\r\n            roleGR.query();\r\n            if (roleGR.next()) {\r\n                users.push(groupMemberGR.getValue(\"user\"));\r\n            }\r\n\r\n\r\n        }\r\n        return users;\r\n\r\n    },\r\n\r\n    /**\r\n     * @function increaseIndex\r\n     * @description increase the index value of a record\r\n     * @param table - the table name\r\n     * @param query - the query to find the record\r\n     * @param amount - the amount to increase the index value by\r\n     * @param indexField - the name of the index field\r\n     * @return index - the new index value\r\n     * @example\r\n     * new x_cadso_work.WorkClientUtilsMS().increaseIndex({table, query, amount, indexField});\r\n     */\r\n    increaseIndex: function() {\r\n        const table = this.getParameter(\"sysparm_table\");\r\n        const queryValue = this.getParameter(\"sysparm_query_value\");\r\n        const queryField = this.getParameter(\"sysparm_query_field\");\r\n        const amount = this.getParameter(\"sysparm_amount\");\r\n        const indexField = this.getParameter(\"sysparm_index_field\");\r\n        const tableGr = new GlideRecord(table);\r\n        tableGr.addQuery(queryField, queryValue);\r\n        tableGr.orderByDesc(indexField);\r\n        tableGr.setLimit(1);\r\n        tableGr.query();\r\n        if (tableGr.next()) {\r\n            const index = parseInt(tableGr.getValue(indexField)) + parseInt(amount);\r\n            return index;\r\n        } else {\r\n            return parseInt(amount);\r\n        }\r\n    },\r\n\r\n    getRefRec: function() {\r\n        const fieldsObj = {};\r\n        const table = this.getParameter(\"sysparm_table\") + \"\";\r\n        const sysId = this.getParameter(\"sysparm_sys_id\") + \"\";\r\n        const fields = (this.getParameter(\"sysparm_fields\") + \"\").split(',');\r\n\r\n        gs.info(\"getRefRec table : \" + table)\r\n        gs.info(\"getRefRec sysId : \" + sysId)\r\n        gs.info(\"getRefRec fields : \" + fields)\r\n\r\n        const tableGr = new GlideRecord(table);\r\n        if (tableGr.get(sysId)) {\r\n            fields.forEach(function(field) {\r\n                fieldsObj[field] = {\r\n                    value: tableGr.getValue(field),\r\n                    displayValue: tableGr.getDisplayValue(field),\r\n                };\r\n            });\r\n        }\r\n\r\n        return JSON.stringify(fieldsObj);\r\n    },\r\n\r\n    type: \"WorkClientUtilsMS\",\r\n});",
    "display_value": "const WorkClientUtilsMS = Class.create();\r\nWorkClientUtilsMS.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    getCalcDates: function() {\r\n        const type = this.getParameter(\"sysparm_type\") + \"\";\r\n        var preAns = {\r\n            found: false,\r\n            calcType: ''\r\n        };\r\n        var projTempGr = new GlideRecord('x_cadso_work_project_template');\r\n        projTempGr.addQuery('type', type);\r\n        projTempGr.setLimit(1);\r\n        projTempGr.query();\r\n\r\n        while (projTempGr.next()) {\r\n            var calcDates = (projTempGr.getValue('calculate_dates') + '');\r\n            preAns.found = true;\r\n            preAns.calcType = calcDates;\r\n            return calcDates;\r\n        }\r\n\r\n        var ans = '';\r\n\r\n        if (preAns.valid) {\r\n            ans = preAns.calcType;\r\n        }\r\n\r\n        return ans;\r\n    },\r\n\r\n    getAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n\r\n        if (gs.hasRole('admin', 'x_cadso_work.admin', 'x_cadso_work.configurator')) {\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        } else {\r\n            workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        }\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n    getAllSegmentsForCampaignUser: function(campaignId) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_campaign\");\r\n        workUserSegmentM2MGr.addQuery('sys_id', campaignId);\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAgileSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n        workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery(\"granted_by.work_group.agile=true\");\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInAgileWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAssignmentGroupsInWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAgileAssignmentGroupsInAgileWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getUsersInAssignmentGroup: function(group) {\r\n\t\tvar users = [];\r\n        var groupMemberGR = new GlideRecord(\"sys_user_grmember\");\r\n        groupMemberGR.addQuery(\"group\", group);\r\n        groupMemberGR.query();\r\n        while (groupMemberGR.next()) {\r\n            var roleGR = new GlideRecord(\"sys_user_has_role\");\r\n            roleGR.addEncodedQuery(\"user=\" + groupMemberGR.getValue(\"user\") + \"^role.nameSTARTSWITHx_cadso_work.user^state=active\");\r\n            roleGR.query();\r\n            if (roleGR.next()) {\r\n                users.push(groupMemberGR.getValue(\"user\"));\r\n            }\r\n\r\n\r\n        }\r\n        return users;\r\n\r\n    },\r\n\r\n    /**\r\n     * @function increaseIndex\r\n     * @description increase the index value of a record\r\n     * @param table - the table name\r\n     * @param query - the query to find the record\r\n     * @param amount - the amount to increase the index value by\r\n     * @param indexField - the name of the index field\r\n     * @return index - the new index value\r\n     * @example\r\n     * new x_cadso_work.WorkClientUtilsMS().increaseIndex({table, query, amount, indexField});\r\n     */\r\n    increaseIndex: function() {\r\n        const table = this.getParameter(\"sysparm_table\");\r\n        const queryValue = this.getParameter(\"sysparm_query_value\");\r\n        const queryField = this.getParameter(\"sysparm_query_field\");\r\n        const amount = this.getParameter(\"sysparm_amount\");\r\n        const indexField = this.getParameter(\"sysparm_index_field\");\r\n        const tableGr = new GlideRecord(table);\r\n        tableGr.addQuery(queryField, queryValue);\r\n        tableGr.orderByDesc(indexField);\r\n        tableGr.setLimit(1);\r\n        tableGr.query();\r\n        if (tableGr.next()) {\r\n            const index = parseInt(tableGr.getValue(indexField)) + parseInt(amount);\r\n            return index;\r\n        } else {\r\n            return parseInt(amount);\r\n        }\r\n    },\r\n\r\n    getRefRec: function() {\r\n        const fieldsObj = {};\r\n        const table = this.getParameter(\"sysparm_table\") + \"\";\r\n        const sysId = this.getParameter(\"sysparm_sys_id\") + \"\";\r\n        const fields = (this.getParameter(\"sysparm_fields\") + \"\").split(',');\r\n\r\n        gs.info(\"getRefRec table : \" + table)\r\n        gs.info(\"getRefRec sysId : \" + sysId)\r\n        gs.info(\"getRefRec fields : \" + fields)\r\n\r\n        const tableGr = new GlideRecord(table);\r\n        if (tableGr.get(sysId)) {\r\n            fields.forEach(function(field) {\r\n                fieldsObj[field] = {\r\n                    value: tableGr.getValue(field),\r\n                    displayValue: tableGr.getDisplayValue(field),\r\n                };\r\n            });\r\n        }\r\n\r\n        return JSON.stringify(fieldsObj);\r\n    },\r\n\r\n    type: \"WorkClientUtilsMS\",\r\n});",
    "formatted_script": {
      "line_count": 241,
      "char_count": 9203,
      "preview": "const WorkClientUtilsMS = Class.create();\r\nWorkClientUtilsMS.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    getCalcDates: function() {\r\n        const type = this.getParameter(\"s...",
      "full_script": "const WorkClientUtilsMS = Class.create();\r\nWorkClientUtilsMS.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    getCalcDates: function() {\r\n        const type = this.getParameter(\"sysparm_type\") + \"\";\r\n        var preAns = {\r\n            found: false,\r\n            calcType: ''\r\n        };\r\n        var projTempGr = new GlideRecord('x_cadso_work_project_template');\r\n        projTempGr.addQuery('type', type);\r\n        projTempGr.setLimit(1);\r\n        projTempGr.query();\r\n\r\n        while (projTempGr.next()) {\r\n            var calcDates = (projTempGr.getValue('calculate_dates') + '');\r\n            preAns.found = true;\r\n            preAns.calcType = calcDates;\r\n            return calcDates;\r\n        }\r\n\r\n        var ans = '';\r\n\r\n        if (preAns.valid) {\r\n            ans = preAns.calcType;\r\n        }\r\n\r\n        return ans;\r\n    },\r\n\r\n    getAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n\r\n        if (gs.hasRole('admin', 'x_cadso_work.admin', 'x_cadso_work.configurator')) {\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        } else {\r\n            workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n            workUserSegmentM2MGr.orderBy(\"segment\");\r\n            workUserSegmentM2MGr.query();\r\n        }\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n    getAllSegmentsForCampaignUser: function(campaignId) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_campaign\");\r\n        workUserSegmentM2MGr.addQuery('sys_id', campaignId);\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAgileSegmentsForUser: function(userId = gs.getUserID()) {\r\n        const segmentsObj = {};\r\n        const segmentsArr = [];\r\n\r\n        const workUserSegmentM2MGr = new GlideRecord(\"x_cadso_work_user_segment_m2m\");\r\n        workUserSegmentM2MGr.addEncodedQuery(\"work_user.user=\" + userId);\r\n        workUserSegmentM2MGr.addEncodedQuery(\"granted_by.work_group.agile=true\");\r\n        workUserSegmentM2MGr.orderBy(\"segment\");\r\n        workUserSegmentM2MGr.query();\r\n\r\n        while (workUserSegmentM2MGr.next()) {\r\n            const segment = workUserSegmentM2MGr.getValue(\"segment\");\r\n            if (!segmentsObj[segment]) {\r\n                segmentsObj[segment] = true;\r\n                segmentsArr.push(segment);\r\n            }\r\n        }\r\n\r\n        return segmentsArr.length ? segmentsArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getAllAssignmentGroupsInAgileWorkGroups: function() {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_to_group_m2m\");\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"group\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAssignmentGroupsInWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getMyAgileAssignmentGroupsInAgileWorkGroups: function(userId = gs.getUserID()) {\r\n        const workGroup2GroupObj = {};\r\n        const workGroup2GroupArr = [];\r\n\r\n        const workGroup2GroupGR = new GlideRecord(\"x_cadso_work_group_sys_user_m2m\");\r\n        workGroup2GroupGR.addQuery(\"user\", userId);\r\n        workGroup2GroupGR.addEncodedQuery(\"work_group.agile=true\");\r\n        workGroup2GroupGR.addEncodedQuery(\"granted_byISNOTEMPTY\");\r\n        workGroup2GroupGR.query();\r\n\r\n        while (workGroup2GroupGR.next()) {\r\n            const assignmentGroup = workGroup2GroupGR.getValue(\"granted_by\");\r\n            if (!workGroup2GroupObj[assignmentGroup]) {\r\n                workGroup2GroupObj[assignmentGroup] = true;\r\n                workGroup2GroupArr.push(assignmentGroup);\r\n            }\r\n        }\r\n        return workGroup2GroupArr.length ? workGroup2GroupArr : 'empty';\r\n    },\r\n\r\n    getUsersInAssignmentGroup: function(group) {\r\n\t\tvar users = [];\r\n        var groupMemberGR = new GlideRecord(\"sys_user_grmember\");\r\n        groupMemberGR.addQuery(\"group\", group);\r\n        groupMemberGR.query();\r\n        while (groupMemberGR.next()) {\r\n            var roleGR = new GlideRecord(\"sys_user_has_role\");\r\n            roleGR.addEncodedQuery(\"user=\" + groupMemberGR.getValue(\"user\") + \"^role.nameSTARTSWITHx_cadso_work.user^state=active\");\r\n            roleGR.query();\r\n            if (roleGR.next()) {\r\n                users.push(groupMemberGR.getValue(\"user\"));\r\n            }\r\n\r\n\r\n        }\r\n        return users;\r\n\r\n    },\r\n\r\n    /**\r\n     * @function increaseIndex\r\n     * @description increase the index value of a record\r\n     * @param table - the table name\r\n     * @param query - the query to find the record\r\n     * @param amount - the amount to increase the index value by\r\n     * @param indexField - the name of the index field\r\n     * @return index - the new index value\r\n     * @example\r\n     * new x_cadso_work.WorkClientUtilsMS().increaseIndex({table, query, amount, indexField});\r\n     */\r\n    increaseIndex: function() {\r\n        const table = this.getParameter(\"sysparm_table\");\r\n        const queryValue = this.getParameter(\"sysparm_query_value\");\r\n        const queryField = this.getParameter(\"sysparm_query_field\");\r\n        const amount = this.getParameter(\"sysparm_amount\");\r\n        const indexField = this.getParameter(\"sysparm_index_field\");\r\n        const tableGr = new GlideRecord(table);\r\n        tableGr.addQuery(queryField, queryValue);\r\n        tableGr.orderByDesc(indexField);\r\n        tableGr.setLimit(1);\r\n        tableGr.query();\r\n        if (tableGr.next()) {\r\n            const index = parseInt(tableGr.getValue(indexField)) + parseInt(amount);\r\n            return index;\r\n        } else {\r\n            return parseInt(amount);\r\n        }\r\n    },\r\n\r\n    getRefRec: function() {\r\n        const fieldsObj = {};\r\n        const table = this.getParameter(\"sysparm_table\") + \"\";\r\n        const sysId = this.getParameter(\"sysparm_sys_id\") + \"\";\r\n        const fields = (this.getParameter(\"sysparm_fields\") + \"\").split(',');\r\n\r\n        gs.info(\"getRefRec table : \" + table)\r\n        gs.info(\"getRefRec sysId : \" + sysId)\r\n        gs.info(\"getRefRec fields : \" + fields)\r\n\r\n        const tableGr = new GlideRecord(table);\r\n        if (tableGr.get(sysId)) {\r\n            fields.forEach(function(field) {\r\n                fieldsObj[field] = {\r\n                    value: tableGr.getValue(field),\r\n                    displayValue: tableGr.getDisplayValue(field),\r\n                };\r\n            });\r\n        }\r\n\r\n        return JSON.stringify(fieldsObj);\r\n    },\r\n\r\n    type: \"WorkClientUtilsMS\",\r\n});"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_58b834694701e15085d19fd8036d43e9",
    "display_value": "sys_script_include_58b834694701e15085d19fd8036d43e9"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_work.WorkClientUtilsMS",
    "display_value": "x_cadso_work.WorkClientUtilsMS"
  },
  "sys_created_on": {
    "value": "2023-02-16 01:07:49",
    "display_value": "2023-02-15 05:07:49 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "WorkClientUtilsMS",
    "display_value": "WorkClientUtilsMS"
  },
  "sys_name": {
    "value": "WorkClientUtilsMS",
    "display_value": "WorkClientUtilsMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
