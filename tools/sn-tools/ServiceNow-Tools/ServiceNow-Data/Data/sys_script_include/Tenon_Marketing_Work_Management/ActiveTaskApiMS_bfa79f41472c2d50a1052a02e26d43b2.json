{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "bfa79f41472c2d50a1052a02e26d43b2",
    "extracted_at": "2025-09-19T21:48:31.827Z",
    "display_value": "ActiveTaskApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "369",
    "display_value": "369"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-10-18 01:03:43",
    "display_value": "2024-10-17 06:03:43 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var ActiveTaskApiMS = Class.create();\nActiveTaskApiMS.prototype = {\n\tinitialize: function() {\n\t\tthis.statuses = {\n\t\t\tcompleted: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Completed')\n\t\t\t},\n\t\t\tinProgress: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('in Progress')\n\t\t\t},\n\t\t\toverdue: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Overdue')\n\t\t\t},\n\t\t\ttotal: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Total')\n\t\t\t}\n\t\t};\n\t\tthis.projects = {};\n\t\tthis.campaigns = {};\n\t\tthis.usersObj = {};\n\t\tthis.sortBys = {};\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\n\t\tthis.query = '';\n\t\tthis.sortByQuery = '';\n\t\tthis.dueDateSelected = '';\n\t\tthis.dueDateSelectedQuery = '';\n\t\tthis.reset = false;\n\t},\n\n\t// Entry Point of Script Include\n\tgetTasks: function(request, response) {\n\t\tconst { query, sortByQuery, dueDateSelected, reset, project } = request.queryParams;\n\n\t\tif (reset && reset.toString) {\n\t\t\tthis.reset = reset.toString() === 'true';\n\t\t}\n\t\t\n\t\tif (query && query.toString) {\n\t\t\tthis.query = query.toString();\n\t\t}\n\t\t\n\t\tif (project && project.toString) {\n\t\t\tconst XORoperator = this.query.length ? '^' : '';\n\t\t\tthis.query = this.query.split('^NQ').map((query) => {\n\t\t\t\treturn query + XORoperator + 'project=' + project;\n\t\t\t}).join('^NQ');\n\t\t}\n// \t\telse {\n// \t\t\tthis.query = 'assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORsegmentDYNAMIC127538294701e15085d19fd8036d438a^ORassignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^stateNOT IN40,50,60';\n// \t\t}\n\n\t\tif (sortByQuery && sortByQuery.toString) {\n\t\t\tthis.sortByQuery = sortByQuery.toString();\n\t\t}\n\n\t\tif (dueDateSelected && dueDateSelected.toString) {\n\t\t\tthis.dueDateSelected = dueDateSelected.toString();\n\t\t\tthis.getDueDateSelected();\n\t\t}\n\n\t\tconst tasks = this.getGlideRecords(request);\n\n\t\tObject.keys(this.sortBys).forEach((key) => {\n\t\t\tthis.sortBys[key].values = this.sortBys[key].values.sort(function(a, b) {\n\t\t\t\tif (a.displayValue < b.displayValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (a.displayValue > b.displayValue) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t\n\t\tresponse.setBody({\n\t\t\ttasks,\n\t\t\tsortBy: this.sortBys,\n\t\t\tdateTimeFormat: this.dateTimeFormat,\n\t\t\ttotal: this.statuses.total.count,\n\t\t\tquery: this.query,\n\t\t\tdueDateSelectedQuery: this.dueDateSelectedQuery,\n\t\t\tdueDateSelected: this.dueDateSelected,\n\t\t\tsortByQuery: this.sortByQuery,\n\t\t\treset: this.reset\n\t\t});\n\n\t\tresponse.setStatus(200);\n\n\t\treturn response;\n\t},\n\n\tgetDueDateSelected: function() {\n\t\tconst todayStart = new GlideDateTime();\n\t\tconst todayEnd = new GlideDateTime();\n\t\tvar date = todayStart.getDisplayValueInternal().split(' ')[0];\n\t\ttodayStart.setDisplayValueInternal(date + ' 00:00:00');\n\t\ttodayEnd.setDisplayValueInternal(date + ' 23:59:59');\n\t\tvar dayOfWeek = todayStart.getDayOfWeekLocalTime();\n\t\tswitch(this.dueDateSelected) {\n\t\t\tcase 'dueToday':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_dateONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()';\n\t\t\t\tbreak;\n\t\t\tcase 'dueInThreeDays':\n\t\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\t\ttodayEnd.add(threeDays);\n\t\t\t\tvar start1 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end1 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start1}','00:00:00')^due_date<javascript:gs.dateGenerate('${end1}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueThisWeek':\n\t\t\t\tvar startOfWeek = dayOfWeek - 1;\n\t\t\t\tvar endOfWeek = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek) {\n\t\t\t\t\tvar weekS = new GlideDuration(startOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayStart.subtract(weekS);\n\t\t\t\t}\n\t\t\t\tif (endOfWeek) {\n\t\t\t\t\tvar weekE = new GlideDuration(endOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayEnd.add(weekE);\n\t\t\t\t}\n\t\t\t\tvar start = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start}','00:00:00')^due_date<javascript:gs.dateGenerate('${end}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueNextWeek':\n\t\t\t\tvar startOfWeek2 = 8 - dayOfWeek;\n\t\t\t\tvar endOfWeek2 = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek2) {\n\t\t\t\t\tvar weekS2 = new GlideDuration(startOfWeek2 + ' 00:00:00');\n\t\t\t\t\ttodayStart.add(weekS2);\n\t\t\t\t}\n\t\t\t\tvar weekE2 = new GlideDuration(endOfWeek2 + ' 00:00:00');\n\t\t\t\tif (endOfWeek2) {\n\t\t\t\t\ttodayEnd.add(weekE2.getNumericValue());\n\t\t\t\t}\n\t\t\t\ttodayEnd.addWeeksLocalTime(1);\n\t\t\t\tvar start2 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end2 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start2}','00:00:00')^due_date<javascript:gs.dateGenerate('${end2}','23:59:59')`;\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 'overDue':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_date<javascript:gs.beginningOfToday()';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.dueDateSelectedQuery = '';\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\tgetSortBys: function(table, filterFields) {\n\t\tlet filteredField = filterFields && filterFields.length ? filterFields[0] : 'state';\n\t\tvar agg = new GlideAggregate(table);\n\t\tagg.addAggregate('COUNT', filteredField);\n\n\t\tif (this.query) {\n\t\t\tagg.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tagg.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\tagg.orderBy(filteredField);\n\t\tagg.query();\n\n\t\tthis.sortBys[filteredField] = { init: true, values: [], valuesObj: {} };\n\n\t\twhile (agg.next()) {\n\t\t\tvar filteredFieldCount = agg.getAggregate('COUNT', filteredField) || 0;\n\t\t\tvar displayValue = agg.getDisplayValue(filteredField);\n\t\t\tif (!displayValue) continue;\n\t\t\tvar value = agg.getValue(filteredField);\n\n\t\t\tthis.sortBys[filteredField].values.push({ displayValue, value, count: parseInt(filteredFieldCount) });\n\t\t\tthis.sortBys[filteredField].valuesObj[value] = parseInt(filteredFieldCount);\n\t\t}\n\n\t\treturn filteredField;\n\t},\n\n\tgetTotalAgg: function(table) {\n\t\tlet count = 0;\n\t\tvar taskGA = new GlideAggregate(table);\n\t\ttaskGA.addAggregate('COUNT');\n\t\tif (this.query) {\n\t\t\ttaskGA.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\t\n\t\ttaskGA.query();\n\n\t\tif (taskGA.next()) {\n\t\t\tcount = taskGA.getAggregate('COUNT');\n\t\t}\n\n\t\treturn count;\n\t},\n\n\tgetRefRecordDV: function(workTaskGr, field, displayField, key) {\n\t\tconst recordSysId = workTaskGr.getValue(field);\n\t\tif (recordSysId && !this[key][recordSysId]) {\n\t\t\tconst refRecordGr = workTaskGr[field].getRefRecord();\n\t\t\tif (refRecordGr.isValidRecord()) {\n\t\t\t\tif (\"campaign, project\".indexOf(field) > -1) {\n\t\t\t\t\tthis[key][recordSysId + 'color'] = refRecordGr.getValue('glyph_color');\n\t\t\t\t}\n\t\t\t\tthis[key][recordSysId] = refRecordGr.getDisplayValue(displayField);\n\t\t\t\tif (field === 'assigned_to') {\n\t\t\t\t\tlet avatar = refRecordGr.getValue('avatar');\n\t\t\t\t\tavatar = avatar == null ? '' : avatar;\n\t\t\t\t\tlet photo = refRecordGr.getValue('photo');\n\t\t\t\t\tphoto = photo == null ? '' : photo;\n\t\t\t\t\tconst userAvatar = avatar || photo;\n\t\t\t\t\tthis[key][recordSysId + 'assigned_to'] = userAvatar;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[key][recordSysId] = '';\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdisplayValue: this[key][recordSysId] || '',\n\t\t\tvalue: recordSysId,\n\t\t\tcolor : this[key][recordSysId + 'color'] || '',\n\t\t\tavatar: this[key][recordSysId + 'assigned_to'] || ''\n\t\t};\n\t},\n\n\tcalculateIfOverdue: function(workTaskGr) {\n\t\tconst dueDateCalue = workTaskGr.getDisplayValue('due_date');\n\t\tvar gdt1 = new GlideDateTime(workTaskGr.getDisplayValue('due_date'));\n\t\tvar gdt2 = new GlideDateTime();\n\t\treturn gdt1.before(gdt2);\n\t},\n\n\tgetUsers: function(workTaskGr) {\n\t\tconst users = [];\n\n\t\tconst assignedToSysId = workTaskGr.getValue('assigned_to');\n\t\tif (assignedToSysId) {\n\t\t\tconst assignedTo = this.getRefRecordDV(workTaskGr, 'assigned_to', 'photo', 'usersObj');\n\t\t\tusers.push({\n\t\t\t\tdisplayValue: workTaskGr.getDisplayValue('assigned_to'),\n\t\t\t\tvalue: assignedToSysId,\n\t\t\t\timage: assignedTo.avatar ? assignedTo.avatar + '.iix' : '',\n\t\t\t\tavatar: assignedTo.avatar\n\t\t\t});\n\t\t}\n\n\t\treturn users;\n\t},\n\n\tgetGlideRecords: function(request) {\n\t\tconst { project, filterFields: fltrFlds = 'state', orderBy = 'due_date', table, start, end } = request.queryParams;\n\t\tif (!table) return [];\n\t\tconst filteredFields = (fltrFlds.split().map((field) => field.trim()) || []);\n\t\tconst filteredField = this.getSortBys(table, filteredFields);\n\n\t\tconst startWindow = start ? parseInt(start.toString()) : 0;\n\t\tconst endWindow = end ? parseInt(end.toString()) : 100;\n\n\t\tconst workTaskGr = new GlideRecordSecure(table);\n\t\tif (this.query) {\n\t\t\tworkTaskGr.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (project) {\n\t\t\tworkTaskGr.addQuery('project', project);\n\t\t}\n\t\tif (orderBy) {\n\t\t\tworkTaskGr.orderBy(orderBy);\n\t\t}\n\t\tworkTaskGr.orderBy('short_description');\n\t\tworkTaskGr.chooseWindow(startWindow, endWindow);\n\t\tworkTaskGr.query();\n\n\t\tlet overdueCount = 0;\n\t\tconst tasks = [];\n\n\t\tvar tenonTimeApi = new TenonTime(true);\n\n\t\twhile (workTaskGr.next()) {\n\t\t\tlet status = '';\n\t\t\tlet statusValue = '';\n\t\t\tconst stateValue = workTaskGr.getValue('state');\n\t\t\tconst state = workTaskGr.getDisplayValue('state');\n\n\t\t\tif (table === 'x_cadso_work_task') {\n\t\t\t\tstatus = workTaskGr.getDisplayValue('status');\n\t\t\t\tstatusValue = workTaskGr.getValue('status');\n\t\t\t} else {\n\t\t\t\tstatus = state;\n\t\t\t\tstatusValue = workTaskGr.getValue('state');\n\t\t\t}\n\n\t\t\tthis.sortBys[filteredField].valuesObj[workTaskGr.getValue(filteredField)]++;\n\n\t\t\t// Date Logic Start\n\t\t\tlet dueDate = workTaskGr.getDisplayValue('due_date') + '';\n\t\t\tlet overDue = false;\n\t\t\tlet datesRelative = {};\n\t\t\tif (dueDate) {\n\t\t\t\toverDue = this.calculateIfOverdue(workTaskGr);\n\t\t\t\tif (overDue) {\n\t\t\t\t\toverdueCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdatesRelative = this.getDateRelativity(dueDate, overDue);\n\t\t\tdueDate = tenonTimeApi.format(dueDate);\n\t\t\t// Date Logic End\n\n\n\t\t\tconst project = this.getRefRecordDV(workTaskGr, 'project', 'short_description', 'projects');\n\t\t\tconst campaign = this.getRefRecordDV(workTaskGr, 'campaign', 'short_description', 'campaigns');\n\n\t\t\tconst users = this.getUsers(workTaskGr);\n\n\t\t\ttasks.push({\n\t\t\t\tshortDescription: workTaskGr.getDisplayValue('short_description'),\n\t\t\t\tdueDate,\n\t\t\t\tstatus,\n\t\t\t\tstatusValue,\n\t\t\t\tstate,\n\t\t\t\tstateValue,\n\t\t\t\tproject,\n\t\t\t\tcampaign,\n\t\t\t\tusers,\n\t\t\t\toverDue,\n\t\t\t\tsysId: workTaskGr.getUniqueValue(),\n\t\t\t\t...datesRelative\n\t\t\t});\n\t\t}\n\n\t\tthis.statuses.total.count = this.getTotalAgg(table);\n\t\tthis.statuses.overdue.count = overdueCount;\n\n\n\t\treturn tasks;\n\t},\n\n\tgetFilterFields: function(workTaskGr, filterFields, sortBy) {\n\t\t// not used as of now\n\t\tfilterFields.forEach(function(field) {\n\t\t\tif (!sortBy[field]) {\n\t\t\t\ttry {\n\t\t\t\t\tconst isValid = !sortBy[field].init;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsortBy[field] = { init: true, values: [], valuesObj: {} };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst value = workTaskGr.getValue(field);\n\n\t\t\tif (!sortBy[field].valuesObj[value]) {\n\t\t\t\tsortBy[field].valuesObj[value] = true;\n\t\t\t\tconst displayValue = workTaskGr.getDisplayValue(field);\n\t\t\t\tsortBy[field].values.push({\n\t\t\t\t\tdisplayValue,\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn sortBy;\n\t},\n\n\tgetDateRelativity: function(dueDate, overdue) {\n\t\t/*\n\t\t\tIf over due, everything should be true.\n\t\t*/\n\n\t\tconst datesRelative = {\n\t\t\tdueToday: false,\n\t\t\tdueInThreeDays: false,\n\t\t\tdueThisWeek: false,\n\t\t\tdueNextWeek: false,\n\t\t\tdueThisMonth: overdue,\n\t\t};\n\n\t\tif (overdue || !dueDate) {\n\t\t\treturn datesRelative;\n\t\t}\n\n\t\tconst todaysDateGdt = new GlideDateTime();\n\t\tconst dueDateGdt = new GlideDateTime(dueDate);\n\n\t\tconst thisMonth = todaysDateGdt.getMonthUTC();\n\t\tconst dueDateMonth = dueDateGdt.getMonthUTC();\n\t\tconst isThisMonth = thisMonth === dueDateMonth;\n\t\tdatesRelative.dueThisMonth = isThisMonth;\n\n\t\tif (!datesRelative.dueToday) {\n\t\t\tconst today = todaysDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst dueDateDay = dueDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst isToday = today === dueDateDay;\n\t\t\tdatesRelative.dueToday = isToday;\n\t\t\tdatesRelative.dueInThreeDays = datesRelative.dueToday;\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueToday;\n\n\t\t}\n\n\t\tif (!datesRelative.dueInThreeDays) {\n\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\ttodaysDateGdt.add(threeDays);\n\t\t\tif (dueDateGdt <= todaysDateGdt.getDisplayValue()){\n\t\t\t\tdatesRelative.dueInThreeDays = true;\n\t\t\t}\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueInThreeDays;\n\t\t}\n\n\t\tif (!datesRelative.dueThisWeek) {\n\t\t\tconst todayWeek = todaysDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isThisWeek = todayWeek === dueDateWeek;\n\t\t\tdatesRelative.dueThisWeek = isThisWeek;\n\t\t}\n\n\t\tif (!datesRelative.dueNextWeek) {\n\t\t\tconst week = todaysDateGdt.getWeekOfYearLocalTime(); // 11\n\t\t\tconst nextWeek = week == 52 ? 1 : week + 1; // 12\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isNextWeek = nextWeek === dueDateWeek;\n\t\t\tdatesRelative.dueNextWeek = isNextWeek;\n\t\t}\n\n\t\treturn datesRelative;\n\t},\n\n\tconvertObjToArray: function(dataObj) {\n\t\treturn Object.keys(dataObj).map((key) => dataObj[key]);\n\t},\n\n\tgetStateCount: function(state) {\n\t\tif (state == 3) {\n\t\t\treturn 'completed';\n\t\t} else if (state == 2) {\n\t\t\treturn 'inProgress';\n\t\t}\n\t},\n\n\ttype: 'ActiveTaskApiMS'\n};",
    "display_value": "var ActiveTaskApiMS = Class.create();\nActiveTaskApiMS.prototype = {\n\tinitialize: function() {\n\t\tthis.statuses = {\n\t\t\tcompleted: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Completed')\n\t\t\t},\n\t\t\tinProgress: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('in Progress')\n\t\t\t},\n\t\t\toverdue: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Overdue')\n\t\t\t},\n\t\t\ttotal: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Total')\n\t\t\t}\n\t\t};\n\t\tthis.projects = {};\n\t\tthis.campaigns = {};\n\t\tthis.usersObj = {};\n\t\tthis.sortBys = {};\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\n\t\tthis.query = '';\n\t\tthis.sortByQuery = '';\n\t\tthis.dueDateSelected = '';\n\t\tthis.dueDateSelectedQuery = '';\n\t\tthis.reset = false;\n\t},\n\n\t// Entry Point of Script Include\n\tgetTasks: function(request, response) {\n\t\tconst { query, sortByQuery, dueDateSelected, reset, project } = request.queryParams;\n\n\t\tif (reset && reset.toString) {\n\t\t\tthis.reset = reset.toString() === 'true';\n\t\t}\n\t\t\n\t\tif (query && query.toString) {\n\t\t\tthis.query = query.toString();\n\t\t}\n\t\t\n\t\tif (project && project.toString) {\n\t\t\tconst XORoperator = this.query.length ? '^' : '';\n\t\t\tthis.query = this.query.split('^NQ').map((query) => {\n\t\t\t\treturn query + XORoperator + 'project=' + project;\n\t\t\t}).join('^NQ');\n\t\t}\n// \t\telse {\n// \t\t\tthis.query = 'assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORsegmentDYNAMIC127538294701e15085d19fd8036d438a^ORassignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^stateNOT IN40,50,60';\n// \t\t}\n\n\t\tif (sortByQuery && sortByQuery.toString) {\n\t\t\tthis.sortByQuery = sortByQuery.toString();\n\t\t}\n\n\t\tif (dueDateSelected && dueDateSelected.toString) {\n\t\t\tthis.dueDateSelected = dueDateSelected.toString();\n\t\t\tthis.getDueDateSelected();\n\t\t}\n\n\t\tconst tasks = this.getGlideRecords(request);\n\n\t\tObject.keys(this.sortBys).forEach((key) => {\n\t\t\tthis.sortBys[key].values = this.sortBys[key].values.sort(function(a, b) {\n\t\t\t\tif (a.displayValue < b.displayValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (a.displayValue > b.displayValue) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t\n\t\tresponse.setBody({\n\t\t\ttasks,\n\t\t\tsortBy: this.sortBys,\n\t\t\tdateTimeFormat: this.dateTimeFormat,\n\t\t\ttotal: this.statuses.total.count,\n\t\t\tquery: this.query,\n\t\t\tdueDateSelectedQuery: this.dueDateSelectedQuery,\n\t\t\tdueDateSelected: this.dueDateSelected,\n\t\t\tsortByQuery: this.sortByQuery,\n\t\t\treset: this.reset\n\t\t});\n\n\t\tresponse.setStatus(200);\n\n\t\treturn response;\n\t},\n\n\tgetDueDateSelected: function() {\n\t\tconst todayStart = new GlideDateTime();\n\t\tconst todayEnd = new GlideDateTime();\n\t\tvar date = todayStart.getDisplayValueInternal().split(' ')[0];\n\t\ttodayStart.setDisplayValueInternal(date + ' 00:00:00');\n\t\ttodayEnd.setDisplayValueInternal(date + ' 23:59:59');\n\t\tvar dayOfWeek = todayStart.getDayOfWeekLocalTime();\n\t\tswitch(this.dueDateSelected) {\n\t\t\tcase 'dueToday':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_dateONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()';\n\t\t\t\tbreak;\n\t\t\tcase 'dueInThreeDays':\n\t\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\t\ttodayEnd.add(threeDays);\n\t\t\t\tvar start1 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end1 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start1}','00:00:00')^due_date<javascript:gs.dateGenerate('${end1}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueThisWeek':\n\t\t\t\tvar startOfWeek = dayOfWeek - 1;\n\t\t\t\tvar endOfWeek = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek) {\n\t\t\t\t\tvar weekS = new GlideDuration(startOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayStart.subtract(weekS);\n\t\t\t\t}\n\t\t\t\tif (endOfWeek) {\n\t\t\t\t\tvar weekE = new GlideDuration(endOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayEnd.add(weekE);\n\t\t\t\t}\n\t\t\t\tvar start = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start}','00:00:00')^due_date<javascript:gs.dateGenerate('${end}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueNextWeek':\n\t\t\t\tvar startOfWeek2 = 8 - dayOfWeek;\n\t\t\t\tvar endOfWeek2 = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek2) {\n\t\t\t\t\tvar weekS2 = new GlideDuration(startOfWeek2 + ' 00:00:00');\n\t\t\t\t\ttodayStart.add(weekS2);\n\t\t\t\t}\n\t\t\t\tvar weekE2 = new GlideDuration(endOfWeek2 + ' 00:00:00');\n\t\t\t\tif (endOfWeek2) {\n\t\t\t\t\ttodayEnd.add(weekE2.getNumericValue());\n\t\t\t\t}\n\t\t\t\ttodayEnd.addWeeksLocalTime(1);\n\t\t\t\tvar start2 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end2 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start2}','00:00:00')^due_date<javascript:gs.dateGenerate('${end2}','23:59:59')`;\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 'overDue':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_date<javascript:gs.beginningOfToday()';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.dueDateSelectedQuery = '';\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\tgetSortBys: function(table, filterFields) {\n\t\tlet filteredField = filterFields && filterFields.length ? filterFields[0] : 'state';\n\t\tvar agg = new GlideAggregate(table);\n\t\tagg.addAggregate('COUNT', filteredField);\n\n\t\tif (this.query) {\n\t\t\tagg.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tagg.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\tagg.orderBy(filteredField);\n\t\tagg.query();\n\n\t\tthis.sortBys[filteredField] = { init: true, values: [], valuesObj: {} };\n\n\t\twhile (agg.next()) {\n\t\t\tvar filteredFieldCount = agg.getAggregate('COUNT', filteredField) || 0;\n\t\t\tvar displayValue = agg.getDisplayValue(filteredField);\n\t\t\tif (!displayValue) continue;\n\t\t\tvar value = agg.getValue(filteredField);\n\n\t\t\tthis.sortBys[filteredField].values.push({ displayValue, value, count: parseInt(filteredFieldCount) });\n\t\t\tthis.sortBys[filteredField].valuesObj[value] = parseInt(filteredFieldCount);\n\t\t}\n\n\t\treturn filteredField;\n\t},\n\n\tgetTotalAgg: function(table) {\n\t\tlet count = 0;\n\t\tvar taskGA = new GlideAggregate(table);\n\t\ttaskGA.addAggregate('COUNT');\n\t\tif (this.query) {\n\t\t\ttaskGA.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\t\n\t\ttaskGA.query();\n\n\t\tif (taskGA.next()) {\n\t\t\tcount = taskGA.getAggregate('COUNT');\n\t\t}\n\n\t\treturn count;\n\t},\n\n\tgetRefRecordDV: function(workTaskGr, field, displayField, key) {\n\t\tconst recordSysId = workTaskGr.getValue(field);\n\t\tif (recordSysId && !this[key][recordSysId]) {\n\t\t\tconst refRecordGr = workTaskGr[field].getRefRecord();\n\t\t\tif (refRecordGr.isValidRecord()) {\n\t\t\t\tif (\"campaign, project\".indexOf(field) > -1) {\n\t\t\t\t\tthis[key][recordSysId + 'color'] = refRecordGr.getValue('glyph_color');\n\t\t\t\t}\n\t\t\t\tthis[key][recordSysId] = refRecordGr.getDisplayValue(displayField);\n\t\t\t\tif (field === 'assigned_to') {\n\t\t\t\t\tlet avatar = refRecordGr.getValue('avatar');\n\t\t\t\t\tavatar = avatar == null ? '' : avatar;\n\t\t\t\t\tlet photo = refRecordGr.getValue('photo');\n\t\t\t\t\tphoto = photo == null ? '' : photo;\n\t\t\t\t\tconst userAvatar = avatar || photo;\n\t\t\t\t\tthis[key][recordSysId + 'assigned_to'] = userAvatar;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[key][recordSysId] = '';\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdisplayValue: this[key][recordSysId] || '',\n\t\t\tvalue: recordSysId,\n\t\t\tcolor : this[key][recordSysId + 'color'] || '',\n\t\t\tavatar: this[key][recordSysId + 'assigned_to'] || ''\n\t\t};\n\t},\n\n\tcalculateIfOverdue: function(workTaskGr) {\n\t\tconst dueDateCalue = workTaskGr.getDisplayValue('due_date');\n\t\tvar gdt1 = new GlideDateTime(workTaskGr.getDisplayValue('due_date'));\n\t\tvar gdt2 = new GlideDateTime();\n\t\treturn gdt1.before(gdt2);\n\t},\n\n\tgetUsers: function(workTaskGr) {\n\t\tconst users = [];\n\n\t\tconst assignedToSysId = workTaskGr.getValue('assigned_to');\n\t\tif (assignedToSysId) {\n\t\t\tconst assignedTo = this.getRefRecordDV(workTaskGr, 'assigned_to', 'photo', 'usersObj');\n\t\t\tusers.push({\n\t\t\t\tdisplayValue: workTaskGr.getDisplayValue('assigned_to'),\n\t\t\t\tvalue: assignedToSysId,\n\t\t\t\timage: assignedTo.avatar ? assignedTo.avatar + '.iix' : '',\n\t\t\t\tavatar: assignedTo.avatar\n\t\t\t});\n\t\t}\n\n\t\treturn users;\n\t},\n\n\tgetGlideRecords: function(request) {\n\t\tconst { project, filterFields: fltrFlds = 'state', orderBy = 'due_date', table, start, end } = request.queryParams;\n\t\tif (!table) return [];\n\t\tconst filteredFields = (fltrFlds.split().map((field) => field.trim()) || []);\n\t\tconst filteredField = this.getSortBys(table, filteredFields);\n\n\t\tconst startWindow = start ? parseInt(start.toString()) : 0;\n\t\tconst endWindow = end ? parseInt(end.toString()) : 100;\n\n\t\tconst workTaskGr = new GlideRecordSecure(table);\n\t\tif (this.query) {\n\t\t\tworkTaskGr.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (project) {\n\t\t\tworkTaskGr.addQuery('project', project);\n\t\t}\n\t\tif (orderBy) {\n\t\t\tworkTaskGr.orderBy(orderBy);\n\t\t}\n\t\tworkTaskGr.orderBy('short_description');\n\t\tworkTaskGr.chooseWindow(startWindow, endWindow);\n\t\tworkTaskGr.query();\n\n\t\tlet overdueCount = 0;\n\t\tconst tasks = [];\n\n\t\tvar tenonTimeApi = new TenonTime(true);\n\n\t\twhile (workTaskGr.next()) {\n\t\t\tlet status = '';\n\t\t\tlet statusValue = '';\n\t\t\tconst stateValue = workTaskGr.getValue('state');\n\t\t\tconst state = workTaskGr.getDisplayValue('state');\n\n\t\t\tif (table === 'x_cadso_work_task') {\n\t\t\t\tstatus = workTaskGr.getDisplayValue('status');\n\t\t\t\tstatusValue = workTaskGr.getValue('status');\n\t\t\t} else {\n\t\t\t\tstatus = state;\n\t\t\t\tstatusValue = workTaskGr.getValue('state');\n\t\t\t}\n\n\t\t\tthis.sortBys[filteredField].valuesObj[workTaskGr.getValue(filteredField)]++;\n\n\t\t\t// Date Logic Start\n\t\t\tlet dueDate = workTaskGr.getDisplayValue('due_date') + '';\n\t\t\tlet overDue = false;\n\t\t\tlet datesRelative = {};\n\t\t\tif (dueDate) {\n\t\t\t\toverDue = this.calculateIfOverdue(workTaskGr);\n\t\t\t\tif (overDue) {\n\t\t\t\t\toverdueCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdatesRelative = this.getDateRelativity(dueDate, overDue);\n\t\t\tdueDate = tenonTimeApi.format(dueDate);\n\t\t\t// Date Logic End\n\n\n\t\t\tconst project = this.getRefRecordDV(workTaskGr, 'project', 'short_description', 'projects');\n\t\t\tconst campaign = this.getRefRecordDV(workTaskGr, 'campaign', 'short_description', 'campaigns');\n\n\t\t\tconst users = this.getUsers(workTaskGr);\n\n\t\t\ttasks.push({\n\t\t\t\tshortDescription: workTaskGr.getDisplayValue('short_description'),\n\t\t\t\tdueDate,\n\t\t\t\tstatus,\n\t\t\t\tstatusValue,\n\t\t\t\tstate,\n\t\t\t\tstateValue,\n\t\t\t\tproject,\n\t\t\t\tcampaign,\n\t\t\t\tusers,\n\t\t\t\toverDue,\n\t\t\t\tsysId: workTaskGr.getUniqueValue(),\n\t\t\t\t...datesRelative\n\t\t\t});\n\t\t}\n\n\t\tthis.statuses.total.count = this.getTotalAgg(table);\n\t\tthis.statuses.overdue.count = overdueCount;\n\n\n\t\treturn tasks;\n\t},\n\n\tgetFilterFields: function(workTaskGr, filterFields, sortBy) {\n\t\t// not used as of now\n\t\tfilterFields.forEach(function(field) {\n\t\t\tif (!sortBy[field]) {\n\t\t\t\ttry {\n\t\t\t\t\tconst isValid = !sortBy[field].init;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsortBy[field] = { init: true, values: [], valuesObj: {} };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst value = workTaskGr.getValue(field);\n\n\t\t\tif (!sortBy[field].valuesObj[value]) {\n\t\t\t\tsortBy[field].valuesObj[value] = true;\n\t\t\t\tconst displayValue = workTaskGr.getDisplayValue(field);\n\t\t\t\tsortBy[field].values.push({\n\t\t\t\t\tdisplayValue,\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn sortBy;\n\t},\n\n\tgetDateRelativity: function(dueDate, overdue) {\n\t\t/*\n\t\t\tIf over due, everything should be true.\n\t\t*/\n\n\t\tconst datesRelative = {\n\t\t\tdueToday: false,\n\t\t\tdueInThreeDays: false,\n\t\t\tdueThisWeek: false,\n\t\t\tdueNextWeek: false,\n\t\t\tdueThisMonth: overdue,\n\t\t};\n\n\t\tif (overdue || !dueDate) {\n\t\t\treturn datesRelative;\n\t\t}\n\n\t\tconst todaysDateGdt = new GlideDateTime();\n\t\tconst dueDateGdt = new GlideDateTime(dueDate);\n\n\t\tconst thisMonth = todaysDateGdt.getMonthUTC();\n\t\tconst dueDateMonth = dueDateGdt.getMonthUTC();\n\t\tconst isThisMonth = thisMonth === dueDateMonth;\n\t\tdatesRelative.dueThisMonth = isThisMonth;\n\n\t\tif (!datesRelative.dueToday) {\n\t\t\tconst today = todaysDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst dueDateDay = dueDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst isToday = today === dueDateDay;\n\t\t\tdatesRelative.dueToday = isToday;\n\t\t\tdatesRelative.dueInThreeDays = datesRelative.dueToday;\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueToday;\n\n\t\t}\n\n\t\tif (!datesRelative.dueInThreeDays) {\n\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\ttodaysDateGdt.add(threeDays);\n\t\t\tif (dueDateGdt <= todaysDateGdt.getDisplayValue()){\n\t\t\t\tdatesRelative.dueInThreeDays = true;\n\t\t\t}\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueInThreeDays;\n\t\t}\n\n\t\tif (!datesRelative.dueThisWeek) {\n\t\t\tconst todayWeek = todaysDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isThisWeek = todayWeek === dueDateWeek;\n\t\t\tdatesRelative.dueThisWeek = isThisWeek;\n\t\t}\n\n\t\tif (!datesRelative.dueNextWeek) {\n\t\t\tconst week = todaysDateGdt.getWeekOfYearLocalTime(); // 11\n\t\t\tconst nextWeek = week == 52 ? 1 : week + 1; // 12\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isNextWeek = nextWeek === dueDateWeek;\n\t\t\tdatesRelative.dueNextWeek = isNextWeek;\n\t\t}\n\n\t\treturn datesRelative;\n\t},\n\n\tconvertObjToArray: function(dataObj) {\n\t\treturn Object.keys(dataObj).map((key) => dataObj[key]);\n\t},\n\n\tgetStateCount: function(state) {\n\t\tif (state == 3) {\n\t\t\treturn 'completed';\n\t\t} else if (state == 2) {\n\t\t\treturn 'inProgress';\n\t\t}\n\t},\n\n\ttype: 'ActiveTaskApiMS'\n};",
    "formatted_script": {
      "line_count": 462,
      "char_count": 13327,
      "preview": "var ActiveTaskApiMS = Class.create();\nActiveTaskApiMS.prototype = {\n\tinitialize: function() {\n\t\tthis.statuses = {\n\t\t\tcompleted: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Completed')\n\t\t\t},\n\t\t\tinProgres...",
      "full_script": "var ActiveTaskApiMS = Class.create();\nActiveTaskApiMS.prototype = {\n\tinitialize: function() {\n\t\tthis.statuses = {\n\t\t\tcompleted: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Completed')\n\t\t\t},\n\t\t\tinProgress: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('in Progress')\n\t\t\t},\n\t\t\toverdue: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Overdue')\n\t\t\t},\n\t\t\ttotal: {\n\t\t\t\tcount: 0,\n\t\t\t\tlabel: gs.getMessage('Total')\n\t\t\t}\n\t\t};\n\t\tthis.projects = {};\n\t\tthis.campaigns = {};\n\t\tthis.usersObj = {};\n\t\tthis.sortBys = {};\n\t\tvar scheduleWrapperApi = new x_cadso_work.ScheduleWrapper({});\n\t\tthis.dateTimeFormat = scheduleWrapperApi.getUserFormat();\n\t\tthis.query = '';\n\t\tthis.sortByQuery = '';\n\t\tthis.dueDateSelected = '';\n\t\tthis.dueDateSelectedQuery = '';\n\t\tthis.reset = false;\n\t},\n\n\t// Entry Point of Script Include\n\tgetTasks: function(request, response) {\n\t\tconst { query, sortByQuery, dueDateSelected, reset, project } = request.queryParams;\n\n\t\tif (reset && reset.toString) {\n\t\t\tthis.reset = reset.toString() === 'true';\n\t\t}\n\t\t\n\t\tif (query && query.toString) {\n\t\t\tthis.query = query.toString();\n\t\t}\n\t\t\n\t\tif (project && project.toString) {\n\t\t\tconst XORoperator = this.query.length ? '^' : '';\n\t\t\tthis.query = this.query.split('^NQ').map((query) => {\n\t\t\t\treturn query + XORoperator + 'project=' + project;\n\t\t\t}).join('^NQ');\n\t\t}\n// \t\telse {\n// \t\t\tthis.query = 'assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORsegmentDYNAMIC127538294701e15085d19fd8036d438a^ORassignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^stateNOT IN40,50,60';\n// \t\t}\n\n\t\tif (sortByQuery && sortByQuery.toString) {\n\t\t\tthis.sortByQuery = sortByQuery.toString();\n\t\t}\n\n\t\tif (dueDateSelected && dueDateSelected.toString) {\n\t\t\tthis.dueDateSelected = dueDateSelected.toString();\n\t\t\tthis.getDueDateSelected();\n\t\t}\n\n\t\tconst tasks = this.getGlideRecords(request);\n\n\t\tObject.keys(this.sortBys).forEach((key) => {\n\t\t\tthis.sortBys[key].values = this.sortBys[key].values.sort(function(a, b) {\n\t\t\t\tif (a.displayValue < b.displayValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (a.displayValue > b.displayValue) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t\n\t\tresponse.setBody({\n\t\t\ttasks,\n\t\t\tsortBy: this.sortBys,\n\t\t\tdateTimeFormat: this.dateTimeFormat,\n\t\t\ttotal: this.statuses.total.count,\n\t\t\tquery: this.query,\n\t\t\tdueDateSelectedQuery: this.dueDateSelectedQuery,\n\t\t\tdueDateSelected: this.dueDateSelected,\n\t\t\tsortByQuery: this.sortByQuery,\n\t\t\treset: this.reset\n\t\t});\n\n\t\tresponse.setStatus(200);\n\n\t\treturn response;\n\t},\n\n\tgetDueDateSelected: function() {\n\t\tconst todayStart = new GlideDateTime();\n\t\tconst todayEnd = new GlideDateTime();\n\t\tvar date = todayStart.getDisplayValueInternal().split(' ')[0];\n\t\ttodayStart.setDisplayValueInternal(date + ' 00:00:00');\n\t\ttodayEnd.setDisplayValueInternal(date + ' 23:59:59');\n\t\tvar dayOfWeek = todayStart.getDayOfWeekLocalTime();\n\t\tswitch(this.dueDateSelected) {\n\t\t\tcase 'dueToday':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_dateONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()';\n\t\t\t\tbreak;\n\t\t\tcase 'dueInThreeDays':\n\t\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\t\ttodayEnd.add(threeDays);\n\t\t\t\tvar start1 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end1 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start1}','00:00:00')^due_date<javascript:gs.dateGenerate('${end1}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueThisWeek':\n\t\t\t\tvar startOfWeek = dayOfWeek - 1;\n\t\t\t\tvar endOfWeek = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek) {\n\t\t\t\t\tvar weekS = new GlideDuration(startOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayStart.subtract(weekS);\n\t\t\t\t}\n\t\t\t\tif (endOfWeek) {\n\t\t\t\t\tvar weekE = new GlideDuration(endOfWeek + ' 00:00:00');\n\t\t\t\t\ttodayEnd.add(weekE);\n\t\t\t\t}\n\t\t\t\tvar start = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start}','00:00:00')^due_date<javascript:gs.dateGenerate('${end}','23:59:59')`;\n\t\t\t\tbreak;\n\t\t\tcase 'dueNextWeek':\n\t\t\t\tvar startOfWeek2 = 8 - dayOfWeek;\n\t\t\t\tvar endOfWeek2 = 7 - dayOfWeek;\n\t\t\t\tif (startOfWeek2) {\n\t\t\t\t\tvar weekS2 = new GlideDuration(startOfWeek2 + ' 00:00:00');\n\t\t\t\t\ttodayStart.add(weekS2);\n\t\t\t\t}\n\t\t\t\tvar weekE2 = new GlideDuration(endOfWeek2 + ' 00:00:00');\n\t\t\t\tif (endOfWeek2) {\n\t\t\t\t\ttodayEnd.add(weekE2.getNumericValue());\n\t\t\t\t}\n\t\t\t\ttodayEnd.addWeeksLocalTime(1);\n\t\t\t\tvar start2 = todayStart.getDisplayValue().split(' ')[0];\n\t\t\t\tvar end2 = todayEnd.getDisplayValue().split(' ')[0];\n\t\t\t\tthis.dueDateSelectedQuery = `due_date>javascript:gs.dateGenerate('${start2}','00:00:00')^due_date<javascript:gs.dateGenerate('${end2}','23:59:59')`;\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 'overDue':\n\t\t\t\tthis.dueDateSelectedQuery = 'due_date<javascript:gs.beginningOfToday()';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.dueDateSelectedQuery = '';\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\tgetSortBys: function(table, filterFields) {\n\t\tlet filteredField = filterFields && filterFields.length ? filterFields[0] : 'state';\n\t\tvar agg = new GlideAggregate(table);\n\t\tagg.addAggregate('COUNT', filteredField);\n\n\t\tif (this.query) {\n\t\t\tagg.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tagg.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\tagg.orderBy(filteredField);\n\t\tagg.query();\n\n\t\tthis.sortBys[filteredField] = { init: true, values: [], valuesObj: {} };\n\n\t\twhile (agg.next()) {\n\t\t\tvar filteredFieldCount = agg.getAggregate('COUNT', filteredField) || 0;\n\t\t\tvar displayValue = agg.getDisplayValue(filteredField);\n\t\t\tif (!displayValue) continue;\n\t\t\tvar value = agg.getValue(filteredField);\n\n\t\t\tthis.sortBys[filteredField].values.push({ displayValue, value, count: parseInt(filteredFieldCount) });\n\t\t\tthis.sortBys[filteredField].valuesObj[value] = parseInt(filteredFieldCount);\n\t\t}\n\n\t\treturn filteredField;\n\t},\n\n\tgetTotalAgg: function(table) {\n\t\tlet count = 0;\n\t\tvar taskGA = new GlideAggregate(table);\n\t\ttaskGA.addAggregate('COUNT');\n\t\tif (this.query) {\n\t\t\ttaskGA.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\ttaskGA.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\t\t\n\t\ttaskGA.query();\n\n\t\tif (taskGA.next()) {\n\t\t\tcount = taskGA.getAggregate('COUNT');\n\t\t}\n\n\t\treturn count;\n\t},\n\n\tgetRefRecordDV: function(workTaskGr, field, displayField, key) {\n\t\tconst recordSysId = workTaskGr.getValue(field);\n\t\tif (recordSysId && !this[key][recordSysId]) {\n\t\t\tconst refRecordGr = workTaskGr[field].getRefRecord();\n\t\t\tif (refRecordGr.isValidRecord()) {\n\t\t\t\tif (\"campaign, project\".indexOf(field) > -1) {\n\t\t\t\t\tthis[key][recordSysId + 'color'] = refRecordGr.getValue('glyph_color');\n\t\t\t\t}\n\t\t\t\tthis[key][recordSysId] = refRecordGr.getDisplayValue(displayField);\n\t\t\t\tif (field === 'assigned_to') {\n\t\t\t\t\tlet avatar = refRecordGr.getValue('avatar');\n\t\t\t\t\tavatar = avatar == null ? '' : avatar;\n\t\t\t\t\tlet photo = refRecordGr.getValue('photo');\n\t\t\t\t\tphoto = photo == null ? '' : photo;\n\t\t\t\t\tconst userAvatar = avatar || photo;\n\t\t\t\t\tthis[key][recordSysId + 'assigned_to'] = userAvatar;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[key][recordSysId] = '';\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdisplayValue: this[key][recordSysId] || '',\n\t\t\tvalue: recordSysId,\n\t\t\tcolor : this[key][recordSysId + 'color'] || '',\n\t\t\tavatar: this[key][recordSysId + 'assigned_to'] || ''\n\t\t};\n\t},\n\n\tcalculateIfOverdue: function(workTaskGr) {\n\t\tconst dueDateCalue = workTaskGr.getDisplayValue('due_date');\n\t\tvar gdt1 = new GlideDateTime(workTaskGr.getDisplayValue('due_date'));\n\t\tvar gdt2 = new GlideDateTime();\n\t\treturn gdt1.before(gdt2);\n\t},\n\n\tgetUsers: function(workTaskGr) {\n\t\tconst users = [];\n\n\t\tconst assignedToSysId = workTaskGr.getValue('assigned_to');\n\t\tif (assignedToSysId) {\n\t\t\tconst assignedTo = this.getRefRecordDV(workTaskGr, 'assigned_to', 'photo', 'usersObj');\n\t\t\tusers.push({\n\t\t\t\tdisplayValue: workTaskGr.getDisplayValue('assigned_to'),\n\t\t\t\tvalue: assignedToSysId,\n\t\t\t\timage: assignedTo.avatar ? assignedTo.avatar + '.iix' : '',\n\t\t\t\tavatar: assignedTo.avatar\n\t\t\t});\n\t\t}\n\n\t\treturn users;\n\t},\n\n\tgetGlideRecords: function(request) {\n\t\tconst { project, filterFields: fltrFlds = 'state', orderBy = 'due_date', table, start, end } = request.queryParams;\n\t\tif (!table) return [];\n\t\tconst filteredFields = (fltrFlds.split().map((field) => field.trim()) || []);\n\t\tconst filteredField = this.getSortBys(table, filteredFields);\n\n\t\tconst startWindow = start ? parseInt(start.toString()) : 0;\n\t\tconst endWindow = end ? parseInt(end.toString()) : 100;\n\n\t\tconst workTaskGr = new GlideRecordSecure(table);\n\t\tif (this.query) {\n\t\t\tworkTaskGr.addEncodedQuery(this.query, true);\n\t\t}\n\n\t\tif (this.dueDateSelectedQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.dueDateSelectedQuery, true);\n\t\t}\n\n\t\tif (this.sortByQuery) {\n\t\t\tworkTaskGr.addEncodedQuery(this.sortByQuery, true);\n\t\t}\n\n\t\tif (project) {\n\t\t\tworkTaskGr.addQuery('project', project);\n\t\t}\n\t\tif (orderBy) {\n\t\t\tworkTaskGr.orderBy(orderBy);\n\t\t}\n\t\tworkTaskGr.orderBy('short_description');\n\t\tworkTaskGr.chooseWindow(startWindow, endWindow);\n\t\tworkTaskGr.query();\n\n\t\tlet overdueCount = 0;\n\t\tconst tasks = [];\n\n\t\tvar tenonTimeApi = new TenonTime(true);\n\n\t\twhile (workTaskGr.next()) {\n\t\t\tlet status = '';\n\t\t\tlet statusValue = '';\n\t\t\tconst stateValue = workTaskGr.getValue('state');\n\t\t\tconst state = workTaskGr.getDisplayValue('state');\n\n\t\t\tif (table === 'x_cadso_work_task') {\n\t\t\t\tstatus = workTaskGr.getDisplayValue('status');\n\t\t\t\tstatusValue = workTaskGr.getValue('status');\n\t\t\t} else {\n\t\t\t\tstatus = state;\n\t\t\t\tstatusValue = workTaskGr.getValue('state');\n\t\t\t}\n\n\t\t\tthis.sortBys[filteredField].valuesObj[workTaskGr.getValue(filteredField)]++;\n\n\t\t\t// Date Logic Start\n\t\t\tlet dueDate = workTaskGr.getDisplayValue('due_date') + '';\n\t\t\tlet overDue = false;\n\t\t\tlet datesRelative = {};\n\t\t\tif (dueDate) {\n\t\t\t\toverDue = this.calculateIfOverdue(workTaskGr);\n\t\t\t\tif (overDue) {\n\t\t\t\t\toverdueCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdatesRelative = this.getDateRelativity(dueDate, overDue);\n\t\t\tdueDate = tenonTimeApi.format(dueDate);\n\t\t\t// Date Logic End\n\n\n\t\t\tconst project = this.getRefRecordDV(workTaskGr, 'project', 'short_description', 'projects');\n\t\t\tconst campaign = this.getRefRecordDV(workTaskGr, 'campaign', 'short_description', 'campaigns');\n\n\t\t\tconst users = this.getUsers(workTaskGr);\n\n\t\t\ttasks.push({\n\t\t\t\tshortDescription: workTaskGr.getDisplayValue('short_description'),\n\t\t\t\tdueDate,\n\t\t\t\tstatus,\n\t\t\t\tstatusValue,\n\t\t\t\tstate,\n\t\t\t\tstateValue,\n\t\t\t\tproject,\n\t\t\t\tcampaign,\n\t\t\t\tusers,\n\t\t\t\toverDue,\n\t\t\t\tsysId: workTaskGr.getUniqueValue(),\n\t\t\t\t...datesRelative\n\t\t\t});\n\t\t}\n\n\t\tthis.statuses.total.count = this.getTotalAgg(table);\n\t\tthis.statuses.overdue.count = overdueCount;\n\n\n\t\treturn tasks;\n\t},\n\n\tgetFilterFields: function(workTaskGr, filterFields, sortBy) {\n\t\t// not used as of now\n\t\tfilterFields.forEach(function(field) {\n\t\t\tif (!sortBy[field]) {\n\t\t\t\ttry {\n\t\t\t\t\tconst isValid = !sortBy[field].init;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsortBy[field] = { init: true, values: [], valuesObj: {} };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst value = workTaskGr.getValue(field);\n\n\t\t\tif (!sortBy[field].valuesObj[value]) {\n\t\t\t\tsortBy[field].valuesObj[value] = true;\n\t\t\t\tconst displayValue = workTaskGr.getDisplayValue(field);\n\t\t\t\tsortBy[field].values.push({\n\t\t\t\t\tdisplayValue,\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn sortBy;\n\t},\n\n\tgetDateRelativity: function(dueDate, overdue) {\n\t\t/*\n\t\t\tIf over due, everything should be true.\n\t\t*/\n\n\t\tconst datesRelative = {\n\t\t\tdueToday: false,\n\t\t\tdueInThreeDays: false,\n\t\t\tdueThisWeek: false,\n\t\t\tdueNextWeek: false,\n\t\t\tdueThisMonth: overdue,\n\t\t};\n\n\t\tif (overdue || !dueDate) {\n\t\t\treturn datesRelative;\n\t\t}\n\n\t\tconst todaysDateGdt = new GlideDateTime();\n\t\tconst dueDateGdt = new GlideDateTime(dueDate);\n\n\t\tconst thisMonth = todaysDateGdt.getMonthUTC();\n\t\tconst dueDateMonth = dueDateGdt.getMonthUTC();\n\t\tconst isThisMonth = thisMonth === dueDateMonth;\n\t\tdatesRelative.dueThisMonth = isThisMonth;\n\n\t\tif (!datesRelative.dueToday) {\n\t\t\tconst today = todaysDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst dueDateDay = dueDateGdt.getDayOfMonthLocalTime();\n\t\t\tconst isToday = today === dueDateDay;\n\t\t\tdatesRelative.dueToday = isToday;\n\t\t\tdatesRelative.dueInThreeDays = datesRelative.dueToday;\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueToday;\n\n\t\t}\n\n\t\tif (!datesRelative.dueInThreeDays) {\n\t\t\tvar threeDays = new GlideDuration('3 00:00:00');\n\t\t\ttodaysDateGdt.add(threeDays);\n\t\t\tif (dueDateGdt <= todaysDateGdt.getDisplayValue()){\n\t\t\t\tdatesRelative.dueInThreeDays = true;\n\t\t\t}\n\t\t\tdatesRelative.dueThisWeek = datesRelative.dueInThreeDays;\n\t\t}\n\n\t\tif (!datesRelative.dueThisWeek) {\n\t\t\tconst todayWeek = todaysDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isThisWeek = todayWeek === dueDateWeek;\n\t\t\tdatesRelative.dueThisWeek = isThisWeek;\n\t\t}\n\n\t\tif (!datesRelative.dueNextWeek) {\n\t\t\tconst week = todaysDateGdt.getWeekOfYearLocalTime(); // 11\n\t\t\tconst nextWeek = week == 52 ? 1 : week + 1; // 12\n\t\t\tconst dueDateWeek = dueDateGdt.getWeekOfYearLocalTime();\n\t\t\tconst isNextWeek = nextWeek === dueDateWeek;\n\t\t\tdatesRelative.dueNextWeek = isNextWeek;\n\t\t}\n\n\t\treturn datesRelative;\n\t},\n\n\tconvertObjToArray: function(dataObj) {\n\t\treturn Object.keys(dataObj).map((key) => dataObj[key]);\n\t},\n\n\tgetStateCount: function(state) {\n\t\tif (state == 3) {\n\t\t\treturn 'completed';\n\t\t} else if (state == 2) {\n\t\t\treturn 'inProgress';\n\t\t}\n\t},\n\n\ttype: 'ActiveTaskApiMS'\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_bfa79f41472c2d50a1052a02e26d43b2",
    "display_value": "sys_script_include_bfa79f41472c2d50a1052a02e26d43b2"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.ActiveTaskApiMS",
    "display_value": "x_cadso_work.ActiveTaskApiMS"
  },
  "sys_created_on": {
    "value": "2023-01-21 02:53:02",
    "display_value": "2023-01-20 06:53:02 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ActiveTaskApiMS",
    "display_value": "ActiveTaskApiMS"
  },
  "sys_name": {
    "value": "ActiveTaskApiMS",
    "display_value": "ActiveTaskApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
