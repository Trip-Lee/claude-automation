{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "445f163e470e7d1098519fd8036d436d",
    "extracted_at": "2025-09-19T21:48:31.338Z",
    "display_value": "TenonTimeMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "20",
    "display_value": "20"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2023-12-28 19:48:24",
    "display_value": "2023-12-28 11:48:24 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var TenonTimeMS = Class.create();\nTenonTimeMS.prototype = {\n\tinitialize: function(forceNoTime) {\n\t\tthis.showTime = gs.getProperty('x_cadso_work.ui_show_time_on_dates');\n\t\t\n\t\tif (forceNoTime) {\n\t\t\tthis.showTime = false;\n\t\t} else {\n\t\t\tthis.showTime = this.showTime === 'false' ? false : this.showTime;\n\t\t}\n\t\t\n\t\tthis.dates = {};\n\t\tthis.timeFormat = gs.getProperty('glide.sys.time_format') + '';\n\t\tthis.timeSpliter = this.timeFormat.indexOf(':') > -1 ? ':' : '.';\n\t\tthis.twelveHourDay = this.timeFormat.indexOf('a') > -1;\n\t},\n\t\n\tgetFormat: function() {\n\t\tconst { timeFormat, timeSpliter: spliter, showTime, twelveHourDay } = this;\n\t\tconst scheduleWrapperApi = new x_cadso_work.ScheduleWrapper();\n\t\t\n\t\tconst dateTime = scheduleWrapperApi.getUserFormat();\n\t\treturn { ...dateTime, tenonTimeFormat: { timeFormat, spliter, showTime, twelveHourDay } };\n\t},\n\n\tformat: function(timeInDisplayValue) {\n\t\tlet whatTimeIsIt = timeInDisplayValue;\n\t\tif (!timeInDisplayValue) return whatTimeIsIt;\n\t\ttry {\n\t\t\tif (!this.showTime) {\n\t\t\t\twhatTimeIsIt = this.removeTime(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'hours') {\n\t\t\t\twhatTimeIsIt = this.keepHours(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'minutes') {\n\t\t\t\twhatTimeIsIt = this.keepMinutes(timeInDisplayValue);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tgs.error('TenonTime is not able to format the date time correctly.');\n\t\t\tgs.error('TenonTime Error: ' + e);\n\t\t\twhatTimeIsIt = timeInDisplayValue;\n\t\t}\n\n\t\treturn whatTimeIsIt;\n\t},\n\n\tkeepMinutes: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\t\tlet minutes = timeSplit[1];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndMinutes = dateOnly + ' ' + hour + this.timeSpliter + minutes;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndMinutes += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndMinutes;\n\t},\n\n\tkeepHours: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndHours = dateOnly + ' ' + hour;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndHours += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndHours;\n\t},\n\n\tremoveTime: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateOnly = timeInDisplayValue.split(' ')[0];\n\t\treturn dateOnly;\n\t},\n\n\ttype: 'TenonTimeMS'\n};",
    "display_value": "var TenonTimeMS = Class.create();\nTenonTimeMS.prototype = {\n\tinitialize: function(forceNoTime) {\n\t\tthis.showTime = gs.getProperty('x_cadso_work.ui_show_time_on_dates');\n\t\t\n\t\tif (forceNoTime) {\n\t\t\tthis.showTime = false;\n\t\t} else {\n\t\t\tthis.showTime = this.showTime === 'false' ? false : this.showTime;\n\t\t}\n\t\t\n\t\tthis.dates = {};\n\t\tthis.timeFormat = gs.getProperty('glide.sys.time_format') + '';\n\t\tthis.timeSpliter = this.timeFormat.indexOf(':') > -1 ? ':' : '.';\n\t\tthis.twelveHourDay = this.timeFormat.indexOf('a') > -1;\n\t},\n\t\n\tgetFormat: function() {\n\t\tconst { timeFormat, timeSpliter: spliter, showTime, twelveHourDay } = this;\n\t\tconst scheduleWrapperApi = new x_cadso_work.ScheduleWrapper();\n\t\t\n\t\tconst dateTime = scheduleWrapperApi.getUserFormat();\n\t\treturn { ...dateTime, tenonTimeFormat: { timeFormat, spliter, showTime, twelveHourDay } };\n\t},\n\n\tformat: function(timeInDisplayValue) {\n\t\tlet whatTimeIsIt = timeInDisplayValue;\n\t\tif (!timeInDisplayValue) return whatTimeIsIt;\n\t\ttry {\n\t\t\tif (!this.showTime) {\n\t\t\t\twhatTimeIsIt = this.removeTime(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'hours') {\n\t\t\t\twhatTimeIsIt = this.keepHours(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'minutes') {\n\t\t\t\twhatTimeIsIt = this.keepMinutes(timeInDisplayValue);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tgs.error('TenonTime is not able to format the date time correctly.');\n\t\t\tgs.error('TenonTime Error: ' + e);\n\t\t\twhatTimeIsIt = timeInDisplayValue;\n\t\t}\n\n\t\treturn whatTimeIsIt;\n\t},\n\n\tkeepMinutes: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\t\tlet minutes = timeSplit[1];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndMinutes = dateOnly + ' ' + hour + this.timeSpliter + minutes;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndMinutes += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndMinutes;\n\t},\n\n\tkeepHours: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndHours = dateOnly + ' ' + hour;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndHours += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndHours;\n\t},\n\n\tremoveTime: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateOnly = timeInDisplayValue.split(' ')[0];\n\t\treturn dateOnly;\n\t},\n\n\ttype: 'TenonTimeMS'\n};",
    "formatted_script": {
      "line_count": 100,
      "char_count": 2810,
      "preview": "var TenonTimeMS = Class.create();\nTenonTimeMS.prototype = {\n\tinitialize: function(forceNoTime) {\n\t\tthis.showTime = gs.getProperty('x_cadso_work.ui_show_time_on_dates');\n\t\t\n\t\tif (forceNoTime) {\n\t\t\tthis...",
      "full_script": "var TenonTimeMS = Class.create();\nTenonTimeMS.prototype = {\n\tinitialize: function(forceNoTime) {\n\t\tthis.showTime = gs.getProperty('x_cadso_work.ui_show_time_on_dates');\n\t\t\n\t\tif (forceNoTime) {\n\t\t\tthis.showTime = false;\n\t\t} else {\n\t\t\tthis.showTime = this.showTime === 'false' ? false : this.showTime;\n\t\t}\n\t\t\n\t\tthis.dates = {};\n\t\tthis.timeFormat = gs.getProperty('glide.sys.time_format') + '';\n\t\tthis.timeSpliter = this.timeFormat.indexOf(':') > -1 ? ':' : '.';\n\t\tthis.twelveHourDay = this.timeFormat.indexOf('a') > -1;\n\t},\n\t\n\tgetFormat: function() {\n\t\tconst { timeFormat, timeSpliter: spliter, showTime, twelveHourDay } = this;\n\t\tconst scheduleWrapperApi = new x_cadso_work.ScheduleWrapper();\n\t\t\n\t\tconst dateTime = scheduleWrapperApi.getUserFormat();\n\t\treturn { ...dateTime, tenonTimeFormat: { timeFormat, spliter, showTime, twelveHourDay } };\n\t},\n\n\tformat: function(timeInDisplayValue) {\n\t\tlet whatTimeIsIt = timeInDisplayValue;\n\t\tif (!timeInDisplayValue) return whatTimeIsIt;\n\t\ttry {\n\t\t\tif (!this.showTime) {\n\t\t\t\twhatTimeIsIt = this.removeTime(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'hours') {\n\t\t\t\twhatTimeIsIt = this.keepHours(timeInDisplayValue);\n\t\t\t} else if (this.showTime === 'minutes') {\n\t\t\t\twhatTimeIsIt = this.keepMinutes(timeInDisplayValue);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tgs.error('TenonTime is not able to format the date time correctly.');\n\t\t\tgs.error('TenonTime Error: ' + e);\n\t\t\twhatTimeIsIt = timeInDisplayValue;\n\t\t}\n\n\t\treturn whatTimeIsIt;\n\t},\n\n\tkeepMinutes: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\t\tlet minutes = timeSplit[1];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndMinutes = dateOnly + ' ' + hour + this.timeSpliter + minutes;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndMinutes += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndMinutes;\n\t},\n\n\tkeepHours: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateTimeSplit = timeInDisplayValue.split(' ');\n\n\t\tconst dateOnly = dateTimeSplit[0];\n\t\tconst timeOnly = dateTimeSplit[1];\n\n\t\tconst timeSplit = timeOnly.split(this.timeSpliter);\n\t\tlet hour = timeSplit[0];\n\n\t\tif (this.twelveHourDay && hour.indexOf('0') === 0) {\n\t\t\thour = hour[1];\n\t\t}\n\n\t\tlet dateAndHours = dateOnly + ' ' + hour;\n\n\t\tif (this.twelveHourDay) {\n\t\t\tdateAndHours += ' ' + dateTimeSplit[2];\n\t\t}\n\n\t\treturn dateAndHours;\n\t},\n\n\tremoveTime: function(timeInDisplayValue) {\n\t\tif (!timeInDisplayValue) return timeInDisplayValue;\n\t\tconst dateOnly = timeInDisplayValue.split(' ')[0];\n\t\treturn dateOnly;\n\t},\n\n\ttype: 'TenonTimeMS'\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_445f163e470e7d1098519fd8036d436d",
    "display_value": "sys_script_include_445f163e470e7d1098519fd8036d436d"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.TenonTimeMS",
    "display_value": "x_cadso_work.TenonTimeMS"
  },
  "sys_created_on": {
    "value": "2023-10-26 19:01:40",
    "display_value": "2023-10-26 12:01:40 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "TenonTimeMS",
    "display_value": "TenonTimeMS"
  },
  "sys_name": {
    "value": "TenonTimeMS",
    "display_value": "TenonTimeMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
