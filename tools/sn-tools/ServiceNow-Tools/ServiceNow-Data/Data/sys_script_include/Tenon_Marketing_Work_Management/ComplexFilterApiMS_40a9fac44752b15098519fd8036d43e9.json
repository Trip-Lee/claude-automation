{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "40a9fac44752b15098519fd8036d43e9",
    "extracted_at": "2025-09-19T21:48:31.284Z",
    "display_value": "ComplexFilterApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "225",
    "display_value": "225"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "We use this to get all the drop down data for each field in the table.",
    "display_value": "We use this to get all the drop down data for each field in the table."
  },
  "sys_updated_on": {
    "value": "2025-09-04 22:10:35",
    "display_value": "2025-09-04 03:10:35 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "/* eslint-disable no-unmodified-loop-condition */\n/* eslint-disable no-useless-escape */\nvar ComplexFilterApiMS = Class.create();\nComplexFilterApiMS.prototype = {\n\tinitialize: function () {\n\t\tvar CF_Tables = new x_cadso_work.TenonComplexFilterTables();\n\t\tthis.routes = CF_Tables.routes;\n\t\tthis.operations = CF_Tables.operations;\n\t\tthis.operationTable = CF_Tables.operationTable;\n\t\tthis.operators = CF_Tables.operators;\n\t\tthis.booleanTable = CF_Tables.booleanTable;\n\t\tthis.glideDateTimeTable = CF_Tables.glideDateTimeTable;\n\t\tthis.currencyTable = CF_Tables.currencyTable;\n\t},\n\n\tfetch: function fetch(request, response) {\n\t\tlet { filterTable, relatedFilterToggle = true } = request.body.data;\n\n\t\tvar gdt = new GlideDateTime();\n\t\tvar timeZoneOffset = gdt.getTZOffset() / 1000 / 60 / 60;\n\t\tvar table = filterTable;\n\t\tvar fields = [];\n\n\t\t// add any currecies wanted to this array to add as long as they are in the currencyTable.\n\t\tvar currenciesToUse = [\"USD\", \"CHF\", \"EUR\", \"GBP\", \"JPY\"];\n\t\tthis.currencyTable = this.currencyTable\n\t\t\t.filter((item) => {\n\t\t\t\treturn currenciesToUse.includes(item.code);\n\t\t\t})\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.code === \"USD\") {\n\t\t\t\t\treturn -1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\tif (b.code === \"USD\") {\n\t\t\t\t\treturn 1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\treturn a.code.localeCompare(b.code); // Alphabetical order for the rest\n\t\t\t});\n\n\t\tfields = new x_cadso_work.GetTableDropdownsData().getData(table, false, relatedFilterToggle);\n\n\t\tresponse.setBody({\n\t\t\tfields: fields,\n\t\t\toperationTable: this.operationTable,\n\t\t\toperators: this.operators,\n\t\t\tbooleanTable: this.booleanTable,\n\t\t\tglideDateTimeTable: this.glideDateTimeTable,\n\t\t\tcurrencyTable: this.currencyTable,\n\t\t\ttimeZoneOffset: timeZoneOffset,\n\t\t});\n\t\treturn response;\n\t},\n\n\tadditional_filters_fetch: function (request, response) {\n\t\tlet { additionalFiltersToggle = false, additionalFilters = [] } = request.body.data;\n\n\t\tfor (let x = 0; additionalFiltersToggle && x < additionalFilters.length; x++) {\n\t\t\tif (!additionalFilters.customFilter) {\n\t\t\t\tadditionalFilters[x] = new x_cadso_work.GetTableDropdownsData().getAdditionalFilterData(additionalFilters[x]);\n\t\t\t}\n\t\t}\n\t\tresponse.setBody({\n\t\t\tadditionalFilters,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_reference_options: function (request, response) {\n\t\tlet { filterTable, field, queryString, filterToUpdate = \"\" } = request.body.data;\n\n\t\tfield = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(filterTable, field, queryString);\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterToUpdate,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_additional_reference_field_data: function (request, response) {\n\t\t// this is for dot walking in the complex filter\n\t\tlet { field, filterGroup, filter, relatedFilterToggle = false } = request.body.data;\n\t\tlet newFields = [];\n\t\tnewFields = new x_cadso_work.GetTableDropdownsData().getData(field.refTable, false, relatedFilterToggle);\n\t\tfield.additionalReferenceFields = newFields;\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterGroup,\n\t\t\tfilter,\n\t\t\trelatedFilterToggle,\n\t\t});\n\t\treturn response;\n\t},\n\n\ttype: \"ComplexFilterApiMS\",\n};\n",
    "display_value": "/* eslint-disable no-unmodified-loop-condition */\n/* eslint-disable no-useless-escape */\nvar ComplexFilterApiMS = Class.create();\nComplexFilterApiMS.prototype = {\n\tinitialize: function () {\n\t\tvar CF_Tables = new x_cadso_work.TenonComplexFilterTables();\n\t\tthis.routes = CF_Tables.routes;\n\t\tthis.operations = CF_Tables.operations;\n\t\tthis.operationTable = CF_Tables.operationTable;\n\t\tthis.operators = CF_Tables.operators;\n\t\tthis.booleanTable = CF_Tables.booleanTable;\n\t\tthis.glideDateTimeTable = CF_Tables.glideDateTimeTable;\n\t\tthis.currencyTable = CF_Tables.currencyTable;\n\t},\n\n\tfetch: function fetch(request, response) {\n\t\tlet { filterTable, relatedFilterToggle = true } = request.body.data;\n\n\t\tvar gdt = new GlideDateTime();\n\t\tvar timeZoneOffset = gdt.getTZOffset() / 1000 / 60 / 60;\n\t\tvar table = filterTable;\n\t\tvar fields = [];\n\n\t\t// add any currecies wanted to this array to add as long as they are in the currencyTable.\n\t\tvar currenciesToUse = [\"USD\", \"CHF\", \"EUR\", \"GBP\", \"JPY\"];\n\t\tthis.currencyTable = this.currencyTable\n\t\t\t.filter((item) => {\n\t\t\t\treturn currenciesToUse.includes(item.code);\n\t\t\t})\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.code === \"USD\") {\n\t\t\t\t\treturn -1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\tif (b.code === \"USD\") {\n\t\t\t\t\treturn 1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\treturn a.code.localeCompare(b.code); // Alphabetical order for the rest\n\t\t\t});\n\n\t\tfields = new x_cadso_work.GetTableDropdownsData().getData(table, false, relatedFilterToggle);\n\n\t\tresponse.setBody({\n\t\t\tfields: fields,\n\t\t\toperationTable: this.operationTable,\n\t\t\toperators: this.operators,\n\t\t\tbooleanTable: this.booleanTable,\n\t\t\tglideDateTimeTable: this.glideDateTimeTable,\n\t\t\tcurrencyTable: this.currencyTable,\n\t\t\ttimeZoneOffset: timeZoneOffset,\n\t\t});\n\t\treturn response;\n\t},\n\n\tadditional_filters_fetch: function (request, response) {\n\t\tlet { additionalFiltersToggle = false, additionalFilters = [] } = request.body.data;\n\n\t\tfor (let x = 0; additionalFiltersToggle && x < additionalFilters.length; x++) {\n\t\t\tif (!additionalFilters.customFilter) {\n\t\t\t\tadditionalFilters[x] = new x_cadso_work.GetTableDropdownsData().getAdditionalFilterData(additionalFilters[x]);\n\t\t\t}\n\t\t}\n\t\tresponse.setBody({\n\t\t\tadditionalFilters,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_reference_options: function (request, response) {\n\t\tlet { filterTable, field, queryString, filterToUpdate = \"\" } = request.body.data;\n\n\t\tfield = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(filterTable, field, queryString);\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterToUpdate,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_additional_reference_field_data: function (request, response) {\n\t\t// this is for dot walking in the complex filter\n\t\tlet { field, filterGroup, filter, relatedFilterToggle = false } = request.body.data;\n\t\tlet newFields = [];\n\t\tnewFields = new x_cadso_work.GetTableDropdownsData().getData(field.refTable, false, relatedFilterToggle);\n\t\tfield.additionalReferenceFields = newFields;\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterGroup,\n\t\t\tfilter,\n\t\t\trelatedFilterToggle,\n\t\t});\n\t\treturn response;\n\t},\n\n\ttype: \"ComplexFilterApiMS\",\n};\n",
    "formatted_script": {
      "line_count": 96,
      "char_count": 3072,
      "preview": "/* eslint-disable no-unmodified-loop-condition */\n/* eslint-disable no-useless-escape */\nvar ComplexFilterApiMS = Class.create();\nComplexFilterApiMS.prototype = {\n\tinitialize: function () {\n\t\tvar CF_T...",
      "full_script": "/* eslint-disable no-unmodified-loop-condition */\n/* eslint-disable no-useless-escape */\nvar ComplexFilterApiMS = Class.create();\nComplexFilterApiMS.prototype = {\n\tinitialize: function () {\n\t\tvar CF_Tables = new x_cadso_work.TenonComplexFilterTables();\n\t\tthis.routes = CF_Tables.routes;\n\t\tthis.operations = CF_Tables.operations;\n\t\tthis.operationTable = CF_Tables.operationTable;\n\t\tthis.operators = CF_Tables.operators;\n\t\tthis.booleanTable = CF_Tables.booleanTable;\n\t\tthis.glideDateTimeTable = CF_Tables.glideDateTimeTable;\n\t\tthis.currencyTable = CF_Tables.currencyTable;\n\t},\n\n\tfetch: function fetch(request, response) {\n\t\tlet { filterTable, relatedFilterToggle = true } = request.body.data;\n\n\t\tvar gdt = new GlideDateTime();\n\t\tvar timeZoneOffset = gdt.getTZOffset() / 1000 / 60 / 60;\n\t\tvar table = filterTable;\n\t\tvar fields = [];\n\n\t\t// add any currecies wanted to this array to add as long as they are in the currencyTable.\n\t\tvar currenciesToUse = [\"USD\", \"CHF\", \"EUR\", \"GBP\", \"JPY\"];\n\t\tthis.currencyTable = this.currencyTable\n\t\t\t.filter((item) => {\n\t\t\t\treturn currenciesToUse.includes(item.code);\n\t\t\t})\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.code === \"USD\") {\n\t\t\t\t\treturn -1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\tif (b.code === \"USD\") {\n\t\t\t\t\treturn 1;\n\t\t\t\t} // Place 'USD' first\n\t\t\t\treturn a.code.localeCompare(b.code); // Alphabetical order for the rest\n\t\t\t});\n\n\t\tfields = new x_cadso_work.GetTableDropdownsData().getData(table, false, relatedFilterToggle);\n\n\t\tresponse.setBody({\n\t\t\tfields: fields,\n\t\t\toperationTable: this.operationTable,\n\t\t\toperators: this.operators,\n\t\t\tbooleanTable: this.booleanTable,\n\t\t\tglideDateTimeTable: this.glideDateTimeTable,\n\t\t\tcurrencyTable: this.currencyTable,\n\t\t\ttimeZoneOffset: timeZoneOffset,\n\t\t});\n\t\treturn response;\n\t},\n\n\tadditional_filters_fetch: function (request, response) {\n\t\tlet { additionalFiltersToggle = false, additionalFilters = [] } = request.body.data;\n\n\t\tfor (let x = 0; additionalFiltersToggle && x < additionalFilters.length; x++) {\n\t\t\tif (!additionalFilters.customFilter) {\n\t\t\t\tadditionalFilters[x] = new x_cadso_work.GetTableDropdownsData().getAdditionalFilterData(additionalFilters[x]);\n\t\t\t}\n\t\t}\n\t\tresponse.setBody({\n\t\t\tadditionalFilters,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_reference_options: function (request, response) {\n\t\tlet { filterTable, field, queryString, filterToUpdate = \"\" } = request.body.data;\n\n\t\tfield = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(filterTable, field, queryString);\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterToUpdate,\n\t\t});\n\t\treturn response;\n\t},\n\n\tget_additional_reference_field_data: function (request, response) {\n\t\t// this is for dot walking in the complex filter\n\t\tlet { field, filterGroup, filter, relatedFilterToggle = false } = request.body.data;\n\t\tlet newFields = [];\n\t\tnewFields = new x_cadso_work.GetTableDropdownsData().getData(field.refTable, false, relatedFilterToggle);\n\t\tfield.additionalReferenceFields = newFields;\n\t\tresponse.setBody({\n\t\t\tfield,\n\t\t\tfilterGroup,\n\t\t\tfilter,\n\t\t\trelatedFilterToggle,\n\t\t});\n\t\treturn response;\n\t},\n\n\ttype: \"ComplexFilterApiMS\",\n};\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_40a9fac44752b15098519fd8036d43e9",
    "display_value": "sys_script_include_40a9fac44752b15098519fd8036d43e9"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.ComplexFilterApiMS",
    "display_value": "x_cadso_work.ComplexFilterApiMS"
  },
  "sys_created_on": {
    "value": "2023-10-30 18:08:49",
    "display_value": "2023-10-30 11:08:49 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ComplexFilterApiMS",
    "display_value": "ComplexFilterApiMS"
  },
  "sys_name": {
    "value": "ComplexFilterApiMS",
    "display_value": "ComplexFilterApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
