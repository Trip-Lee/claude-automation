{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "c6fab0c147b0251085d19fd8036d43d2",
    "extracted_at": "2025-09-19T21:48:31.775Z",
    "display_value": "SegmentUtilsMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "114",
    "display_value": "114"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-10-11 02:45:57",
    "display_value": "2024-10-10 07:45:57 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const SegmentUtilsMS = Class.create();\nSegmentUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentHelperUtils, {\n  initialize: function () {\n    x_cadso_work.SegmentHelperUtils.prototype.initialize.apply(this, arguments);\n    this.testing = false;\n\n    this.results = {\n      hasAdminRole: false,\n      hasConfiguratorRole: false,\n      hasManagerRole: false,\n      hasEnhancedRole: false,\n      hasUserRole: false,\n      createdBy: false,\n      assignedTo: false,\n      assignmentGroup: false,\n      workUser: false,\n      workUsersGroup: false,\n      workGroup: false,\n    };\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n  },\n\n  validateACLs: function (taskGr, userId, options = {}) {\n    const {\n      admin,\n      configurator,\n      mananger,\n      enhanced,\n      user,\n      createdBy,\n      assignment,\n      segments,\n      forceNonRoledChecks,\n    } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if ((this.testing || !valid) && admin) {\n      valid = this.hasRole(userId, this.adminRole);\n      this.results.hasAdminRole = valid;\n    }\n\n    if ((this.testing || !valid) && configurator) {\n      valid = this.hasRole(userId, this.configuratorRole);\n      this.results.hasConfiguratorRole = valid;\n    }\n\n    if ((this.testing || !valid) && mananger) {\n      valid = this.hasRole(userId, this.managerRole);\n      this.results.hasManagerRole = valid;\n    }\n\n    if ((this.testing || !valid) && enhanced) {\n      valid = this.hasRole(userId, this.enhancedRole);\n      this.results.hasEnhancedRole = valid;\n    }\n\n    if ((this.testing || !valid) && user) {\n      valid = this.hasRole(userId, this.userRole);\n      this.results.hasUserRole = valid;\n    }\n\n    if ((this.testing || !valid || forceNonRoledChecks) && (createdBy || assignment || segments)) {\n      valid = this.validateNonRoles(taskGr, userId, options);\n    }\n\n    return valid;\n  },\n\n  validateNonRoles: function (taskGr, userId, options = {}) {\n    const { createdBy, assignment, segments } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if (this.testing || createdBy) {\n      valid = this.validateCreatedBy(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && assignment) {\n      valid = this.validateAssignment(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && segments) {\n      valid = this.validateSegments(taskGr, userId);\n    }\n\n    return valid;\n  },\n\n  validateCampaignACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    let isEnhancedRole = false;\n\n    if (acl === \"read\" || acl === \"write\") {\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      if (isEnhancedRole) {\n        valid =\n          taskGr.isNewRecord() ||\n          this.validateNonRoles(taskGr, userId, {\n            createdBy: true,\n            assignment: true,\n            segments: true,\n          });\n      } else {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: false,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateProjectACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    const isManager = this.hasRole(userId, this.managerRole);\n    const isEnhanced = this.hasRole(userId, this.enhancedRole);\n    const isUser = this.hasRole(userId, this.userRole);\n\n    if (acl === \"read\" || acl === \"write\") {\n      valid = isUser && taskGr.isNewRecord();\n      if (!valid && isManager) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isEnhanced) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isUser) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateTaskACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    return this.validateProjectACLs(taskGr, userId, options);\n  },\n\n  type: \"SegmentUtilsMS\",\n});\n",
    "display_value": "const SegmentUtilsMS = Class.create();\nSegmentUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentHelperUtils, {\n  initialize: function () {\n    x_cadso_work.SegmentHelperUtils.prototype.initialize.apply(this, arguments);\n    this.testing = false;\n\n    this.results = {\n      hasAdminRole: false,\n      hasConfiguratorRole: false,\n      hasManagerRole: false,\n      hasEnhancedRole: false,\n      hasUserRole: false,\n      createdBy: false,\n      assignedTo: false,\n      assignmentGroup: false,\n      workUser: false,\n      workUsersGroup: false,\n      workGroup: false,\n    };\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n  },\n\n  validateACLs: function (taskGr, userId, options = {}) {\n    const {\n      admin,\n      configurator,\n      mananger,\n      enhanced,\n      user,\n      createdBy,\n      assignment,\n      segments,\n      forceNonRoledChecks,\n    } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if ((this.testing || !valid) && admin) {\n      valid = this.hasRole(userId, this.adminRole);\n      this.results.hasAdminRole = valid;\n    }\n\n    if ((this.testing || !valid) && configurator) {\n      valid = this.hasRole(userId, this.configuratorRole);\n      this.results.hasConfiguratorRole = valid;\n    }\n\n    if ((this.testing || !valid) && mananger) {\n      valid = this.hasRole(userId, this.managerRole);\n      this.results.hasManagerRole = valid;\n    }\n\n    if ((this.testing || !valid) && enhanced) {\n      valid = this.hasRole(userId, this.enhancedRole);\n      this.results.hasEnhancedRole = valid;\n    }\n\n    if ((this.testing || !valid) && user) {\n      valid = this.hasRole(userId, this.userRole);\n      this.results.hasUserRole = valid;\n    }\n\n    if ((this.testing || !valid || forceNonRoledChecks) && (createdBy || assignment || segments)) {\n      valid = this.validateNonRoles(taskGr, userId, options);\n    }\n\n    return valid;\n  },\n\n  validateNonRoles: function (taskGr, userId, options = {}) {\n    const { createdBy, assignment, segments } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if (this.testing || createdBy) {\n      valid = this.validateCreatedBy(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && assignment) {\n      valid = this.validateAssignment(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && segments) {\n      valid = this.validateSegments(taskGr, userId);\n    }\n\n    return valid;\n  },\n\n  validateCampaignACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    let isEnhancedRole = false;\n\n    if (acl === \"read\" || acl === \"write\") {\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      if (isEnhancedRole) {\n        valid =\n          taskGr.isNewRecord() ||\n          this.validateNonRoles(taskGr, userId, {\n            createdBy: true,\n            assignment: true,\n            segments: true,\n          });\n      } else {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: false,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateProjectACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    const isManager = this.hasRole(userId, this.managerRole);\n    const isEnhanced = this.hasRole(userId, this.enhancedRole);\n    const isUser = this.hasRole(userId, this.userRole);\n\n    if (acl === \"read\" || acl === \"write\") {\n      valid = isUser && taskGr.isNewRecord();\n      if (!valid && isManager) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isEnhanced) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isUser) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateTaskACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    return this.validateProjectACLs(taskGr, userId, options);\n  },\n\n  type: \"SegmentUtilsMS\",\n});\n",
    "formatted_script": {
      "line_count": 162,
      "char_count": 4575,
      "preview": "const SegmentUtilsMS = Class.create();\nSegmentUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentHelperUtils, {\n  initialize: function () {\n    x_cadso_work.SegmentHelperUtils.prototype.init...",
      "full_script": "const SegmentUtilsMS = Class.create();\nSegmentUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentHelperUtils, {\n  initialize: function () {\n    x_cadso_work.SegmentHelperUtils.prototype.initialize.apply(this, arguments);\n    this.testing = false;\n\n    this.results = {\n      hasAdminRole: false,\n      hasConfiguratorRole: false,\n      hasManagerRole: false,\n      hasEnhancedRole: false,\n      hasUserRole: false,\n      createdBy: false,\n      assignedTo: false,\n      assignmentGroup: false,\n      workUser: false,\n      workUsersGroup: false,\n      workGroup: false,\n    };\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n  },\n\n  validateACLs: function (taskGr, userId, options = {}) {\n    const {\n      admin,\n      configurator,\n      mananger,\n      enhanced,\n      user,\n      createdBy,\n      assignment,\n      segments,\n      forceNonRoledChecks,\n    } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if ((this.testing || !valid) && admin) {\n      valid = this.hasRole(userId, this.adminRole);\n      this.results.hasAdminRole = valid;\n    }\n\n    if ((this.testing || !valid) && configurator) {\n      valid = this.hasRole(userId, this.configuratorRole);\n      this.results.hasConfiguratorRole = valid;\n    }\n\n    if ((this.testing || !valid) && mananger) {\n      valid = this.hasRole(userId, this.managerRole);\n      this.results.hasManagerRole = valid;\n    }\n\n    if ((this.testing || !valid) && enhanced) {\n      valid = this.hasRole(userId, this.enhancedRole);\n      this.results.hasEnhancedRole = valid;\n    }\n\n    if ((this.testing || !valid) && user) {\n      valid = this.hasRole(userId, this.userRole);\n      this.results.hasUserRole = valid;\n    }\n\n    if ((this.testing || !valid || forceNonRoledChecks) && (createdBy || assignment || segments)) {\n      valid = this.validateNonRoles(taskGr, userId, options);\n    }\n\n    return valid;\n  },\n\n  validateNonRoles: function (taskGr, userId, options = {}) {\n    const { createdBy, assignment, segments } = options;\n    let valid = false;\n    userId = userId || gs.getUserID();\n\n    if (this.testing || createdBy) {\n      valid = this.validateCreatedBy(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && assignment) {\n      valid = this.validateAssignment(taskGr, userId);\n    }\n\n    if ((this.testing || !valid) && segments) {\n      valid = this.validateSegments(taskGr, userId);\n    }\n\n    return valid;\n  },\n\n  validateCampaignACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    let isEnhancedRole = false;\n\n    if (acl === \"read\" || acl === \"write\") {\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      isEnhancedRole = this.hasRole(userId, this.enhancedRole);\n      if (isEnhancedRole) {\n        valid =\n          taskGr.isNewRecord() ||\n          this.validateNonRoles(taskGr, userId, {\n            createdBy: true,\n            assignment: true,\n            segments: true,\n          });\n      } else {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: false,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateProjectACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    const { acl } = options;\n    let valid = false;\n    const isManager = this.hasRole(userId, this.managerRole);\n    const isEnhanced = this.hasRole(userId, this.enhancedRole);\n    const isUser = this.hasRole(userId, this.userRole);\n\n    if (acl === \"read\" || acl === \"write\") {\n      valid = isUser && taskGr.isNewRecord();\n      if (!valid && isManager) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isEnhanced) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: true,\n        });\n      } else if (!valid && isUser) {\n        valid = this.validateNonRoles(taskGr, userId, {\n          createdBy: true,\n          assignment: true,\n          segments: false,\n        });\n      }\n    }\n\n    return valid;\n  },\n\n  validateTaskACLs: function (taskGr, userId = gs.getUserID(), options = {}) {\n    return this.validateProjectACLs(taskGr, userId, options);\n  },\n\n  type: \"SegmentUtilsMS\",\n});\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_c6fab0c147b0251085d19fd8036d43d2",
    "display_value": "sys_script_include_c6fab0c147b0251085d19fd8036d43d2"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.SegmentUtilsMS",
    "display_value": "x_cadso_work.SegmentUtilsMS"
  },
  "sys_created_on": {
    "value": "2023-02-02 01:44:02",
    "display_value": "2023-02-01 05:44:02 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "SegmentUtilsMS",
    "display_value": "SegmentUtilsMS"
  },
  "sys_name": {
    "value": "SegmentUtilsMS",
    "display_value": "SegmentUtilsMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
