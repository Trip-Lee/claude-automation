{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "a48340e7871ba510b656fe66cebb35df",
    "extracted_at": "2025-09-19T21:48:31.526Z",
    "display_value": "sprintPlanningMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "467",
    "display_value": "467"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-11 20:28:12",
    "display_value": "2025-03-11 01:28:12 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "/* eslint-disable max-lines */\r\nconst sprintPlanningMS = Class.create();\r\nsprintPlanningMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n    initialize: function() {\r\n        x_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n        this.projectFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"glyph_color\",\r\n            \"sprints\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"budget\",\r\n            \"assigned_to\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\",\r\n            \"expected_end\"\r\n        ];\r\n        this.taskFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"assigned_to\",\r\n            \"project\",\r\n            \"sprint\",\r\n            \"index\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\"\r\n        ];\r\n        this.sprintFields = [\r\n            \"short_description\",\r\n            \"expected_start\",\r\n            \"expected_end\",\r\n            \"sprint_capacity\",\r\n            \"story_points\",\r\n            \"completed_story_points\",\r\n        ];\r\n        this.workGroupFields = [\r\n            \"short_description\",\r\n            \"capacity\",\r\n        ];\r\n    },\r\n\r\n    fetch: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let backlogData = [];\r\n        let workGroups = {};\r\n\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n\r\n            teamQuery = [teamsData[0]];\r\n            // taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n\t\t\t\r\n        }\r\n\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            backlogData = this.getAllBacklogTasksData(taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\t\t\r\n\t\tvar result = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            sprintsData: sprintsData,\r\n            backlogData: backlogData,\r\n            taskFieldData: taskFieldData,\r\n            teamsData: teamsData,\r\n            workGroups: workGroups,\r\n            query: {}\r\n        };\r\n\t\t\r\n        response.setBody(result);\r\n        return response;\r\n    },\r\n\r\n    getSprints: function({\r\n        sprintsQueries,\r\n        sprintsSort,\r\n        sprintsProjectQueries,\r\n        sprintsProjectSort,\r\n        sprintsTasksQueries,\r\n        sprintsTasksSort,\r\n    }) {\r\n        const sprints = this.getRecords({\r\n            table: \"x_cadso_work_sprint\",\r\n            queries: sprintsQueries,\r\n            fields: this.sprintFields,\r\n            sortBys: sprintsSort.sortBys,\r\n            sortAsc: sprintsSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            getItems: true,\r\n            addParentQuery: false,\r\n            type: \"sprints\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_project\",\r\n                queries: sprintsProjectQueries,\r\n                fields: this.projectFields,\r\n                sortBys: sprintsProjectSort.sortBys,\r\n                sortAsc: sprintsProjectSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                getItems: true,\r\n                parentField: \"sprints\",\r\n                parentFieldQuery: \"LIKE\",\r\n                addParentQuery: false,\r\n                type: \"sprints\",\r\n                itemObj: {\r\n                    table: \"x_cadso_work_task\",\r\n                    queries: sprintsTasksQueries,\r\n                    fields: this.taskFields,\r\n                    sortBys: sprintsTasksSort.sortBys,\r\n                    sortAsc: sprintsTasksSort.sortAsc,\r\n                    sortByDisplayField: true,\r\n                    sortAscDisplayField: true,\r\n                    parentField: \"project\",\r\n                    addParentQuery: true,\r\n                    type: \"sprints\",\r\n                },\r\n            },\r\n        });\r\n\t\t// gs.info(\"WM SPRINT PLANNING SPRINT RETURN: \" + JSON.stringify(sprints))\r\n        return sprints;\r\n    },\r\n\r\n    getProjects: function({\r\n        backlogProjectQueries,\r\n        backlogProjectSort,\r\n        backlogTasksQueries,\r\n        backlogTasksSort,\r\n    }) {\r\n        const projects = this.getRecords({\r\n            table: \"x_cadso_work_project\",\r\n            queries: backlogProjectQueries,\r\n            fields: this.projectFields,\r\n            sortBys: backlogProjectSort.sortBys,\r\n            sortAsc: backlogProjectSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            addParentQuery: false,\r\n            getItems: true,\r\n            type: \"backlog\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_task\",\r\n                queries: backlogTasksQueries,\r\n                fields: this.taskFields,\r\n                sortBys: backlogTasksSort.sortBys,\r\n                sortAsc: backlogTasksSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                addParentQuery: false,\r\n                parentField: \"project\",\r\n                type: \"backlog\",\r\n            },\r\n        });\r\n\t\t\t// gs.info(\"WM SPRINT PLANNING PROJECT RETURN: \" + JSON.stringify(projects))\r\n\r\n        return projects;\r\n    },\r\n\r\n    getWorkGroups: function(sprints = []) {\r\n        const assignmentGroups = {};\r\n        const assignmentGroupsArr = [];\r\n        const sprintItems = {};\r\n\t\tconst sprintItemsMap = {};\r\n        const items = {};\r\n        for (let i = 0; i < sprints.length; i++) {\r\n\t\t\tconst sprint = sprints[i];\r\n\t\t\tif (!sprint.sys_id) continue;\r\n\r\n\t\t\tconst sprintItems = {};\r\n\t\t\tconst sprintSysId = sprint.sys_id;\r\n\r\n\t\t\tconst taskGR = new GlideRecordSecure(\"x_cadso_work_task\");\r\n\t\t\ttaskGR.addQuery(\"sprint\", sprintSysId);\r\n\t\t\ttaskGR.addNotNullQuery(\"story_points\");  // Skip tasks without story points\r\n\t\t\ttaskGR.orderBy(\"assignment_group\");\r\n\t\t\ttaskGR.query();\r\n\r\n\t\t\twhile (taskGR.next()) {\r\n\t\t\t\tconst taskAG = taskGR.getValue(\"assignment_group\");\r\n\t\t\t\tconst taskAGDV = taskGR.getDisplayValue(\"assignment_group\");\r\n\r\n\t\t\t\tif (!sprintItems[taskAG]) {\r\n\t\t\t\t\tsprintItems[taskAG] = {\r\n\t\t\t\t\t\tsysId: taskAG,\r\n\t\t\t\t\t\tdisplayValue: taskAGDV,\r\n\t\t\t\t\t\tpoints: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsprintItems[taskAG].points += parseInt(taskGR.getValue(\"story_points\"), 10) || 0;\r\n\r\n\t\t\t\tif (!assignmentGroups[taskAG]) {\r\n\t\t\t\t\tassignmentGroups[taskAG] = taskAGDV;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.keys(sprintItems).length > 0) {\r\n\t\t\t\tsprintItemsMap[sprintSysId] = sprintItems;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert assignmentGroups keys into an array\r\n\t\tconst assignmentGroupSysIds = Object.keys(assignmentGroups);\r\n\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\tfor (let i = 0; i < assignmentGroupLength; i++) {\r\n\t\t\tconst currTaskAG = assignmentGroupSysIds[i];\r\n\r\n\t\t\tconst workGroupToGroupGR = new GlideRecordSecure(\"x_cadso_work_group_to_group_m2m\");\r\n\t\t\tworkGroupToGroupGR.addQuery(\"group\", currTaskAG);\r\n\t\t\tworkGroupToGroupGR.addEncodedQuery(\"work_groupISNOTEMPTY\");\r\n\t\t\tworkGroupToGroupGR.orderByDesc(\"work_group.capacity\");\r\n\t\t\tworkGroupToGroupGR.setLimit(1);\r\n\t\t\tworkGroupToGroupGR.query();\r\n\r\n\t\t\tif (workGroupToGroupGR.next()) {\r\n\t\t\t\tconst workGroupGr = workGroupToGroupGR.work_group.getRefRecord();\r\n\t\t\t\tif (workGroupGr.isValidRecord()) {\r\n\t\t\t\t\tassignmentGroups[currTaskAG] = {\r\n\t\t\t\t\t\tworkGroupName: workGroupGr.getDisplayValue(\"short_description\"),\r\n\t\t\t\t\t\tcapacity: parseInt(workGroupGr.getValue(\"capacity\"), 10) || 0,\r\n\t\t\t\t\t\tworkGroupSysId: workGroupToGroupGR.getValue(\"work_group\")\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tassignmentGroups[currTaskAG] = { displayValue: assignmentGroups[currTaskAG] };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Process sprint items\r\n\t\tconst sprintItemsKeys = Object.keys(sprintItemsMap);\r\n\t\tconst sprintItemsLength = sprintItemsKeys.length;\r\n\r\n\t\tfor (let i = 0; i < sprintItemsLength; i++) {\r\n\t\t\tconst sprintSysId = sprintItemsKeys[i];\r\n\t\t\tconst sprint = sprintItemsMap[sprintSysId];\r\n\r\n\t\t\titems[sprintSysId] = [];\r\n\r\n\t\t\tconst assignmentGroupSysIds = Object.keys(sprint);\r\n\t\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\t\tfor (let j = 0; j < assignmentGroupLength; j++) {\r\n\t\t\t\tconst assignmentGroupSysId = assignmentGroupSysIds[j];\r\n\t\t\t\tconst assignmentGroup = sprint[assignmentGroupSysId];\r\n\t\t\t\tconst workGroup = assignmentGroups[assignmentGroupSysId];\r\n\r\n\t\t\t\tif (typeof workGroup === \"object\") {\r\n\t\t\t\t\titems[sprintSysId].push({\r\n\t\t\t\t\t\t...assignmentGroup,\r\n\t\t\t\t\t\t...workGroup\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return items;\r\n    },\r\n\r\n    fetchStoryPoints: function({\r\n        sprintSysIds = []\r\n    }, response) {\r\n        const sprints = [];\r\n        sprintSysIds.forEach((sprintSysId) => {\r\n            if (!sprintSysId) return;\r\n            const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n            if (sprintGr.get(sprintSysId)) {\r\n                const storyPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"story_points\"\r\n                });\r\n                const completedStoryPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"completed_story_points\",\r\n                });\r\n                sprints.push({\r\n                    sysId: sprintGr.getUniqueValue(),\r\n                    storyPoints,\r\n                    completedStoryPoints\r\n                });\r\n            }\r\n        });\r\n\r\n        response.setBody({\r\n            sprints\r\n        });\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING STORY POINTS RETURN: \" + JSON.stringify(response))\r\n\r\n        return response;\r\n    },\r\n\r\n    saveTask: function({\r\n        tasks = [],\r\n        sprints = [],\r\n        backlog = [],\r\n        previousTasks = [],\r\n        workGroups = {},\r\n        type\r\n    }, response) {\r\n        // tasks is an object with task data\r\n        // sprints is an array of ONLY sys_ids\r\n\r\n        let tasksArr = [];\r\n        for (let x = 0; x < tasks.length; x++) {\r\n            tasksArr.push(tasks[x].sys_id.value);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n        });\r\n\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addEncodedQuery(\"sys_idIN\" + tasksArr.join(\",\"));\r\n        taskGr.query();\r\n        while (taskGr.next()) {\r\n\r\n            let taskFound = false;\r\n            for (let y = 0; y < tasks.length; y++) {\r\n                if (tasks[y].sys_id.value === taskGr.getValue(\"sys_id\")) {\r\n                    taskFound = true;\r\n                }\r\n                if (taskFound) {\r\n                    taskGr.setValue(\"index\", tasks[y].index.value);\r\n                    taskGr.setValue(\"sprint\", tasks[y].sprint.value);\r\n                    taskGr.setWorkflow(false);\r\n                    let updateSuccessful = taskGr.update();\r\n                    if (!updateSuccessful) {\r\n                        response.setBody({\r\n                            message: 'Error - One or more of the tasks was found but the update failed!',\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (!taskFound) {\r\n                response.setBody({\r\n                    message: 'Error - One or more of the tasks being moved was not updated!',\r\n                    statusCode: 300,\r\n                });\r\n            }\r\n        }\r\n        if (type === \"sprint_planning\") {\r\n            for (let i = 0; i < sprints.length; i++) {\r\n                let sprintSysId = sprints[i];\r\n\r\n                let totalPoints = \"0\";\r\n                const taskAggGA = new GlideAggregate('x_cadso_work_task');\r\n                taskAggGA.addEncodedQuery('sprint=' + sprintSysId);\r\n                taskAggGA.addAggregate(\"SUM\", \"story_points\");\r\n\r\n                taskAggGA.setGroup(false);\r\n                taskAggGA.query();\r\n                if (taskAggGA.next()) {\r\n                    if (taskAggGA.getAggregate('SUM', 'story_points')) {\r\n                        totalPoints = taskAggGA.getAggregate('SUM', 'story_points')\r\n                    }\r\n                }\r\n\r\n                const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                if (sprintGr.get(sprintSysId)) {\r\n                    sprintGr.setValue(\"story_points\", totalPoints);\r\n\r\n                    let sprintUpdateSuccess = sprintGr.update();\r\n                    if (!sprintUpdateSuccess) {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint update failed for sprint ' + sprintSysId,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                } else {\r\n                    response.setBody({\r\n                        message: 'Error - Sprint not found: ' + sprintSysId,\r\n                        statusCode: 404,\r\n                    });\r\n                }\r\n\r\n            }\r\n            // Find sprints that have not been updated to remove story points because they were dragged from\r\n            if (previousTasks.length > 0) {\r\n                for (let p = 0; p < previousTasks.length; p++) {\r\n                    let prevTaskID = previousTasks[p].sys_id.value;\r\n                    let prevSprintID = previousTasks[p].sprint.value;\r\n                }\r\n            }\r\n        } else if (type === \"back_log\") {\r\n            for (let b = 0; b < backlog.length; b++) {\r\n                const backlogSprint = backlog[b].sprint.value;\r\n                const backlogStoryPoints = backlog[b].story_points.value;\r\n                const sprintBackLogGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                //if a selected backlog task is dragged to the backlog, there is no sprint to update\r\n                if (backlogSprint !== null && backlogSprint !== undefined && backlogSprint !== \"\") {\r\n                    if (sprintBackLogGr.get(backlogSprint)) {\r\n                        const oldValue = sprintBackLogGr.getValue(\"story_points\");\r\n                        let newValue = oldValue - backlogStoryPoints;\r\n\r\n                        if (newValue < 0) {\r\n                            newValue = 0;\r\n                        }\r\n                        sprintBackLogGr.setValue('story_points', newValue);\r\n                        let sprintUpdateSuccess = sprintBackLogGr.update();\r\n                        if (!sprintUpdateSuccess) {\r\n                            response.setBody({\r\n                                message: 'Error - Story point update failed for backlog sprint - ' + backlogSprint,\r\n                                statusCode: 300,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint not found in Backlog: ' + backlogSprint,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        sprintArr = [];\r\n        for (let x = 0; x < sprints.length; x++) {\r\n            sprintArr.push({\r\n                sys_id: sprints[x]\r\n            })\r\n        }\r\n        workGroups = this.getWorkGroups(sprintArr);\r\n        return (response);\r\n    },\r\n\r\n    saveProject: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }, response) {\r\n        const insideBacklog = !fromSprint && !toSprint;\r\n        const fromBacklog = !fromSprint && toSprint;\r\n        const toBacklog = fromSprint && !toSprint;\r\n        const sprintToSprint = fromSprint && toSprint;\r\n\r\n        if (insideBacklog) {\r\n            this.insideBacklog({\r\n                sysId,\r\n                index\r\n            });\r\n        } else if (fromBacklog) {\r\n            this.fromBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: toSprint\r\n            });\r\n        } else if (toBacklog) {\r\n            this.toBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: fromSprint\r\n            });\r\n        } else if (sprintToSprint) {\r\n            this.sprintToSprint({\r\n                sysId,\r\n                index,\r\n                fromSprint,\r\n                toSprint\r\n            });\r\n        }\r\n\r\n        return this.fetchStoryPoints({\r\n            sprintSysIds: [toSprint, fromSprint]\r\n        }, response);\r\n    },\r\n\r\n    insideBacklog: function({\r\n        sysId,\r\n        index\r\n    }) {\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n    },\r\n\r\n    toBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Sprint to Backlog\r\n        // // Delete M2M\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n        sprintProjectM2MGr.deleteMultiple();\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: sprint,\r\n            toSprint: \"\"\r\n        });\r\n    },\r\n\r\n    fromBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Backlog to Sprint\r\n        // // Create M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        } else {\r\n            sprintProjectM2MGr.initialize();\r\n            sprintProjectM2MGr.newRecord();\r\n            sprintProjectM2MGr.setValue(\"sprint\", sprint);\r\n            sprintProjectM2MGr.setValue(\"project\", sysId);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.insert();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: \"\",\r\n            toSprint: sprint\r\n        });\r\n    },\r\n\r\n    sprintToSprint: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        // Moving Sprint to Sprint\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", fromSprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        while (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"sprint\", toSprint);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint,\r\n            toSprint\r\n        });\r\n    },\r\n\r\n\r\n    updateTasks: function({\r\n        sysId,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addQuery(\"project\", sysId);\r\n        if (fromSprint) {\r\n            taskGr.addQuery(\"sprint\", fromSprint);\r\n        } else {\r\n            taskGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        }\r\n        // taskGr.addQuery(\"state\", \"IN\", \"10,25,30\");\r\n        taskGr.query();\r\n\r\n        while (taskGr.next()) {\r\n            let sprint = \"\";\r\n            if (toSprint) {\r\n                sprint = toSprint;\r\n            }\r\n            taskGr.setValue(\"sprint\", sprint);\r\n            taskGr.update();\r\n        }\r\n    },\r\n\r\n    getAllSprintTasksData: function(sprintsQueriesObj, taskQueriesObj, teamQuery) {\r\n        var objData = {\r\n\t\t\tsprints: [],\r\n\t\t\tsprintTasks: [],\r\n\t\t};\r\n\r\n\t\tif (!teamQuery || !teamQuery.length || !teamQuery[0]) {\r\n\t\t\tteamQuery = [];\r\n\t\t}\r\n\r\n\t\tlet sprintQuery = this.convertToQuery({\r\n\t\t\tqueryObj: sprintsQueriesObj,\r\n\t\t\ttable: 'x_cadso_work_sprint'\r\n\t\t});\r\n\r\n\t\tlet sprintSysIDArray = [];\r\n\t\tlet sprintGr = new GlideRecordSecure('x_cadso_work_sprint');\r\n\r\n\t\tif (teamQuery.length) {\r\n\t\t\tlet encodedQuery = teamQuery.map(team => `segment=${team.value}^`).join('');\r\n\t\t\tsprintGr.addEncodedQuery(encodedQuery);\r\n\t\t}\r\n\r\n\t\tsprintGr.addEncodedQuery(sprintQuery);\r\n\t\tsprintGr.orderBy(\"expected_start\");\r\n\t\tsprintGr.query();\r\n\r\n\t\twhile (sprintGr.next()) {\r\n\t\t\tlet sprintObj = {};\r\n\t\t\tlet sprintTeams = sprintGr.getValue(\"segment\").split(',');\r\n\r\n\t\t\tif (sprintTeams.length !== teamQuery.length) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst sortedSprintTeams = sprintTeams.slice().sort();\r\n\t\t\tconst sortedTeamQuery = teamQuery.map(t => t.value).sort();\r\n\r\n\t\t\tif (!sortedSprintTeams.every((team, i) => team === sortedTeamQuery[i])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tsprintObj.short_description = sprintGr.getValue('short_description');\r\n\t\t\tsprintObj.sys_id = sprintGr.getValue('sys_id');\r\n\t\t\tsprintObj.state = {\r\n\t\t\t\tdisplayValue: sprintGr.getDisplayValue(\"state\"),\r\n\t\t\t\tvalue: sprintGr.getValue(\"state\"),\r\n\t\t\t};\r\n\t\t\tsprintObj.story_points = sprintGr.getValue('story_points');\r\n\t\t\tsprintObj.sprint_capacity = sprintGr.getValue('sprint_capacity');\r\n\t\t\tsprintObj.capacity = sprintGr.getValue('capacity');\r\n\t\t\tsprintObj.completed_story_points = sprintGr.getValue('completed_story_points');\r\n\t\t\tsprintObj.expected_start = sprintGr.getValue('expected_start');\r\n\t\t\tsprintObj.expected_end = sprintGr.getValue('expected_end');\r\n\t\t\tsprintObj.tasks = [];\r\n\r\n\t\t\tsprintSysIDArray.push(sprintObj.sys_id);\r\n\t\t\tobjData.sprints.push(sprintObj);\r\n\t\t}\r\n\r\n\t\tif (sprintSysIDArray.length) {\r\n\t\t\tlet taskQuery = this.convertToQuery({\r\n\t\t\t\tqueryObj: taskQueriesObj,\r\n\t\t\t\ttable: 'x_cadso_work_task'\r\n\t\t\t});\r\n\r\n\t\t\tlet sprintTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\t\tsprintTaskGr.addEncodedQuery(`sprint.sys_idIN${sprintSysIDArray.join(',')}`);\r\n\t\t\tsprintTaskGr.addEncodedQuery(taskQuery);\r\n\t\t\tsprintTaskGr.orderBy('index');\r\n\t\t\tsprintTaskGr.query();\r\n\r\n\t\t\twhile (sprintTaskGr.next()) {\r\n\t\t\t\tlet taskObj = {\r\n\t\t\t\t\tdisplayValue: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('short_description'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('short_description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsys_id: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"sys_id\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sys_id')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"description\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsprint: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('sprint'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sprint')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassignment_group: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assignment_group'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpriority: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('priority'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('priority')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tplanned_hours: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('planned_hours'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('planned_hours')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstory_points: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('story_points'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('story_points')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdue_date: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('due_date'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('due_date')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tindex: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('index'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('index')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbudget: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getValue('project') ? sprintTaskGr.getDisplayValue('project.budget') : 0,\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project') ? sprintTaskGr.getValue('project.budget') : 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tproject: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('project'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassigned_to: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assigned_to'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assigned_to')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tuser_dropdown_data: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t\t? this.getUsersInGroup('x_cadso_work_task', sprintTaskGr.getValue('sys_id'), '')\r\n\t\t\t\t\t\t: []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (taskObj.project.value) {\r\n\t\t\t\t\ttaskObj.project.glyph_color = sprintTaskGr.getElement(\"project.glyph_color\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (taskObj.assigned_to.value) {\r\n\t\t\t\t\ttaskObj.assigned_to.avatar = sprintTaskGr.getElement(\"assigned_to.avatar\") || sprintTaskGr.getElement(\"assigned_to.photo\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobjData.sprintTasks.push(taskObj);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return objData;\r\n    },\r\n    getUsersInGroup: function(\r\n        table,\r\n        record,\r\n        queryString = \"\"\r\n    ) {\r\n        var returnUsers = [];\r\n        var taskAssignmentGR = new GlideRecordSecure(table);\r\n        taskAssignmentGR.addQuery('sys_id', record);\r\n        taskAssignmentGR.query();\r\n        while (taskAssignmentGR.next()) {\r\n            var groupId = taskAssignmentGR.getValue('assignment_group');\r\n            var groupGR = new GlideRecordSecure('sys_user_grmember');\r\n            groupGR.addQuery('user.name', 'CONTAINS', queryString);\r\n\t\t\tgroupGR.addQuery('user.active', true);\r\n            groupGR.addQuery('group', groupId);\r\n            groupGR.query();\r\n            while (groupGR.next()) {\r\n                returnUsers.push({\r\n                    value: groupGR.getValue('user'),\r\n                    label: groupGR.getDisplayValue('user'),\r\n\t\t\t\t\tavatar: groupGR.getElement('user.avatar')\r\n                });\r\n            }\r\n        }\r\n\r\n        return returnUsers;\r\n    },\r\n    getAllBacklogTasksData: function(taskQueriesObj, teamQuery) {\r\n        var taskQuery = \"\";\r\n        taskQuery = this.convertToQuery({\r\n            queryObj: taskQueriesObj,\r\n            table: 'x_cadso_work_task'\r\n        });\r\n        const backlogTasks = [];\r\n        var backlogTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n        for (let x = 0; x < teamQuery.length; x++) {\r\n\t\t\tif (!teamQuery[x]) continue;\r\n            backlogTaskGr.addEncodedQuery(\"^NQsegmentLIKE\" + teamQuery[x].value);\r\n        }\r\n        backlogTaskGr.addEncodedQuery('sprintISEMPTY');\r\n        backlogTaskGr.addEncodedQuery(taskQuery);\r\n        backlogTaskGr.query();\r\n        while (backlogTaskGr.next()) {\r\n            var taskObj = {};\r\n            taskObj.displayValue = {\r\n                displayValue: backlogTaskGr.getDisplayValue('short_description'),\r\n                value: backlogTaskGr.getValue('short_description')\r\n            };\r\n            taskObj.sys_id = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"sys_id\"),\r\n                value: backlogTaskGr.getValue('sys_id')\r\n            };\r\n            taskObj.description = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"description\"),\r\n                value: backlogTaskGr.getValue('description')\r\n            };\r\n            taskObj.sprint = {\r\n                displayValue: backlogTaskGr.getDisplayValue('sprint'),\r\n                value: backlogTaskGr.getValue('sprint')\r\n            };\r\n            taskObj.assignment_group = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assignment_group'),\r\n                value: backlogTaskGr.getValue('assignment_group')\r\n            };\r\n\r\n            taskObj.priority = {\r\n                displayValue: backlogTaskGr.getDisplayValue('priority'),\r\n                value: backlogTaskGr.getValue('priority')\r\n            };\r\n            taskObj.planned_hours = {\r\n                displayValue: backlogTaskGr.getDisplayValue('planned_hours'),\r\n                value: backlogTaskGr.getValue('planned_hours')\r\n            };\r\n            taskObj.story_points = {\r\n                displayValue: backlogTaskGr.getDisplayValue('story_points'),\r\n                value: backlogTaskGr.getValue('story_points')\r\n            };\r\n            taskObj.due_date = {\r\n                displayValue: backlogTaskGr.getDisplayValue('due_date'),\r\n                value: backlogTaskGr.getValue('due_date')\r\n            };\r\n            taskObj.index = {\r\n                displayValue: backlogTaskGr.getDisplayValue('index'),\r\n                value: backlogTaskGr.getValue('index')\r\n            };\r\n\r\n            taskObj.budget = {\r\n                displayValue: backlogTaskGr.getValue('project') ? backlogTaskGr.getDisplayValue('project.budget') : 0,\r\n                value: backlogTaskGr.getValue('project') ? backlogTaskGr.getValue('project.budget') : 0\r\n            };\r\n\r\n            taskObj.project = {\r\n                displayValue: backlogTaskGr.getDisplayValue('project'),\r\n                value: backlogTaskGr.getValue('project')\r\n            };\r\n\r\n            if (taskObj.project.value) {\r\n                taskObj.project.glyph_color = backlogTaskGr.getElement(\"project.glyph_color\");\r\n                // taskObj.project.glyph_color.value = backlogTaskGr.getElement(\"project.glyph_color\");\r\n            }\r\n\r\n            taskObj.assigned_to = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assigned_to'),\r\n                value: backlogTaskGr.getValue('assigned_to')\r\n            };\r\n\r\n            if (taskObj.assigned_to.value) {\r\n                taskObj.assigned_to.avatar = backlogTaskGr.getElement(\"assigned_to.avatar\") || backlogTaskGr.getElement(\"assigned_to.photo\");\r\n            }\r\n\r\n\t\t\tif (taskObj.assignment_group.value) {\r\n                // taskObj.user_dropdown_data = this.getUsersInGroup('x_cadso_work_task', taskObj.sys_id.value, '');\r\n            } else {\r\n\t\t\t\ttaskObj.user_dropdown_data = [];\r\n\t\t\t}\r\n            // var subTaskObj = {};\r\n            // var subTasks = [];\r\n            // var subTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            // subTaskGr.addQuery('parent', taskObj.sys_id);\r\n            // subTaskGr.query();\r\n            // while(subTaskGr.next()){\r\n            // \tsubTasks.push(\r\n            // \t\t{\r\n            // \t\t\tsys_id : subTaskGr.getUniqueValue()\r\n            // \t\t}\r\n            // \t)\r\n            // \t//taskObj.subtasksData.count = subTaskGr.getRowCount();\r\n            // }\r\n            // subTaskObj.tasks = subTasks;\r\n            // subTaskObj.taskCount = subTaskGr.getRowCount();\r\n            // taskObj.subTaskData = subTaskObj;\r\n            backlogTasks.push(taskObj);\r\n        }\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING BACKLOGTASKs RETURN: \" + JSON.stringify(backlogTasks))\r\n\r\n        return backlogTasks;\r\n    },\r\n\r\n    getTeamsData: function() {\r\n        const teams = [];\r\n        var teamGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n        teamGr.addEncodedQuery(\"segment.active=true^work_user.user=\" + gs.getUserID());\r\n        teamGr.query();\r\n        while (teamGr.next()) {\r\n            let team = {};\r\n            team.displayValue = teamGr.getDisplayValue('segment');\r\n            team.value = teamGr.getValue('segment');\r\n\r\n            let found = false;\r\n            for (let x = 0; x < teams.length; x++) {\r\n                if (teams[x].value === team.value) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) {\r\n                teams.push(team);\r\n            }\r\n        }\r\n        return teams;\r\n    },\r\n\r\n    sprintPlanningGetWorkGroups: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let workGroups = {};\r\n\r\n        // these may have to take a queryObj for filtering\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n            teamQuery = [teamsData[0]];\r\n            taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n        }\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            workGroups: workGroups\r\n        });\r\n        return response;\r\n\r\n    },\r\n\r\n    //function to update the task id \r\n    updateTaskID: function(taskList) {\r\n        for (var i = 0; i < taskList.length; i++) {\r\n            var taskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            taskGr.addQuery('sys_id', taskList[i].sys_id);\r\n            taskGr.query();\r\n            if (taskGr.next()) {\r\n                taskGr.setValue('index', taskList[i].newIndex);\r\n                taskGr.update();\r\n            }\r\n        }\r\n    },\r\n\r\n    convertToQuery: function({\r\n        queryObj,\r\n        table\r\n    }) {\r\n        const queryArr = [];\r\n        if (queryObj) {\r\n            Object.keys(queryObj).forEach((_query) => {\r\n                if (queryObj[_query]) {\r\n                    // if the tableToApplyTo is the same as the table we are currently querying\r\n                    // then we add it to the queryArr\r\n                    if (queryObj[_query].tableToApplyTo === table) {\r\n                        queryArr.push(queryObj[_query].query);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        const newQuery = queryArr.join(\"^\");\r\n\r\n        return newQuery || \"\";\r\n    },\r\n\r\n    type: \"sprintPlanningMS\",\r\n});",
    "display_value": "/* eslint-disable max-lines */\r\nconst sprintPlanningMS = Class.create();\r\nsprintPlanningMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n    initialize: function() {\r\n        x_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n        this.projectFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"glyph_color\",\r\n            \"sprints\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"budget\",\r\n            \"assigned_to\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\",\r\n            \"expected_end\"\r\n        ];\r\n        this.taskFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"assigned_to\",\r\n            \"project\",\r\n            \"sprint\",\r\n            \"index\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\"\r\n        ];\r\n        this.sprintFields = [\r\n            \"short_description\",\r\n            \"expected_start\",\r\n            \"expected_end\",\r\n            \"sprint_capacity\",\r\n            \"story_points\",\r\n            \"completed_story_points\",\r\n        ];\r\n        this.workGroupFields = [\r\n            \"short_description\",\r\n            \"capacity\",\r\n        ];\r\n    },\r\n\r\n    fetch: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let backlogData = [];\r\n        let workGroups = {};\r\n\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n\r\n            teamQuery = [teamsData[0]];\r\n            // taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n\t\t\t\r\n        }\r\n\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            backlogData = this.getAllBacklogTasksData(taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\t\t\r\n\t\tvar result = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            sprintsData: sprintsData,\r\n            backlogData: backlogData,\r\n            taskFieldData: taskFieldData,\r\n            teamsData: teamsData,\r\n            workGroups: workGroups,\r\n            query: {}\r\n        };\r\n\t\t\r\n        response.setBody(result);\r\n        return response;\r\n    },\r\n\r\n    getSprints: function({\r\n        sprintsQueries,\r\n        sprintsSort,\r\n        sprintsProjectQueries,\r\n        sprintsProjectSort,\r\n        sprintsTasksQueries,\r\n        sprintsTasksSort,\r\n    }) {\r\n        const sprints = this.getRecords({\r\n            table: \"x_cadso_work_sprint\",\r\n            queries: sprintsQueries,\r\n            fields: this.sprintFields,\r\n            sortBys: sprintsSort.sortBys,\r\n            sortAsc: sprintsSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            getItems: true,\r\n            addParentQuery: false,\r\n            type: \"sprints\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_project\",\r\n                queries: sprintsProjectQueries,\r\n                fields: this.projectFields,\r\n                sortBys: sprintsProjectSort.sortBys,\r\n                sortAsc: sprintsProjectSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                getItems: true,\r\n                parentField: \"sprints\",\r\n                parentFieldQuery: \"LIKE\",\r\n                addParentQuery: false,\r\n                type: \"sprints\",\r\n                itemObj: {\r\n                    table: \"x_cadso_work_task\",\r\n                    queries: sprintsTasksQueries,\r\n                    fields: this.taskFields,\r\n                    sortBys: sprintsTasksSort.sortBys,\r\n                    sortAsc: sprintsTasksSort.sortAsc,\r\n                    sortByDisplayField: true,\r\n                    sortAscDisplayField: true,\r\n                    parentField: \"project\",\r\n                    addParentQuery: true,\r\n                    type: \"sprints\",\r\n                },\r\n            },\r\n        });\r\n\t\t// gs.info(\"WM SPRINT PLANNING SPRINT RETURN: \" + JSON.stringify(sprints))\r\n        return sprints;\r\n    },\r\n\r\n    getProjects: function({\r\n        backlogProjectQueries,\r\n        backlogProjectSort,\r\n        backlogTasksQueries,\r\n        backlogTasksSort,\r\n    }) {\r\n        const projects = this.getRecords({\r\n            table: \"x_cadso_work_project\",\r\n            queries: backlogProjectQueries,\r\n            fields: this.projectFields,\r\n            sortBys: backlogProjectSort.sortBys,\r\n            sortAsc: backlogProjectSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            addParentQuery: false,\r\n            getItems: true,\r\n            type: \"backlog\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_task\",\r\n                queries: backlogTasksQueries,\r\n                fields: this.taskFields,\r\n                sortBys: backlogTasksSort.sortBys,\r\n                sortAsc: backlogTasksSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                addParentQuery: false,\r\n                parentField: \"project\",\r\n                type: \"backlog\",\r\n            },\r\n        });\r\n\t\t\t// gs.info(\"WM SPRINT PLANNING PROJECT RETURN: \" + JSON.stringify(projects))\r\n\r\n        return projects;\r\n    },\r\n\r\n    getWorkGroups: function(sprints = []) {\r\n        const assignmentGroups = {};\r\n        const assignmentGroupsArr = [];\r\n        const sprintItems = {};\r\n\t\tconst sprintItemsMap = {};\r\n        const items = {};\r\n        for (let i = 0; i < sprints.length; i++) {\r\n\t\t\tconst sprint = sprints[i];\r\n\t\t\tif (!sprint.sys_id) continue;\r\n\r\n\t\t\tconst sprintItems = {};\r\n\t\t\tconst sprintSysId = sprint.sys_id;\r\n\r\n\t\t\tconst taskGR = new GlideRecordSecure(\"x_cadso_work_task\");\r\n\t\t\ttaskGR.addQuery(\"sprint\", sprintSysId);\r\n\t\t\ttaskGR.addNotNullQuery(\"story_points\");  // Skip tasks without story points\r\n\t\t\ttaskGR.orderBy(\"assignment_group\");\r\n\t\t\ttaskGR.query();\r\n\r\n\t\t\twhile (taskGR.next()) {\r\n\t\t\t\tconst taskAG = taskGR.getValue(\"assignment_group\");\r\n\t\t\t\tconst taskAGDV = taskGR.getDisplayValue(\"assignment_group\");\r\n\r\n\t\t\t\tif (!sprintItems[taskAG]) {\r\n\t\t\t\t\tsprintItems[taskAG] = {\r\n\t\t\t\t\t\tsysId: taskAG,\r\n\t\t\t\t\t\tdisplayValue: taskAGDV,\r\n\t\t\t\t\t\tpoints: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsprintItems[taskAG].points += parseInt(taskGR.getValue(\"story_points\"), 10) || 0;\r\n\r\n\t\t\t\tif (!assignmentGroups[taskAG]) {\r\n\t\t\t\t\tassignmentGroups[taskAG] = taskAGDV;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.keys(sprintItems).length > 0) {\r\n\t\t\t\tsprintItemsMap[sprintSysId] = sprintItems;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert assignmentGroups keys into an array\r\n\t\tconst assignmentGroupSysIds = Object.keys(assignmentGroups);\r\n\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\tfor (let i = 0; i < assignmentGroupLength; i++) {\r\n\t\t\tconst currTaskAG = assignmentGroupSysIds[i];\r\n\r\n\t\t\tconst workGroupToGroupGR = new GlideRecordSecure(\"x_cadso_work_group_to_group_m2m\");\r\n\t\t\tworkGroupToGroupGR.addQuery(\"group\", currTaskAG);\r\n\t\t\tworkGroupToGroupGR.addEncodedQuery(\"work_groupISNOTEMPTY\");\r\n\t\t\tworkGroupToGroupGR.orderByDesc(\"work_group.capacity\");\r\n\t\t\tworkGroupToGroupGR.setLimit(1);\r\n\t\t\tworkGroupToGroupGR.query();\r\n\r\n\t\t\tif (workGroupToGroupGR.next()) {\r\n\t\t\t\tconst workGroupGr = workGroupToGroupGR.work_group.getRefRecord();\r\n\t\t\t\tif (workGroupGr.isValidRecord()) {\r\n\t\t\t\t\tassignmentGroups[currTaskAG] = {\r\n\t\t\t\t\t\tworkGroupName: workGroupGr.getDisplayValue(\"short_description\"),\r\n\t\t\t\t\t\tcapacity: parseInt(workGroupGr.getValue(\"capacity\"), 10) || 0,\r\n\t\t\t\t\t\tworkGroupSysId: workGroupToGroupGR.getValue(\"work_group\")\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tassignmentGroups[currTaskAG] = { displayValue: assignmentGroups[currTaskAG] };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Process sprint items\r\n\t\tconst sprintItemsKeys = Object.keys(sprintItemsMap);\r\n\t\tconst sprintItemsLength = sprintItemsKeys.length;\r\n\r\n\t\tfor (let i = 0; i < sprintItemsLength; i++) {\r\n\t\t\tconst sprintSysId = sprintItemsKeys[i];\r\n\t\t\tconst sprint = sprintItemsMap[sprintSysId];\r\n\r\n\t\t\titems[sprintSysId] = [];\r\n\r\n\t\t\tconst assignmentGroupSysIds = Object.keys(sprint);\r\n\t\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\t\tfor (let j = 0; j < assignmentGroupLength; j++) {\r\n\t\t\t\tconst assignmentGroupSysId = assignmentGroupSysIds[j];\r\n\t\t\t\tconst assignmentGroup = sprint[assignmentGroupSysId];\r\n\t\t\t\tconst workGroup = assignmentGroups[assignmentGroupSysId];\r\n\r\n\t\t\t\tif (typeof workGroup === \"object\") {\r\n\t\t\t\t\titems[sprintSysId].push({\r\n\t\t\t\t\t\t...assignmentGroup,\r\n\t\t\t\t\t\t...workGroup\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return items;\r\n    },\r\n\r\n    fetchStoryPoints: function({\r\n        sprintSysIds = []\r\n    }, response) {\r\n        const sprints = [];\r\n        sprintSysIds.forEach((sprintSysId) => {\r\n            if (!sprintSysId) return;\r\n            const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n            if (sprintGr.get(sprintSysId)) {\r\n                const storyPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"story_points\"\r\n                });\r\n                const completedStoryPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"completed_story_points\",\r\n                });\r\n                sprints.push({\r\n                    sysId: sprintGr.getUniqueValue(),\r\n                    storyPoints,\r\n                    completedStoryPoints\r\n                });\r\n            }\r\n        });\r\n\r\n        response.setBody({\r\n            sprints\r\n        });\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING STORY POINTS RETURN: \" + JSON.stringify(response))\r\n\r\n        return response;\r\n    },\r\n\r\n    saveTask: function({\r\n        tasks = [],\r\n        sprints = [],\r\n        backlog = [],\r\n        previousTasks = [],\r\n        workGroups = {},\r\n        type\r\n    }, response) {\r\n        // tasks is an object with task data\r\n        // sprints is an array of ONLY sys_ids\r\n\r\n        let tasksArr = [];\r\n        for (let x = 0; x < tasks.length; x++) {\r\n            tasksArr.push(tasks[x].sys_id.value);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n        });\r\n\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addEncodedQuery(\"sys_idIN\" + tasksArr.join(\",\"));\r\n        taskGr.query();\r\n        while (taskGr.next()) {\r\n\r\n            let taskFound = false;\r\n            for (let y = 0; y < tasks.length; y++) {\r\n                if (tasks[y].sys_id.value === taskGr.getValue(\"sys_id\")) {\r\n                    taskFound = true;\r\n                }\r\n                if (taskFound) {\r\n                    taskGr.setValue(\"index\", tasks[y].index.value);\r\n                    taskGr.setValue(\"sprint\", tasks[y].sprint.value);\r\n                    taskGr.setWorkflow(false);\r\n                    let updateSuccessful = taskGr.update();\r\n                    if (!updateSuccessful) {\r\n                        response.setBody({\r\n                            message: 'Error - One or more of the tasks was found but the update failed!',\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (!taskFound) {\r\n                response.setBody({\r\n                    message: 'Error - One or more of the tasks being moved was not updated!',\r\n                    statusCode: 300,\r\n                });\r\n            }\r\n        }\r\n        if (type === \"sprint_planning\") {\r\n            for (let i = 0; i < sprints.length; i++) {\r\n                let sprintSysId = sprints[i];\r\n\r\n                let totalPoints = \"0\";\r\n                const taskAggGA = new GlideAggregate('x_cadso_work_task');\r\n                taskAggGA.addEncodedQuery('sprint=' + sprintSysId);\r\n                taskAggGA.addAggregate(\"SUM\", \"story_points\");\r\n\r\n                taskAggGA.setGroup(false);\r\n                taskAggGA.query();\r\n                if (taskAggGA.next()) {\r\n                    if (taskAggGA.getAggregate('SUM', 'story_points')) {\r\n                        totalPoints = taskAggGA.getAggregate('SUM', 'story_points')\r\n                    }\r\n                }\r\n\r\n                const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                if (sprintGr.get(sprintSysId)) {\r\n                    sprintGr.setValue(\"story_points\", totalPoints);\r\n\r\n                    let sprintUpdateSuccess = sprintGr.update();\r\n                    if (!sprintUpdateSuccess) {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint update failed for sprint ' + sprintSysId,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                } else {\r\n                    response.setBody({\r\n                        message: 'Error - Sprint not found: ' + sprintSysId,\r\n                        statusCode: 404,\r\n                    });\r\n                }\r\n\r\n            }\r\n            // Find sprints that have not been updated to remove story points because they were dragged from\r\n            if (previousTasks.length > 0) {\r\n                for (let p = 0; p < previousTasks.length; p++) {\r\n                    let prevTaskID = previousTasks[p].sys_id.value;\r\n                    let prevSprintID = previousTasks[p].sprint.value;\r\n                }\r\n            }\r\n        } else if (type === \"back_log\") {\r\n            for (let b = 0; b < backlog.length; b++) {\r\n                const backlogSprint = backlog[b].sprint.value;\r\n                const backlogStoryPoints = backlog[b].story_points.value;\r\n                const sprintBackLogGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                //if a selected backlog task is dragged to the backlog, there is no sprint to update\r\n                if (backlogSprint !== null && backlogSprint !== undefined && backlogSprint !== \"\") {\r\n                    if (sprintBackLogGr.get(backlogSprint)) {\r\n                        const oldValue = sprintBackLogGr.getValue(\"story_points\");\r\n                        let newValue = oldValue - backlogStoryPoints;\r\n\r\n                        if (newValue < 0) {\r\n                            newValue = 0;\r\n                        }\r\n                        sprintBackLogGr.setValue('story_points', newValue);\r\n                        let sprintUpdateSuccess = sprintBackLogGr.update();\r\n                        if (!sprintUpdateSuccess) {\r\n                            response.setBody({\r\n                                message: 'Error - Story point update failed for backlog sprint - ' + backlogSprint,\r\n                                statusCode: 300,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint not found in Backlog: ' + backlogSprint,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        sprintArr = [];\r\n        for (let x = 0; x < sprints.length; x++) {\r\n            sprintArr.push({\r\n                sys_id: sprints[x]\r\n            })\r\n        }\r\n        workGroups = this.getWorkGroups(sprintArr);\r\n        return (response);\r\n    },\r\n\r\n    saveProject: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }, response) {\r\n        const insideBacklog = !fromSprint && !toSprint;\r\n        const fromBacklog = !fromSprint && toSprint;\r\n        const toBacklog = fromSprint && !toSprint;\r\n        const sprintToSprint = fromSprint && toSprint;\r\n\r\n        if (insideBacklog) {\r\n            this.insideBacklog({\r\n                sysId,\r\n                index\r\n            });\r\n        } else if (fromBacklog) {\r\n            this.fromBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: toSprint\r\n            });\r\n        } else if (toBacklog) {\r\n            this.toBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: fromSprint\r\n            });\r\n        } else if (sprintToSprint) {\r\n            this.sprintToSprint({\r\n                sysId,\r\n                index,\r\n                fromSprint,\r\n                toSprint\r\n            });\r\n        }\r\n\r\n        return this.fetchStoryPoints({\r\n            sprintSysIds: [toSprint, fromSprint]\r\n        }, response);\r\n    },\r\n\r\n    insideBacklog: function({\r\n        sysId,\r\n        index\r\n    }) {\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n    },\r\n\r\n    toBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Sprint to Backlog\r\n        // // Delete M2M\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n        sprintProjectM2MGr.deleteMultiple();\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: sprint,\r\n            toSprint: \"\"\r\n        });\r\n    },\r\n\r\n    fromBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Backlog to Sprint\r\n        // // Create M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        } else {\r\n            sprintProjectM2MGr.initialize();\r\n            sprintProjectM2MGr.newRecord();\r\n            sprintProjectM2MGr.setValue(\"sprint\", sprint);\r\n            sprintProjectM2MGr.setValue(\"project\", sysId);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.insert();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: \"\",\r\n            toSprint: sprint\r\n        });\r\n    },\r\n\r\n    sprintToSprint: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        // Moving Sprint to Sprint\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", fromSprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        while (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"sprint\", toSprint);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint,\r\n            toSprint\r\n        });\r\n    },\r\n\r\n\r\n    updateTasks: function({\r\n        sysId,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addQuery(\"project\", sysId);\r\n        if (fromSprint) {\r\n            taskGr.addQuery(\"sprint\", fromSprint);\r\n        } else {\r\n            taskGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        }\r\n        // taskGr.addQuery(\"state\", \"IN\", \"10,25,30\");\r\n        taskGr.query();\r\n\r\n        while (taskGr.next()) {\r\n            let sprint = \"\";\r\n            if (toSprint) {\r\n                sprint = toSprint;\r\n            }\r\n            taskGr.setValue(\"sprint\", sprint);\r\n            taskGr.update();\r\n        }\r\n    },\r\n\r\n    getAllSprintTasksData: function(sprintsQueriesObj, taskQueriesObj, teamQuery) {\r\n        var objData = {\r\n\t\t\tsprints: [],\r\n\t\t\tsprintTasks: [],\r\n\t\t};\r\n\r\n\t\tif (!teamQuery || !teamQuery.length || !teamQuery[0]) {\r\n\t\t\tteamQuery = [];\r\n\t\t}\r\n\r\n\t\tlet sprintQuery = this.convertToQuery({\r\n\t\t\tqueryObj: sprintsQueriesObj,\r\n\t\t\ttable: 'x_cadso_work_sprint'\r\n\t\t});\r\n\r\n\t\tlet sprintSysIDArray = [];\r\n\t\tlet sprintGr = new GlideRecordSecure('x_cadso_work_sprint');\r\n\r\n\t\tif (teamQuery.length) {\r\n\t\t\tlet encodedQuery = teamQuery.map(team => `segment=${team.value}^`).join('');\r\n\t\t\tsprintGr.addEncodedQuery(encodedQuery);\r\n\t\t}\r\n\r\n\t\tsprintGr.addEncodedQuery(sprintQuery);\r\n\t\tsprintGr.orderBy(\"expected_start\");\r\n\t\tsprintGr.query();\r\n\r\n\t\twhile (sprintGr.next()) {\r\n\t\t\tlet sprintObj = {};\r\n\t\t\tlet sprintTeams = sprintGr.getValue(\"segment\").split(',');\r\n\r\n\t\t\tif (sprintTeams.length !== teamQuery.length) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst sortedSprintTeams = sprintTeams.slice().sort();\r\n\t\t\tconst sortedTeamQuery = teamQuery.map(t => t.value).sort();\r\n\r\n\t\t\tif (!sortedSprintTeams.every((team, i) => team === sortedTeamQuery[i])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tsprintObj.short_description = sprintGr.getValue('short_description');\r\n\t\t\tsprintObj.sys_id = sprintGr.getValue('sys_id');\r\n\t\t\tsprintObj.state = {\r\n\t\t\t\tdisplayValue: sprintGr.getDisplayValue(\"state\"),\r\n\t\t\t\tvalue: sprintGr.getValue(\"state\"),\r\n\t\t\t};\r\n\t\t\tsprintObj.story_points = sprintGr.getValue('story_points');\r\n\t\t\tsprintObj.sprint_capacity = sprintGr.getValue('sprint_capacity');\r\n\t\t\tsprintObj.capacity = sprintGr.getValue('capacity');\r\n\t\t\tsprintObj.completed_story_points = sprintGr.getValue('completed_story_points');\r\n\t\t\tsprintObj.expected_start = sprintGr.getValue('expected_start');\r\n\t\t\tsprintObj.expected_end = sprintGr.getValue('expected_end');\r\n\t\t\tsprintObj.tasks = [];\r\n\r\n\t\t\tsprintSysIDArray.push(sprintObj.sys_id);\r\n\t\t\tobjData.sprints.push(sprintObj);\r\n\t\t}\r\n\r\n\t\tif (sprintSysIDArray.length) {\r\n\t\t\tlet taskQuery = this.convertToQuery({\r\n\t\t\t\tqueryObj: taskQueriesObj,\r\n\t\t\t\ttable: 'x_cadso_work_task'\r\n\t\t\t});\r\n\r\n\t\t\tlet sprintTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\t\tsprintTaskGr.addEncodedQuery(`sprint.sys_idIN${sprintSysIDArray.join(',')}`);\r\n\t\t\tsprintTaskGr.addEncodedQuery(taskQuery);\r\n\t\t\tsprintTaskGr.orderBy('index');\r\n\t\t\tsprintTaskGr.query();\r\n\r\n\t\t\twhile (sprintTaskGr.next()) {\r\n\t\t\t\tlet taskObj = {\r\n\t\t\t\t\tdisplayValue: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('short_description'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('short_description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsys_id: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"sys_id\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sys_id')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"description\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsprint: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('sprint'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sprint')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassignment_group: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assignment_group'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpriority: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('priority'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('priority')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tplanned_hours: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('planned_hours'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('planned_hours')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstory_points: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('story_points'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('story_points')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdue_date: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('due_date'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('due_date')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tindex: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('index'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('index')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbudget: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getValue('project') ? sprintTaskGr.getDisplayValue('project.budget') : 0,\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project') ? sprintTaskGr.getValue('project.budget') : 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tproject: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('project'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassigned_to: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assigned_to'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assigned_to')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tuser_dropdown_data: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t\t? this.getUsersInGroup('x_cadso_work_task', sprintTaskGr.getValue('sys_id'), '')\r\n\t\t\t\t\t\t: []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (taskObj.project.value) {\r\n\t\t\t\t\ttaskObj.project.glyph_color = sprintTaskGr.getElement(\"project.glyph_color\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (taskObj.assigned_to.value) {\r\n\t\t\t\t\ttaskObj.assigned_to.avatar = sprintTaskGr.getElement(\"assigned_to.avatar\") || sprintTaskGr.getElement(\"assigned_to.photo\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobjData.sprintTasks.push(taskObj);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return objData;\r\n    },\r\n    getUsersInGroup: function(\r\n        table,\r\n        record,\r\n        queryString = \"\"\r\n    ) {\r\n        var returnUsers = [];\r\n        var taskAssignmentGR = new GlideRecordSecure(table);\r\n        taskAssignmentGR.addQuery('sys_id', record);\r\n        taskAssignmentGR.query();\r\n        while (taskAssignmentGR.next()) {\r\n            var groupId = taskAssignmentGR.getValue('assignment_group');\r\n            var groupGR = new GlideRecordSecure('sys_user_grmember');\r\n            groupGR.addQuery('user.name', 'CONTAINS', queryString);\r\n\t\t\tgroupGR.addQuery('user.active', true);\r\n            groupGR.addQuery('group', groupId);\r\n            groupGR.query();\r\n            while (groupGR.next()) {\r\n                returnUsers.push({\r\n                    value: groupGR.getValue('user'),\r\n                    label: groupGR.getDisplayValue('user'),\r\n\t\t\t\t\tavatar: groupGR.getElement('user.avatar')\r\n                });\r\n            }\r\n        }\r\n\r\n        return returnUsers;\r\n    },\r\n    getAllBacklogTasksData: function(taskQueriesObj, teamQuery) {\r\n        var taskQuery = \"\";\r\n        taskQuery = this.convertToQuery({\r\n            queryObj: taskQueriesObj,\r\n            table: 'x_cadso_work_task'\r\n        });\r\n        const backlogTasks = [];\r\n        var backlogTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n        for (let x = 0; x < teamQuery.length; x++) {\r\n\t\t\tif (!teamQuery[x]) continue;\r\n            backlogTaskGr.addEncodedQuery(\"^NQsegmentLIKE\" + teamQuery[x].value);\r\n        }\r\n        backlogTaskGr.addEncodedQuery('sprintISEMPTY');\r\n        backlogTaskGr.addEncodedQuery(taskQuery);\r\n        backlogTaskGr.query();\r\n        while (backlogTaskGr.next()) {\r\n            var taskObj = {};\r\n            taskObj.displayValue = {\r\n                displayValue: backlogTaskGr.getDisplayValue('short_description'),\r\n                value: backlogTaskGr.getValue('short_description')\r\n            };\r\n            taskObj.sys_id = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"sys_id\"),\r\n                value: backlogTaskGr.getValue('sys_id')\r\n            };\r\n            taskObj.description = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"description\"),\r\n                value: backlogTaskGr.getValue('description')\r\n            };\r\n            taskObj.sprint = {\r\n                displayValue: backlogTaskGr.getDisplayValue('sprint'),\r\n                value: backlogTaskGr.getValue('sprint')\r\n            };\r\n            taskObj.assignment_group = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assignment_group'),\r\n                value: backlogTaskGr.getValue('assignment_group')\r\n            };\r\n\r\n            taskObj.priority = {\r\n                displayValue: backlogTaskGr.getDisplayValue('priority'),\r\n                value: backlogTaskGr.getValue('priority')\r\n            };\r\n            taskObj.planned_hours = {\r\n                displayValue: backlogTaskGr.getDisplayValue('planned_hours'),\r\n                value: backlogTaskGr.getValue('planned_hours')\r\n            };\r\n            taskObj.story_points = {\r\n                displayValue: backlogTaskGr.getDisplayValue('story_points'),\r\n                value: backlogTaskGr.getValue('story_points')\r\n            };\r\n            taskObj.due_date = {\r\n                displayValue: backlogTaskGr.getDisplayValue('due_date'),\r\n                value: backlogTaskGr.getValue('due_date')\r\n            };\r\n            taskObj.index = {\r\n                displayValue: backlogTaskGr.getDisplayValue('index'),\r\n                value: backlogTaskGr.getValue('index')\r\n            };\r\n\r\n            taskObj.budget = {\r\n                displayValue: backlogTaskGr.getValue('project') ? backlogTaskGr.getDisplayValue('project.budget') : 0,\r\n                value: backlogTaskGr.getValue('project') ? backlogTaskGr.getValue('project.budget') : 0\r\n            };\r\n\r\n            taskObj.project = {\r\n                displayValue: backlogTaskGr.getDisplayValue('project'),\r\n                value: backlogTaskGr.getValue('project')\r\n            };\r\n\r\n            if (taskObj.project.value) {\r\n                taskObj.project.glyph_color = backlogTaskGr.getElement(\"project.glyph_color\");\r\n                // taskObj.project.glyph_color.value = backlogTaskGr.getElement(\"project.glyph_color\");\r\n            }\r\n\r\n            taskObj.assigned_to = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assigned_to'),\r\n                value: backlogTaskGr.getValue('assigned_to')\r\n            };\r\n\r\n            if (taskObj.assigned_to.value) {\r\n                taskObj.assigned_to.avatar = backlogTaskGr.getElement(\"assigned_to.avatar\") || backlogTaskGr.getElement(\"assigned_to.photo\");\r\n            }\r\n\r\n\t\t\tif (taskObj.assignment_group.value) {\r\n                // taskObj.user_dropdown_data = this.getUsersInGroup('x_cadso_work_task', taskObj.sys_id.value, '');\r\n            } else {\r\n\t\t\t\ttaskObj.user_dropdown_data = [];\r\n\t\t\t}\r\n            // var subTaskObj = {};\r\n            // var subTasks = [];\r\n            // var subTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            // subTaskGr.addQuery('parent', taskObj.sys_id);\r\n            // subTaskGr.query();\r\n            // while(subTaskGr.next()){\r\n            // \tsubTasks.push(\r\n            // \t\t{\r\n            // \t\t\tsys_id : subTaskGr.getUniqueValue()\r\n            // \t\t}\r\n            // \t)\r\n            // \t//taskObj.subtasksData.count = subTaskGr.getRowCount();\r\n            // }\r\n            // subTaskObj.tasks = subTasks;\r\n            // subTaskObj.taskCount = subTaskGr.getRowCount();\r\n            // taskObj.subTaskData = subTaskObj;\r\n            backlogTasks.push(taskObj);\r\n        }\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING BACKLOGTASKs RETURN: \" + JSON.stringify(backlogTasks))\r\n\r\n        return backlogTasks;\r\n    },\r\n\r\n    getTeamsData: function() {\r\n        const teams = [];\r\n        var teamGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n        teamGr.addEncodedQuery(\"segment.active=true^work_user.user=\" + gs.getUserID());\r\n        teamGr.query();\r\n        while (teamGr.next()) {\r\n            let team = {};\r\n            team.displayValue = teamGr.getDisplayValue('segment');\r\n            team.value = teamGr.getValue('segment');\r\n\r\n            let found = false;\r\n            for (let x = 0; x < teams.length; x++) {\r\n                if (teams[x].value === team.value) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) {\r\n                teams.push(team);\r\n            }\r\n        }\r\n        return teams;\r\n    },\r\n\r\n    sprintPlanningGetWorkGroups: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let workGroups = {};\r\n\r\n        // these may have to take a queryObj for filtering\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n            teamQuery = [teamsData[0]];\r\n            taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n        }\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            workGroups: workGroups\r\n        });\r\n        return response;\r\n\r\n    },\r\n\r\n    //function to update the task id \r\n    updateTaskID: function(taskList) {\r\n        for (var i = 0; i < taskList.length; i++) {\r\n            var taskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            taskGr.addQuery('sys_id', taskList[i].sys_id);\r\n            taskGr.query();\r\n            if (taskGr.next()) {\r\n                taskGr.setValue('index', taskList[i].newIndex);\r\n                taskGr.update();\r\n            }\r\n        }\r\n    },\r\n\r\n    convertToQuery: function({\r\n        queryObj,\r\n        table\r\n    }) {\r\n        const queryArr = [];\r\n        if (queryObj) {\r\n            Object.keys(queryObj).forEach((_query) => {\r\n                if (queryObj[_query]) {\r\n                    // if the tableToApplyTo is the same as the table we are currently querying\r\n                    // then we add it to the queryArr\r\n                    if (queryObj[_query].tableToApplyTo === table) {\r\n                        queryArr.push(queryObj[_query].query);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        const newQuery = queryArr.join(\"^\");\r\n\r\n        return newQuery || \"\";\r\n    },\r\n\r\n    type: \"sprintPlanningMS\",\r\n});",
    "formatted_script": {
      "line_count": 1004,
      "char_count": 34519,
      "preview": "/* eslint-disable max-lines */\r\nconst sprintPlanningMS = Class.create();\r\nsprintPlanningMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n    initialize: function() {\r\n        x_cadso...",
      "full_script": "/* eslint-disable max-lines */\r\nconst sprintPlanningMS = Class.create();\r\nsprintPlanningMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n    initialize: function() {\r\n        x_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n        this.projectFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"glyph_color\",\r\n            \"sprints\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"budget\",\r\n            \"assigned_to\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\",\r\n            \"expected_end\"\r\n        ];\r\n        this.taskFields = [\r\n            \"short_description\",\r\n            \"campaign\",\r\n            \"story_points\",\r\n            \"assigned_to\",\r\n            \"project\",\r\n            \"sprint\",\r\n            \"index\",\r\n            \"priority\",\r\n            \"due_date\",\r\n            \"assignment_group\",\r\n            \"type\",\r\n            \"planned_hours\"\r\n        ];\r\n        this.sprintFields = [\r\n            \"short_description\",\r\n            \"expected_start\",\r\n            \"expected_end\",\r\n            \"sprint_capacity\",\r\n            \"story_points\",\r\n            \"completed_story_points\",\r\n        ];\r\n        this.workGroupFields = [\r\n            \"short_description\",\r\n            \"capacity\",\r\n        ];\r\n    },\r\n\r\n    fetch: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let backlogData = [];\r\n        let workGroups = {};\r\n\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n\r\n            teamQuery = [teamsData[0]];\r\n            // taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n\t\t\t\r\n        }\r\n\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            backlogData = this.getAllBacklogTasksData(taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\t\t\r\n\t\tvar result = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            sprintsData: sprintsData,\r\n            backlogData: backlogData,\r\n            taskFieldData: taskFieldData,\r\n            teamsData: teamsData,\r\n            workGroups: workGroups,\r\n            query: {}\r\n        };\r\n\t\t\r\n        response.setBody(result);\r\n        return response;\r\n    },\r\n\r\n    getSprints: function({\r\n        sprintsQueries,\r\n        sprintsSort,\r\n        sprintsProjectQueries,\r\n        sprintsProjectSort,\r\n        sprintsTasksQueries,\r\n        sprintsTasksSort,\r\n    }) {\r\n        const sprints = this.getRecords({\r\n            table: \"x_cadso_work_sprint\",\r\n            queries: sprintsQueries,\r\n            fields: this.sprintFields,\r\n            sortBys: sprintsSort.sortBys,\r\n            sortAsc: sprintsSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            getItems: true,\r\n            addParentQuery: false,\r\n            type: \"sprints\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_project\",\r\n                queries: sprintsProjectQueries,\r\n                fields: this.projectFields,\r\n                sortBys: sprintsProjectSort.sortBys,\r\n                sortAsc: sprintsProjectSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                getItems: true,\r\n                parentField: \"sprints\",\r\n                parentFieldQuery: \"LIKE\",\r\n                addParentQuery: false,\r\n                type: \"sprints\",\r\n                itemObj: {\r\n                    table: \"x_cadso_work_task\",\r\n                    queries: sprintsTasksQueries,\r\n                    fields: this.taskFields,\r\n                    sortBys: sprintsTasksSort.sortBys,\r\n                    sortAsc: sprintsTasksSort.sortAsc,\r\n                    sortByDisplayField: true,\r\n                    sortAscDisplayField: true,\r\n                    parentField: \"project\",\r\n                    addParentQuery: true,\r\n                    type: \"sprints\",\r\n                },\r\n            },\r\n        });\r\n\t\t// gs.info(\"WM SPRINT PLANNING SPRINT RETURN: \" + JSON.stringify(sprints))\r\n        return sprints;\r\n    },\r\n\r\n    getProjects: function({\r\n        backlogProjectQueries,\r\n        backlogProjectSort,\r\n        backlogTasksQueries,\r\n        backlogTasksSort,\r\n    }) {\r\n        const projects = this.getRecords({\r\n            table: \"x_cadso_work_project\",\r\n            queries: backlogProjectQueries,\r\n            fields: this.projectFields,\r\n            sortBys: backlogProjectSort.sortBys,\r\n            sortAsc: backlogProjectSort.sortAsc,\r\n            sortByDisplayField: true,\r\n            sortAscDisplayField: true,\r\n            addParentQuery: false,\r\n            getItems: true,\r\n            type: \"backlog\",\r\n            itemObj: {\r\n                table: \"x_cadso_work_task\",\r\n                queries: backlogTasksQueries,\r\n                fields: this.taskFields,\r\n                sortBys: backlogTasksSort.sortBys,\r\n                sortAsc: backlogTasksSort.sortAsc,\r\n                sortByDisplayField: true,\r\n                sortAscDisplayField: true,\r\n                addParentQuery: false,\r\n                parentField: \"project\",\r\n                type: \"backlog\",\r\n            },\r\n        });\r\n\t\t\t// gs.info(\"WM SPRINT PLANNING PROJECT RETURN: \" + JSON.stringify(projects))\r\n\r\n        return projects;\r\n    },\r\n\r\n    getWorkGroups: function(sprints = []) {\r\n        const assignmentGroups = {};\r\n        const assignmentGroupsArr = [];\r\n        const sprintItems = {};\r\n\t\tconst sprintItemsMap = {};\r\n        const items = {};\r\n        for (let i = 0; i < sprints.length; i++) {\r\n\t\t\tconst sprint = sprints[i];\r\n\t\t\tif (!sprint.sys_id) continue;\r\n\r\n\t\t\tconst sprintItems = {};\r\n\t\t\tconst sprintSysId = sprint.sys_id;\r\n\r\n\t\t\tconst taskGR = new GlideRecordSecure(\"x_cadso_work_task\");\r\n\t\t\ttaskGR.addQuery(\"sprint\", sprintSysId);\r\n\t\t\ttaskGR.addNotNullQuery(\"story_points\");  // Skip tasks without story points\r\n\t\t\ttaskGR.orderBy(\"assignment_group\");\r\n\t\t\ttaskGR.query();\r\n\r\n\t\t\twhile (taskGR.next()) {\r\n\t\t\t\tconst taskAG = taskGR.getValue(\"assignment_group\");\r\n\t\t\t\tconst taskAGDV = taskGR.getDisplayValue(\"assignment_group\");\r\n\r\n\t\t\t\tif (!sprintItems[taskAG]) {\r\n\t\t\t\t\tsprintItems[taskAG] = {\r\n\t\t\t\t\t\tsysId: taskAG,\r\n\t\t\t\t\t\tdisplayValue: taskAGDV,\r\n\t\t\t\t\t\tpoints: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsprintItems[taskAG].points += parseInt(taskGR.getValue(\"story_points\"), 10) || 0;\r\n\r\n\t\t\t\tif (!assignmentGroups[taskAG]) {\r\n\t\t\t\t\tassignmentGroups[taskAG] = taskAGDV;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.keys(sprintItems).length > 0) {\r\n\t\t\t\tsprintItemsMap[sprintSysId] = sprintItems;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert assignmentGroups keys into an array\r\n\t\tconst assignmentGroupSysIds = Object.keys(assignmentGroups);\r\n\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\tfor (let i = 0; i < assignmentGroupLength; i++) {\r\n\t\t\tconst currTaskAG = assignmentGroupSysIds[i];\r\n\r\n\t\t\tconst workGroupToGroupGR = new GlideRecordSecure(\"x_cadso_work_group_to_group_m2m\");\r\n\t\t\tworkGroupToGroupGR.addQuery(\"group\", currTaskAG);\r\n\t\t\tworkGroupToGroupGR.addEncodedQuery(\"work_groupISNOTEMPTY\");\r\n\t\t\tworkGroupToGroupGR.orderByDesc(\"work_group.capacity\");\r\n\t\t\tworkGroupToGroupGR.setLimit(1);\r\n\t\t\tworkGroupToGroupGR.query();\r\n\r\n\t\t\tif (workGroupToGroupGR.next()) {\r\n\t\t\t\tconst workGroupGr = workGroupToGroupGR.work_group.getRefRecord();\r\n\t\t\t\tif (workGroupGr.isValidRecord()) {\r\n\t\t\t\t\tassignmentGroups[currTaskAG] = {\r\n\t\t\t\t\t\tworkGroupName: workGroupGr.getDisplayValue(\"short_description\"),\r\n\t\t\t\t\t\tcapacity: parseInt(workGroupGr.getValue(\"capacity\"), 10) || 0,\r\n\t\t\t\t\t\tworkGroupSysId: workGroupToGroupGR.getValue(\"work_group\")\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tassignmentGroups[currTaskAG] = { displayValue: assignmentGroups[currTaskAG] };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Process sprint items\r\n\t\tconst sprintItemsKeys = Object.keys(sprintItemsMap);\r\n\t\tconst sprintItemsLength = sprintItemsKeys.length;\r\n\r\n\t\tfor (let i = 0; i < sprintItemsLength; i++) {\r\n\t\t\tconst sprintSysId = sprintItemsKeys[i];\r\n\t\t\tconst sprint = sprintItemsMap[sprintSysId];\r\n\r\n\t\t\titems[sprintSysId] = [];\r\n\r\n\t\t\tconst assignmentGroupSysIds = Object.keys(sprint);\r\n\t\t\tconst assignmentGroupLength = assignmentGroupSysIds.length;\r\n\r\n\t\t\tfor (let j = 0; j < assignmentGroupLength; j++) {\r\n\t\t\t\tconst assignmentGroupSysId = assignmentGroupSysIds[j];\r\n\t\t\t\tconst assignmentGroup = sprint[assignmentGroupSysId];\r\n\t\t\t\tconst workGroup = assignmentGroups[assignmentGroupSysId];\r\n\r\n\t\t\t\tif (typeof workGroup === \"object\") {\r\n\t\t\t\t\titems[sprintSysId].push({\r\n\t\t\t\t\t\t...assignmentGroup,\r\n\t\t\t\t\t\t...workGroup\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return items;\r\n    },\r\n\r\n    fetchStoryPoints: function({\r\n        sprintSysIds = []\r\n    }, response) {\r\n        const sprints = [];\r\n        sprintSysIds.forEach((sprintSysId) => {\r\n            if (!sprintSysId) return;\r\n            const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n            if (sprintGr.get(sprintSysId)) {\r\n                const storyPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"story_points\"\r\n                });\r\n                const completedStoryPoints = this.getField({\r\n                    tableGr: sprintGr,\r\n                    field: \"completed_story_points\",\r\n                });\r\n                sprints.push({\r\n                    sysId: sprintGr.getUniqueValue(),\r\n                    storyPoints,\r\n                    completedStoryPoints\r\n                });\r\n            }\r\n        });\r\n\r\n        response.setBody({\r\n            sprints\r\n        });\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING STORY POINTS RETURN: \" + JSON.stringify(response))\r\n\r\n        return response;\r\n    },\r\n\r\n    saveTask: function({\r\n        tasks = [],\r\n        sprints = [],\r\n        backlog = [],\r\n        previousTasks = [],\r\n        workGroups = {},\r\n        type\r\n    }, response) {\r\n        // tasks is an object with task data\r\n        // sprints is an array of ONLY sys_ids\r\n\r\n        let tasksArr = [];\r\n        for (let x = 0; x < tasks.length; x++) {\r\n            tasksArr.push(tasks[x].sys_id.value);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n        });\r\n\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addEncodedQuery(\"sys_idIN\" + tasksArr.join(\",\"));\r\n        taskGr.query();\r\n        while (taskGr.next()) {\r\n\r\n            let taskFound = false;\r\n            for (let y = 0; y < tasks.length; y++) {\r\n                if (tasks[y].sys_id.value === taskGr.getValue(\"sys_id\")) {\r\n                    taskFound = true;\r\n                }\r\n                if (taskFound) {\r\n                    taskGr.setValue(\"index\", tasks[y].index.value);\r\n                    taskGr.setValue(\"sprint\", tasks[y].sprint.value);\r\n                    taskGr.setWorkflow(false);\r\n                    let updateSuccessful = taskGr.update();\r\n                    if (!updateSuccessful) {\r\n                        response.setBody({\r\n                            message: 'Error - One or more of the tasks was found but the update failed!',\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (!taskFound) {\r\n                response.setBody({\r\n                    message: 'Error - One or more of the tasks being moved was not updated!',\r\n                    statusCode: 300,\r\n                });\r\n            }\r\n        }\r\n        if (type === \"sprint_planning\") {\r\n            for (let i = 0; i < sprints.length; i++) {\r\n                let sprintSysId = sprints[i];\r\n\r\n                let totalPoints = \"0\";\r\n                const taskAggGA = new GlideAggregate('x_cadso_work_task');\r\n                taskAggGA.addEncodedQuery('sprint=' + sprintSysId);\r\n                taskAggGA.addAggregate(\"SUM\", \"story_points\");\r\n\r\n                taskAggGA.setGroup(false);\r\n                taskAggGA.query();\r\n                if (taskAggGA.next()) {\r\n                    if (taskAggGA.getAggregate('SUM', 'story_points')) {\r\n                        totalPoints = taskAggGA.getAggregate('SUM', 'story_points')\r\n                    }\r\n                }\r\n\r\n                const sprintGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                if (sprintGr.get(sprintSysId)) {\r\n                    sprintGr.setValue(\"story_points\", totalPoints);\r\n\r\n                    let sprintUpdateSuccess = sprintGr.update();\r\n                    if (!sprintUpdateSuccess) {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint update failed for sprint ' + sprintSysId,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                } else {\r\n                    response.setBody({\r\n                        message: 'Error - Sprint not found: ' + sprintSysId,\r\n                        statusCode: 404,\r\n                    });\r\n                }\r\n\r\n            }\r\n            // Find sprints that have not been updated to remove story points because they were dragged from\r\n            if (previousTasks.length > 0) {\r\n                for (let p = 0; p < previousTasks.length; p++) {\r\n                    let prevTaskID = previousTasks[p].sys_id.value;\r\n                    let prevSprintID = previousTasks[p].sprint.value;\r\n                }\r\n            }\r\n        } else if (type === \"back_log\") {\r\n            for (let b = 0; b < backlog.length; b++) {\r\n                const backlogSprint = backlog[b].sprint.value;\r\n                const backlogStoryPoints = backlog[b].story_points.value;\r\n                const sprintBackLogGr = new GlideRecordSecure(\"x_cadso_work_sprint\");\r\n                //if a selected backlog task is dragged to the backlog, there is no sprint to update\r\n                if (backlogSprint !== null && backlogSprint !== undefined && backlogSprint !== \"\") {\r\n                    if (sprintBackLogGr.get(backlogSprint)) {\r\n                        const oldValue = sprintBackLogGr.getValue(\"story_points\");\r\n                        let newValue = oldValue - backlogStoryPoints;\r\n\r\n                        if (newValue < 0) {\r\n                            newValue = 0;\r\n                        }\r\n                        sprintBackLogGr.setValue('story_points', newValue);\r\n                        let sprintUpdateSuccess = sprintBackLogGr.update();\r\n                        if (!sprintUpdateSuccess) {\r\n                            response.setBody({\r\n                                message: 'Error - Story point update failed for backlog sprint - ' + backlogSprint,\r\n                                statusCode: 300,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        response.setBody({\r\n                            message: 'Error - Sprint not found in Backlog: ' + backlogSprint,\r\n                            statusCode: 300,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        sprintArr = [];\r\n        for (let x = 0; x < sprints.length; x++) {\r\n            sprintArr.push({\r\n                sys_id: sprints[x]\r\n            })\r\n        }\r\n        workGroups = this.getWorkGroups(sprintArr);\r\n        return (response);\r\n    },\r\n\r\n    saveProject: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }, response) {\r\n        const insideBacklog = !fromSprint && !toSprint;\r\n        const fromBacklog = !fromSprint && toSprint;\r\n        const toBacklog = fromSprint && !toSprint;\r\n        const sprintToSprint = fromSprint && toSprint;\r\n\r\n        if (insideBacklog) {\r\n            this.insideBacklog({\r\n                sysId,\r\n                index\r\n            });\r\n        } else if (fromBacklog) {\r\n            this.fromBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: toSprint\r\n            });\r\n        } else if (toBacklog) {\r\n            this.toBacklog({\r\n                sysId,\r\n                index,\r\n                sprint: fromSprint\r\n            });\r\n        } else if (sprintToSprint) {\r\n            this.sprintToSprint({\r\n                sysId,\r\n                index,\r\n                fromSprint,\r\n                toSprint\r\n            });\r\n        }\r\n\r\n        return this.fetchStoryPoints({\r\n            sprintSysIds: [toSprint, fromSprint]\r\n        }, response);\r\n    },\r\n\r\n    insideBacklog: function({\r\n        sysId,\r\n        index\r\n    }) {\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n    },\r\n\r\n    toBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Sprint to Backlog\r\n        // // Delete M2M\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n        sprintProjectM2MGr.deleteMultiple();\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: sprint,\r\n            toSprint: \"\"\r\n        });\r\n    },\r\n\r\n    fromBacklog: function({\r\n        sysId,\r\n        index,\r\n        sprint\r\n    }) {\r\n        // Moving Backlog to Sprint\r\n        // // Create M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", sprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        if (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        } else {\r\n            sprintProjectM2MGr.initialize();\r\n            sprintProjectM2MGr.newRecord();\r\n            sprintProjectM2MGr.setValue(\"sprint\", sprint);\r\n            sprintProjectM2MGr.setValue(\"project\", sysId);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.insert();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint: \"\",\r\n            toSprint: sprint\r\n        });\r\n    },\r\n\r\n    sprintToSprint: function({\r\n        sysId,\r\n        index,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        // Moving Sprint to Sprint\r\n        // // Update M2M\r\n        // // Update Project (happens in BR)\r\n        // // Update Tasks\r\n        const sprintProjectM2MGr = new GlideRecordSecure(\"x_cadso_work_sprint_project_m2m\");\r\n        sprintProjectM2MGr.addQuery(\"sprint\", fromSprint);\r\n        sprintProjectM2MGr.addQuery(\"project\", sysId);\r\n        sprintProjectM2MGr.query();\r\n\r\n        while (sprintProjectM2MGr.next()) {\r\n            sprintProjectM2MGr.setValue(\"sprint\", toSprint);\r\n            sprintProjectM2MGr.setValue(\"index\", index);\r\n            sprintProjectM2MGr.update();\r\n        }\r\n\r\n        this.updateTasks({\r\n            sysId,\r\n            fromSprint,\r\n            toSprint\r\n        });\r\n    },\r\n\r\n\r\n    updateTasks: function({\r\n        sysId,\r\n        fromSprint,\r\n        toSprint\r\n    }) {\r\n        const taskGr = new GlideRecordSecure(\"x_cadso_work_task\");\r\n        taskGr.addQuery(\"project\", sysId);\r\n        if (fromSprint) {\r\n            taskGr.addQuery(\"sprint\", fromSprint);\r\n        } else {\r\n            taskGr.addEncodedQuery(\"sprintISEMPTY\");\r\n        }\r\n        // taskGr.addQuery(\"state\", \"IN\", \"10,25,30\");\r\n        taskGr.query();\r\n\r\n        while (taskGr.next()) {\r\n            let sprint = \"\";\r\n            if (toSprint) {\r\n                sprint = toSprint;\r\n            }\r\n            taskGr.setValue(\"sprint\", sprint);\r\n            taskGr.update();\r\n        }\r\n    },\r\n\r\n    getAllSprintTasksData: function(sprintsQueriesObj, taskQueriesObj, teamQuery) {\r\n        var objData = {\r\n\t\t\tsprints: [],\r\n\t\t\tsprintTasks: [],\r\n\t\t};\r\n\r\n\t\tif (!teamQuery || !teamQuery.length || !teamQuery[0]) {\r\n\t\t\tteamQuery = [];\r\n\t\t}\r\n\r\n\t\tlet sprintQuery = this.convertToQuery({\r\n\t\t\tqueryObj: sprintsQueriesObj,\r\n\t\t\ttable: 'x_cadso_work_sprint'\r\n\t\t});\r\n\r\n\t\tlet sprintSysIDArray = [];\r\n\t\tlet sprintGr = new GlideRecordSecure('x_cadso_work_sprint');\r\n\r\n\t\tif (teamQuery.length) {\r\n\t\t\tlet encodedQuery = teamQuery.map(team => `segment=${team.value}^`).join('');\r\n\t\t\tsprintGr.addEncodedQuery(encodedQuery);\r\n\t\t}\r\n\r\n\t\tsprintGr.addEncodedQuery(sprintQuery);\r\n\t\tsprintGr.orderBy(\"expected_start\");\r\n\t\tsprintGr.query();\r\n\r\n\t\twhile (sprintGr.next()) {\r\n\t\t\tlet sprintObj = {};\r\n\t\t\tlet sprintTeams = sprintGr.getValue(\"segment\").split(',');\r\n\r\n\t\t\tif (sprintTeams.length !== teamQuery.length) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst sortedSprintTeams = sprintTeams.slice().sort();\r\n\t\t\tconst sortedTeamQuery = teamQuery.map(t => t.value).sort();\r\n\r\n\t\t\tif (!sortedSprintTeams.every((team, i) => team === sortedTeamQuery[i])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tsprintObj.short_description = sprintGr.getValue('short_description');\r\n\t\t\tsprintObj.sys_id = sprintGr.getValue('sys_id');\r\n\t\t\tsprintObj.state = {\r\n\t\t\t\tdisplayValue: sprintGr.getDisplayValue(\"state\"),\r\n\t\t\t\tvalue: sprintGr.getValue(\"state\"),\r\n\t\t\t};\r\n\t\t\tsprintObj.story_points = sprintGr.getValue('story_points');\r\n\t\t\tsprintObj.sprint_capacity = sprintGr.getValue('sprint_capacity');\r\n\t\t\tsprintObj.capacity = sprintGr.getValue('capacity');\r\n\t\t\tsprintObj.completed_story_points = sprintGr.getValue('completed_story_points');\r\n\t\t\tsprintObj.expected_start = sprintGr.getValue('expected_start');\r\n\t\t\tsprintObj.expected_end = sprintGr.getValue('expected_end');\r\n\t\t\tsprintObj.tasks = [];\r\n\r\n\t\t\tsprintSysIDArray.push(sprintObj.sys_id);\r\n\t\t\tobjData.sprints.push(sprintObj);\r\n\t\t}\r\n\r\n\t\tif (sprintSysIDArray.length) {\r\n\t\t\tlet taskQuery = this.convertToQuery({\r\n\t\t\t\tqueryObj: taskQueriesObj,\r\n\t\t\t\ttable: 'x_cadso_work_task'\r\n\t\t\t});\r\n\r\n\t\t\tlet sprintTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n\t\t\tsprintTaskGr.addEncodedQuery(`sprint.sys_idIN${sprintSysIDArray.join(',')}`);\r\n\t\t\tsprintTaskGr.addEncodedQuery(taskQuery);\r\n\t\t\tsprintTaskGr.orderBy('index');\r\n\t\t\tsprintTaskGr.query();\r\n\r\n\t\t\twhile (sprintTaskGr.next()) {\r\n\t\t\t\tlet taskObj = {\r\n\t\t\t\t\tdisplayValue: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('short_description'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('short_description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsys_id: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"sys_id\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sys_id')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue(\"description\"),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('description')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsprint: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('sprint'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('sprint')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassignment_group: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assignment_group'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpriority: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('priority'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('priority')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tplanned_hours: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('planned_hours'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('planned_hours')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstory_points: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('story_points'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('story_points')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdue_date: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('due_date'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('due_date')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tindex: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('index'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('index')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbudget: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getValue('project') ? sprintTaskGr.getDisplayValue('project.budget') : 0,\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project') ? sprintTaskGr.getValue('project.budget') : 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tproject: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('project'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('project')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tassigned_to: {\r\n\t\t\t\t\t\tdisplayValue: sprintTaskGr.getDisplayValue('assigned_to'),\r\n\t\t\t\t\t\tvalue: sprintTaskGr.getValue('assigned_to')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tuser_dropdown_data: sprintTaskGr.getValue('assignment_group')\r\n\t\t\t\t\t\t? this.getUsersInGroup('x_cadso_work_task', sprintTaskGr.getValue('sys_id'), '')\r\n\t\t\t\t\t\t: []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (taskObj.project.value) {\r\n\t\t\t\t\ttaskObj.project.glyph_color = sprintTaskGr.getElement(\"project.glyph_color\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (taskObj.assigned_to.value) {\r\n\t\t\t\t\ttaskObj.assigned_to.avatar = sprintTaskGr.getElement(\"assigned_to.avatar\") || sprintTaskGr.getElement(\"assigned_to.photo\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobjData.sprintTasks.push(taskObj);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return objData;\r\n    },\r\n    getUsersInGroup: function(\r\n        table,\r\n        record,\r\n        queryString = \"\"\r\n    ) {\r\n        var returnUsers = [];\r\n        var taskAssignmentGR = new GlideRecordSecure(table);\r\n        taskAssignmentGR.addQuery('sys_id', record);\r\n        taskAssignmentGR.query();\r\n        while (taskAssignmentGR.next()) {\r\n            var groupId = taskAssignmentGR.getValue('assignment_group');\r\n            var groupGR = new GlideRecordSecure('sys_user_grmember');\r\n            groupGR.addQuery('user.name', 'CONTAINS', queryString);\r\n\t\t\tgroupGR.addQuery('user.active', true);\r\n            groupGR.addQuery('group', groupId);\r\n            groupGR.query();\r\n            while (groupGR.next()) {\r\n                returnUsers.push({\r\n                    value: groupGR.getValue('user'),\r\n                    label: groupGR.getDisplayValue('user'),\r\n\t\t\t\t\tavatar: groupGR.getElement('user.avatar')\r\n                });\r\n            }\r\n        }\r\n\r\n        return returnUsers;\r\n    },\r\n    getAllBacklogTasksData: function(taskQueriesObj, teamQuery) {\r\n        var taskQuery = \"\";\r\n        taskQuery = this.convertToQuery({\r\n            queryObj: taskQueriesObj,\r\n            table: 'x_cadso_work_task'\r\n        });\r\n        const backlogTasks = [];\r\n        var backlogTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n        for (let x = 0; x < teamQuery.length; x++) {\r\n\t\t\tif (!teamQuery[x]) continue;\r\n            backlogTaskGr.addEncodedQuery(\"^NQsegmentLIKE\" + teamQuery[x].value);\r\n        }\r\n        backlogTaskGr.addEncodedQuery('sprintISEMPTY');\r\n        backlogTaskGr.addEncodedQuery(taskQuery);\r\n        backlogTaskGr.query();\r\n        while (backlogTaskGr.next()) {\r\n            var taskObj = {};\r\n            taskObj.displayValue = {\r\n                displayValue: backlogTaskGr.getDisplayValue('short_description'),\r\n                value: backlogTaskGr.getValue('short_description')\r\n            };\r\n            taskObj.sys_id = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"sys_id\"),\r\n                value: backlogTaskGr.getValue('sys_id')\r\n            };\r\n            taskObj.description = {\r\n\r\n                displayValue: backlogTaskGr.getDisplayValue(\"description\"),\r\n                value: backlogTaskGr.getValue('description')\r\n            };\r\n            taskObj.sprint = {\r\n                displayValue: backlogTaskGr.getDisplayValue('sprint'),\r\n                value: backlogTaskGr.getValue('sprint')\r\n            };\r\n            taskObj.assignment_group = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assignment_group'),\r\n                value: backlogTaskGr.getValue('assignment_group')\r\n            };\r\n\r\n            taskObj.priority = {\r\n                displayValue: backlogTaskGr.getDisplayValue('priority'),\r\n                value: backlogTaskGr.getValue('priority')\r\n            };\r\n            taskObj.planned_hours = {\r\n                displayValue: backlogTaskGr.getDisplayValue('planned_hours'),\r\n                value: backlogTaskGr.getValue('planned_hours')\r\n            };\r\n            taskObj.story_points = {\r\n                displayValue: backlogTaskGr.getDisplayValue('story_points'),\r\n                value: backlogTaskGr.getValue('story_points')\r\n            };\r\n            taskObj.due_date = {\r\n                displayValue: backlogTaskGr.getDisplayValue('due_date'),\r\n                value: backlogTaskGr.getValue('due_date')\r\n            };\r\n            taskObj.index = {\r\n                displayValue: backlogTaskGr.getDisplayValue('index'),\r\n                value: backlogTaskGr.getValue('index')\r\n            };\r\n\r\n            taskObj.budget = {\r\n                displayValue: backlogTaskGr.getValue('project') ? backlogTaskGr.getDisplayValue('project.budget') : 0,\r\n                value: backlogTaskGr.getValue('project') ? backlogTaskGr.getValue('project.budget') : 0\r\n            };\r\n\r\n            taskObj.project = {\r\n                displayValue: backlogTaskGr.getDisplayValue('project'),\r\n                value: backlogTaskGr.getValue('project')\r\n            };\r\n\r\n            if (taskObj.project.value) {\r\n                taskObj.project.glyph_color = backlogTaskGr.getElement(\"project.glyph_color\");\r\n                // taskObj.project.glyph_color.value = backlogTaskGr.getElement(\"project.glyph_color\");\r\n            }\r\n\r\n            taskObj.assigned_to = {\r\n                displayValue: backlogTaskGr.getDisplayValue('assigned_to'),\r\n                value: backlogTaskGr.getValue('assigned_to')\r\n            };\r\n\r\n            if (taskObj.assigned_to.value) {\r\n                taskObj.assigned_to.avatar = backlogTaskGr.getElement(\"assigned_to.avatar\") || backlogTaskGr.getElement(\"assigned_to.photo\");\r\n            }\r\n\r\n\t\t\tif (taskObj.assignment_group.value) {\r\n                // taskObj.user_dropdown_data = this.getUsersInGroup('x_cadso_work_task', taskObj.sys_id.value, '');\r\n            } else {\r\n\t\t\t\ttaskObj.user_dropdown_data = [];\r\n\t\t\t}\r\n            // var subTaskObj = {};\r\n            // var subTasks = [];\r\n            // var subTaskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            // subTaskGr.addQuery('parent', taskObj.sys_id);\r\n            // subTaskGr.query();\r\n            // while(subTaskGr.next()){\r\n            // \tsubTasks.push(\r\n            // \t\t{\r\n            // \t\t\tsys_id : subTaskGr.getUniqueValue()\r\n            // \t\t}\r\n            // \t)\r\n            // \t//taskObj.subtasksData.count = subTaskGr.getRowCount();\r\n            // }\r\n            // subTaskObj.tasks = subTasks;\r\n            // subTaskObj.taskCount = subTaskGr.getRowCount();\r\n            // taskObj.subTaskData = subTaskObj;\r\n            backlogTasks.push(taskObj);\r\n        }\r\n\t\t\t\t// gs.info(\"WM SPRINT PLANNING BACKLOGTASKs RETURN: \" + JSON.stringify(backlogTasks))\r\n\r\n        return backlogTasks;\r\n    },\r\n\r\n    getTeamsData: function() {\r\n        const teams = [];\r\n        var teamGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n        teamGr.addEncodedQuery(\"segment.active=true^work_user.user=\" + gs.getUserID());\r\n        teamGr.query();\r\n        while (teamGr.next()) {\r\n            let team = {};\r\n            team.displayValue = teamGr.getDisplayValue('segment');\r\n            team.value = teamGr.getValue('segment');\r\n\r\n            let found = false;\r\n            for (let x = 0; x < teams.length; x++) {\r\n                if (teams[x].value === team.value) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) {\r\n                teams.push(team);\r\n            }\r\n        }\r\n        return teams;\r\n    },\r\n\r\n    sprintPlanningGetWorkGroups: function({\r\n        sprintsQueriesObj = {},\r\n        sprintsSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        tasksSort = {\r\n            sortAsc: false,\r\n            sortBys: []\r\n        },\r\n        taskQueriesObj = {},\r\n        teamQuery = [],\r\n        firstLoad = false,\r\n    }) {\r\n        let sprintsData = [];\r\n        let workGroups = {};\r\n\r\n        // these may have to take a queryObj for filtering\r\n        let teamsData = [];\r\n        let taskFieldData = [];\r\n        if (firstLoad) {\r\n            teamsData = this.getTeamsData();\r\n            teamQuery = [teamsData[0]];\r\n            taskFieldData = new x_cadso_work.GetTableDropdownsData().getData(\"x_cadso_work_task\", true);\r\n        }\r\n        if (teamQuery.length) {\r\n            sprintsData = this.getAllSprintTasksData(sprintsQueriesObj, taskQueriesObj, teamQuery);\r\n            workGroups = this.getWorkGroups(sprintsData.sprints);\r\n        }\r\n\r\n        response.setBody({\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            workGroups: workGroups\r\n        });\r\n        return response;\r\n\r\n    },\r\n\r\n    //function to update the task id \r\n    updateTaskID: function(taskList) {\r\n        for (var i = 0; i < taskList.length; i++) {\r\n            var taskGr = new GlideRecordSecure('x_cadso_work_task');\r\n            taskGr.addQuery('sys_id', taskList[i].sys_id);\r\n            taskGr.query();\r\n            if (taskGr.next()) {\r\n                taskGr.setValue('index', taskList[i].newIndex);\r\n                taskGr.update();\r\n            }\r\n        }\r\n    },\r\n\r\n    convertToQuery: function({\r\n        queryObj,\r\n        table\r\n    }) {\r\n        const queryArr = [];\r\n        if (queryObj) {\r\n            Object.keys(queryObj).forEach((_query) => {\r\n                if (queryObj[_query]) {\r\n                    // if the tableToApplyTo is the same as the table we are currently querying\r\n                    // then we add it to the queryArr\r\n                    if (queryObj[_query].tableToApplyTo === table) {\r\n                        queryArr.push(queryObj[_query].query);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        const newQuery = queryArr.join(\"^\");\r\n\r\n        return newQuery || \"\";\r\n    },\r\n\r\n    type: \"sprintPlanningMS\",\r\n});"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_a48340e7871ba510b656fe66cebb35df",
    "display_value": "sys_script_include_a48340e7871ba510b656fe66cebb35df"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.sprintPlanningMS",
    "display_value": "x_cadso_work.sprintPlanningMS"
  },
  "sys_created_on": {
    "value": "2023-06-13 22:43:54",
    "display_value": "2023-06-13 03:43:54 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "sprintPlanningMS",
    "display_value": "sprintPlanningMS"
  },
  "sys_name": {
    "value": "sprintPlanningMS",
    "display_value": "sprintPlanningMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
