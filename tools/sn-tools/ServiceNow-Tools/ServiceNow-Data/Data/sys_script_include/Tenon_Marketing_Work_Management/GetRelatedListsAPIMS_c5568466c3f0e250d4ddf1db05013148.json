{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "c5568466c3f0e250d4ddf1db05013148",
    "extracted_at": "2025-09-19T21:48:28.984Z",
    "display_value": "GetRelatedListsAPIMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "30",
    "display_value": "30"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "This script is to gather all related lists to the table using the \"sys_ui_related_list\" & \"sys_ui_related_list_entry\" tables",
    "display_value": "This script is to gather all related lists to the table using the \"sys_ui_related_list\" & \"sys_ui_related_list_entry\" tables"
  },
  "sys_updated_on": {
    "value": "2025-04-15 14:16:30",
    "display_value": "2025-04-15 07:16:30 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const GetRelatedListsAPIMS = Class.create();\r\nGetRelatedListsAPIMS.prototype = {\r\n\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        let {\r\n            table = \"\"\r\n        } = request.body.data;\r\n        let UIrealatedLists = [];\r\n        let RL_GR = new GlideRecord(\"sys_ui_related_list\");\r\n        RL_GR.addEncodedQuery(\"name=\" + table);\r\n        RL_GR.query();\r\n        while (RL_GR.next()) {\r\n            UIrealatedLists.push(RL_GR.getUniqueValue());\r\n        }\r\n\r\n        let RLTables = [];\r\n        let RL_entry_GR = new GlideRecord(\"sys_ui_related_list_entry\");\r\n        RL_entry_GR.addEncodedQuery(\"list_id.sys_idIN\" + UIrealatedLists);\r\n        RL_entry_GR.query();\r\n        while (RL_entry_GR.next()) {\r\n            RLTables.push(RL_entry_GR.getDisplayValue(\"related_list\"))\r\n        }\r\n\r\n        let parsedTables = [];\r\n        let fieldNames = [];\r\n        for (let i = 0; i < RLTables.length; i++) {\r\n            let fieldName = \"\";\r\n            if (RLTables[i] === \"\" || RLTables[i] === undefined) {\r\n                continue;\r\n            }\r\n            if (RLTables[i].startsWith(\"REL:\")) {\r\n                let colonIndex = RLTables[i].indexOf(\":\");\r\n            } else if (RLTables[i].includes(\".\")) {\r\n                let periodIndex = RLTables[i].indexOf(\".\");\r\n                parsedTables.push({\r\n                    table: RLTables[i].slice(0, periodIndex),\r\n                    field: RLTables[i].slice(periodIndex + 1, RLTables[i].length)\r\n                });\r\n            }\r\n        }\r\n\r\n        const seen = {};\r\n        const result = [];\r\n\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            const {\r\n                table,\r\n                field\r\n            } = parsedTables[i];\r\n            const key = `${table}::${field}`;\r\n\r\n            if (!seen[key]) {\r\n                seen[key] = true;\r\n                result.push(parsedTables[i]);\r\n            }\r\n        }\r\n\r\n        parsedTables = result;\r\n\r\n        let RLData = [];\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            if (gs.tableExists(parsedTables[i].table)) {\r\n                const tableGR = new GlideRecord(\"sys_db_object\");\r\n                tableGR.addEncodedQuery(\"name=\" + parsedTables[i].table);\r\n                tableGR.query();\r\n                while (tableGR.next()) {\r\n                    RLData.push({\r\n                        label: tableGR.getDisplayValue(\"label\"),\r\n                        name: tableGR.getDisplayValue(\"label\") + \" -> \" + parsedTables[i].field,\r\n                        type: \"related_list\",\r\n                        value: parsedTables[i].table,\r\n                        refTable: parsedTables[i].table,\r\n                        refTableFieldName: parsedTables[i].field\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return RLData;\r\n\r\n    },\r\n\r\n\r\n    getRelatedListRecords: function(request, response) {\r\n        let {\r\n            table,\r\n            refListTable,\r\n            query,\r\n\t\t\tfieldName\r\n        } = request.body.data;\r\n        //look for the name of the field that points to the table\r\n        //\t- this could be the table\r\n        //\t- possible this is overloaded. \r\n        //\t- we will need to go through dictonary on the relatedTable and get all the data\r\n\r\n        //if that field does not exsist, the just return false. \r\n\r\n        gs.info(\"TO: \" + table + \" - \" + refListTable + \" - \" + query + \" - \" + fieldName)\r\n\r\n\r\n        let baseTableRecords = [];\r\n        let RLTable_GR = new GlideRecord(refListTable);\r\n        RLTable_GR.addEncodedQuery(query);\r\n        RLTable_GR.query();\r\n        while (RLTable_GR.next()) {\r\n\r\n            baseTableRecords.push(RLTable_GR.getValue(fieldName));\r\n        }\r\n\r\n        return \"sys_id=\" + baseTableRecords;\r\n    },\r\n}",
    "display_value": "const GetRelatedListsAPIMS = Class.create();\r\nGetRelatedListsAPIMS.prototype = {\r\n\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        let {\r\n            table = \"\"\r\n        } = request.body.data;\r\n        let UIrealatedLists = [];\r\n        let RL_GR = new GlideRecord(\"sys_ui_related_list\");\r\n        RL_GR.addEncodedQuery(\"name=\" + table);\r\n        RL_GR.query();\r\n        while (RL_GR.next()) {\r\n            UIrealatedLists.push(RL_GR.getUniqueValue());\r\n        }\r\n\r\n        let RLTables = [];\r\n        let RL_entry_GR = new GlideRecord(\"sys_ui_related_list_entry\");\r\n        RL_entry_GR.addEncodedQuery(\"list_id.sys_idIN\" + UIrealatedLists);\r\n        RL_entry_GR.query();\r\n        while (RL_entry_GR.next()) {\r\n            RLTables.push(RL_entry_GR.getDisplayValue(\"related_list\"))\r\n        }\r\n\r\n        let parsedTables = [];\r\n        let fieldNames = [];\r\n        for (let i = 0; i < RLTables.length; i++) {\r\n            let fieldName = \"\";\r\n            if (RLTables[i] === \"\" || RLTables[i] === undefined) {\r\n                continue;\r\n            }\r\n            if (RLTables[i].startsWith(\"REL:\")) {\r\n                let colonIndex = RLTables[i].indexOf(\":\");\r\n            } else if (RLTables[i].includes(\".\")) {\r\n                let periodIndex = RLTables[i].indexOf(\".\");\r\n                parsedTables.push({\r\n                    table: RLTables[i].slice(0, periodIndex),\r\n                    field: RLTables[i].slice(periodIndex + 1, RLTables[i].length)\r\n                });\r\n            }\r\n        }\r\n\r\n        const seen = {};\r\n        const result = [];\r\n\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            const {\r\n                table,\r\n                field\r\n            } = parsedTables[i];\r\n            const key = `${table}::${field}`;\r\n\r\n            if (!seen[key]) {\r\n                seen[key] = true;\r\n                result.push(parsedTables[i]);\r\n            }\r\n        }\r\n\r\n        parsedTables = result;\r\n\r\n        let RLData = [];\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            if (gs.tableExists(parsedTables[i].table)) {\r\n                const tableGR = new GlideRecord(\"sys_db_object\");\r\n                tableGR.addEncodedQuery(\"name=\" + parsedTables[i].table);\r\n                tableGR.query();\r\n                while (tableGR.next()) {\r\n                    RLData.push({\r\n                        label: tableGR.getDisplayValue(\"label\"),\r\n                        name: tableGR.getDisplayValue(\"label\") + \" -> \" + parsedTables[i].field,\r\n                        type: \"related_list\",\r\n                        value: parsedTables[i].table,\r\n                        refTable: parsedTables[i].table,\r\n                        refTableFieldName: parsedTables[i].field\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return RLData;\r\n\r\n    },\r\n\r\n\r\n    getRelatedListRecords: function(request, response) {\r\n        let {\r\n            table,\r\n            refListTable,\r\n            query,\r\n\t\t\tfieldName\r\n        } = request.body.data;\r\n        //look for the name of the field that points to the table\r\n        //\t- this could be the table\r\n        //\t- possible this is overloaded. \r\n        //\t- we will need to go through dictonary on the relatedTable and get all the data\r\n\r\n        //if that field does not exsist, the just return false. \r\n\r\n        gs.info(\"TO: \" + table + \" - \" + refListTable + \" - \" + query + \" - \" + fieldName)\r\n\r\n\r\n        let baseTableRecords = [];\r\n        let RLTable_GR = new GlideRecord(refListTable);\r\n        RLTable_GR.addEncodedQuery(query);\r\n        RLTable_GR.query();\r\n        while (RLTable_GR.next()) {\r\n\r\n            baseTableRecords.push(RLTable_GR.getValue(fieldName));\r\n        }\r\n\r\n        return \"sys_id=\" + baseTableRecords;\r\n    },\r\n}",
    "formatted_script": {
      "line_count": 114,
      "char_count": 3815,
      "preview": "const GetRelatedListsAPIMS = Class.create();\r\nGetRelatedListsAPIMS.prototype = {\r\n\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        let {\r\n            table = \"\"\r\n ...",
      "full_script": "const GetRelatedListsAPIMS = Class.create();\r\nGetRelatedListsAPIMS.prototype = {\r\n\r\n    initialize: function() {},\r\n\r\n    fetch: function(request, response) {\r\n        let {\r\n            table = \"\"\r\n        } = request.body.data;\r\n        let UIrealatedLists = [];\r\n        let RL_GR = new GlideRecord(\"sys_ui_related_list\");\r\n        RL_GR.addEncodedQuery(\"name=\" + table);\r\n        RL_GR.query();\r\n        while (RL_GR.next()) {\r\n            UIrealatedLists.push(RL_GR.getUniqueValue());\r\n        }\r\n\r\n        let RLTables = [];\r\n        let RL_entry_GR = new GlideRecord(\"sys_ui_related_list_entry\");\r\n        RL_entry_GR.addEncodedQuery(\"list_id.sys_idIN\" + UIrealatedLists);\r\n        RL_entry_GR.query();\r\n        while (RL_entry_GR.next()) {\r\n            RLTables.push(RL_entry_GR.getDisplayValue(\"related_list\"))\r\n        }\r\n\r\n        let parsedTables = [];\r\n        let fieldNames = [];\r\n        for (let i = 0; i < RLTables.length; i++) {\r\n            let fieldName = \"\";\r\n            if (RLTables[i] === \"\" || RLTables[i] === undefined) {\r\n                continue;\r\n            }\r\n            if (RLTables[i].startsWith(\"REL:\")) {\r\n                let colonIndex = RLTables[i].indexOf(\":\");\r\n            } else if (RLTables[i].includes(\".\")) {\r\n                let periodIndex = RLTables[i].indexOf(\".\");\r\n                parsedTables.push({\r\n                    table: RLTables[i].slice(0, periodIndex),\r\n                    field: RLTables[i].slice(periodIndex + 1, RLTables[i].length)\r\n                });\r\n            }\r\n        }\r\n\r\n        const seen = {};\r\n        const result = [];\r\n\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            const {\r\n                table,\r\n                field\r\n            } = parsedTables[i];\r\n            const key = `${table}::${field}`;\r\n\r\n            if (!seen[key]) {\r\n                seen[key] = true;\r\n                result.push(parsedTables[i]);\r\n            }\r\n        }\r\n\r\n        parsedTables = result;\r\n\r\n        let RLData = [];\r\n        for (let i = 0; i < parsedTables.length; i++) {\r\n            if (gs.tableExists(parsedTables[i].table)) {\r\n                const tableGR = new GlideRecord(\"sys_db_object\");\r\n                tableGR.addEncodedQuery(\"name=\" + parsedTables[i].table);\r\n                tableGR.query();\r\n                while (tableGR.next()) {\r\n                    RLData.push({\r\n                        label: tableGR.getDisplayValue(\"label\"),\r\n                        name: tableGR.getDisplayValue(\"label\") + \" -> \" + parsedTables[i].field,\r\n                        type: \"related_list\",\r\n                        value: parsedTables[i].table,\r\n                        refTable: parsedTables[i].table,\r\n                        refTableFieldName: parsedTables[i].field\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return RLData;\r\n\r\n    },\r\n\r\n\r\n    getRelatedListRecords: function(request, response) {\r\n        let {\r\n            table,\r\n            refListTable,\r\n            query,\r\n\t\t\tfieldName\r\n        } = request.body.data;\r\n        //look for the name of the field that points to the table\r\n        //\t- this could be the table\r\n        //\t- possible this is overloaded. \r\n        //\t- we will need to go through dictonary on the relatedTable and get all the data\r\n\r\n        //if that field does not exsist, the just return false. \r\n\r\n        gs.info(\"TO: \" + table + \" - \" + refListTable + \" - \" + query + \" - \" + fieldName)\r\n\r\n\r\n        let baseTableRecords = [];\r\n        let RLTable_GR = new GlideRecord(refListTable);\r\n        RLTable_GR.addEncodedQuery(query);\r\n        RLTable_GR.query();\r\n        while (RLTable_GR.next()) {\r\n\r\n            baseTableRecords.push(RLTable_GR.getValue(fieldName));\r\n        }\r\n\r\n        return \"sys_id=\" + baseTableRecords;\r\n    },\r\n}"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_c5568466c3f0e250d4ddf1db05013148",
    "display_value": "sys_script_include_c5568466c3f0e250d4ddf1db05013148"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.GetRelatedListsAPIMS",
    "display_value": "x_cadso_work.GetRelatedListsAPIMS"
  },
  "sys_created_on": {
    "value": "2025-04-11 22:31:41",
    "display_value": "2025-04-11 03:31:41 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "GetRelatedListsAPIMS",
    "display_value": "GetRelatedListsAPIMS"
  },
  "sys_name": {
    "value": "GetRelatedListsAPIMS",
    "display_value": "GetRelatedListsAPIMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
