{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "d4a01b3387232550b656fe66cebb3583",
    "extracted_at": "2025-09-19T21:48:31.480Z",
    "display_value": "UICalendarApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "355",
    "display_value": "355"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-01-08 21:30:39",
    "display_value": "2025-01-08 01:30:39 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var UICalendarApiMS = Class.create();\r\nUICalendarApiMS.prototype = {\r\n    initialize: function() {\r\n        this.table = null;\r\n        this.query = {};\r\n        this.getFields = false;\r\n        this.dateToQuery = {};\r\n        this.projects = {};\r\n        this.campaigns = {};\r\n        this.query = '';\r\n        this.startDateField = '';\r\n        this.endDateField = '';\r\n        this.assignedToField = '';\r\n        this.additionalFields = [];\r\n        this.combineQuery = '';\r\n    },\r\n\r\n    fetch: function(data, response) {\r\n        let {\r\n            table = \"\",\r\n                startDateField = \"\",\r\n                endDateField = \"\",\r\n                assignedToField = \"\",\r\n                query = {},\r\n                dateToQuery = {},\r\n                additionalFields = [],\r\n                combineQuery = false,\r\n        } = data;\r\n\r\n        this.dateToQuery = dateToQuery;\r\n        this.query = query;\r\n        this.table = table;\r\n        this.startDateField = startDateField;\r\n        this.endDateField = endDateField;\r\n        this.assignedToField = assignedToField;\r\n\t\tthis.additionalFields = additionalFields;\r\n\t\tthis.combineQuery = combineQuery;\r\n\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: [],\r\n            table,\r\n            query: {}\r\n        };\r\n\r\n        tableRecords = this._getListRecords(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery);\r\n\r\n        resData.items = tableRecords;\r\n        resData.query = this.query;\r\n        resData.table = this.table;\r\n        return resData;\r\n    },\r\n\r\n    _getListRecords: function(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery) {\r\n        const listGr = new GlideRecordSecure(table);\r\n        var combinedQuery = [];\r\n\t\t\r\n        let queries = this.query;\r\n        if (queries) {\r\n            //This loop preps the new queries to build\r\n            //If combine query property && queries && tableToApplyTo = x_cadso_work_campaign || tableToApplyTo = x_cadso_work_project\r\n            if (combineQuery == true)\r\n\t\t\t{\r\n\t\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n\t\t\t\t\t\t\tconst campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"campaign=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tconst projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"project=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tcampaignArray = [];\r\n\t\t\t\t\t\t\tvar projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n\t\t\t\t\t\t\tprojectGR.addEncodedQuery(queries[query].query);\r\n\t\t\t\t\t\t\tprojectGR.query();\r\n\t\t\t\t\t\t\twhile (projectGR.next()) {\r\n\t\t\t\t\t\t\t\tif (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n\t\t\t\t\t\t\t\t\tprojectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n\t\t\t\t\t\t\t\t\tcampaignArray.push(projectGR.getValue(\"campaign\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t// if the tableToApplyTo is the same as the table we are currently querying\r\n\t\t\t\t\t// then we add it to the combinedQuery\r\n\t\t\t\t\tif (queries[query].tableToApplyTo === table && queries[query].query) {\r\n\r\n\t\t\t\t\t\tcombinedQuery.push(queries[query].query);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n            \r\n            const tableQuery = combinedQuery.join(\"^\");\r\n            listGr.addQuery(tableQuery + \"^EQ\");\r\n        }\r\n\r\n        const {\r\n            startDay = \"\", startMonth = \"\", startYear = \"\", endDay = \"\", endMonth = \"\", endYear = \"\"\r\n        } = this.dateToQuery;\r\n        if (startDay && startMonth && startYear && endDay && endMonth && endYear) {\r\n            let startDateString = startYear + \"-\" + startMonth + \"-\" + startDay;\r\n            let endDateString = endYear + \"-\" + endMonth + \"-\" + endDay;\r\n\r\n            listGr.addEncodedQuery(endDateField + \">=javascript:gs.dateGenerate('\" + startDateString + \"','00:00:00')^\" + startDateField + \"<=javascript:gs.dateGenerate('\" + endDateString + \"','23:59:59')\");\r\n        }\r\n        listGr.orderBy(startDateField);\r\n        listGr.query();\r\n\r\n        const items = [];\r\n        while (listGr.next()) {\r\n            const item = {};\r\n\r\n            item.sys_id = {\r\n                value: listGr.getUniqueValue(),\r\n                display_value: listGr.getUniqueValue()\r\n            };\r\n            item.label = {\r\n                displayValue: listGr.getDisplayValue(),\r\n                value: listGr.getDisplayValue(),\r\n            };\r\n            item.assigned_to = {\r\n                displayValue: listGr.getDisplayValue(assignedToField),\r\n                value: listGr.getValue(assignedToField)\r\n            };\r\n            // if(table == \"x_cadso_work_campaign\" || table == \"x_cadso_work_project\"){\r\n            // item.project_owner = {\r\n            //     displayValue: listGr.getDisplayValue('project_owner'),\r\n            //     value: listGr.getValue(\"project_owner\")\r\n            // };\r\n            // }\r\n            item.table = table;\r\n\t\t\t if (table == \"x_cadso_work_project\") {\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n\r\n            if (table == \"x_cadso_work_task\") {\r\n                item.project = {\r\n                    displayValue: listGr.getDisplayValue('project'),\r\n                    value: listGr.getValue('project'),\r\n                }\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n            if (additionalFields) {\r\n\r\n                var fieldsArr = [];\r\n                for (let i = 0; i < additionalFields.length; i++) {\r\n                    var obj = {};\r\n                    if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\" && additionalFields[i] == \"campaign_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.campaign.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.campaign.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n\r\n                    } else if (table == \"x_cadso_work_task\" && additionalFields[i] == \"project_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.project.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.project.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n                    } else {\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.getDisplayValue(additionalFields[i]);\r\n                        obj.value = listGr.getValue(additionalFields[i]);\r\n                        fieldsArr.push(obj);\r\n                    }\r\n                }\r\n                item.additionalFields = fieldsArr;\r\n\r\n            }\r\n\r\n\r\n            // IMPORTANT : we are keeping the expected_start & expected_end names to avoid changes to the component\r\n            // we are dynamiclly passing the field names but using diffrent field names in the compoenent\r\n            item.expected_start = listGr.getValue(startDateField);\r\n            item.expected_end = listGr.getValue(endDateField);\r\n\r\n\r\n            // if (table == \"x_cadso_work_campaign\") {\r\n            //     item.color = listGr.getValue('glyph_color');\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_project\") {\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     item.project = {\r\n            //         displayValue: listGr.getDisplayValue('project'),\r\n            //         value: listGr.getValue('project'),\r\n            //     }\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\") {\r\n            //     if (item.campaign.value) {\r\n            //         item.campaign.campaign_color = listGr.campaign.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     if (item.project.value) {\r\n            //         item.project.project_color = listGr.project.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            if (item.assigned_to && item.assigned_to.value) {\r\n\r\n                var extAvatar = listGr.getElement(assignedToField + \".avatar\") || listGr.getElement(assignedToField + \".photo\");\r\n                if (extAvatar) {\r\n                    extAvatar = extAvatar + '.iix';\r\n                }\r\n                item.assigned_to.avatar = extAvatar || '';\r\n            }\r\n            if (item.project_owner && item.project_owner.value) {\r\n                var extAvatarProj = listGr.project_owner.avatar || listGr.project_owner.photo;\r\n                if (extAvatarProj) {\r\n                    extAvatarProj = extAvatarProj + '.iix';\r\n                }\r\n                item.project_owner.avatar = extAvatarProj || '';\r\n            }\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n\r\n\r\n    _getCachedAvatar: function({\r\n        userSysId,\r\n        recordGr,\r\n        fieldName\r\n    }) {\r\n        if (!this.userAvatars || typeof this.userAvatars !== 'object') {\r\n            this.userAvatars = {};\r\n            // return '';\r\n        }\r\n\r\n        if (this.userAvatars[userSysId]) {\r\n            return this.userAvatars[userSysId];\r\n        }\r\n\r\n\r\n        const sysUserGr = recordGr[fieldName].getRefRecord();\r\n        if (!sysUserGr.isValidRecord()) return '';\r\n\r\n        let avatar = sysUserGr.getValue('avatar');\r\n        avatar = avatar == null ? '' : avatar;\r\n        let photo = sysUserGr.getValue('photo');\r\n        photo = photo == null ? '' : photo;\r\n        const userAvatar = avatar || photo;\r\n        this.userAvatars[userSysId] = userAvatar + '.iix';\r\n\r\n        return this.userAvatars[userSysId];\r\n    },\r\n\r\n\r\n    getUpdatedAvatar: function(data, response) {\r\n        let {\r\n            userSysId = \"\",\r\n                recordSysId = \"\",\r\n                fieldName = \"\",\r\n        } = data;\r\n\r\n        if (recordSysId === \"\" || userSysId === \"\" || fieldName === \"\") {\r\n            return {\r\n                message: 'Error!',\r\n                statusCode: 400,\r\n                userAvatar: \"\",\r\n            }\r\n        }\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            userAvatar: \"\",\r\n            recordSysId,\r\n            fieldName,\r\n            displayValue: \"\",\r\n        };\r\n\r\n\r\n        const sysUserGR = new GlideRecord(\"sys_user\");\r\n        sysUserGR.addEncodedQuery(\"sys_id=\" + userSysId);\r\n        sysUserGR.query();\r\n        while (sysUserGR.next()) {\r\n            let avatar = sysUserGR.getValue('avatar');\r\n            avatar = avatar == null ? '' : avatar;\r\n            let photo = sysUserGR.getValue('photo');\r\n            photo = photo == null ? '' : photo;\r\n            const userAvatar = avatar || photo;\r\n            resData.userAvatar = userAvatar ? userAvatar + '.iix' : '';\r\n            let firstName = sysUserGR.getValue('first_name');\r\n            resData.displayValue = firstName ? firstName + ' ' : '';\r\n            let lastName = sysUserGR.getValue('last_name');\r\n            resData.displayValue += lastName ? lastName : '';\r\n        }\r\n        return resData;\r\n    },\r\n    getCustomQuery: function(queries) {\r\n        Object.keys(queries).forEach((query) => {\r\n            if (queries[query]) {\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n                    const campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"campaign=\");\r\n                    });\r\n                    queries.addedProjectFilterFromCampaign = {};\r\n                    queries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n                    queries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n                    queries.addedTaskFilterFromCampaign = {};\r\n                    queries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n                }\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) {\r\n                    const projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"\");\r\n                    });\r\n                    const projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"project=\");\r\n                    });\r\n                    campaignArray = [];\r\n                    var projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n                    projectGR.addEncodedQuery(queries[query].query);\r\n                    projectGR.query();\r\n                    while (projectGR.next()) {\r\n                        if (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n                            projectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n                            campaignArray.push(projectGR.getValue(\"campaign\"));\r\n                        }\r\n                    }\r\n                    queries.addedCampaignFilterFromProject = {};\r\n                    queries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n                    queries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n                    queries.addedTaskFilterFromProject = {};\r\n                    queries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n                }\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n\r\n    type: 'UICalendarApiMS'\r\n};",
    "display_value": "var UICalendarApiMS = Class.create();\r\nUICalendarApiMS.prototype = {\r\n    initialize: function() {\r\n        this.table = null;\r\n        this.query = {};\r\n        this.getFields = false;\r\n        this.dateToQuery = {};\r\n        this.projects = {};\r\n        this.campaigns = {};\r\n        this.query = '';\r\n        this.startDateField = '';\r\n        this.endDateField = '';\r\n        this.assignedToField = '';\r\n        this.additionalFields = [];\r\n        this.combineQuery = '';\r\n    },\r\n\r\n    fetch: function(data, response) {\r\n        let {\r\n            table = \"\",\r\n                startDateField = \"\",\r\n                endDateField = \"\",\r\n                assignedToField = \"\",\r\n                query = {},\r\n                dateToQuery = {},\r\n                additionalFields = [],\r\n                combineQuery = false,\r\n        } = data;\r\n\r\n        this.dateToQuery = dateToQuery;\r\n        this.query = query;\r\n        this.table = table;\r\n        this.startDateField = startDateField;\r\n        this.endDateField = endDateField;\r\n        this.assignedToField = assignedToField;\r\n\t\tthis.additionalFields = additionalFields;\r\n\t\tthis.combineQuery = combineQuery;\r\n\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: [],\r\n            table,\r\n            query: {}\r\n        };\r\n\r\n        tableRecords = this._getListRecords(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery);\r\n\r\n        resData.items = tableRecords;\r\n        resData.query = this.query;\r\n        resData.table = this.table;\r\n        return resData;\r\n    },\r\n\r\n    _getListRecords: function(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery) {\r\n        const listGr = new GlideRecordSecure(table);\r\n        var combinedQuery = [];\r\n\t\t\r\n        let queries = this.query;\r\n        if (queries) {\r\n            //This loop preps the new queries to build\r\n            //If combine query property && queries && tableToApplyTo = x_cadso_work_campaign || tableToApplyTo = x_cadso_work_project\r\n            if (combineQuery == true)\r\n\t\t\t{\r\n\t\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n\t\t\t\t\t\t\tconst campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"campaign=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tconst projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"project=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tcampaignArray = [];\r\n\t\t\t\t\t\t\tvar projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n\t\t\t\t\t\t\tprojectGR.addEncodedQuery(queries[query].query);\r\n\t\t\t\t\t\t\tprojectGR.query();\r\n\t\t\t\t\t\t\twhile (projectGR.next()) {\r\n\t\t\t\t\t\t\t\tif (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n\t\t\t\t\t\t\t\t\tprojectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n\t\t\t\t\t\t\t\t\tcampaignArray.push(projectGR.getValue(\"campaign\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t// if the tableToApplyTo is the same as the table we are currently querying\r\n\t\t\t\t\t// then we add it to the combinedQuery\r\n\t\t\t\t\tif (queries[query].tableToApplyTo === table && queries[query].query) {\r\n\r\n\t\t\t\t\t\tcombinedQuery.push(queries[query].query);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n            \r\n            const tableQuery = combinedQuery.join(\"^\");\r\n            listGr.addQuery(tableQuery + \"^EQ\");\r\n        }\r\n\r\n        const {\r\n            startDay = \"\", startMonth = \"\", startYear = \"\", endDay = \"\", endMonth = \"\", endYear = \"\"\r\n        } = this.dateToQuery;\r\n        if (startDay && startMonth && startYear && endDay && endMonth && endYear) {\r\n            let startDateString = startYear + \"-\" + startMonth + \"-\" + startDay;\r\n            let endDateString = endYear + \"-\" + endMonth + \"-\" + endDay;\r\n\r\n            listGr.addEncodedQuery(endDateField + \">=javascript:gs.dateGenerate('\" + startDateString + \"','00:00:00')^\" + startDateField + \"<=javascript:gs.dateGenerate('\" + endDateString + \"','23:59:59')\");\r\n        }\r\n        listGr.orderBy(startDateField);\r\n        listGr.query();\r\n\r\n        const items = [];\r\n        while (listGr.next()) {\r\n            const item = {};\r\n\r\n            item.sys_id = {\r\n                value: listGr.getUniqueValue(),\r\n                display_value: listGr.getUniqueValue()\r\n            };\r\n            item.label = {\r\n                displayValue: listGr.getDisplayValue(),\r\n                value: listGr.getDisplayValue(),\r\n            };\r\n            item.assigned_to = {\r\n                displayValue: listGr.getDisplayValue(assignedToField),\r\n                value: listGr.getValue(assignedToField)\r\n            };\r\n            // if(table == \"x_cadso_work_campaign\" || table == \"x_cadso_work_project\"){\r\n            // item.project_owner = {\r\n            //     displayValue: listGr.getDisplayValue('project_owner'),\r\n            //     value: listGr.getValue(\"project_owner\")\r\n            // };\r\n            // }\r\n            item.table = table;\r\n\t\t\t if (table == \"x_cadso_work_project\") {\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n\r\n            if (table == \"x_cadso_work_task\") {\r\n                item.project = {\r\n                    displayValue: listGr.getDisplayValue('project'),\r\n                    value: listGr.getValue('project'),\r\n                }\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n            if (additionalFields) {\r\n\r\n                var fieldsArr = [];\r\n                for (let i = 0; i < additionalFields.length; i++) {\r\n                    var obj = {};\r\n                    if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\" && additionalFields[i] == \"campaign_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.campaign.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.campaign.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n\r\n                    } else if (table == \"x_cadso_work_task\" && additionalFields[i] == \"project_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.project.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.project.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n                    } else {\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.getDisplayValue(additionalFields[i]);\r\n                        obj.value = listGr.getValue(additionalFields[i]);\r\n                        fieldsArr.push(obj);\r\n                    }\r\n                }\r\n                item.additionalFields = fieldsArr;\r\n\r\n            }\r\n\r\n\r\n            // IMPORTANT : we are keeping the expected_start & expected_end names to avoid changes to the component\r\n            // we are dynamiclly passing the field names but using diffrent field names in the compoenent\r\n            item.expected_start = listGr.getValue(startDateField);\r\n            item.expected_end = listGr.getValue(endDateField);\r\n\r\n\r\n            // if (table == \"x_cadso_work_campaign\") {\r\n            //     item.color = listGr.getValue('glyph_color');\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_project\") {\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     item.project = {\r\n            //         displayValue: listGr.getDisplayValue('project'),\r\n            //         value: listGr.getValue('project'),\r\n            //     }\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\") {\r\n            //     if (item.campaign.value) {\r\n            //         item.campaign.campaign_color = listGr.campaign.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     if (item.project.value) {\r\n            //         item.project.project_color = listGr.project.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            if (item.assigned_to && item.assigned_to.value) {\r\n\r\n                var extAvatar = listGr.getElement(assignedToField + \".avatar\") || listGr.getElement(assignedToField + \".photo\");\r\n                if (extAvatar) {\r\n                    extAvatar = extAvatar + '.iix';\r\n                }\r\n                item.assigned_to.avatar = extAvatar || '';\r\n            }\r\n            if (item.project_owner && item.project_owner.value) {\r\n                var extAvatarProj = listGr.project_owner.avatar || listGr.project_owner.photo;\r\n                if (extAvatarProj) {\r\n                    extAvatarProj = extAvatarProj + '.iix';\r\n                }\r\n                item.project_owner.avatar = extAvatarProj || '';\r\n            }\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n\r\n\r\n    _getCachedAvatar: function({\r\n        userSysId,\r\n        recordGr,\r\n        fieldName\r\n    }) {\r\n        if (!this.userAvatars || typeof this.userAvatars !== 'object') {\r\n            this.userAvatars = {};\r\n            // return '';\r\n        }\r\n\r\n        if (this.userAvatars[userSysId]) {\r\n            return this.userAvatars[userSysId];\r\n        }\r\n\r\n\r\n        const sysUserGr = recordGr[fieldName].getRefRecord();\r\n        if (!sysUserGr.isValidRecord()) return '';\r\n\r\n        let avatar = sysUserGr.getValue('avatar');\r\n        avatar = avatar == null ? '' : avatar;\r\n        let photo = sysUserGr.getValue('photo');\r\n        photo = photo == null ? '' : photo;\r\n        const userAvatar = avatar || photo;\r\n        this.userAvatars[userSysId] = userAvatar + '.iix';\r\n\r\n        return this.userAvatars[userSysId];\r\n    },\r\n\r\n\r\n    getUpdatedAvatar: function(data, response) {\r\n        let {\r\n            userSysId = \"\",\r\n                recordSysId = \"\",\r\n                fieldName = \"\",\r\n        } = data;\r\n\r\n        if (recordSysId === \"\" || userSysId === \"\" || fieldName === \"\") {\r\n            return {\r\n                message: 'Error!',\r\n                statusCode: 400,\r\n                userAvatar: \"\",\r\n            }\r\n        }\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            userAvatar: \"\",\r\n            recordSysId,\r\n            fieldName,\r\n            displayValue: \"\",\r\n        };\r\n\r\n\r\n        const sysUserGR = new GlideRecord(\"sys_user\");\r\n        sysUserGR.addEncodedQuery(\"sys_id=\" + userSysId);\r\n        sysUserGR.query();\r\n        while (sysUserGR.next()) {\r\n            let avatar = sysUserGR.getValue('avatar');\r\n            avatar = avatar == null ? '' : avatar;\r\n            let photo = sysUserGR.getValue('photo');\r\n            photo = photo == null ? '' : photo;\r\n            const userAvatar = avatar || photo;\r\n            resData.userAvatar = userAvatar ? userAvatar + '.iix' : '';\r\n            let firstName = sysUserGR.getValue('first_name');\r\n            resData.displayValue = firstName ? firstName + ' ' : '';\r\n            let lastName = sysUserGR.getValue('last_name');\r\n            resData.displayValue += lastName ? lastName : '';\r\n        }\r\n        return resData;\r\n    },\r\n    getCustomQuery: function(queries) {\r\n        Object.keys(queries).forEach((query) => {\r\n            if (queries[query]) {\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n                    const campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"campaign=\");\r\n                    });\r\n                    queries.addedProjectFilterFromCampaign = {};\r\n                    queries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n                    queries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n                    queries.addedTaskFilterFromCampaign = {};\r\n                    queries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n                }\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) {\r\n                    const projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"\");\r\n                    });\r\n                    const projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"project=\");\r\n                    });\r\n                    campaignArray = [];\r\n                    var projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n                    projectGR.addEncodedQuery(queries[query].query);\r\n                    projectGR.query();\r\n                    while (projectGR.next()) {\r\n                        if (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n                            projectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n                            campaignArray.push(projectGR.getValue(\"campaign\"));\r\n                        }\r\n                    }\r\n                    queries.addedCampaignFilterFromProject = {};\r\n                    queries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n                    queries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n                    queries.addedTaskFilterFromProject = {};\r\n                    queries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n                }\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n\r\n    type: 'UICalendarApiMS'\r\n};",
    "formatted_script": {
      "line_count": 389,
      "char_count": 15791,
      "preview": "var UICalendarApiMS = Class.create();\r\nUICalendarApiMS.prototype = {\r\n    initialize: function() {\r\n        this.table = null;\r\n        this.query = {};\r\n        this.getFields = false;\r\n        this....",
      "full_script": "var UICalendarApiMS = Class.create();\r\nUICalendarApiMS.prototype = {\r\n    initialize: function() {\r\n        this.table = null;\r\n        this.query = {};\r\n        this.getFields = false;\r\n        this.dateToQuery = {};\r\n        this.projects = {};\r\n        this.campaigns = {};\r\n        this.query = '';\r\n        this.startDateField = '';\r\n        this.endDateField = '';\r\n        this.assignedToField = '';\r\n        this.additionalFields = [];\r\n        this.combineQuery = '';\r\n    },\r\n\r\n    fetch: function(data, response) {\r\n        let {\r\n            table = \"\",\r\n                startDateField = \"\",\r\n                endDateField = \"\",\r\n                assignedToField = \"\",\r\n                query = {},\r\n                dateToQuery = {},\r\n                additionalFields = [],\r\n                combineQuery = false,\r\n        } = data;\r\n\r\n        this.dateToQuery = dateToQuery;\r\n        this.query = query;\r\n        this.table = table;\r\n        this.startDateField = startDateField;\r\n        this.endDateField = endDateField;\r\n        this.assignedToField = assignedToField;\r\n\t\tthis.additionalFields = additionalFields;\r\n\t\tthis.combineQuery = combineQuery;\r\n\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            items: [],\r\n            table,\r\n            query: {}\r\n        };\r\n\r\n        tableRecords = this._getListRecords(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery);\r\n\r\n        resData.items = tableRecords;\r\n        resData.query = this.query;\r\n        resData.table = this.table;\r\n        return resData;\r\n    },\r\n\r\n    _getListRecords: function(table, startDateField, endDateField, assignedToField,additionalFields,combineQuery) {\r\n        const listGr = new GlideRecordSecure(table);\r\n        var combinedQuery = [];\r\n\t\t\r\n        let queries = this.query;\r\n        if (queries) {\r\n            //This loop preps the new queries to build\r\n            //If combine query property && queries && tableToApplyTo = x_cadso_work_campaign || tableToApplyTo = x_cadso_work_project\r\n            if (combineQuery == true)\r\n\t\t\t{\r\n\t\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n\t\t\t\t\t\t\tconst campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"campaign=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n\t\t\t\t\t\t\tqueries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tconst projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n\t\t\t\t\t\t\t\treturn sysId.replace(\"sys_id=\", \"project=\");\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tcampaignArray = [];\r\n\t\t\t\t\t\t\tvar projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n\t\t\t\t\t\t\tprojectGR.addEncodedQuery(queries[query].query);\r\n\t\t\t\t\t\t\tprojectGR.query();\r\n\t\t\t\t\t\t\twhile (projectGR.next()) {\r\n\t\t\t\t\t\t\t\tif (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n\t\t\t\t\t\t\t\t\tprojectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n\t\t\t\t\t\t\t\t\tcampaignArray.push(projectGR.getValue(\"campaign\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n\t\t\t\t\t\t\tqueries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject = {};\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n\t\t\t\t\t\t\tqueries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tObject.keys(queries).forEach((query) => {\r\n\t\t\t\tif (queries[query]) {\r\n\t\t\t\t\t// if the tableToApplyTo is the same as the table we are currently querying\r\n\t\t\t\t\t// then we add it to the combinedQuery\r\n\t\t\t\t\tif (queries[query].tableToApplyTo === table && queries[query].query) {\r\n\r\n\t\t\t\t\t\tcombinedQuery.push(queries[query].query);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n            \r\n            const tableQuery = combinedQuery.join(\"^\");\r\n            listGr.addQuery(tableQuery + \"^EQ\");\r\n        }\r\n\r\n        const {\r\n            startDay = \"\", startMonth = \"\", startYear = \"\", endDay = \"\", endMonth = \"\", endYear = \"\"\r\n        } = this.dateToQuery;\r\n        if (startDay && startMonth && startYear && endDay && endMonth && endYear) {\r\n            let startDateString = startYear + \"-\" + startMonth + \"-\" + startDay;\r\n            let endDateString = endYear + \"-\" + endMonth + \"-\" + endDay;\r\n\r\n            listGr.addEncodedQuery(endDateField + \">=javascript:gs.dateGenerate('\" + startDateString + \"','00:00:00')^\" + startDateField + \"<=javascript:gs.dateGenerate('\" + endDateString + \"','23:59:59')\");\r\n        }\r\n        listGr.orderBy(startDateField);\r\n        listGr.query();\r\n\r\n        const items = [];\r\n        while (listGr.next()) {\r\n            const item = {};\r\n\r\n            item.sys_id = {\r\n                value: listGr.getUniqueValue(),\r\n                display_value: listGr.getUniqueValue()\r\n            };\r\n            item.label = {\r\n                displayValue: listGr.getDisplayValue(),\r\n                value: listGr.getDisplayValue(),\r\n            };\r\n            item.assigned_to = {\r\n                displayValue: listGr.getDisplayValue(assignedToField),\r\n                value: listGr.getValue(assignedToField)\r\n            };\r\n            // if(table == \"x_cadso_work_campaign\" || table == \"x_cadso_work_project\"){\r\n            // item.project_owner = {\r\n            //     displayValue: listGr.getDisplayValue('project_owner'),\r\n            //     value: listGr.getValue(\"project_owner\")\r\n            // };\r\n            // }\r\n            item.table = table;\r\n\t\t\t if (table == \"x_cadso_work_project\") {\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n\r\n            if (table == \"x_cadso_work_task\") {\r\n                item.project = {\r\n                    displayValue: listGr.getDisplayValue('project'),\r\n                    value: listGr.getValue('project'),\r\n                }\r\n                item.campaign = {\r\n                    displayValue: listGr.getDisplayValue('campaign'),\r\n                    value: listGr.getValue('campaign'),\r\n                };\r\n            }\r\n            if (additionalFields) {\r\n\r\n                var fieldsArr = [];\r\n                for (let i = 0; i < additionalFields.length; i++) {\r\n                    var obj = {};\r\n                    if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\" && additionalFields[i] == \"campaign_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.campaign.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.campaign.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n\r\n                    } else if (table == \"x_cadso_work_task\" && additionalFields[i] == \"project_color\") {\r\n\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.project.glyph_color.getDisplayValue();\r\n                        obj.value = listGr.project.glyph_color;\r\n\t\t\t\t\t\tfieldsArr.push(obj);\r\n                    } else {\r\n                        obj.field = additionalFields[i];\r\n                        obj.displayValue = listGr.getDisplayValue(additionalFields[i]);\r\n                        obj.value = listGr.getValue(additionalFields[i]);\r\n                        fieldsArr.push(obj);\r\n                    }\r\n                }\r\n                item.additionalFields = fieldsArr;\r\n\r\n            }\r\n\r\n\r\n            // IMPORTANT : we are keeping the expected_start & expected_end names to avoid changes to the component\r\n            // we are dynamiclly passing the field names but using diffrent field names in the compoenent\r\n            item.expected_start = listGr.getValue(startDateField);\r\n            item.expected_end = listGr.getValue(endDateField);\r\n\r\n\r\n            // if (table == \"x_cadso_work_campaign\") {\r\n            //     item.color = listGr.getValue('glyph_color');\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_project\") {\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     item.project = {\r\n            //         displayValue: listGr.getDisplayValue('project'),\r\n            //         value: listGr.getValue('project'),\r\n            //     }\r\n            //     item.campaign = {\r\n            //         displayValue: listGr.getDisplayValue('campaign'),\r\n            //         value: listGr.getValue('campaign'),\r\n            //     };\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\" || table == \"x_cadso_work_project\") {\r\n            //     if (item.campaign.value) {\r\n            //         item.campaign.campaign_color = listGr.campaign.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            // if (table == \"x_cadso_work_task\") {\r\n            //     if (item.project.value) {\r\n            //         item.project.project_color = listGr.project.glyph_color;\r\n            //     }\r\n            // }\r\n\r\n            if (item.assigned_to && item.assigned_to.value) {\r\n\r\n                var extAvatar = listGr.getElement(assignedToField + \".avatar\") || listGr.getElement(assignedToField + \".photo\");\r\n                if (extAvatar) {\r\n                    extAvatar = extAvatar + '.iix';\r\n                }\r\n                item.assigned_to.avatar = extAvatar || '';\r\n            }\r\n            if (item.project_owner && item.project_owner.value) {\r\n                var extAvatarProj = listGr.project_owner.avatar || listGr.project_owner.photo;\r\n                if (extAvatarProj) {\r\n                    extAvatarProj = extAvatarProj + '.iix';\r\n                }\r\n                item.project_owner.avatar = extAvatarProj || '';\r\n            }\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    },\r\n\r\n\r\n\r\n    _getCachedAvatar: function({\r\n        userSysId,\r\n        recordGr,\r\n        fieldName\r\n    }) {\r\n        if (!this.userAvatars || typeof this.userAvatars !== 'object') {\r\n            this.userAvatars = {};\r\n            // return '';\r\n        }\r\n\r\n        if (this.userAvatars[userSysId]) {\r\n            return this.userAvatars[userSysId];\r\n        }\r\n\r\n\r\n        const sysUserGr = recordGr[fieldName].getRefRecord();\r\n        if (!sysUserGr.isValidRecord()) return '';\r\n\r\n        let avatar = sysUserGr.getValue('avatar');\r\n        avatar = avatar == null ? '' : avatar;\r\n        let photo = sysUserGr.getValue('photo');\r\n        photo = photo == null ? '' : photo;\r\n        const userAvatar = avatar || photo;\r\n        this.userAvatars[userSysId] = userAvatar + '.iix';\r\n\r\n        return this.userAvatars[userSysId];\r\n    },\r\n\r\n\r\n    getUpdatedAvatar: function(data, response) {\r\n        let {\r\n            userSysId = \"\",\r\n                recordSysId = \"\",\r\n                fieldName = \"\",\r\n        } = data;\r\n\r\n        if (recordSysId === \"\" || userSysId === \"\" || fieldName === \"\") {\r\n            return {\r\n                message: 'Error!',\r\n                statusCode: 400,\r\n                userAvatar: \"\",\r\n            }\r\n        }\r\n\r\n        let resData = {\r\n            message: 'Success!',\r\n            statusCode: 200,\r\n            userAvatar: \"\",\r\n            recordSysId,\r\n            fieldName,\r\n            displayValue: \"\",\r\n        };\r\n\r\n\r\n        const sysUserGR = new GlideRecord(\"sys_user\");\r\n        sysUserGR.addEncodedQuery(\"sys_id=\" + userSysId);\r\n        sysUserGR.query();\r\n        while (sysUserGR.next()) {\r\n            let avatar = sysUserGR.getValue('avatar');\r\n            avatar = avatar == null ? '' : avatar;\r\n            let photo = sysUserGR.getValue('photo');\r\n            photo = photo == null ? '' : photo;\r\n            const userAvatar = avatar || photo;\r\n            resData.userAvatar = userAvatar ? userAvatar + '.iix' : '';\r\n            let firstName = sysUserGR.getValue('first_name');\r\n            resData.displayValue = firstName ? firstName + ' ' : '';\r\n            let lastName = sysUserGR.getValue('last_name');\r\n            resData.displayValue += lastName ? lastName : '';\r\n        }\r\n        return resData;\r\n    },\r\n    getCustomQuery: function(queries) {\r\n        Object.keys(queries).forEach((query) => {\r\n            if (queries[query]) {\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_campaign\" && queries[query].query) {\r\n                    const campaignQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"campaign=\");\r\n                    });\r\n                    queries.addedProjectFilterFromCampaign = {};\r\n                    queries.addedProjectFilterFromCampaign.tableToApplyTo = \"x_cadso_work_project\";\r\n                    queries.addedProjectFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n\r\n                    queries.addedTaskFilterFromCampaign = {};\r\n                    queries.addedTaskFilterFromCampaign.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromCampaign.query = campaignQuery.join(\"^OR\");\r\n                }\r\n                if (queries[query].tableToApplyTo === \"x_cadso_work_project\" && queries[query].query) {\r\n                    const projectSysIds = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"\");\r\n                    });\r\n                    const projectQuery = queries[query].query.split(\"^OR\").map((sysId) => {\r\n                        return sysId.replace(\"sys_id=\", \"project=\");\r\n                    });\r\n                    campaignArray = [];\r\n                    var projectGR = new GlideRecord(\"x_cadso_work_project\");\r\n                    projectGR.addEncodedQuery(queries[query].query);\r\n                    projectGR.query();\r\n                    while (projectGR.next()) {\r\n                        if (projectGR.getValue('campaign') !== \"\" && projectGR.getValue('campaign') !== null &&\r\n                            projectGR.getValue('campaign') !== \"null\" && projectGR.getValue('campaign') !== undefined) {\r\n                            campaignArray.push(projectGR.getValue(\"campaign\"));\r\n                        }\r\n                    }\r\n                    queries.addedCampaignFilterFromProject = {};\r\n                    queries.addedCampaignFilterFromProject.tableToApplyTo = \"x_cadso_work_campaign\";\r\n                    queries.addedCampaignFilterFromProject.query = \"sys_idIN\" + campaignArray;\r\n\r\n                    queries.addedTaskFilterFromProject = {};\r\n                    queries.addedTaskFilterFromProject.tableToApplyTo = \"x_cadso_work_task\";\r\n                    queries.addedTaskFilterFromProject.query = projectQuery.join(\"^OR\");\r\n                }\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n\r\n    type: 'UICalendarApiMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_d4a01b3387232550b656fe66cebb3583",
    "display_value": "sys_script_include_d4a01b3387232550b656fe66cebb3583"
  },
  "sys_updated_by": {
    "value": "will.mcgill",
    "display_value": "will.mcgill"
  },
  "api_name": {
    "value": "x_cadso_work.UICalendarApiMS",
    "display_value": "x_cadso_work.UICalendarApiMS"
  },
  "sys_created_on": {
    "value": "2023-06-27 18:33:51",
    "display_value": "2023-06-27 11:33:51 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "UICalendarApiMS",
    "display_value": "UICalendarApiMS"
  },
  "sys_name": {
    "value": "UICalendarApiMS",
    "display_value": "UICalendarApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
