{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "77565f3597907550ac33f109c253af14",
    "extracted_at": "2025-09-19T21:48:31.418Z",
    "display_value": "TimeManagementHelperMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "56",
    "display_value": "56"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2023-11-07 01:02:50",
    "display_value": "2023-11-06 05:02:50 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const TimeManagementHelperMS = Class.create();\nTimeManagementHelperMS.prototype = {\n  initialize: function () {},\n\n  /**\n   * @function calculateDateFromDuration\n   * @description Calculates the end date based on the start date and duration\n   * @param {object} dateDurationAndIsUser Date display value, duration string, and isUser boolean\n   * @param {String} dateAndDuration.startDate GlideDateTime Display Value\n   * @param {String} dateAndDuration.duration Value of GlideDuration\n   * @param {Boolean} dateAndDuration.isUser Is the user calling the function\n   * @return {object} response Object with date and duration\n   * @return {GlideDateTime} response.date Glide Date Time object\n   * @return {String} response.duration Value of GlideDuration\n   * @example\n   * var answer = api.calculateDateFromDuration({ startDate: current.getDisplayValue('expected_start'), duration: current.duration })\n   * current.setValue('expected_end', answer.date);\n   */\n  calculateDateFromDuration: function ({ startDate, duration, isUser = false }) {\n    let _duration = new GlideDateTime(duration);\n    _duration = _duration.getNumericValue();\n    _duration = _duration / 1000;\n    const date = new GlideDateTime();\n    date.setDisplayValue(startDate);\n    const offset = isUser ? 0 : date.getTZOffset() / 1000;\n    const seconds = _duration + offset;\n    date.addSeconds(seconds);\n    return { date, duration: _duration * 1000 };\n  },\n\n  type: \"TimeManagementHelperMS\",\n};\n",
    "display_value": "const TimeManagementHelperMS = Class.create();\nTimeManagementHelperMS.prototype = {\n  initialize: function () {},\n\n  /**\n   * @function calculateDateFromDuration\n   * @description Calculates the end date based on the start date and duration\n   * @param {object} dateDurationAndIsUser Date display value, duration string, and isUser boolean\n   * @param {String} dateAndDuration.startDate GlideDateTime Display Value\n   * @param {String} dateAndDuration.duration Value of GlideDuration\n   * @param {Boolean} dateAndDuration.isUser Is the user calling the function\n   * @return {object} response Object with date and duration\n   * @return {GlideDateTime} response.date Glide Date Time object\n   * @return {String} response.duration Value of GlideDuration\n   * @example\n   * var answer = api.calculateDateFromDuration({ startDate: current.getDisplayValue('expected_start'), duration: current.duration })\n   * current.setValue('expected_end', answer.date);\n   */\n  calculateDateFromDuration: function ({ startDate, duration, isUser = false }) {\n    let _duration = new GlideDateTime(duration);\n    _duration = _duration.getNumericValue();\n    _duration = _duration / 1000;\n    const date = new GlideDateTime();\n    date.setDisplayValue(startDate);\n    const offset = isUser ? 0 : date.getTZOffset() / 1000;\n    const seconds = _duration + offset;\n    date.addSeconds(seconds);\n    return { date, duration: _duration * 1000 };\n  },\n\n  type: \"TimeManagementHelperMS\",\n};\n",
    "formatted_script": {
      "line_count": 33,
      "char_count": 1464,
      "preview": "const TimeManagementHelperMS = Class.create();\nTimeManagementHelperMS.prototype = {\n  initialize: function () {},\n\n  /**\n   * @function calculateDateFromDuration\n   * @description Calculates the end d...",
      "full_script": "const TimeManagementHelperMS = Class.create();\nTimeManagementHelperMS.prototype = {\n  initialize: function () {},\n\n  /**\n   * @function calculateDateFromDuration\n   * @description Calculates the end date based on the start date and duration\n   * @param {object} dateDurationAndIsUser Date display value, duration string, and isUser boolean\n   * @param {String} dateAndDuration.startDate GlideDateTime Display Value\n   * @param {String} dateAndDuration.duration Value of GlideDuration\n   * @param {Boolean} dateAndDuration.isUser Is the user calling the function\n   * @return {object} response Object with date and duration\n   * @return {GlideDateTime} response.date Glide Date Time object\n   * @return {String} response.duration Value of GlideDuration\n   * @example\n   * var answer = api.calculateDateFromDuration({ startDate: current.getDisplayValue('expected_start'), duration: current.duration })\n   * current.setValue('expected_end', answer.date);\n   */\n  calculateDateFromDuration: function ({ startDate, duration, isUser = false }) {\n    let _duration = new GlideDateTime(duration);\n    _duration = _duration.getNumericValue();\n    _duration = _duration / 1000;\n    const date = new GlideDateTime();\n    date.setDisplayValue(startDate);\n    const offset = isUser ? 0 : date.getTZOffset() / 1000;\n    const seconds = _duration + offset;\n    date.addSeconds(seconds);\n    return { date, duration: _duration * 1000 };\n  },\n\n  type: \"TimeManagementHelperMS\",\n};\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_77565f3597907550ac33f109c253af14",
    "display_value": "sys_script_include_77565f3597907550ac33f109c253af14"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.TimeManagementHelperMS",
    "display_value": "x_cadso_work.TimeManagementHelperMS"
  },
  "sys_created_on": {
    "value": "2023-07-28 20:38:12",
    "display_value": "2023-07-28 01:38:12 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "TimeManagementHelperMS",
    "display_value": "TimeManagementHelperMS"
  },
  "sys_name": {
    "value": "TimeManagementHelperMS",
    "display_value": "TimeManagementHelperMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
