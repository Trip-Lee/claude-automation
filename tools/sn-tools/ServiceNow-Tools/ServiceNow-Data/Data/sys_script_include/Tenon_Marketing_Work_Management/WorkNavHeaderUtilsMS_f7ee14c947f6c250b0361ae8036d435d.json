{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "f7ee14c947f6c250b0361ae8036d435d",
    "extracted_at": "2025-09-19T21:48:29.511Z",
    "display_value": "WorkNavHeaderUtilsMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "117",
    "display_value": "117"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-14 17:19:47",
    "display_value": "2025-07-14 10:19:47 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var WorkNavHeaderUtilsMS = Class.create();\nWorkNavHeaderUtilsMS.prototype = {\n    initialize: function() {},\n\n\t\n    fetch: function({\n        request,\n        response\n    }) {\n        var {\n            data = {}\n        } = request.body;\n        const {\n            table,\n            isWatching,\n            fields: _fields,\n            team,\n            showBreadcrumbs,\n            breadcrumbsObj,\n            statusField,\n            getStatusDetails = false,\n            disableChangeStatus = false,\n            threeSixty,\n            fetchConfigure,\n            configure,\n            useTag,\n            tag,\n            fetchColors = false\n        } = data;\n        let {\n            sysId\n        } = data;\n\n        const fields = {};\n        const isTaskHier = ['x_cadso_work_project',\n            'x_cadso_work_task',\n            'x_cadso_work_campaign',\n            'x_cadso_work_sprint',\n            'x_cadso_work_sprint_retro'\n        ].includes(table);\n        var newBody = {\n            displayValue: '',\n            displayValueField: '',\n            isWatching: isWatching,\n            sysId: sysId,\n            table: table,\n            colors: {},\n            canEditHeader: false,\n            isTaskHier,\n            fields: {},\n            stateField: '',\n            itemArchived: false,\n            itemOnHold: false,\n            canDelete: false,\n            canWrite: false,\n            canRead: false,\n            canCreate: false,\n            canArchive: false,\n            canDeactivate: false,\n            canHold: false,\n            canChangeStatus: false,\n            breadcrumbs: [],\n            icon: this.fetchIcon(table),\n            color: '',\n            threeSixtyObj: {},\n            configurationObj: {},\n            colorsKey: {},\n            colorsFetched: false,\n            tag,\n            useTag\n        };\n\n        if (fetchColors || statusField) {\n            const api = new GetColorsForFields();\n            newBody.colorsKey = api.fetchV3({\n                statusField\n            });\n            newBody.colorsFetched = true;\n        }\n\n        if (!table) {\n            response.setBody(newBody);\n            return response;\n        }\n\n        var tableGr = new GlideRecord(table);\n        if (sysId == '-1' && tableGr.canCreate()) {\n            tableGr.newRecord();\n            tableGr.setValue(tableGr.getDisplayName(), 'Untitled');\n            sysId = tableGr.insert();\n            newBody.sysId = sysId;\n            tableGr.initialize();\n        } else if (sysId == '-1') {\n            newBody.displayValue = 'Insufficient permissions to create record';\n            response.setBody(newBody);\n            return response;\n        }\n\n        if (tableGr.get(sysId)) {\n            const displayValueField = tableGr.getDisplayName();\n            newBody.displayValue = tableGr.getDisplayValue(displayValueField);\n            newBody.canEditHeader = tableGr[displayValueField].canWrite();\n            newBody.displayValueField = displayValueField;\n\n            try {\n                var fieldElement = tableGr.getElement(newBody.displayValueField);\n                var ed = fieldElement.getED();\n                var fieldType = ed.getInternalType();\n                newBody.canEditHeader = fieldType !== 'reference' ? newBody.canEditHeader : false;\n            } catch (e) {\n                /*DoNothing, Isn't life amazing?*/\n            }\n\n            if (isWatching) {\n                var userId = gs.getUserID();\n                var watchList = tableGr.getValue('watch_list') + '';\n                watchList = watchList === 'null' ? '' : watchList;\n                newBody.isWatching = watchList.indexOf(userId) > -1;\n            }\n\n            const isTaskTable = table === 'x_cadso_work_task';\n            const stateField = statusField || (isTaskHier ? isTaskTable ? 'status' : 'state' : '');\n            const state = isTaskHier ? tableGr.getValue('state') : '';\n\n            if (isTaskHier || statusField) {\n                fields[stateField] = {\n                    displayValue: tableGr.getDisplayValue(stateField),\n                    value: tableGr.getValue(stateField)\n                };\n            }\n\n            _fields.map(function(field) {\n                fields[field] = {\n                    displayValue: tableGr.getDisplayValue(field),\n                    value: tableGr.getValue(field)\n                };\n            });\n\n            if (useTag && tag && tag.field) {\n                tag.value = tableGr.getValue(tag.field);\n                tag.text = tableGr.getDisplayValue(tag.field);\n            }\n\n            newBody.isTaskHier = isTaskHier;\n            newBody.fields = fields;\n            newBody.stateField = stateField;\n            newBody.itemArchived = state == \"333\";\n            newBody.itemOnHold = state == \"22\";\n            newBody.canDelete = tableGr.canDelete();\n            newBody.canWrite = tableGr.canWrite();\n            newBody.canRead = tableGr.canRead();\n            newBody.canCreate = tableGr.canCreate();\n            newBody.canDeactivate = this.canDeactivate({\n                table,\n                tableGr\n            });\n            if (newBody.canDeactivate) {\n                newBody.isActive = tableGr.getValue('active') === '1';\n            }\n            newBody.canArchive = isTaskHier && tableGr.state.canWrite();\n            newBody.canHold = !newBody.itemArchived && newBody.canArchive;\n            newBody.canChangeStatus = !disableChangeStatus && isTaskHier && tableGr[stateField].canWrite();\n            newBody.hideStatePicker = !isTaskHier || !statusField;\n            newBody.breadcrumbs = showBreadcrumbs ? this.fetchBreadcrumbs({\n                table,\n                sysId,\n                team,\n                breadcrumbs: breadcrumbsObj\n            }) : [];\n\n            newBody.icon = this.fetchIcon(table);\n            newBody.color = tableGr.isValidField('glyph_color') ? tableGr.getValue('glyph_color') : '#ECF3EF';\n\n            if (getStatusDetails && (isTaskHier || statusField)) {\n                newBody.fetchedStatusDetails = true;\n                const api = new GetColorsForFields();\n                const getChoices = !newBody.itemArchived && !newBody.itemOnHold;\n                newBody.colors = api.fetchV2({\n                    table,\n                    field: stateField,\n                    getChoices\n                });\n            }\n\n            if (threeSixty) {\n                newBody.threeSixtyObj = this.fetch360({\n                    tableGr,\n                    table\n                });\n            }\n\n            if (fetchConfigure) {\n                newBody.configurationObj = this.fetchConfig({\n                    tableGr,\n                    configure,\n                    sysId,\n                    table\n                });\n            }\n        }\n\n        response.setBody(newBody);\n        return response;\n    },\n\n\n    fetchConfig: function({\n        tableGr: currentTableGr,\n        configure,\n        sysId,\n        table\n    }) {\n        const configObj = {\n            ...configure,\n            sysId\n        };\n        let tableGr = currentTableGr;\n        if (configObj.table !== table) {\n            tableGr = new GlideRecord(configObj.table);\n            if (configObj.sysIdField) {\n                tableGr.query(configObj.sysIdField, sysId);\n            }\n            tableGr.setLimit(1);\n            tableGr.orderBy('sys_created_on');\n            tableGr.query();\n            if (!tableGr.next()) {\n                configObj.status = 'Failed';\n                return configObj;\n            }\n            configObj.status = 'Found Record';\n        } else {\n            configObj.status = 'Using Current Record';\n        }\n\n        configObj.hasFields = configObj.fields.length;\n\n        for (var x = 0; x < configObj.fields.length; x++) {\n            const field = configObj.fields[x];\n            field.tryingToLoading = !!field.loadValue;\n            if (field.loadValue) {\n                field.displayValue = tableGr.getDisplayValue(field.element);\n                field.value = tableGr.getValue(field.element);\n                field.loaded = true;\n            }\n            configObj.fields[x] = field;\n        }\n\n        configObj.recordSysId = tableGr.getUniqueValue();\n\n        return {\n            ...configObj\n        };\n    },\n\n    fetch360: function({\n        tableGr,\n        table\n    }) {\n        if (table === 'sn_lead_mgmt_core_lead') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                phone: tableGr.getDisplayValue('mobile_phone') || tableGr.getDisplayValue('business_phone'),\n                // phoneNumber: tableGr.getDisplayValue('business_phone'),\n                // mobileNumber: tableGr.getDisplayValue('mobile_phone'),\n                website: tableGr.getDisplayValue('website'),\n                type: 'lead'\n            };\n        } else if (table === 'customer_contact') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'contact'\n            };\n        } else if (table === 'csm_consumer') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                // company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'consumer'\n            };\n        }\n    },\n\n    fetchBreadcrumbs: function({\n        table,\n        sysId,\n        team,\n        breadcrumbs = {}\n    }) {\n        let _breadcrumbs = [];\n        this._fetchBreadcrumbs({\n            sysId,\n            breadcrumbs,\n            breadcrumbsArr: _breadcrumbs,\n            table\n        });\n\n        if (team && breadcrumbs.team) {\n            _breadcrumbs.push(this.fetchTeam({\n                team,\n                breadcrumb: breadcrumbs.team\n            }));\n        }\n\n        return _breadcrumbs.reverse();\n    },\n\n    _fetchBreadcrumbs: function({\n        sysId,\n        breadcrumbs,\n        breadcrumbsArr,\n        table\n    }) {\n        const breadcrumb = {\n            fields: {},\n            ...breadcrumbs[table]\n        };\n        const tableGr = new GlideRecord(table);\n        let parentSysId = '';\n        if (tableGr.get(sysId)) {\n            breadcrumb.displayValue = tableGr.getDisplayValue();\n            breadcrumb.fields.sysId = tableGr.getUniqueValue();\n            breadcrumb.sysId = tableGr.getUniqueValue();\n            if (breadcrumb.parentField && breadcrumb.parentTable) {\n                parentSysId = tableGr.getValue(breadcrumb.parentField);\n            }\n            breadcrumbsArr.push(breadcrumb);\n            if (parentSysId) {\n                this._fetchBreadcrumbs({\n                    sysId: parentSysId,\n                    breadcrumbs,\n                    breadcrumbsArr,\n                    table: breadcrumb.parentTable\n                });\n            } else if (breadcrumb.parentRoute) {\n                breadcrumbsArr.push({\n                    ...breadcrumbs[breadcrumb.parentRoute]\n                });\n            }\n        }\n    },\n\n    fetchTeam: function({\n        team,\n        breadcrumb = {}\n    }) {\n        const teamGr = new GlideRecord('x_cadso_work_segment');\n        if (teamGr.get(team)) {\n            breadcrumb.displayValue = teamGr.getDisplayValue();\n            breadcrumb.fields.sysId = team;\n        }\n        return breadcrumb;\n    },\n\n    fetchIcon: function(table) {\n        let icon = null;\n        switch (table) {\n            case 'x_cadso_work_project':\n                icon = 'fileCheck';\n                break;\n            case 'x_cadso_work_segment':\n                icon = 'stars';\n                break;\n            case 'x_cadso_work_goal':\n                icon = 'award';\n                break;\n            case 'x_cadso_work_sprint':\n                icon = 'refresh';\n                break;\n            case 'x_cadso_work_campaign':\n                icon = 'calendar';\n                break;\n            default:\n                break;\n        }\n        return icon;\n    },\n\n    canDeactivate: function({\n        table,\n        tableGr\n    }) {\n        if (table === 'x_cadso_work_user' || table === 'x_cadso_work_group') {\n            return tableGr.canWrite() && tableGr.active.canWrite();\n        }\n        return false;\n    },\n\n    fetchPermissions: function(table) {\n        let returnData = {};\n        let tablePerms = {\n            canRead: false,\n            canWrite: false,\n            canDelete: false,\n            canCreate: false\n        };\n        \n        if (table) {\n            let permissionGr = new GlideRecord(table);\n            tablePerms.canRead = permissionGr.canRead();\n            tablePerms.canWrite = permissionGr.canWrite();\n            tablePerms.canDelete = permissionGr.canDelete();\n            tablePerms.canCreate = permissionGr.canCreate();\n\n            returnData = {\n                tablePerms,\n                table: table\n            };\n            \n            return returnData;\n        } else {\n            return returnData;\n        }\n    },\n\n    type: 'WorkNavHeaderUtilsMS'\n};",
    "display_value": "var WorkNavHeaderUtilsMS = Class.create();\nWorkNavHeaderUtilsMS.prototype = {\n    initialize: function() {},\n\n\t\n    fetch: function({\n        request,\n        response\n    }) {\n        var {\n            data = {}\n        } = request.body;\n        const {\n            table,\n            isWatching,\n            fields: _fields,\n            team,\n            showBreadcrumbs,\n            breadcrumbsObj,\n            statusField,\n            getStatusDetails = false,\n            disableChangeStatus = false,\n            threeSixty,\n            fetchConfigure,\n            configure,\n            useTag,\n            tag,\n            fetchColors = false\n        } = data;\n        let {\n            sysId\n        } = data;\n\n        const fields = {};\n        const isTaskHier = ['x_cadso_work_project',\n            'x_cadso_work_task',\n            'x_cadso_work_campaign',\n            'x_cadso_work_sprint',\n            'x_cadso_work_sprint_retro'\n        ].includes(table);\n        var newBody = {\n            displayValue: '',\n            displayValueField: '',\n            isWatching: isWatching,\n            sysId: sysId,\n            table: table,\n            colors: {},\n            canEditHeader: false,\n            isTaskHier,\n            fields: {},\n            stateField: '',\n            itemArchived: false,\n            itemOnHold: false,\n            canDelete: false,\n            canWrite: false,\n            canRead: false,\n            canCreate: false,\n            canArchive: false,\n            canDeactivate: false,\n            canHold: false,\n            canChangeStatus: false,\n            breadcrumbs: [],\n            icon: this.fetchIcon(table),\n            color: '',\n            threeSixtyObj: {},\n            configurationObj: {},\n            colorsKey: {},\n            colorsFetched: false,\n            tag,\n            useTag\n        };\n\n        if (fetchColors || statusField) {\n            const api = new GetColorsForFields();\n            newBody.colorsKey = api.fetchV3({\n                statusField\n            });\n            newBody.colorsFetched = true;\n        }\n\n        if (!table) {\n            response.setBody(newBody);\n            return response;\n        }\n\n        var tableGr = new GlideRecord(table);\n        if (sysId == '-1' && tableGr.canCreate()) {\n            tableGr.newRecord();\n            tableGr.setValue(tableGr.getDisplayName(), 'Untitled');\n            sysId = tableGr.insert();\n            newBody.sysId = sysId;\n            tableGr.initialize();\n        } else if (sysId == '-1') {\n            newBody.displayValue = 'Insufficient permissions to create record';\n            response.setBody(newBody);\n            return response;\n        }\n\n        if (tableGr.get(sysId)) {\n            const displayValueField = tableGr.getDisplayName();\n            newBody.displayValue = tableGr.getDisplayValue(displayValueField);\n            newBody.canEditHeader = tableGr[displayValueField].canWrite();\n            newBody.displayValueField = displayValueField;\n\n            try {\n                var fieldElement = tableGr.getElement(newBody.displayValueField);\n                var ed = fieldElement.getED();\n                var fieldType = ed.getInternalType();\n                newBody.canEditHeader = fieldType !== 'reference' ? newBody.canEditHeader : false;\n            } catch (e) {\n                /*DoNothing, Isn't life amazing?*/\n            }\n\n            if (isWatching) {\n                var userId = gs.getUserID();\n                var watchList = tableGr.getValue('watch_list') + '';\n                watchList = watchList === 'null' ? '' : watchList;\n                newBody.isWatching = watchList.indexOf(userId) > -1;\n            }\n\n            const isTaskTable = table === 'x_cadso_work_task';\n            const stateField = statusField || (isTaskHier ? isTaskTable ? 'status' : 'state' : '');\n            const state = isTaskHier ? tableGr.getValue('state') : '';\n\n            if (isTaskHier || statusField) {\n                fields[stateField] = {\n                    displayValue: tableGr.getDisplayValue(stateField),\n                    value: tableGr.getValue(stateField)\n                };\n            }\n\n            _fields.map(function(field) {\n                fields[field] = {\n                    displayValue: tableGr.getDisplayValue(field),\n                    value: tableGr.getValue(field)\n                };\n            });\n\n            if (useTag && tag && tag.field) {\n                tag.value = tableGr.getValue(tag.field);\n                tag.text = tableGr.getDisplayValue(tag.field);\n            }\n\n            newBody.isTaskHier = isTaskHier;\n            newBody.fields = fields;\n            newBody.stateField = stateField;\n            newBody.itemArchived = state == \"333\";\n            newBody.itemOnHold = state == \"22\";\n            newBody.canDelete = tableGr.canDelete();\n            newBody.canWrite = tableGr.canWrite();\n            newBody.canRead = tableGr.canRead();\n            newBody.canCreate = tableGr.canCreate();\n            newBody.canDeactivate = this.canDeactivate({\n                table,\n                tableGr\n            });\n            if (newBody.canDeactivate) {\n                newBody.isActive = tableGr.getValue('active') === '1';\n            }\n            newBody.canArchive = isTaskHier && tableGr.state.canWrite();\n            newBody.canHold = !newBody.itemArchived && newBody.canArchive;\n            newBody.canChangeStatus = !disableChangeStatus && isTaskHier && tableGr[stateField].canWrite();\n            newBody.hideStatePicker = !isTaskHier || !statusField;\n            newBody.breadcrumbs = showBreadcrumbs ? this.fetchBreadcrumbs({\n                table,\n                sysId,\n                team,\n                breadcrumbs: breadcrumbsObj\n            }) : [];\n\n            newBody.icon = this.fetchIcon(table);\n            newBody.color = tableGr.isValidField('glyph_color') ? tableGr.getValue('glyph_color') : '#ECF3EF';\n\n            if (getStatusDetails && (isTaskHier || statusField)) {\n                newBody.fetchedStatusDetails = true;\n                const api = new GetColorsForFields();\n                const getChoices = !newBody.itemArchived && !newBody.itemOnHold;\n                newBody.colors = api.fetchV2({\n                    table,\n                    field: stateField,\n                    getChoices\n                });\n            }\n\n            if (threeSixty) {\n                newBody.threeSixtyObj = this.fetch360({\n                    tableGr,\n                    table\n                });\n            }\n\n            if (fetchConfigure) {\n                newBody.configurationObj = this.fetchConfig({\n                    tableGr,\n                    configure,\n                    sysId,\n                    table\n                });\n            }\n        }\n\n        response.setBody(newBody);\n        return response;\n    },\n\n\n    fetchConfig: function({\n        tableGr: currentTableGr,\n        configure,\n        sysId,\n        table\n    }) {\n        const configObj = {\n            ...configure,\n            sysId\n        };\n        let tableGr = currentTableGr;\n        if (configObj.table !== table) {\n            tableGr = new GlideRecord(configObj.table);\n            if (configObj.sysIdField) {\n                tableGr.query(configObj.sysIdField, sysId);\n            }\n            tableGr.setLimit(1);\n            tableGr.orderBy('sys_created_on');\n            tableGr.query();\n            if (!tableGr.next()) {\n                configObj.status = 'Failed';\n                return configObj;\n            }\n            configObj.status = 'Found Record';\n        } else {\n            configObj.status = 'Using Current Record';\n        }\n\n        configObj.hasFields = configObj.fields.length;\n\n        for (var x = 0; x < configObj.fields.length; x++) {\n            const field = configObj.fields[x];\n            field.tryingToLoading = !!field.loadValue;\n            if (field.loadValue) {\n                field.displayValue = tableGr.getDisplayValue(field.element);\n                field.value = tableGr.getValue(field.element);\n                field.loaded = true;\n            }\n            configObj.fields[x] = field;\n        }\n\n        configObj.recordSysId = tableGr.getUniqueValue();\n\n        return {\n            ...configObj\n        };\n    },\n\n    fetch360: function({\n        tableGr,\n        table\n    }) {\n        if (table === 'sn_lead_mgmt_core_lead') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                phone: tableGr.getDisplayValue('mobile_phone') || tableGr.getDisplayValue('business_phone'),\n                // phoneNumber: tableGr.getDisplayValue('business_phone'),\n                // mobileNumber: tableGr.getDisplayValue('mobile_phone'),\n                website: tableGr.getDisplayValue('website'),\n                type: 'lead'\n            };\n        } else if (table === 'customer_contact') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'contact'\n            };\n        } else if (table === 'csm_consumer') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                // company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'consumer'\n            };\n        }\n    },\n\n    fetchBreadcrumbs: function({\n        table,\n        sysId,\n        team,\n        breadcrumbs = {}\n    }) {\n        let _breadcrumbs = [];\n        this._fetchBreadcrumbs({\n            sysId,\n            breadcrumbs,\n            breadcrumbsArr: _breadcrumbs,\n            table\n        });\n\n        if (team && breadcrumbs.team) {\n            _breadcrumbs.push(this.fetchTeam({\n                team,\n                breadcrumb: breadcrumbs.team\n            }));\n        }\n\n        return _breadcrumbs.reverse();\n    },\n\n    _fetchBreadcrumbs: function({\n        sysId,\n        breadcrumbs,\n        breadcrumbsArr,\n        table\n    }) {\n        const breadcrumb = {\n            fields: {},\n            ...breadcrumbs[table]\n        };\n        const tableGr = new GlideRecord(table);\n        let parentSysId = '';\n        if (tableGr.get(sysId)) {\n            breadcrumb.displayValue = tableGr.getDisplayValue();\n            breadcrumb.fields.sysId = tableGr.getUniqueValue();\n            breadcrumb.sysId = tableGr.getUniqueValue();\n            if (breadcrumb.parentField && breadcrumb.parentTable) {\n                parentSysId = tableGr.getValue(breadcrumb.parentField);\n            }\n            breadcrumbsArr.push(breadcrumb);\n            if (parentSysId) {\n                this._fetchBreadcrumbs({\n                    sysId: parentSysId,\n                    breadcrumbs,\n                    breadcrumbsArr,\n                    table: breadcrumb.parentTable\n                });\n            } else if (breadcrumb.parentRoute) {\n                breadcrumbsArr.push({\n                    ...breadcrumbs[breadcrumb.parentRoute]\n                });\n            }\n        }\n    },\n\n    fetchTeam: function({\n        team,\n        breadcrumb = {}\n    }) {\n        const teamGr = new GlideRecord('x_cadso_work_segment');\n        if (teamGr.get(team)) {\n            breadcrumb.displayValue = teamGr.getDisplayValue();\n            breadcrumb.fields.sysId = team;\n        }\n        return breadcrumb;\n    },\n\n    fetchIcon: function(table) {\n        let icon = null;\n        switch (table) {\n            case 'x_cadso_work_project':\n                icon = 'fileCheck';\n                break;\n            case 'x_cadso_work_segment':\n                icon = 'stars';\n                break;\n            case 'x_cadso_work_goal':\n                icon = 'award';\n                break;\n            case 'x_cadso_work_sprint':\n                icon = 'refresh';\n                break;\n            case 'x_cadso_work_campaign':\n                icon = 'calendar';\n                break;\n            default:\n                break;\n        }\n        return icon;\n    },\n\n    canDeactivate: function({\n        table,\n        tableGr\n    }) {\n        if (table === 'x_cadso_work_user' || table === 'x_cadso_work_group') {\n            return tableGr.canWrite() && tableGr.active.canWrite();\n        }\n        return false;\n    },\n\n    fetchPermissions: function(table) {\n        let returnData = {};\n        let tablePerms = {\n            canRead: false,\n            canWrite: false,\n            canDelete: false,\n            canCreate: false\n        };\n        \n        if (table) {\n            let permissionGr = new GlideRecord(table);\n            tablePerms.canRead = permissionGr.canRead();\n            tablePerms.canWrite = permissionGr.canWrite();\n            tablePerms.canDelete = permissionGr.canDelete();\n            tablePerms.canCreate = permissionGr.canCreate();\n\n            returnData = {\n                tablePerms,\n                table: table\n            };\n            \n            return returnData;\n        } else {\n            return returnData;\n        }\n    },\n\n    type: 'WorkNavHeaderUtilsMS'\n};",
    "formatted_script": {
      "line_count": 426,
      "char_count": 13850,
      "preview": "var WorkNavHeaderUtilsMS = Class.create();\nWorkNavHeaderUtilsMS.prototype = {\n    initialize: function() {},\n\n\t\n    fetch: function({\n        request,\n        response\n    }) {\n        var {\n         ...",
      "full_script": "var WorkNavHeaderUtilsMS = Class.create();\nWorkNavHeaderUtilsMS.prototype = {\n    initialize: function() {},\n\n\t\n    fetch: function({\n        request,\n        response\n    }) {\n        var {\n            data = {}\n        } = request.body;\n        const {\n            table,\n            isWatching,\n            fields: _fields,\n            team,\n            showBreadcrumbs,\n            breadcrumbsObj,\n            statusField,\n            getStatusDetails = false,\n            disableChangeStatus = false,\n            threeSixty,\n            fetchConfigure,\n            configure,\n            useTag,\n            tag,\n            fetchColors = false\n        } = data;\n        let {\n            sysId\n        } = data;\n\n        const fields = {};\n        const isTaskHier = ['x_cadso_work_project',\n            'x_cadso_work_task',\n            'x_cadso_work_campaign',\n            'x_cadso_work_sprint',\n            'x_cadso_work_sprint_retro'\n        ].includes(table);\n        var newBody = {\n            displayValue: '',\n            displayValueField: '',\n            isWatching: isWatching,\n            sysId: sysId,\n            table: table,\n            colors: {},\n            canEditHeader: false,\n            isTaskHier,\n            fields: {},\n            stateField: '',\n            itemArchived: false,\n            itemOnHold: false,\n            canDelete: false,\n            canWrite: false,\n            canRead: false,\n            canCreate: false,\n            canArchive: false,\n            canDeactivate: false,\n            canHold: false,\n            canChangeStatus: false,\n            breadcrumbs: [],\n            icon: this.fetchIcon(table),\n            color: '',\n            threeSixtyObj: {},\n            configurationObj: {},\n            colorsKey: {},\n            colorsFetched: false,\n            tag,\n            useTag\n        };\n\n        if (fetchColors || statusField) {\n            const api = new GetColorsForFields();\n            newBody.colorsKey = api.fetchV3({\n                statusField\n            });\n            newBody.colorsFetched = true;\n        }\n\n        if (!table) {\n            response.setBody(newBody);\n            return response;\n        }\n\n        var tableGr = new GlideRecord(table);\n        if (sysId == '-1' && tableGr.canCreate()) {\n            tableGr.newRecord();\n            tableGr.setValue(tableGr.getDisplayName(), 'Untitled');\n            sysId = tableGr.insert();\n            newBody.sysId = sysId;\n            tableGr.initialize();\n        } else if (sysId == '-1') {\n            newBody.displayValue = 'Insufficient permissions to create record';\n            response.setBody(newBody);\n            return response;\n        }\n\n        if (tableGr.get(sysId)) {\n            const displayValueField = tableGr.getDisplayName();\n            newBody.displayValue = tableGr.getDisplayValue(displayValueField);\n            newBody.canEditHeader = tableGr[displayValueField].canWrite();\n            newBody.displayValueField = displayValueField;\n\n            try {\n                var fieldElement = tableGr.getElement(newBody.displayValueField);\n                var ed = fieldElement.getED();\n                var fieldType = ed.getInternalType();\n                newBody.canEditHeader = fieldType !== 'reference' ? newBody.canEditHeader : false;\n            } catch (e) {\n                /*DoNothing, Isn't life amazing?*/\n            }\n\n            if (isWatching) {\n                var userId = gs.getUserID();\n                var watchList = tableGr.getValue('watch_list') + '';\n                watchList = watchList === 'null' ? '' : watchList;\n                newBody.isWatching = watchList.indexOf(userId) > -1;\n            }\n\n            const isTaskTable = table === 'x_cadso_work_task';\n            const stateField = statusField || (isTaskHier ? isTaskTable ? 'status' : 'state' : '');\n            const state = isTaskHier ? tableGr.getValue('state') : '';\n\n            if (isTaskHier || statusField) {\n                fields[stateField] = {\n                    displayValue: tableGr.getDisplayValue(stateField),\n                    value: tableGr.getValue(stateField)\n                };\n            }\n\n            _fields.map(function(field) {\n                fields[field] = {\n                    displayValue: tableGr.getDisplayValue(field),\n                    value: tableGr.getValue(field)\n                };\n            });\n\n            if (useTag && tag && tag.field) {\n                tag.value = tableGr.getValue(tag.field);\n                tag.text = tableGr.getDisplayValue(tag.field);\n            }\n\n            newBody.isTaskHier = isTaskHier;\n            newBody.fields = fields;\n            newBody.stateField = stateField;\n            newBody.itemArchived = state == \"333\";\n            newBody.itemOnHold = state == \"22\";\n            newBody.canDelete = tableGr.canDelete();\n            newBody.canWrite = tableGr.canWrite();\n            newBody.canRead = tableGr.canRead();\n            newBody.canCreate = tableGr.canCreate();\n            newBody.canDeactivate = this.canDeactivate({\n                table,\n                tableGr\n            });\n            if (newBody.canDeactivate) {\n                newBody.isActive = tableGr.getValue('active') === '1';\n            }\n            newBody.canArchive = isTaskHier && tableGr.state.canWrite();\n            newBody.canHold = !newBody.itemArchived && newBody.canArchive;\n            newBody.canChangeStatus = !disableChangeStatus && isTaskHier && tableGr[stateField].canWrite();\n            newBody.hideStatePicker = !isTaskHier || !statusField;\n            newBody.breadcrumbs = showBreadcrumbs ? this.fetchBreadcrumbs({\n                table,\n                sysId,\n                team,\n                breadcrumbs: breadcrumbsObj\n            }) : [];\n\n            newBody.icon = this.fetchIcon(table);\n            newBody.color = tableGr.isValidField('glyph_color') ? tableGr.getValue('glyph_color') : '#ECF3EF';\n\n            if (getStatusDetails && (isTaskHier || statusField)) {\n                newBody.fetchedStatusDetails = true;\n                const api = new GetColorsForFields();\n                const getChoices = !newBody.itemArchived && !newBody.itemOnHold;\n                newBody.colors = api.fetchV2({\n                    table,\n                    field: stateField,\n                    getChoices\n                });\n            }\n\n            if (threeSixty) {\n                newBody.threeSixtyObj = this.fetch360({\n                    tableGr,\n                    table\n                });\n            }\n\n            if (fetchConfigure) {\n                newBody.configurationObj = this.fetchConfig({\n                    tableGr,\n                    configure,\n                    sysId,\n                    table\n                });\n            }\n        }\n\n        response.setBody(newBody);\n        return response;\n    },\n\n\n    fetchConfig: function({\n        tableGr: currentTableGr,\n        configure,\n        sysId,\n        table\n    }) {\n        const configObj = {\n            ...configure,\n            sysId\n        };\n        let tableGr = currentTableGr;\n        if (configObj.table !== table) {\n            tableGr = new GlideRecord(configObj.table);\n            if (configObj.sysIdField) {\n                tableGr.query(configObj.sysIdField, sysId);\n            }\n            tableGr.setLimit(1);\n            tableGr.orderBy('sys_created_on');\n            tableGr.query();\n            if (!tableGr.next()) {\n                configObj.status = 'Failed';\n                return configObj;\n            }\n            configObj.status = 'Found Record';\n        } else {\n            configObj.status = 'Using Current Record';\n        }\n\n        configObj.hasFields = configObj.fields.length;\n\n        for (var x = 0; x < configObj.fields.length; x++) {\n            const field = configObj.fields[x];\n            field.tryingToLoading = !!field.loadValue;\n            if (field.loadValue) {\n                field.displayValue = tableGr.getDisplayValue(field.element);\n                field.value = tableGr.getValue(field.element);\n                field.loaded = true;\n            }\n            configObj.fields[x] = field;\n        }\n\n        configObj.recordSysId = tableGr.getUniqueValue();\n\n        return {\n            ...configObj\n        };\n    },\n\n    fetch360: function({\n        tableGr,\n        table\n    }) {\n        if (table === 'sn_lead_mgmt_core_lead') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                phone: tableGr.getDisplayValue('mobile_phone') || tableGr.getDisplayValue('business_phone'),\n                // phoneNumber: tableGr.getDisplayValue('business_phone'),\n                // mobileNumber: tableGr.getDisplayValue('mobile_phone'),\n                website: tableGr.getDisplayValue('website'),\n                type: 'lead'\n            };\n        } else if (table === 'customer_contact') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'contact'\n            };\n        } else if (table === 'csm_consumer') {\n            return {\n                image: '',\n                name: [tableGr.getDisplayValue('first_name'), tableGr.getDisplayValue('middle_name'), tableGr.getDisplayValue('last_name')].join(' '),\n                jobTitle: tableGr.getDisplayValue('title'),\n                // company: tableGr.getDisplayValue('company'),\n                email: tableGr.getDisplayValue('email'),\n                type: 'consumer'\n            };\n        }\n    },\n\n    fetchBreadcrumbs: function({\n        table,\n        sysId,\n        team,\n        breadcrumbs = {}\n    }) {\n        let _breadcrumbs = [];\n        this._fetchBreadcrumbs({\n            sysId,\n            breadcrumbs,\n            breadcrumbsArr: _breadcrumbs,\n            table\n        });\n\n        if (team && breadcrumbs.team) {\n            _breadcrumbs.push(this.fetchTeam({\n                team,\n                breadcrumb: breadcrumbs.team\n            }));\n        }\n\n        return _breadcrumbs.reverse();\n    },\n\n    _fetchBreadcrumbs: function({\n        sysId,\n        breadcrumbs,\n        breadcrumbsArr,\n        table\n    }) {\n        const breadcrumb = {\n            fields: {},\n            ...breadcrumbs[table]\n        };\n        const tableGr = new GlideRecord(table);\n        let parentSysId = '';\n        if (tableGr.get(sysId)) {\n            breadcrumb.displayValue = tableGr.getDisplayValue();\n            breadcrumb.fields.sysId = tableGr.getUniqueValue();\n            breadcrumb.sysId = tableGr.getUniqueValue();\n            if (breadcrumb.parentField && breadcrumb.parentTable) {\n                parentSysId = tableGr.getValue(breadcrumb.parentField);\n            }\n            breadcrumbsArr.push(breadcrumb);\n            if (parentSysId) {\n                this._fetchBreadcrumbs({\n                    sysId: parentSysId,\n                    breadcrumbs,\n                    breadcrumbsArr,\n                    table: breadcrumb.parentTable\n                });\n            } else if (breadcrumb.parentRoute) {\n                breadcrumbsArr.push({\n                    ...breadcrumbs[breadcrumb.parentRoute]\n                });\n            }\n        }\n    },\n\n    fetchTeam: function({\n        team,\n        breadcrumb = {}\n    }) {\n        const teamGr = new GlideRecord('x_cadso_work_segment');\n        if (teamGr.get(team)) {\n            breadcrumb.displayValue = teamGr.getDisplayValue();\n            breadcrumb.fields.sysId = team;\n        }\n        return breadcrumb;\n    },\n\n    fetchIcon: function(table) {\n        let icon = null;\n        switch (table) {\n            case 'x_cadso_work_project':\n                icon = 'fileCheck';\n                break;\n            case 'x_cadso_work_segment':\n                icon = 'stars';\n                break;\n            case 'x_cadso_work_goal':\n                icon = 'award';\n                break;\n            case 'x_cadso_work_sprint':\n                icon = 'refresh';\n                break;\n            case 'x_cadso_work_campaign':\n                icon = 'calendar';\n                break;\n            default:\n                break;\n        }\n        return icon;\n    },\n\n    canDeactivate: function({\n        table,\n        tableGr\n    }) {\n        if (table === 'x_cadso_work_user' || table === 'x_cadso_work_group') {\n            return tableGr.canWrite() && tableGr.active.canWrite();\n        }\n        return false;\n    },\n\n    fetchPermissions: function(table) {\n        let returnData = {};\n        let tablePerms = {\n            canRead: false,\n            canWrite: false,\n            canDelete: false,\n            canCreate: false\n        };\n        \n        if (table) {\n            let permissionGr = new GlideRecord(table);\n            tablePerms.canRead = permissionGr.canRead();\n            tablePerms.canWrite = permissionGr.canWrite();\n            tablePerms.canDelete = permissionGr.canDelete();\n            tablePerms.canCreate = permissionGr.canCreate();\n\n            returnData = {\n                tablePerms,\n                table: table\n            };\n            \n            return returnData;\n        } else {\n            return returnData;\n        }\n    },\n\n    type: 'WorkNavHeaderUtilsMS'\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_f7ee14c947f6c250b0361ae8036d435d",
    "display_value": "sys_script_include_f7ee14c947f6c250b0361ae8036d435d"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.WorkNavHeaderUtilsMS",
    "display_value": "x_cadso_work.WorkNavHeaderUtilsMS"
  },
  "sys_created_on": {
    "value": "2024-06-13 02:09:26",
    "display_value": "2024-06-12 07:09:26 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "WorkNavHeaderUtilsMS",
    "display_value": "WorkNavHeaderUtilsMS"
  },
  "sys_name": {
    "value": "WorkNavHeaderUtilsMS",
    "display_value": "WorkNavHeaderUtilsMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
