{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "b5c3ec4947ddb110b0361ae8036d433f",
    "extracted_at": "2025-09-19T21:48:31.377Z",
    "display_value": "UIAttachmentMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "90",
    "display_value": "90"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-11 18:50:07",
    "display_value": "2025-03-11 11:50:07 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var UIAttachmentMS = Class.create();\r\nUIAttachmentMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.record = null;\r\n\t},\r\n\r\n\r\n\tgetAttachments: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, record } = queryParams;\r\n\r\n\t\tthis.table = table;\r\n\t\tthis.record = record;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tattachments: [],\r\n\t\t};\r\n\r\n\t\tdata.attachments = this._getAttachments();\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\t\r\n\taddAttachments: function (data) {\r\n\t\tconst { attachment, table, record } = data;\r\n\t\t\r\n\t\tconst attachmentObjects = {};\r\n\r\n\t\t// Now, attachmentObjects contains separate objects for each attachment group\r\n// \t\tvar attachment = uploadedFiles;\r\n\t\tvar attachmentsSysId = [];\r\n\r\n\t\tvar attachmentGSA = new GlideSysAttachment();\r\n\t\t//set up inputs\r\n\t\tvar rec = new GlideRecordSecure(table);\r\n\t\tif (!rec.get(record)) return;\r\n\t\tvar fileName = attachment.fileName;\r\n\t\tvar contentType = attachment.fileType;\r\n\t\tvar content = attachment.fileData;\r\n\t\t\r\n\t\t// gs.info(\"HERE : \" +  fileName + \" \" +  contentType + \" \" +  content + \" \" +  rec.sys_id)\r\n\t\t\r\n// \t\tvar content = gs.base64Encode(content);\r\n\t\tvar agr = attachmentGSA.writeBase64(rec, fileName, contentType, content);\r\n\r\n\t\tvar message = \"\";\r\n\t\tif(agr !== null)\r\n\t\t{\r\n\t\t\tgs.info('The attachment upload successful - sys_id is: ' + agr);\r\n\t\t\tmessage = 'The attachment upload successful - sys_id is : ' + agr;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmessage = 'The attachment upload failed';\r\n\t\t\tgs.info('The attachment upload failed');\r\n\t\t}\r\n\t\t\r\n\t\treturn {valid: agr, message};\r\n\t},\r\n\r\n\t_getAttachments: function() {\r\n\r\n\t\t\r\n\t\t// gs.info(\"data being passed \" +  this.table + \" \" + this.record);\r\n\t\tvar attachments = [];\r\n\t\t// gs.info(\"TEST 0\");\r\n\t\tvar attachment = new GlideSysAttachment();\r\n\t\t// gs.info(\"TEST 1\");\r\n\t\tvar attachmentGR = attachment.getAttachments(this.table, this.record);\r\n\t\t// gs.info(\"TEST 2\");\r\n// \t\tvar fileBytes = attachment.getBytes(this.table, this.record);\r\n// \t\tgs.info(\"fileBytes \" + fileBytes);\r\n\t\twhile (attachmentGR.next(this.table, this.record)) \r\n\t\t{\r\n\t\t\tvar fileContent = attachment.getContent(attachmentGR);\r\n\t\t\tvar fileContent64 = attachment.getContentBase64(attachmentGR);\r\n\t\t\tvar fileContentStream = attachment.getContentStream(attachmentGR.sys_id);\r\n\t\t\tvar fileName = attachmentGR.getValue(\"file_name\");\r\n\t\t\tvar fileSize = attachmentGR.getValue(\"size_bytes\");\t\r\n\t\t\tvar fileType = attachmentGR.getValue(\"content_type\");\r\n\t\t\t\r\n\t\t\tvar reader = new GlideTextReader(fileContentStream);\r\n\t\t\tvar fileBytesEncoding = reader.getEncoding();\r\n\t\t\tvar fileInBytes = '';\r\n\t\t\tvar nextLine = '';\r\n\t\t\twhile((nextLine = reader.readLine())  !== null) {\r\n// \t\t\t\tgs.info(\"Adding file bytes to data - \" + nextLine)\r\n\t\t\t\tif(fileInBytes == '')\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes = nextLine;\t\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes += nextLine;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tattachments.push({\r\n\t\t\t\tfileName,\r\n\t\t\t\tfileSize,\r\n\t\t\t\tfileType,\r\n\t\t\t\tfileContent,\r\n\t\t\t\tfileContent64,\r\n\t\t\t\tfileInBytes,\r\n\t\t\t\tfileBytesEncoding\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\treturn attachments;\r\n\t},\r\n\r\n\t\r\n\r\n\ttype: 'UIAttachmentMS'\r\n};",
    "display_value": "var UIAttachmentMS = Class.create();\r\nUIAttachmentMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.record = null;\r\n\t},\r\n\r\n\r\n\tgetAttachments: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, record } = queryParams;\r\n\r\n\t\tthis.table = table;\r\n\t\tthis.record = record;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tattachments: [],\r\n\t\t};\r\n\r\n\t\tdata.attachments = this._getAttachments();\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\t\r\n\taddAttachments: function (data) {\r\n\t\tconst { attachment, table, record } = data;\r\n\t\t\r\n\t\tconst attachmentObjects = {};\r\n\r\n\t\t// Now, attachmentObjects contains separate objects for each attachment group\r\n// \t\tvar attachment = uploadedFiles;\r\n\t\tvar attachmentsSysId = [];\r\n\r\n\t\tvar attachmentGSA = new GlideSysAttachment();\r\n\t\t//set up inputs\r\n\t\tvar rec = new GlideRecordSecure(table);\r\n\t\tif (!rec.get(record)) return;\r\n\t\tvar fileName = attachment.fileName;\r\n\t\tvar contentType = attachment.fileType;\r\n\t\tvar content = attachment.fileData;\r\n\t\t\r\n\t\t// gs.info(\"HERE : \" +  fileName + \" \" +  contentType + \" \" +  content + \" \" +  rec.sys_id)\r\n\t\t\r\n// \t\tvar content = gs.base64Encode(content);\r\n\t\tvar agr = attachmentGSA.writeBase64(rec, fileName, contentType, content);\r\n\r\n\t\tvar message = \"\";\r\n\t\tif(agr !== null)\r\n\t\t{\r\n\t\t\tgs.info('The attachment upload successful - sys_id is: ' + agr);\r\n\t\t\tmessage = 'The attachment upload successful - sys_id is : ' + agr;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmessage = 'The attachment upload failed';\r\n\t\t\tgs.info('The attachment upload failed');\r\n\t\t}\r\n\t\t\r\n\t\treturn {valid: agr, message};\r\n\t},\r\n\r\n\t_getAttachments: function() {\r\n\r\n\t\t\r\n\t\t// gs.info(\"data being passed \" +  this.table + \" \" + this.record);\r\n\t\tvar attachments = [];\r\n\t\t// gs.info(\"TEST 0\");\r\n\t\tvar attachment = new GlideSysAttachment();\r\n\t\t// gs.info(\"TEST 1\");\r\n\t\tvar attachmentGR = attachment.getAttachments(this.table, this.record);\r\n\t\t// gs.info(\"TEST 2\");\r\n// \t\tvar fileBytes = attachment.getBytes(this.table, this.record);\r\n// \t\tgs.info(\"fileBytes \" + fileBytes);\r\n\t\twhile (attachmentGR.next(this.table, this.record)) \r\n\t\t{\r\n\t\t\tvar fileContent = attachment.getContent(attachmentGR);\r\n\t\t\tvar fileContent64 = attachment.getContentBase64(attachmentGR);\r\n\t\t\tvar fileContentStream = attachment.getContentStream(attachmentGR.sys_id);\r\n\t\t\tvar fileName = attachmentGR.getValue(\"file_name\");\r\n\t\t\tvar fileSize = attachmentGR.getValue(\"size_bytes\");\t\r\n\t\t\tvar fileType = attachmentGR.getValue(\"content_type\");\r\n\t\t\t\r\n\t\t\tvar reader = new GlideTextReader(fileContentStream);\r\n\t\t\tvar fileBytesEncoding = reader.getEncoding();\r\n\t\t\tvar fileInBytes = '';\r\n\t\t\tvar nextLine = '';\r\n\t\t\twhile((nextLine = reader.readLine())  !== null) {\r\n// \t\t\t\tgs.info(\"Adding file bytes to data - \" + nextLine)\r\n\t\t\t\tif(fileInBytes == '')\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes = nextLine;\t\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes += nextLine;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tattachments.push({\r\n\t\t\t\tfileName,\r\n\t\t\t\tfileSize,\r\n\t\t\t\tfileType,\r\n\t\t\t\tfileContent,\r\n\t\t\t\tfileContent64,\r\n\t\t\t\tfileInBytes,\r\n\t\t\t\tfileBytesEncoding\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\treturn attachments;\r\n\t},\r\n\r\n\t\r\n\r\n\ttype: 'UIAttachmentMS'\r\n};",
    "formatted_script": {
      "line_count": 124,
      "char_count": 3191,
      "preview": "var UIAttachmentMS = Class.create();\r\nUIAttachmentMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.record = null;\r\n\t},\r\n\r\n\r\n\tgetAttachments: function(request, response) {\r\n\t\tc...",
      "full_script": "var UIAttachmentMS = Class.create();\r\nUIAttachmentMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.record = null;\r\n\t},\r\n\r\n\r\n\tgetAttachments: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { table, record } = queryParams;\r\n\r\n\t\tthis.table = table;\r\n\t\tthis.record = record;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tattachments: [],\r\n\t\t};\r\n\r\n\t\tdata.attachments = this._getAttachments();\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\t\r\n\taddAttachments: function (data) {\r\n\t\tconst { attachment, table, record } = data;\r\n\t\t\r\n\t\tconst attachmentObjects = {};\r\n\r\n\t\t// Now, attachmentObjects contains separate objects for each attachment group\r\n// \t\tvar attachment = uploadedFiles;\r\n\t\tvar attachmentsSysId = [];\r\n\r\n\t\tvar attachmentGSA = new GlideSysAttachment();\r\n\t\t//set up inputs\r\n\t\tvar rec = new GlideRecordSecure(table);\r\n\t\tif (!rec.get(record)) return;\r\n\t\tvar fileName = attachment.fileName;\r\n\t\tvar contentType = attachment.fileType;\r\n\t\tvar content = attachment.fileData;\r\n\t\t\r\n\t\t// gs.info(\"HERE : \" +  fileName + \" \" +  contentType + \" \" +  content + \" \" +  rec.sys_id)\r\n\t\t\r\n// \t\tvar content = gs.base64Encode(content);\r\n\t\tvar agr = attachmentGSA.writeBase64(rec, fileName, contentType, content);\r\n\r\n\t\tvar message = \"\";\r\n\t\tif(agr !== null)\r\n\t\t{\r\n\t\t\tgs.info('The attachment upload successful - sys_id is: ' + agr);\r\n\t\t\tmessage = 'The attachment upload successful - sys_id is : ' + agr;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmessage = 'The attachment upload failed';\r\n\t\t\tgs.info('The attachment upload failed');\r\n\t\t}\r\n\t\t\r\n\t\treturn {valid: agr, message};\r\n\t},\r\n\r\n\t_getAttachments: function() {\r\n\r\n\t\t\r\n\t\t// gs.info(\"data being passed \" +  this.table + \" \" + this.record);\r\n\t\tvar attachments = [];\r\n\t\t// gs.info(\"TEST 0\");\r\n\t\tvar attachment = new GlideSysAttachment();\r\n\t\t// gs.info(\"TEST 1\");\r\n\t\tvar attachmentGR = attachment.getAttachments(this.table, this.record);\r\n\t\t// gs.info(\"TEST 2\");\r\n// \t\tvar fileBytes = attachment.getBytes(this.table, this.record);\r\n// \t\tgs.info(\"fileBytes \" + fileBytes);\r\n\t\twhile (attachmentGR.next(this.table, this.record)) \r\n\t\t{\r\n\t\t\tvar fileContent = attachment.getContent(attachmentGR);\r\n\t\t\tvar fileContent64 = attachment.getContentBase64(attachmentGR);\r\n\t\t\tvar fileContentStream = attachment.getContentStream(attachmentGR.sys_id);\r\n\t\t\tvar fileName = attachmentGR.getValue(\"file_name\");\r\n\t\t\tvar fileSize = attachmentGR.getValue(\"size_bytes\");\t\r\n\t\t\tvar fileType = attachmentGR.getValue(\"content_type\");\r\n\t\t\t\r\n\t\t\tvar reader = new GlideTextReader(fileContentStream);\r\n\t\t\tvar fileBytesEncoding = reader.getEncoding();\r\n\t\t\tvar fileInBytes = '';\r\n\t\t\tvar nextLine = '';\r\n\t\t\twhile((nextLine = reader.readLine())  !== null) {\r\n// \t\t\t\tgs.info(\"Adding file bytes to data - \" + nextLine)\r\n\t\t\t\tif(fileInBytes == '')\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes = nextLine;\t\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileInBytes += nextLine;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tattachments.push({\r\n\t\t\t\tfileName,\r\n\t\t\t\tfileSize,\r\n\t\t\t\tfileType,\r\n\t\t\t\tfileContent,\r\n\t\t\t\tfileContent64,\r\n\t\t\t\tfileInBytes,\r\n\t\t\t\tfileBytesEncoding\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\treturn attachments;\r\n\t},\r\n\r\n\t\r\n\r\n\ttype: 'UIAttachmentMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_b5c3ec4947ddb110b0361ae8036d433f",
    "display_value": "sys_script_include_b5c3ec4947ddb110b0361ae8036d433f"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.UIAttachmentMS",
    "display_value": "x_cadso_work.UIAttachmentMS"
  },
  "sys_created_on": {
    "value": "2023-09-13 16:45:51",
    "display_value": "2023-09-13 09:45:51 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "UIAttachmentMS",
    "display_value": "UIAttachmentMS"
  },
  "sys_name": {
    "value": "UIAttachmentMS",
    "display_value": "UIAttachmentMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
