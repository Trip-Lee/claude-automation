{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "0ffee2bc97d7a110ac33f109c253af06",
    "extracted_at": "2025-09-19T21:48:31.564Z",
    "display_value": "UIListUpdateApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "177",
    "display_value": "177"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-05-20 20:11:02",
    "display_value": "2025-05-20 01:11:02 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const UIListUpdateApiMS = Class.create();\r\nUIListUpdateApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t},\r\n\r\n\tupdateField: function (request, response) {\r\n\t\tconst { table, sysId, fieldName, value, type, refTable, element, reference } = request.body.data;\r\n\r\n\t\tlet updated = false;\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\tlet fieldLabel = '';\r\n\t\ttry {\r\n\t\t\tfieldLabel = tableGR[fieldName].getLabel();\r\n\t\t} catch (e) {\r\n\t\t\tfieldLabel = fieldName;\r\n\t\t}\r\n\t\tlet canWrite = false;\r\n\r\n\t\tif (tableGR.get(sysId)) {\r\n\t\t\t// UPDATED: removed canWrite check on table becuase the ACL will always return fasle for marketer + enhanced\r\n\t\t\t// since the ALC needs to check a record\r\n\t\t\tif (tableGR.isValidField(fieldName)) {\r\n\t\t\t\tcanWrite = tableGR[fieldName].canWrite();\r\n\t\t\t}\r\n\r\n\t\t\tif (!canWrite) {\r\n\t\t\t\tconst newValue = {\r\n\t\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t\t};\r\n\t\t\t\tconst messageType = 'danger';\r\n\t\t\t\tconst message = 'Update failed';\r\n\t\t\t\tconst description = `Unable to edit \"${fieldLabel}\" for this record with your current permissions.`;\r\n\t\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, message, description, fieldLabel });\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = value;\r\n\t\t\t} else if (fieldName === \"comments\") {\r\n\t\t\t\ttableGR.comments = value;\r\n\t\t\t} else if (type && type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\t\t\t\tgdt.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(value);\r\n\t\t\t\ttableGR.setValue(fieldName, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(fieldName, value);\r\n\t\t\t}\r\n\r\n\t\t\tupdated = tableGR.update();\r\n\r\n\t\t\tconst newValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t};\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tnewValue.avatar = this._getCachedAvatar(value);\r\n\t\t\t}\r\n\r\n\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, fieldLabel });\r\n\r\n\t\t} else {\r\n\t\t\tconst messageType = 'danger';\r\n\t\t\tconst message = 'Update failed';\r\n\t\t\tconst description = `Record does not exist.`;\r\n\t\t\tresponse.setBody({ updated: false, sysId, fieldName, value, newValue: '', canWrite, message, description, fieldLabel });\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tbulkUpdate: function (request, response) {\r\n\t\tconst { table, sysIds, field, updateValue } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label, refTable } = field;\r\n\t\tconst changes = {};\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t//TODO: update this so that it check a record\r\n\t\t// \t\tthis will cause an issue for marketer + enhacned markerter\r\n\t\t//\t\tbecuase the ACL checks agaist a record\r\n\r\n\t\t// if (!tableGR.canWrite()) {\r\n\t\t// \tresponse.setBody(\r\n\t\t// \t\t{\r\n\t\t// \t\t\tsysIds,\r\n\t\t// \t\t\tfield: field.value,\r\n\t\t// \t\t\toldValue: {\r\n\t\t// \t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t// \t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tnewValue: {\r\n\t\t// \t\t\t\tdisplay_value: field.displayValue,\r\n\t\t// \t\t\t\tvalue: updateValue,\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\ttable,\r\n\t\t// \t\t\tchanges,\r\n\t\t// \t\t\tcanWriteTable: false,\r\n\t\t// \t\t\tmessage,\r\n\t\t// \t\t\tdescription,\r\n\t\t// \t\t\tmessageType,\r\n\t\t// \t\t\teditFailed: true\r\n\t\t// \t\t}\r\n\t\t// \t);\r\n\t\t// \treturn response;\r\n\t\t// }\r\n\r\n\t\tvar oldValue = {};\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\toldValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t}\r\n\r\n\t\t\tvar color = false;\r\n\t\t\tif (fieldName === \"state\" || fieldName === \"status\" || fieldName === \"priority\") {\r\n\t\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\t\tfetchColor = api.fetch(table);\r\n\r\n\t\t\t\tif (fetchColor) {\r\n\t\t\t\t\tcolor = fetchColor[fieldName][updateValue.toString()];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar avatar = ''\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tavatar = this._getCachedAvatar(updateValue);\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = updateValue;\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\r\n\t\t\t\tgdt.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (field.type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (field.type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(updateValue);\r\n\t\t\t\ttableGR.setValue(field.value, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t\tif (color) {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()] =\r\n\t\t\t\t{\r\n\t\t\t\t\t...color,\r\n\t\t\t\t\t...changes[tableGR.getUniqueValue()]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()].avatar = avatar\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody(\r\n\t\t\t{\r\n\t\t\t\tsysIds,\r\n\t\t\t\tfield: field.value,\r\n\t\t\t\toldValue,\r\n\t\t\t\tnewValue: {\r\n\t\t\t\t\tdisplay_value: field.displayValue,\r\n\t\t\t\t\tvalue: updateValue,\r\n\t\t\t\t},\r\n\t\t\t\ttable,\r\n\t\t\t\tchanges,\r\n\t\t\t\tcanWriteTable,\r\n\t\t\t\tmessage,\r\n\t\t\t\tdescription,\r\n\t\t\t\tmessageType,\r\n\t\t\t\teditFailed: cannotEdit > 0,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tclearField: function (request, response) {\r\n\t\tconst { table, sysIds, field } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label } = field;\r\n\t\tconst changes = {};\r\n\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tlet updateValue = \"\";\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\tif (!tableGR.canWrite()) {\r\n\t\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable: false, message, description, messageType });\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplayValue: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable, message, description, messageType, editFailed: cannotEdit > 0 });\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetColor: function (field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif (GR.get(sys_id)) {\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\ttype: \"UIListUpdateApiMS\",\r\n};\r\n",
    "display_value": "const UIListUpdateApiMS = Class.create();\r\nUIListUpdateApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t},\r\n\r\n\tupdateField: function (request, response) {\r\n\t\tconst { table, sysId, fieldName, value, type, refTable, element, reference } = request.body.data;\r\n\r\n\t\tlet updated = false;\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\tlet fieldLabel = '';\r\n\t\ttry {\r\n\t\t\tfieldLabel = tableGR[fieldName].getLabel();\r\n\t\t} catch (e) {\r\n\t\t\tfieldLabel = fieldName;\r\n\t\t}\r\n\t\tlet canWrite = false;\r\n\r\n\t\tif (tableGR.get(sysId)) {\r\n\t\t\t// UPDATED: removed canWrite check on table becuase the ACL will always return fasle for marketer + enhanced\r\n\t\t\t// since the ALC needs to check a record\r\n\t\t\tif (tableGR.isValidField(fieldName)) {\r\n\t\t\t\tcanWrite = tableGR[fieldName].canWrite();\r\n\t\t\t}\r\n\r\n\t\t\tif (!canWrite) {\r\n\t\t\t\tconst newValue = {\r\n\t\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t\t};\r\n\t\t\t\tconst messageType = 'danger';\r\n\t\t\t\tconst message = 'Update failed';\r\n\t\t\t\tconst description = `Unable to edit \"${fieldLabel}\" for this record with your current permissions.`;\r\n\t\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, message, description, fieldLabel });\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = value;\r\n\t\t\t} else if (fieldName === \"comments\") {\r\n\t\t\t\ttableGR.comments = value;\r\n\t\t\t} else if (type && type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\t\t\t\tgdt.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(value);\r\n\t\t\t\ttableGR.setValue(fieldName, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(fieldName, value);\r\n\t\t\t}\r\n\r\n\t\t\tupdated = tableGR.update();\r\n\r\n\t\t\tconst newValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t};\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tnewValue.avatar = this._getCachedAvatar(value);\r\n\t\t\t}\r\n\r\n\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, fieldLabel });\r\n\r\n\t\t} else {\r\n\t\t\tconst messageType = 'danger';\r\n\t\t\tconst message = 'Update failed';\r\n\t\t\tconst description = `Record does not exist.`;\r\n\t\t\tresponse.setBody({ updated: false, sysId, fieldName, value, newValue: '', canWrite, message, description, fieldLabel });\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tbulkUpdate: function (request, response) {\r\n\t\tconst { table, sysIds, field, updateValue } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label, refTable } = field;\r\n\t\tconst changes = {};\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t//TODO: update this so that it check a record\r\n\t\t// \t\tthis will cause an issue for marketer + enhacned markerter\r\n\t\t//\t\tbecuase the ACL checks agaist a record\r\n\r\n\t\t// if (!tableGR.canWrite()) {\r\n\t\t// \tresponse.setBody(\r\n\t\t// \t\t{\r\n\t\t// \t\t\tsysIds,\r\n\t\t// \t\t\tfield: field.value,\r\n\t\t// \t\t\toldValue: {\r\n\t\t// \t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t// \t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tnewValue: {\r\n\t\t// \t\t\t\tdisplay_value: field.displayValue,\r\n\t\t// \t\t\t\tvalue: updateValue,\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\ttable,\r\n\t\t// \t\t\tchanges,\r\n\t\t// \t\t\tcanWriteTable: false,\r\n\t\t// \t\t\tmessage,\r\n\t\t// \t\t\tdescription,\r\n\t\t// \t\t\tmessageType,\r\n\t\t// \t\t\teditFailed: true\r\n\t\t// \t\t}\r\n\t\t// \t);\r\n\t\t// \treturn response;\r\n\t\t// }\r\n\r\n\t\tvar oldValue = {};\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\toldValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t}\r\n\r\n\t\t\tvar color = false;\r\n\t\t\tif (fieldName === \"state\" || fieldName === \"status\" || fieldName === \"priority\") {\r\n\t\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\t\tfetchColor = api.fetch(table);\r\n\r\n\t\t\t\tif (fetchColor) {\r\n\t\t\t\t\tcolor = fetchColor[fieldName][updateValue.toString()];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar avatar = ''\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tavatar = this._getCachedAvatar(updateValue);\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = updateValue;\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\r\n\t\t\t\tgdt.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (field.type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (field.type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(updateValue);\r\n\t\t\t\ttableGR.setValue(field.value, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t\tif (color) {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()] =\r\n\t\t\t\t{\r\n\t\t\t\t\t...color,\r\n\t\t\t\t\t...changes[tableGR.getUniqueValue()]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()].avatar = avatar\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody(\r\n\t\t\t{\r\n\t\t\t\tsysIds,\r\n\t\t\t\tfield: field.value,\r\n\t\t\t\toldValue,\r\n\t\t\t\tnewValue: {\r\n\t\t\t\t\tdisplay_value: field.displayValue,\r\n\t\t\t\t\tvalue: updateValue,\r\n\t\t\t\t},\r\n\t\t\t\ttable,\r\n\t\t\t\tchanges,\r\n\t\t\t\tcanWriteTable,\r\n\t\t\t\tmessage,\r\n\t\t\t\tdescription,\r\n\t\t\t\tmessageType,\r\n\t\t\t\teditFailed: cannotEdit > 0,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tclearField: function (request, response) {\r\n\t\tconst { table, sysIds, field } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label } = field;\r\n\t\tconst changes = {};\r\n\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tlet updateValue = \"\";\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\tif (!tableGR.canWrite()) {\r\n\t\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable: false, message, description, messageType });\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplayValue: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable, message, description, messageType, editFailed: cannotEdit > 0 });\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetColor: function (field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif (GR.get(sys_id)) {\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\ttype: \"UIListUpdateApiMS\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 330,
      "char_count": 9550,
      "preview": "const UIListUpdateApiMS = Class.create();\r\nUIListUpdateApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t},\r\n\r\n\tupdateField: function (request, response) {\r\n\t\tconst { table, ...",
      "full_script": "const UIListUpdateApiMS = Class.create();\r\nUIListUpdateApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t},\r\n\r\n\tupdateField: function (request, response) {\r\n\t\tconst { table, sysId, fieldName, value, type, refTable, element, reference } = request.body.data;\r\n\r\n\t\tlet updated = false;\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\tlet fieldLabel = '';\r\n\t\ttry {\r\n\t\t\tfieldLabel = tableGR[fieldName].getLabel();\r\n\t\t} catch (e) {\r\n\t\t\tfieldLabel = fieldName;\r\n\t\t}\r\n\t\tlet canWrite = false;\r\n\r\n\t\tif (tableGR.get(sysId)) {\r\n\t\t\t// UPDATED: removed canWrite check on table becuase the ACL will always return fasle for marketer + enhanced\r\n\t\t\t// since the ALC needs to check a record\r\n\t\t\tif (tableGR.isValidField(fieldName)) {\r\n\t\t\t\tcanWrite = tableGR[fieldName].canWrite();\r\n\t\t\t}\r\n\r\n\t\t\tif (!canWrite) {\r\n\t\t\t\tconst newValue = {\r\n\t\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t\t};\r\n\t\t\t\tconst messageType = 'danger';\r\n\t\t\t\tconst message = 'Update failed';\r\n\t\t\t\tconst description = `Unable to edit \"${fieldLabel}\" for this record with your current permissions.`;\r\n\t\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, message, description, fieldLabel });\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = value;\r\n\t\t\t} else if (fieldName === \"comments\") {\r\n\t\t\t\ttableGR.comments = value;\r\n\t\t\t} else if (type && type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\t\t\t\tgdt.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(value);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(value);\r\n\t\t\t\ttableGR.setValue(fieldName, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(fieldName, value);\r\n\t\t\t}\r\n\r\n\t\t\tupdated = tableGR.update();\r\n\r\n\t\t\tconst newValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t};\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tnewValue.avatar = this._getCachedAvatar(value);\r\n\t\t\t}\r\n\r\n\t\t\tresponse.setBody({ updated, sysId, fieldName, value, newValue, canWrite, fieldLabel });\r\n\r\n\t\t} else {\r\n\t\t\tconst messageType = 'danger';\r\n\t\t\tconst message = 'Update failed';\r\n\t\t\tconst description = `Record does not exist.`;\r\n\t\t\tresponse.setBody({ updated: false, sysId, fieldName, value, newValue: '', canWrite, message, description, fieldLabel });\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tbulkUpdate: function (request, response) {\r\n\t\tconst { table, sysIds, field, updateValue } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label, refTable } = field;\r\n\t\tconst changes = {};\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\t//TODO: update this so that it check a record\r\n\t\t// \t\tthis will cause an issue for marketer + enhacned markerter\r\n\t\t//\t\tbecuase the ACL checks agaist a record\r\n\r\n\t\t// if (!tableGR.canWrite()) {\r\n\t\t// \tresponse.setBody(\r\n\t\t// \t\t{\r\n\t\t// \t\t\tsysIds,\r\n\t\t// \t\t\tfield: field.value,\r\n\t\t// \t\t\toldValue: {\r\n\t\t// \t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t// \t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tnewValue: {\r\n\t\t// \t\t\t\tdisplay_value: field.displayValue,\r\n\t\t// \t\t\t\tvalue: updateValue,\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\ttable,\r\n\t\t// \t\t\tchanges,\r\n\t\t// \t\t\tcanWriteTable: false,\r\n\t\t// \t\t\tmessage,\r\n\t\t// \t\t\tdescription,\r\n\t\t// \t\t\tmessageType,\r\n\t\t// \t\t\teditFailed: true\r\n\t\t// \t\t}\r\n\t\t// \t);\r\n\t\t// \treturn response;\r\n\t\t// }\r\n\r\n\t\tvar oldValue = {};\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\toldValue = {\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(fieldName),\r\n\t\t\t\tvalue: tableGR.getValue(fieldName),\r\n\t\t\t}\r\n\r\n\t\t\tvar color = false;\r\n\t\t\tif (fieldName === \"state\" || fieldName === \"status\" || fieldName === \"priority\") {\r\n\t\t\t\tvar api = new x_cadso_work.GetColorsForFields();\r\n\t\t\t\tfetchColor = api.fetch(table);\r\n\r\n\t\t\t\tif (fetchColor) {\r\n\t\t\t\t\tcolor = fetchColor[fieldName][updateValue.toString()];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar avatar = ''\r\n\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tavatar = this._getCachedAvatar(updateValue);\r\n\t\t\t}\r\n\r\n\t\t\tif (fieldName === \"work_notes\") {\r\n\t\t\t\ttableGR.work_notes = updateValue;\r\n\t\t\t} else if (type && type === 'glide_date_time') {\r\n\t\t\t\tvar gdt = new GlideDateTime();\r\n\r\n\t\t\t\tgdt.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt);\r\n\t\t\t} else if (type && type === 'glide_date') {\r\n\t\t\t\tvar gdt1 = new GlideDate();\r\n\t\t\t\tgdt1.setDisplayValue(updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt1);\r\n\t\t\t} else if (field.type === 'glide_time') {\r\n\t\t\t\tvar gdt2 = new GlideDateTime();\r\n\t\t\t\tgdt2.setDisplayValue('1970-01-01 ' + updateValue);\r\n\t\t\t\ttableGR.setValue(fieldName, gdt2.getValue());\r\n\t\t\t} else if (field.type === \"glide_duration\") {\r\n\t\t\t\tvar dur = new GlideDuration(updateValue);\r\n\t\t\t\ttableGR.setValue(field.value, dur.getValue());\r\n\t\t\t} else {\r\n\t\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplay_value: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t\tif (color) {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()] =\r\n\t\t\t\t{\r\n\t\t\t\t\t...color,\r\n\t\t\t\t\t...changes[tableGR.getUniqueValue()]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (type && type === 'reference' && refTable && refTable === 'sys_user') {\r\n\t\t\t\tchanges[tableGR.getUniqueValue()].avatar = avatar\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody(\r\n\t\t\t{\r\n\t\t\t\tsysIds,\r\n\t\t\t\tfield: field.value,\r\n\t\t\t\toldValue,\r\n\t\t\t\tnewValue: {\r\n\t\t\t\t\tdisplay_value: field.displayValue,\r\n\t\t\t\t\tvalue: updateValue,\r\n\t\t\t\t},\r\n\t\t\t\ttable,\r\n\t\t\t\tchanges,\r\n\t\t\t\tcanWriteTable,\r\n\t\t\t\tmessage,\r\n\t\t\t\tdescription,\r\n\t\t\t\tmessageType,\r\n\t\t\t\teditFailed: cannotEdit > 0,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\tclearField: function (request, response) {\r\n\t\tconst { table, sysIds, field } = request.body.data;\r\n\t\tconst { type, value: fieldName, name: label } = field;\r\n\t\tconst changes = {};\r\n\r\n\t\tlet messageType = 'danger';\r\n\t\tlet message = 'Update failed';\r\n\t\tlet description = `Unable to edit this table with your current permissions.`;\r\n\r\n\t\tlet updateValue = \"\";\r\n\r\n\t\tconst tableGR = new GlideRecord(table);\r\n\t\ttableGR.addQuery(\"sys_id\", \"IN\", sysIds);\r\n\t\ttableGR.query();\r\n\r\n\t\tlet cannotEdit = 0;\r\n\t\tlet count = 0;\r\n\r\n\t\tif (!tableGR.canWrite()) {\r\n\t\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable: false, message, description, messageType });\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\twhile (tableGR.next()) {\r\n\t\t\tcount++;\r\n\t\t\tif (!tableGR[fieldName].canWrite()) {\r\n\t\t\t\tcannotEdit++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\ttableGR.setValue(field.value, updateValue);\r\n\r\n\r\n\r\n\t\t\tvar updated = tableGR.update();\r\n\t\t\tchanges[tableGR.getUniqueValue()] = {\r\n\t\t\t\tupdated,\r\n\t\t\t\tvalue: tableGR.getValue(field.value),\r\n\t\t\t\tdisplayValue: tableGR.getDisplayValue(field.value),\r\n\t\t\t\tpassedValue: updateValue\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst canWriteTable = count !== cannotEdit;\r\n\r\n\t\tif (!count) {\r\n\t\t\tdescription = `No records were selected to be updated.`;\r\n\t\t} else if (cannotEdit) {\r\n\t\t\tconst fieldLabel = tableGR[fieldName].getLabel();\r\n\t\t\tdescription = `Unable to edit \"${label || fieldLabel}\" for ${cannotEdit} record${cannotEdit > 1 ? 's' : ''} with your current permissions.`;\r\n\t\t} else {\r\n\t\t\tmessage = '';\r\n\t\t\tdescription = '';\r\n\t\t\tmessageType = '';\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ sysIds, field: field.value, newValue: updateValue, table, changes, canWriteTable, message, description, messageType, editFailed: cannotEdit > 0 });\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tvar sysUserGr = new GlideRecord('sys_user');\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue('avatar');\r\n\t\t\tavatar = avatar == null ? '' : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue('photo');\r\n\t\t\tphoto = photo == null ? '' : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + '.iix' : '';\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = '';\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetColor: function (field, sys_id, colorField) {\r\n\t\tvar table = \"x_cadso_work_\" + field;\r\n\t\tvar GR = new GlideRecord(table);\r\n\t\tif (GR.get(sys_id)) {\r\n\t\t\tvar returnValue = \"\";\r\n\t\t\treturnValue = GR.getValue(colorField);\r\n\t\t\treturn returnValue;\r\n\t\t}\r\n\r\n\t},\r\n\ttype: \"UIListUpdateApiMS\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_0ffee2bc97d7a110ac33f109c253af06",
    "display_value": "sys_script_include_0ffee2bc97d7a110ac33f109c253af06"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_work.UIListUpdateApiMS",
    "display_value": "x_cadso_work.UIListUpdateApiMS"
  },
  "sys_created_on": {
    "value": "2023-06-05 22:09:36",
    "display_value": "2023-06-05 03:09:36 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "UIListUpdateApiMS",
    "display_value": "UIListUpdateApiMS"
  },
  "sys_name": {
    "value": "UIListUpdateApiMS",
    "display_value": "UIListUpdateApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "desiree.morehouse",
    "display_value": "desiree.morehouse"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
