{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "d6091a9c87e36910b656fe66cebb3567",
    "extracted_at": "2025-09-19T21:48:31.492Z",
    "display_value": "activityStreamApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "166",
    "display_value": "166"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-07-17 03:38:31",
    "display_value": "2024-07-16 08:38:31 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const activityStreamApiMS = Class.create();\nactivityStreamApiMS.prototype = {\n\tinitialize: function () {\n\t\tthis._constants = {\n\t\t\thistoryLine: \"sys_history_line\",\n\t\t\tjournalField: \"sys_journal_field\",\n\t\t\tsysAttachment: \"sys_attachment\",\n\t\t};\n\n\t\tthis.currentUserId = gs.getUserID();\n\n\t\tthis.response = {\n\t\t\titemsObj: {},\n\t\t\titems: [],\n\t\t\tcurrentUserId: {},\n\t\t};\n\t},\n\n\tfetch: function ({ sysId, table }) {\n\t\tif (sysId) {\n\t\t\tvar validRecordCheckGr = new GlideRecord(table);\n\t\t\tif (!validRecordCheckGr.get(sysId)) return this.response;\n\t\t\tthis.fetchSysAttachment(sysId, table);\n\t\t\tthis.fetchEntries(sysId, table);\n\t\t\tthis.sortResponse();\n\t\t}\n\n\t\t\n\n\t\tthis.fetchCurrentUser(); \n\n\t\t\n\n\t\treturn this.response;\n\t},\n\n\tfetchCurrentUser: function () {\n\t\tthis.response.currentUserId.value = gs.getUser().getName();\n\t\tthis.response.currentUserId.displayValue = gs.getUser().getDisplayName();\n\t\tthis.response.currentUserId.avatar = gs.getUser().getDisplayName();\n\t\tconst userGr = new GlideRecord(`sys_user`);\n\t\tif (userGr.get(gs.getUser().getID())) {\n\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\n\t\t\tthis.response.currentUserId.avatar = avatar && avatar != null ? avatar + '.iix' : '';\n\t\t} \n\t},\n\n\tfetchSysAttachment: function (sysId) {\n\t\tconst sysAttachmentGr = new GlideRecord(\"sys_attachment\");\n\t\tsysAttachmentGr.addQuery(\"table_sys_id\", sysId);\n\t\tsysAttachmentGr.query();\n\n\t\twhile (sysAttachmentGr.next()) {\n\t\t\tconst table = sysAttachmentGr.getValue(\"table_name\");\n\t\t\tconst contentType = sysAttachmentGr.getDisplayValue(\"content_type\");\n\t\t\tconst record = {\n\t\t\t\tinternalType: this._constants.sysAttachment,\n\t\t\t\tcontentType,\n\t\t\t\tsys_created_on: this.getDateTimeField({\n\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t}),\n\t\t\t\tfile_name: this.getField({ fieldName: \"file_name\", tableGr: sysAttachmentGr }),\n\t\t\t\tuser: {\n\t\t\t\t\t...this.getField({ fieldName: \"sys_created_by\", tableGr: sysAttachmentGr }),\n\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\tfieldName: \"sys_created_by\",\n\t\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t\tsrc: `${sysAttachmentGr.getUniqueValue()}.iix`,\n\t\t\t\tsys_id: sysAttachmentGr.getUniqueValue(),\n\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\tfileObj: {\n\t\t\t\t\tlastModified: new GlideDateTime(\n\t\t\t\t\t\tsysAttachmentGr.getDisplayValue(\"sys_updated_on\")\n\t\t\t\t\t).getNumericValue(),\n\t\t\t\t\tlastModifiedDate: sysAttachmentGr.getDisplayValue(\"sys_updated_on\"),\n\t\t\t\t\tname:\n\t\t\t\t\tcontentType.indexOf(\"image\") > -1\n\t\t\t\t\t? `${sysAttachmentGr.getUniqueValue()}.iix`\n\t\t\t\t\t: sysAttachmentGr.getDisplayValue(\"file_name\"),\n\t\t\t\t\ttype: contentType,\n\t\t\t\t\twebkitRelativePath: \"\",\n\t\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\thistoryLines: [],\n\t\t\t\t\tworkNotes: [],\n\t\t\t\t\tattachments: [],\n\t\t\t\t\temails: [],\n\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.response.itemsObj[record.sys_created_on.value].attachments.push(record);\n\t\t}\n\t},\n\n\tfetchAcceptableFields: function(table) {\n\t\tlet acceptableFields = gs.getProperty(\"glide.ui.\" + table + \"_activity.fields\");\n\t\tvar remove = ['*Attachments*','sys_updated_on','sys_updated_by','sys_mod_count','*EmailCorrespondence*','*EmailAutogenerated*','*Relations*', 'reassignment_count', 'rejection_count', 'comments_and_work_notes', 'approval_history'];\n\t\tremove.forEach(function(r) {\n\t\t\tacceptableFields = acceptableFields.replace(r, '');\n\t\t});\n\t\treturn acceptableFields;\n\t},\n\n\tfetchEntries: function (sysId, table) {\n\t\tconst hw = new sn_hw.HistoryWalker(table, sysId);\n\t\thw.setWithJournalFields(true);\n\t\thw.setWithChanges(true);\n\t\t// hw.setFieldLevelSecurity(false);\n\t\t// hw.setRecordLevelSecurity(false);\n\t\tconst acceptableFields = this.fetchAcceptableFields(table);\n\n\t\tdo {\n\t\t\tconst walkedGr = hw.getWalkedRecord();\n\t\t\tconst fields = this.getChangedFieldNames(hw.getWalkedRecord());\n\t\t\tif(!fields)\n\t\t\t{\n\t\t\t\tgs.info(\"activityStreamApiMS - fetchEntries ERROR\")\n\t\t\t}\n\t\t\tlet foundField = false;\n\t\t\tconst modCount = parseInt(walkedGr.getValue(\"sys_mod_count\"));\n\n\t\t\tif (modCount > -1) {\n\t\t\t\tfor (let x = 0; x < fields.length; x++) {\n\t\t\t\t\tconst { name: field, label, type } = fields[x];\n\t\t\t\t\tif (field && acceptableFields.indexOf(field) > -1) {\n\t\t\t\t\t\tfoundField = true;\n\t\t\t\t\t\tlet sys_created_on = {};\n\t\t\t\t\t\tlet updateOrCreated = 'sys_created_by';\n\n\t\t\t\t\t\tif (modCount === 0) {\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdateOrCreated = 'sys_updated_by';\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_updated_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet record = {};\n\t\t\t\t\t\tlet typeOfUpdate = this._constants.historyLine;\n\t\t\t\t\t\tif (field === \"approval_history\" || field === \"comments\" || field === \"work_notes\") {\n\t\t\t\t\t\t\ttypeOfUpdate = this._constants.journalField;\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.journalField,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tdisplayValue: walkedGr.getValue(field),\n\t\t\t\t\t\t\t\t\tvalue: walkedGr.getValue(field)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telement: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.historyLine,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tlabel: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tnew: this.getField({ fieldName: field, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\told: {displayValue: '', value: ''},\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\t\t\t\thistoryLines: [],\n\t\t\t\t\t\t\t\tworkNotes: [],\n\t\t\t\t\t\t\t\tattachments: [],\n\t\t\t\t\t\t\t\temails: [],\n\t\t\t\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeOfUpdate === this._constants.historyLine) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].historyLines.push(record);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].workNotes.push(record);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (hw.walkForward());\n\n\n\t},\n\n\tfetchSysHistoryLine: function (sysId) {\n\n\t},\n\n\taddComment: function(data, response) {\n\t\tconst {sysId, table, commentType, comment, mentions = []} = data;\n\t\tlet valid = false;\n\t\tconst tableGr = new GlideRecord(table);\n\t\tif (tableGr.get(sysId)) {\n\t\t\t//tableGr.work_notes.setDisplayValue(comment);\n\t\t\ttableGr[commentType].setDisplayValue(comment);\n\t\t\ttableGr.update();\n\t\t\tvalid = true;\n\n\t\t\tif (mentions.length) {\n\t\t\t\tconst sender = gs.getUserID();\n\t\t\t\tmentions.forEach(function(mention) {\n\t\t\t\t\tconst { value, displayValue } = mention;\n\t\t\t\t\tif (value === sender) return;\n\t\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', tableGr, JSON.stringify({ sender, user: value }), 'mentionAS');\n// \t\t\t\t\tvar lnTable = 'live_' + 'notification';\n// \t\t\t\t\tvar liveNotificationGr = new GlideRecord(lnTable);\n// \t\t\t\t\tliveNotificationGr.newRecord();\n// \t\t\t\t\tliveNotificationGr.setValue('document', sysId);\n// \t\t\t\t\tliveNotificationGr.setValue('field_name', commentType);\n// \t\t\t\t\tliveNotificationGr.setValue('table', table);\n// \t\t\t\t\tliveNotificationGr.setValue('title', tableGr.getDisplayValue());\n// \t\t\t\t\tliveNotificationGr.setValue('message', \"You have been mentioned\");\n// \t\t\t\t\tliveNotificationGr.setValue('user', value);\n// \t\t\t\t\tliveNotificationGr.setValue('user_from', gs.getUserID());\n// \t\t\t\t\t\t// current.profile=\"577b3a78878ee5103613fd94dabb3582\"; \n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\n\t\treturn {valid};\n\t},\n\n\tgetChangedFieldNames: function(tableGr) {\n\t\tif(tableGr)\n\t\t{\n\t\t\tconst result = [];\n\t\t\tconst elements = tableGr.getElements();\n\t\t\tif(elements)\n\t\t\t{\n\t\t\t\tconst size = elements.length;\n\t\t\t\tfor (let i = 0; i < size; i++) {\n\t\t\t\t\tconst ge = elements[i];\n\t\t\t\t\tif (ge.changes()) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tname: ge.getName(), \n\t\t\t\t\t\t\tlabel: ge.getLabel(), \n\t\t\t\t\t\t\ttype: ge.getED().getInternalType()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t},\n\n\ttype: \"activityStreamApiMS\",\n};\n",
    "display_value": "const activityStreamApiMS = Class.create();\nactivityStreamApiMS.prototype = {\n\tinitialize: function () {\n\t\tthis._constants = {\n\t\t\thistoryLine: \"sys_history_line\",\n\t\t\tjournalField: \"sys_journal_field\",\n\t\t\tsysAttachment: \"sys_attachment\",\n\t\t};\n\n\t\tthis.currentUserId = gs.getUserID();\n\n\t\tthis.response = {\n\t\t\titemsObj: {},\n\t\t\titems: [],\n\t\t\tcurrentUserId: {},\n\t\t};\n\t},\n\n\tfetch: function ({ sysId, table }) {\n\t\tif (sysId) {\n\t\t\tvar validRecordCheckGr = new GlideRecord(table);\n\t\t\tif (!validRecordCheckGr.get(sysId)) return this.response;\n\t\t\tthis.fetchSysAttachment(sysId, table);\n\t\t\tthis.fetchEntries(sysId, table);\n\t\t\tthis.sortResponse();\n\t\t}\n\n\t\t\n\n\t\tthis.fetchCurrentUser(); \n\n\t\t\n\n\t\treturn this.response;\n\t},\n\n\tfetchCurrentUser: function () {\n\t\tthis.response.currentUserId.value = gs.getUser().getName();\n\t\tthis.response.currentUserId.displayValue = gs.getUser().getDisplayName();\n\t\tthis.response.currentUserId.avatar = gs.getUser().getDisplayName();\n\t\tconst userGr = new GlideRecord(`sys_user`);\n\t\tif (userGr.get(gs.getUser().getID())) {\n\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\n\t\t\tthis.response.currentUserId.avatar = avatar && avatar != null ? avatar + '.iix' : '';\n\t\t} \n\t},\n\n\tfetchSysAttachment: function (sysId) {\n\t\tconst sysAttachmentGr = new GlideRecord(\"sys_attachment\");\n\t\tsysAttachmentGr.addQuery(\"table_sys_id\", sysId);\n\t\tsysAttachmentGr.query();\n\n\t\twhile (sysAttachmentGr.next()) {\n\t\t\tconst table = sysAttachmentGr.getValue(\"table_name\");\n\t\t\tconst contentType = sysAttachmentGr.getDisplayValue(\"content_type\");\n\t\t\tconst record = {\n\t\t\t\tinternalType: this._constants.sysAttachment,\n\t\t\t\tcontentType,\n\t\t\t\tsys_created_on: this.getDateTimeField({\n\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t}),\n\t\t\t\tfile_name: this.getField({ fieldName: \"file_name\", tableGr: sysAttachmentGr }),\n\t\t\t\tuser: {\n\t\t\t\t\t...this.getField({ fieldName: \"sys_created_by\", tableGr: sysAttachmentGr }),\n\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\tfieldName: \"sys_created_by\",\n\t\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t\tsrc: `${sysAttachmentGr.getUniqueValue()}.iix`,\n\t\t\t\tsys_id: sysAttachmentGr.getUniqueValue(),\n\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\tfileObj: {\n\t\t\t\t\tlastModified: new GlideDateTime(\n\t\t\t\t\t\tsysAttachmentGr.getDisplayValue(\"sys_updated_on\")\n\t\t\t\t\t).getNumericValue(),\n\t\t\t\t\tlastModifiedDate: sysAttachmentGr.getDisplayValue(\"sys_updated_on\"),\n\t\t\t\t\tname:\n\t\t\t\t\tcontentType.indexOf(\"image\") > -1\n\t\t\t\t\t? `${sysAttachmentGr.getUniqueValue()}.iix`\n\t\t\t\t\t: sysAttachmentGr.getDisplayValue(\"file_name\"),\n\t\t\t\t\ttype: contentType,\n\t\t\t\t\twebkitRelativePath: \"\",\n\t\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\thistoryLines: [],\n\t\t\t\t\tworkNotes: [],\n\t\t\t\t\tattachments: [],\n\t\t\t\t\temails: [],\n\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.response.itemsObj[record.sys_created_on.value].attachments.push(record);\n\t\t}\n\t},\n\n\tfetchAcceptableFields: function(table) {\n\t\tlet acceptableFields = gs.getProperty(\"glide.ui.\" + table + \"_activity.fields\");\n\t\tvar remove = ['*Attachments*','sys_updated_on','sys_updated_by','sys_mod_count','*EmailCorrespondence*','*EmailAutogenerated*','*Relations*', 'reassignment_count', 'rejection_count', 'comments_and_work_notes', 'approval_history'];\n\t\tremove.forEach(function(r) {\n\t\t\tacceptableFields = acceptableFields.replace(r, '');\n\t\t});\n\t\treturn acceptableFields;\n\t},\n\n\tfetchEntries: function (sysId, table) {\n\t\tconst hw = new sn_hw.HistoryWalker(table, sysId);\n\t\thw.setWithJournalFields(true);\n\t\thw.setWithChanges(true);\n\t\t// hw.setFieldLevelSecurity(false);\n\t\t// hw.setRecordLevelSecurity(false);\n\t\tconst acceptableFields = this.fetchAcceptableFields(table);\n\n\t\tdo {\n\t\t\tconst walkedGr = hw.getWalkedRecord();\n\t\t\tconst fields = this.getChangedFieldNames(hw.getWalkedRecord());\n\t\t\tif(!fields)\n\t\t\t{\n\t\t\t\tgs.info(\"activityStreamApiMS - fetchEntries ERROR\")\n\t\t\t}\n\t\t\tlet foundField = false;\n\t\t\tconst modCount = parseInt(walkedGr.getValue(\"sys_mod_count\"));\n\n\t\t\tif (modCount > -1) {\n\t\t\t\tfor (let x = 0; x < fields.length; x++) {\n\t\t\t\t\tconst { name: field, label, type } = fields[x];\n\t\t\t\t\tif (field && acceptableFields.indexOf(field) > -1) {\n\t\t\t\t\t\tfoundField = true;\n\t\t\t\t\t\tlet sys_created_on = {};\n\t\t\t\t\t\tlet updateOrCreated = 'sys_created_by';\n\n\t\t\t\t\t\tif (modCount === 0) {\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdateOrCreated = 'sys_updated_by';\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_updated_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet record = {};\n\t\t\t\t\t\tlet typeOfUpdate = this._constants.historyLine;\n\t\t\t\t\t\tif (field === \"approval_history\" || field === \"comments\" || field === \"work_notes\") {\n\t\t\t\t\t\t\ttypeOfUpdate = this._constants.journalField;\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.journalField,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tdisplayValue: walkedGr.getValue(field),\n\t\t\t\t\t\t\t\t\tvalue: walkedGr.getValue(field)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telement: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.historyLine,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tlabel: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tnew: this.getField({ fieldName: field, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\told: {displayValue: '', value: ''},\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\t\t\t\thistoryLines: [],\n\t\t\t\t\t\t\t\tworkNotes: [],\n\t\t\t\t\t\t\t\tattachments: [],\n\t\t\t\t\t\t\t\temails: [],\n\t\t\t\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeOfUpdate === this._constants.historyLine) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].historyLines.push(record);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].workNotes.push(record);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (hw.walkForward());\n\n\n\t},\n\n\tfetchSysHistoryLine: function (sysId) {\n\n\t},\n\n\taddComment: function(data, response) {\n\t\tconst {sysId, table, commentType, comment, mentions = []} = data;\n\t\tlet valid = false;\n\t\tconst tableGr = new GlideRecord(table);\n\t\tif (tableGr.get(sysId)) {\n\t\t\t//tableGr.work_notes.setDisplayValue(comment);\n\t\t\ttableGr[commentType].setDisplayValue(comment);\n\t\t\ttableGr.update();\n\t\t\tvalid = true;\n\n\t\t\tif (mentions.length) {\n\t\t\t\tconst sender = gs.getUserID();\n\t\t\t\tmentions.forEach(function(mention) {\n\t\t\t\t\tconst { value, displayValue } = mention;\n\t\t\t\t\tif (value === sender) return;\n\t\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', tableGr, JSON.stringify({ sender, user: value }), 'mentionAS');\n// \t\t\t\t\tvar lnTable = 'live_' + 'notification';\n// \t\t\t\t\tvar liveNotificationGr = new GlideRecord(lnTable);\n// \t\t\t\t\tliveNotificationGr.newRecord();\n// \t\t\t\t\tliveNotificationGr.setValue('document', sysId);\n// \t\t\t\t\tliveNotificationGr.setValue('field_name', commentType);\n// \t\t\t\t\tliveNotificationGr.setValue('table', table);\n// \t\t\t\t\tliveNotificationGr.setValue('title', tableGr.getDisplayValue());\n// \t\t\t\t\tliveNotificationGr.setValue('message', \"You have been mentioned\");\n// \t\t\t\t\tliveNotificationGr.setValue('user', value);\n// \t\t\t\t\tliveNotificationGr.setValue('user_from', gs.getUserID());\n// \t\t\t\t\t\t// current.profile=\"577b3a78878ee5103613fd94dabb3582\"; \n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\n\t\treturn {valid};\n\t},\n\n\tgetChangedFieldNames: function(tableGr) {\n\t\tif(tableGr)\n\t\t{\n\t\t\tconst result = [];\n\t\t\tconst elements = tableGr.getElements();\n\t\t\tif(elements)\n\t\t\t{\n\t\t\t\tconst size = elements.length;\n\t\t\t\tfor (let i = 0; i < size; i++) {\n\t\t\t\t\tconst ge = elements[i];\n\t\t\t\t\tif (ge.changes()) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tname: ge.getName(), \n\t\t\t\t\t\t\tlabel: ge.getLabel(), \n\t\t\t\t\t\t\ttype: ge.getED().getInternalType()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t},\n\n\ttype: \"activityStreamApiMS\",\n};\n",
    "formatted_script": {
      "line_count": 295,
      "char_count": 9389,
      "preview": "const activityStreamApiMS = Class.create();\nactivityStreamApiMS.prototype = {\n\tinitialize: function () {\n\t\tthis._constants = {\n\t\t\thistoryLine: \"sys_history_line\",\n\t\t\tjournalField: \"sys_journal_field\",...",
      "full_script": "const activityStreamApiMS = Class.create();\nactivityStreamApiMS.prototype = {\n\tinitialize: function () {\n\t\tthis._constants = {\n\t\t\thistoryLine: \"sys_history_line\",\n\t\t\tjournalField: \"sys_journal_field\",\n\t\t\tsysAttachment: \"sys_attachment\",\n\t\t};\n\n\t\tthis.currentUserId = gs.getUserID();\n\n\t\tthis.response = {\n\t\t\titemsObj: {},\n\t\t\titems: [],\n\t\t\tcurrentUserId: {},\n\t\t};\n\t},\n\n\tfetch: function ({ sysId, table }) {\n\t\tif (sysId) {\n\t\t\tvar validRecordCheckGr = new GlideRecord(table);\n\t\t\tif (!validRecordCheckGr.get(sysId)) return this.response;\n\t\t\tthis.fetchSysAttachment(sysId, table);\n\t\t\tthis.fetchEntries(sysId, table);\n\t\t\tthis.sortResponse();\n\t\t}\n\n\t\t\n\n\t\tthis.fetchCurrentUser(); \n\n\t\t\n\n\t\treturn this.response;\n\t},\n\n\tfetchCurrentUser: function () {\n\t\tthis.response.currentUserId.value = gs.getUser().getName();\n\t\tthis.response.currentUserId.displayValue = gs.getUser().getDisplayName();\n\t\tthis.response.currentUserId.avatar = gs.getUser().getDisplayName();\n\t\tconst userGr = new GlideRecord(`sys_user`);\n\t\tif (userGr.get(gs.getUser().getID())) {\n\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\n\t\t\tthis.response.currentUserId.avatar = avatar && avatar != null ? avatar + '.iix' : '';\n\t\t} \n\t},\n\n\tfetchSysAttachment: function (sysId) {\n\t\tconst sysAttachmentGr = new GlideRecord(\"sys_attachment\");\n\t\tsysAttachmentGr.addQuery(\"table_sys_id\", sysId);\n\t\tsysAttachmentGr.query();\n\n\t\twhile (sysAttachmentGr.next()) {\n\t\t\tconst table = sysAttachmentGr.getValue(\"table_name\");\n\t\t\tconst contentType = sysAttachmentGr.getDisplayValue(\"content_type\");\n\t\t\tconst record = {\n\t\t\t\tinternalType: this._constants.sysAttachment,\n\t\t\t\tcontentType,\n\t\t\t\tsys_created_on: this.getDateTimeField({\n\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t}),\n\t\t\t\tfile_name: this.getField({ fieldName: \"file_name\", tableGr: sysAttachmentGr }),\n\t\t\t\tuser: {\n\t\t\t\t\t...this.getField({ fieldName: \"sys_created_by\", tableGr: sysAttachmentGr }),\n\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\tfieldName: \"sys_created_by\",\n\t\t\t\t\t\ttableGr: sysAttachmentGr,\n\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t\tsrc: `${sysAttachmentGr.getUniqueValue()}.iix`,\n\t\t\t\tsys_id: sysAttachmentGr.getUniqueValue(),\n\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\tfileObj: {\n\t\t\t\t\tlastModified: new GlideDateTime(\n\t\t\t\t\t\tsysAttachmentGr.getDisplayValue(\"sys_updated_on\")\n\t\t\t\t\t).getNumericValue(),\n\t\t\t\t\tlastModifiedDate: sysAttachmentGr.getDisplayValue(\"sys_updated_on\"),\n\t\t\t\t\tname:\n\t\t\t\t\tcontentType.indexOf(\"image\") > -1\n\t\t\t\t\t? `${sysAttachmentGr.getUniqueValue()}.iix`\n\t\t\t\t\t: sysAttachmentGr.getDisplayValue(\"file_name\"),\n\t\t\t\t\ttype: contentType,\n\t\t\t\t\twebkitRelativePath: \"\",\n\t\t\t\t\turl: `/sys_attachment.do?sys_id=${sysAttachmentGr.getUniqueValue()}&sysparm_this_url=${table}.do%3Fsys_id%3D${sysId}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\thistoryLines: [],\n\t\t\t\t\tworkNotes: [],\n\t\t\t\t\tattachments: [],\n\t\t\t\t\temails: [],\n\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.response.itemsObj[record.sys_created_on.value].attachments.push(record);\n\t\t}\n\t},\n\n\tfetchAcceptableFields: function(table) {\n\t\tlet acceptableFields = gs.getProperty(\"glide.ui.\" + table + \"_activity.fields\");\n\t\tvar remove = ['*Attachments*','sys_updated_on','sys_updated_by','sys_mod_count','*EmailCorrespondence*','*EmailAutogenerated*','*Relations*', 'reassignment_count', 'rejection_count', 'comments_and_work_notes', 'approval_history'];\n\t\tremove.forEach(function(r) {\n\t\t\tacceptableFields = acceptableFields.replace(r, '');\n\t\t});\n\t\treturn acceptableFields;\n\t},\n\n\tfetchEntries: function (sysId, table) {\n\t\tconst hw = new sn_hw.HistoryWalker(table, sysId);\n\t\thw.setWithJournalFields(true);\n\t\thw.setWithChanges(true);\n\t\t// hw.setFieldLevelSecurity(false);\n\t\t// hw.setRecordLevelSecurity(false);\n\t\tconst acceptableFields = this.fetchAcceptableFields(table);\n\n\t\tdo {\n\t\t\tconst walkedGr = hw.getWalkedRecord();\n\t\t\tconst fields = this.getChangedFieldNames(hw.getWalkedRecord());\n\t\t\tif(!fields)\n\t\t\t{\n\t\t\t\tgs.info(\"activityStreamApiMS - fetchEntries ERROR\")\n\t\t\t}\n\t\t\tlet foundField = false;\n\t\t\tconst modCount = parseInt(walkedGr.getValue(\"sys_mod_count\"));\n\n\t\t\tif (modCount > -1) {\n\t\t\t\tfor (let x = 0; x < fields.length; x++) {\n\t\t\t\t\tconst { name: field, label, type } = fields[x];\n\t\t\t\t\tif (field && acceptableFields.indexOf(field) > -1) {\n\t\t\t\t\t\tfoundField = true;\n\t\t\t\t\t\tlet sys_created_on = {};\n\t\t\t\t\t\tlet updateOrCreated = 'sys_created_by';\n\n\t\t\t\t\t\tif (modCount === 0) {\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_created_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdateOrCreated = 'sys_updated_by';\n\t\t\t\t\t\t\tsys_created_on = this.getDateTimeField({\n\t\t\t\t\t\t\t\tfieldName: \"sys_updated_on\",\n\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet record = {};\n\t\t\t\t\t\tlet typeOfUpdate = this._constants.historyLine;\n\t\t\t\t\t\tif (field === \"approval_history\" || field === \"comments\" || field === \"work_notes\") {\n\t\t\t\t\t\t\ttypeOfUpdate = this._constants.journalField;\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.journalField,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tdisplayValue: walkedGr.getValue(field),\n\t\t\t\t\t\t\t\t\tvalue: walkedGr.getValue(field)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telement: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trecord = {\n\t\t\t\t\t\t\t\tinternalType: this._constants.historyLine,\n\t\t\t\t\t\t\t\tsys_created_on,\n\t\t\t\t\t\t\t\tlabel: this.getField({ fieldName: \"label\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tfield: this.getField({ fieldName: \"field\", tableGr: walkedGr, displayValue: label, value: field }),\n\t\t\t\t\t\t\t\tnew: this.getField({ fieldName: field, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\told: {displayValue: '', value: ''},\n\t\t\t\t\t\t\t\ttype: {displayValue: type, value: type},\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t...this.getField({ fieldName: updateOrCreated, tableGr: walkedGr }),\n\t\t\t\t\t\t\t\t\t...this.getAvatar({\n\t\t\t\t\t\t\t\t\t\tfieldName: updateOrCreated,\n\t\t\t\t\t\t\t\t\t\ttableGr: walkedGr,\n\t\t\t\t\t\t\t\t\t\timageFieldName: \"photo\",\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tisUser: this.currentUserId === walkedGr.getValue(updateOrCreated),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.response.itemsObj[record.sys_created_on.value]) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value] = {\n\t\t\t\t\t\t\t\thistoryLines: [],\n\t\t\t\t\t\t\t\tworkNotes: [],\n\t\t\t\t\t\t\t\tattachments: [],\n\t\t\t\t\t\t\t\temails: [],\n\t\t\t\t\t\t\t\ttime: record.sys_created_on.displayValue,\n\t\t\t\t\t\t\t\ttimeNumeric: record.sys_created_on.value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeOfUpdate === this._constants.historyLine) {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].historyLines.push(record);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.response.itemsObj[record.sys_created_on.value].workNotes.push(record);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (hw.walkForward());\n\n\n\t},\n\n\tfetchSysHistoryLine: function (sysId) {\n\n\t},\n\n\taddComment: function(data, response) {\n\t\tconst {sysId, table, commentType, comment, mentions = []} = data;\n\t\tlet valid = false;\n\t\tconst tableGr = new GlideRecord(table);\n\t\tif (tableGr.get(sysId)) {\n\t\t\t//tableGr.work_notes.setDisplayValue(comment);\n\t\t\ttableGr[commentType].setDisplayValue(comment);\n\t\t\ttableGr.update();\n\t\t\tvalid = true;\n\n\t\t\tif (mentions.length) {\n\t\t\t\tconst sender = gs.getUserID();\n\t\t\t\tmentions.forEach(function(mention) {\n\t\t\t\t\tconst { value, displayValue } = mention;\n\t\t\t\t\tif (value === sender) return;\n\t\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', tableGr, JSON.stringify({ sender, user: value }), 'mentionAS');\n// \t\t\t\t\tvar lnTable = 'live_' + 'notification';\n// \t\t\t\t\tvar liveNotificationGr = new GlideRecord(lnTable);\n// \t\t\t\t\tliveNotificationGr.newRecord();\n// \t\t\t\t\tliveNotificationGr.setValue('document', sysId);\n// \t\t\t\t\tliveNotificationGr.setValue('field_name', commentType);\n// \t\t\t\t\tliveNotificationGr.setValue('table', table);\n// \t\t\t\t\tliveNotificationGr.setValue('title', tableGr.getDisplayValue());\n// \t\t\t\t\tliveNotificationGr.setValue('message', \"You have been mentioned\");\n// \t\t\t\t\tliveNotificationGr.setValue('user', value);\n// \t\t\t\t\tliveNotificationGr.setValue('user_from', gs.getUserID());\n// \t\t\t\t\t\t// current.profile=\"577b3a78878ee5103613fd94dabb3582\"; \n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\n\t\treturn {valid};\n\t},\n\n\tgetChangedFieldNames: function(tableGr) {\n\t\tif(tableGr)\n\t\t{\n\t\t\tconst result = [];\n\t\t\tconst elements = tableGr.getElements();\n\t\t\tif(elements)\n\t\t\t{\n\t\t\t\tconst size = elements.length;\n\t\t\t\tfor (let i = 0; i < size; i++) {\n\t\t\t\t\tconst ge = elements[i];\n\t\t\t\t\tif (ge.changes()) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tname: ge.getName(), \n\t\t\t\t\t\t\tlabel: ge.getLabel(), \n\t\t\t\t\t\t\ttype: ge.getED().getInternalType()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t},\n\n\ttype: \"activityStreamApiMS\",\n};\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_d6091a9c87e36910b656fe66cebb3567",
    "display_value": "sys_script_include_d6091a9c87e36910b656fe66cebb3567"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.activityStreamApiMS",
    "display_value": "x_cadso_work.activityStreamApiMS"
  },
  "sys_created_on": {
    "value": "2023-06-16 17:32:13",
    "display_value": "2023-06-16 10:32:13 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "activityStreamApiMS",
    "display_value": "activityStreamApiMS"
  },
  "sys_name": {
    "value": "activityStreamApiMS",
    "display_value": "activityStreamApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
