{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "7b5fb5694782061098519fd8036d43d6",
    "extracted_at": "2025-09-19T21:48:30.968Z",
    "display_value": "CustomFilterApiMSv2",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "44",
    "display_value": "44"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-08-15 21:13:47",
    "display_value": "2025-08-15 02:13:47 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var CustomFilterApiMSv2 = Class.create();\r\nCustomFilterApiMSv2.prototype = {\r\n  initialize: function () {},\r\n\r\n  fetch_sharing_options: function (request, response) {\r\n    const {\r\n      data = {\r\n        searchText: \"\",\r\n      },\r\n    } = request.body;\r\n    const { searchText = \"\" } = data;\r\n    const options = [];\r\n    const userId = gs.getUserID();\r\n\r\n    const workClientApi = new x_cadso_work.WorkClientUtils();\r\n    const agileSegments = workClientApi.getAllAgileSegmentsForUser(userId);\r\n    const nonAgileSegments = workClientApi.getAllSegmentsForUser(userId);\r\n    const agileSegmentsUniques = agileSegments.filter(function (val) {\r\n      return nonAgileSegments.indexOf(val) == -1;\r\n    });\r\n    const segmentsArr = [...agileSegmentsUniques, ...nonAgileSegments];\r\n\r\n    var segmentGr = new GlideRecord(\"x_cadso_work_segment\");\r\n    segmentGr.addQuery(\"sys_id\", \"IN\", segmentsArr.join(\",\"));\r\n\r\n    if (searchText) {\r\n      segmentGr.addQuery(\"short_description\", \"=\", searchText);\r\n    }\r\n\r\n    segmentGr.addActiveQuery();\r\n    segmentGr.orderBy(\"short_description\");\r\n    // \tsegmentGr.setLimit(12);\r\n    segmentGr.query();\r\n\r\n    while (segmentGr.next()) {\r\n      options.push({\r\n        displayValue: segmentGr.getDisplayValue(),\r\n        value: segmentGr.getUniqueValue(),\r\n        type: \"segment\",\r\n      });\r\n    }\r\n\r\n    // TODO\r\n    // Add Users (with Avatars)\r\n    // Add Assignment Groups\r\n    // DECISION\r\n    // Do we add a setLimit once we expand the search\r\n\r\n    response.setBody({\r\n      options,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  main: function (request, response) {\r\n    const {\r\n      data = {\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const { table = \"\" } = data;\r\n    if (!table) {\r\n      response.setBody({\r\n        filters: [],\r\n        error: \"No table was sent.\",\r\n      });\r\n      return response;\r\n    }\r\n\r\n    const customFilters = [];\r\n    const filtersObj = {};\r\n    const filters = [];\r\n\r\n    var publicQuery = \"filter.access=public\";\r\n    var userQuery = \"userDYNAMIC90d1921e5f510100a9ad2572f2b477fe\";\r\n    var segmentQuery =\r\n      \"segmentDYNAMIC127538294701e15085d19fd8036d438a^ORsegmentDYNAMIC6bfd507497083510ac33f109c253aff7\";\r\n    var assignmentGroup = \"assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\";\r\n    var query = [publicQuery, userQuery, segmentQuery, assignmentGroup].join(\"^OR\");\r\n\r\n    //Get all base Filters that user can see. put this into an array and use it to get all the data from those filter\r\n    var baseFilters = [];\r\n    var baseFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filterISNOTEMPTY\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filter.table=\" + table);\r\n    baseFilterM2MGr.addEncodedQuery(query);\r\n    baseFilterM2MGr.orderBy(\"filter\");\r\n    baseFilterM2MGr.query();\r\n    while (baseFilterM2MGr.next()) {\r\n      baseFilters.push(baseFilterM2MGr.getValue(\"filter\"));\r\n    }\r\n    if (baseFilters.length > 0) {\r\n      var baseFiltersQuery = baseFilters.join(\",\");\r\n      var allFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n      allFilterM2MGr.addEncodedQuery(\"filterIN\" + baseFiltersQuery);\r\n      allFilterM2MGr.orderBy(\"filter\");\r\n      allFilterM2MGr.query();\r\n\r\n      // \tvar workSavedFilterM2MGr = new GlideRecord('x_cadso_work_saved_filter_to_associate_m2m');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filterISNOTEMPTY');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filter.table=' + table);\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery(query);\r\n      // \tworkSavedFilterM2MGr.orderBy('filter');\r\n      // \tworkSavedFilterM2MGr.query();\r\n\r\n      while (allFilterM2MGr.next()) {\r\n        const filter = allFilterM2MGr.getValue(\"filter\");\r\n        const savedFilterGr = allFilterM2MGr.filter.getRefRecord();\r\n\r\n        if (!savedFilterGr.isValidRecord()) {\r\n          continue;\r\n        }\r\n\r\n        if (!filtersObj[filter]) {\r\n          filtersObj[filter] = {\r\n            displayValue: savedFilterGr.getDisplayValue(),\r\n            value: savedFilterGr.getUniqueValue(),\r\n            private: savedFilterGr.getValue(\"access\") === \"private\",\r\n            public: savedFilterGr.getValue(\"access\") === \"public\",\r\n            invite: savedFilterGr.getValue(\"access\") === \"invite\",\r\n            condition: savedFilterGr.getValue(\"condition\"),\r\n            filterObject: JSON.parse(savedFilterGr.getValue(\"filter_object\")),\r\n            access: savedFilterGr.getValue(\"access\"),\r\n            rights: \"owner\",\r\n            items: [],\r\n          };\r\n        }\r\n\r\n        if (\r\n          allFilterM2MGr.getValue(\"rights\") === \"editor\" &&\r\n          filtersObj[filter].rights !== \"owner\"\r\n        ) {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        } else if (allFilterM2MGr.getValue(\"rights\") === \"owner\") {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        }\r\n\r\n        const type = allFilterM2MGr.getValue(\"type\");\r\n        var item = {\r\n          type: type,\r\n          user: null,\r\n          segment: null,\r\n          group: null,\r\n          rights: allFilterM2MGr.getValue(\"rights\"),\r\n          displayValue: allFilterM2MGr.getDisplayValue(type),\r\n          value: allFilterM2MGr.getUniqueValue(),\r\n          avatar: null,\r\n        };\r\n\r\n        if (type === \"user\") {\r\n          const userSysId = allFilterM2MGr.getValue(\"user\");\r\n          let user = this.getUserInfo(userSysId);\r\n          item.user = user.user;\r\n          item.avatar = user.avatar;\r\n          item.displayValue = user.displayValue;\r\n        } else if (type === \"segment\") {\r\n          item.segment = allFilterM2MGr.getValue(\"segment\");\r\n        } else if (type === \"group\") {\r\n          item.group = allFilterM2MGr.getValue(\"assignment_group\");\r\n        }\r\n\r\n        filtersObj[filter].items.push(item);\r\n      }\r\n    } else {\r\n      gs.info(\"No base filters found for the given table\");\r\n    }\r\n\r\n    // make it so only people with admin can make invite and public.\r\n    //make it so only view can view\r\n    let accessOptions = [\r\n      {\r\n        value: \"private\",\r\n        label: \"Private\",\r\n        description: \"Only you can access.\",\r\n      },\r\n    ];\r\n    if (gs.getUser().hasRole(\"x_cadso_work.admin\") === true) {\r\n      accessOptions = [\r\n        {\r\n          value: \"private\",\r\n          label: \"Private\",\r\n          description: \"Only you can access\",\r\n        },\r\n        {\r\n          value: \"invite\",\r\n          label: \"Invite Only\",\r\n          description: \"Only you and people you invite can access\",\r\n        },\r\n        {\r\n          value: \"public\",\r\n          label: \"Everyone\",\r\n          description: \"All workspace members can access\",\r\n        },\r\n      ];\r\n    }\r\n\r\n    response.setBody({\r\n      filters: filtersObj,\r\n      currentUserId: this.getUserInfo(gs.getUserID()),\r\n      accessOptions,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  getUserInfo: function (userSysId) {\r\n    result = {};\r\n    if (userSysId) {\r\n      result.value = userSysId;\r\n      const userGr = new GlideRecord(\"sys_user\");\r\n      if (userGr.get(userSysId)) {\r\n        result.user = userSysId;\r\n        const avatar = userGr.getValue(\"photo\") || userGr.getValue(\"avatar\");\r\n        result.avatar = avatar ? avatar + \".iix\" : \"\";\r\n        result.displayValue = userGr.getDisplayValue(\"name\");\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n\r\n  get_references: function (request, response) {\r\n    let { filterTable = \"\", fields = [], queryString = \"\" } = request.body.data;\r\n\r\n    var results = [];\r\n    for (var x = 0; x < fields.length; x++) {\r\n      const field = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(\r\n        filterTable,\r\n        fields[x],\r\n        queryString\r\n      );\r\n      results.push(field);\r\n    }\r\n\r\n    response.setBody({ results });\r\n    return response;\r\n  },\r\n\r\n  delete: function (request, response) {\r\n    const { data = { filter: \"\" } } = request.body;\r\n    const { filter = \"\" } = data;\r\n    const filterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (filterGr.get(filter)) {\r\n      if (!filterGr.canDelete()) {\r\n        response.setBody({ error: \"Not enough access.\", success: false });\r\n        return response;\r\n      }\r\n\r\n      filterGr.deleteRecord();\r\n      response.setBody({ success: true, sysId: filter });\r\n\r\n      return response;\r\n    } else {\r\n      response.setBody({ error: \"Filter does not exist.\", success: false });\r\n      return response;\r\n    }\r\n  },\r\n\r\n  saveFilter: function (request, response) {\r\n    const {\r\n      data = {\r\n        value: \"\",\r\n        displayValue: \"\",\r\n        condition: \"\",\r\n        items: [],\r\n        access: \"\",\r\n        saveType: \"insert\",\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const {\r\n      value: sysId = \"\",\r\n      displayValue = \"\",\r\n      condition = \"\",\r\n      items = [],\r\n      access = \"\",\r\n      saveType = \"insert\" || \"update\",\r\n      table = \"\",\r\n      filterObject = [],\r\n      listQuery = {},\r\n    } = data;\r\n\r\n    gs.info(\"SH listQuery\" + JSON.stringify(data));\r\n\r\n    const recordsNotUpdate = [];\r\n\r\n    if (!sysId && saveType === \"update\") {\r\n      response.setBody({\r\n        successful: false,\r\n        error: 'No record id (field: value) was sent for saveType of \"update\".',\r\n        recordsNotUpdate,\r\n      });\r\n      return response;\r\n    } else if (!table && saveType === \"insert\") {\r\n      response.setBody({ successful: false, error: \"No table value was sent.\", recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    var savedFilterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (saveType === \"update\" && !savedFilterGr.get(sysId)) {\r\n      response.setBody({ successful: false, error: \"Record was not found.\", recordsNotUpdate });\r\n    } else if (saveType === \"insert\") {\r\n      savedFilterGr.newRecord();\r\n      savedFilterGr.setValue(\"table\", table);\r\n    } else if (saveType === \"delete\") {\r\n      // TODO: add delete, we dont want this table to get crazy large.\r\n      response.setBody({ successful: successfulUpdate, recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    savedFilterGr.setValue(\"name\", displayValue);\r\n    savedFilterGr.setValue(\"condition\", condition);\r\n    savedFilterGr.setValue(\"filter_object\", JSON.stringify(filterObject));\r\n    savedFilterGr.setValue(\"access\", access);\r\n    savedFilterGr.setValue(\"query\", JSON.stringify(listQuery));\r\n\r\n    var successfulUpdate = savedFilterGr.update();\r\n\r\n    // making a new filter object to pass back to client\r\n    var newFilter = {};\r\n    if (successfulUpdate) {\r\n      newFilter = data;\r\n      newFilter.sysId = successfulUpdate;\r\n      newFilter.filterObject = filterObject;\r\n    }\r\n\r\n    const newItems = [];\r\n    if (items && items.length) {\r\n      // Looping logic\r\n      items.forEach((item, index) => {\r\n        var workSavedFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n        if (item.delete && workSavedFilterM2MGr.get(item.value)) {\r\n          //delete\r\n          workSavedFilterM2MGr.deleteRecord();\r\n        } else if (item.value && workSavedFilterM2MGr.get(item.value)) {\r\n          // update\r\n          this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else if (item[item.type] && !item.delete && !item.value) {\r\n          // create\r\n          workSavedFilterM2MGr.initialize();\r\n          workSavedFilterM2MGr.newRecord();\r\n          item.value = this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else {\r\n          recordsNotUpdate.push(item);\r\n        }\r\n      });\r\n      if (successfulUpdate) {\r\n        newFilter.items = newItems;\r\n      }\r\n    }\r\n\r\n    // TODO: Send back the data for the filter\r\n\r\n    response.setBody({ successful: successfulUpdate, recordsNotUpdate, newFilter, saveType });\r\n\r\n    return response;\r\n  },\r\n\r\n  setValues: function (workSavedFilterM2MGr, item, filterSysId) {\r\n    // Add Filter\r\n    workSavedFilterM2MGr.setValue(\"user\", item.user);\r\n    workSavedFilterM2MGr.setValue(\"segment\", item.segment);\r\n    workSavedFilterM2MGr.setValue(\"group\", item.group);\r\n    workSavedFilterM2MGr.setValue(\"type\", item.type);\r\n    workSavedFilterM2MGr.setValue(\"rights\", item.rights);\r\n    workSavedFilterM2MGr.setValue(\"filter\", filterSysId);\r\n    let value = workSavedFilterM2MGr.update();\r\n    return value;\r\n  },\r\n\r\n  type: \"CustomFilterApiMSv2\",\r\n};\r\n",
    "display_value": "var CustomFilterApiMSv2 = Class.create();\r\nCustomFilterApiMSv2.prototype = {\r\n  initialize: function () {},\r\n\r\n  fetch_sharing_options: function (request, response) {\r\n    const {\r\n      data = {\r\n        searchText: \"\",\r\n      },\r\n    } = request.body;\r\n    const { searchText = \"\" } = data;\r\n    const options = [];\r\n    const userId = gs.getUserID();\r\n\r\n    const workClientApi = new x_cadso_work.WorkClientUtils();\r\n    const agileSegments = workClientApi.getAllAgileSegmentsForUser(userId);\r\n    const nonAgileSegments = workClientApi.getAllSegmentsForUser(userId);\r\n    const agileSegmentsUniques = agileSegments.filter(function (val) {\r\n      return nonAgileSegments.indexOf(val) == -1;\r\n    });\r\n    const segmentsArr = [...agileSegmentsUniques, ...nonAgileSegments];\r\n\r\n    var segmentGr = new GlideRecord(\"x_cadso_work_segment\");\r\n    segmentGr.addQuery(\"sys_id\", \"IN\", segmentsArr.join(\",\"));\r\n\r\n    if (searchText) {\r\n      segmentGr.addQuery(\"short_description\", \"=\", searchText);\r\n    }\r\n\r\n    segmentGr.addActiveQuery();\r\n    segmentGr.orderBy(\"short_description\");\r\n    // \tsegmentGr.setLimit(12);\r\n    segmentGr.query();\r\n\r\n    while (segmentGr.next()) {\r\n      options.push({\r\n        displayValue: segmentGr.getDisplayValue(),\r\n        value: segmentGr.getUniqueValue(),\r\n        type: \"segment\",\r\n      });\r\n    }\r\n\r\n    // TODO\r\n    // Add Users (with Avatars)\r\n    // Add Assignment Groups\r\n    // DECISION\r\n    // Do we add a setLimit once we expand the search\r\n\r\n    response.setBody({\r\n      options,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  main: function (request, response) {\r\n    const {\r\n      data = {\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const { table = \"\" } = data;\r\n    if (!table) {\r\n      response.setBody({\r\n        filters: [],\r\n        error: \"No table was sent.\",\r\n      });\r\n      return response;\r\n    }\r\n\r\n    const customFilters = [];\r\n    const filtersObj = {};\r\n    const filters = [];\r\n\r\n    var publicQuery = \"filter.access=public\";\r\n    var userQuery = \"userDYNAMIC90d1921e5f510100a9ad2572f2b477fe\";\r\n    var segmentQuery =\r\n      \"segmentDYNAMIC127538294701e15085d19fd8036d438a^ORsegmentDYNAMIC6bfd507497083510ac33f109c253aff7\";\r\n    var assignmentGroup = \"assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\";\r\n    var query = [publicQuery, userQuery, segmentQuery, assignmentGroup].join(\"^OR\");\r\n\r\n    //Get all base Filters that user can see. put this into an array and use it to get all the data from those filter\r\n    var baseFilters = [];\r\n    var baseFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filterISNOTEMPTY\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filter.table=\" + table);\r\n    baseFilterM2MGr.addEncodedQuery(query);\r\n    baseFilterM2MGr.orderBy(\"filter\");\r\n    baseFilterM2MGr.query();\r\n    while (baseFilterM2MGr.next()) {\r\n      baseFilters.push(baseFilterM2MGr.getValue(\"filter\"));\r\n    }\r\n    if (baseFilters.length > 0) {\r\n      var baseFiltersQuery = baseFilters.join(\",\");\r\n      var allFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n      allFilterM2MGr.addEncodedQuery(\"filterIN\" + baseFiltersQuery);\r\n      allFilterM2MGr.orderBy(\"filter\");\r\n      allFilterM2MGr.query();\r\n\r\n      // \tvar workSavedFilterM2MGr = new GlideRecord('x_cadso_work_saved_filter_to_associate_m2m');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filterISNOTEMPTY');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filter.table=' + table);\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery(query);\r\n      // \tworkSavedFilterM2MGr.orderBy('filter');\r\n      // \tworkSavedFilterM2MGr.query();\r\n\r\n      while (allFilterM2MGr.next()) {\r\n        const filter = allFilterM2MGr.getValue(\"filter\");\r\n        const savedFilterGr = allFilterM2MGr.filter.getRefRecord();\r\n\r\n        if (!savedFilterGr.isValidRecord()) {\r\n          continue;\r\n        }\r\n\r\n        if (!filtersObj[filter]) {\r\n          filtersObj[filter] = {\r\n            displayValue: savedFilterGr.getDisplayValue(),\r\n            value: savedFilterGr.getUniqueValue(),\r\n            private: savedFilterGr.getValue(\"access\") === \"private\",\r\n            public: savedFilterGr.getValue(\"access\") === \"public\",\r\n            invite: savedFilterGr.getValue(\"access\") === \"invite\",\r\n            condition: savedFilterGr.getValue(\"condition\"),\r\n            filterObject: JSON.parse(savedFilterGr.getValue(\"filter_object\")),\r\n            access: savedFilterGr.getValue(\"access\"),\r\n            rights: \"owner\",\r\n            items: [],\r\n          };\r\n        }\r\n\r\n        if (\r\n          allFilterM2MGr.getValue(\"rights\") === \"editor\" &&\r\n          filtersObj[filter].rights !== \"owner\"\r\n        ) {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        } else if (allFilterM2MGr.getValue(\"rights\") === \"owner\") {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        }\r\n\r\n        const type = allFilterM2MGr.getValue(\"type\");\r\n        var item = {\r\n          type: type,\r\n          user: null,\r\n          segment: null,\r\n          group: null,\r\n          rights: allFilterM2MGr.getValue(\"rights\"),\r\n          displayValue: allFilterM2MGr.getDisplayValue(type),\r\n          value: allFilterM2MGr.getUniqueValue(),\r\n          avatar: null,\r\n        };\r\n\r\n        if (type === \"user\") {\r\n          const userSysId = allFilterM2MGr.getValue(\"user\");\r\n          let user = this.getUserInfo(userSysId);\r\n          item.user = user.user;\r\n          item.avatar = user.avatar;\r\n          item.displayValue = user.displayValue;\r\n        } else if (type === \"segment\") {\r\n          item.segment = allFilterM2MGr.getValue(\"segment\");\r\n        } else if (type === \"group\") {\r\n          item.group = allFilterM2MGr.getValue(\"assignment_group\");\r\n        }\r\n\r\n        filtersObj[filter].items.push(item);\r\n      }\r\n    } else {\r\n      gs.info(\"No base filters found for the given table\");\r\n    }\r\n\r\n    // make it so only people with admin can make invite and public.\r\n    //make it so only view can view\r\n    let accessOptions = [\r\n      {\r\n        value: \"private\",\r\n        label: \"Private\",\r\n        description: \"Only you can access.\",\r\n      },\r\n    ];\r\n    if (gs.getUser().hasRole(\"x_cadso_work.admin\") === true) {\r\n      accessOptions = [\r\n        {\r\n          value: \"private\",\r\n          label: \"Private\",\r\n          description: \"Only you can access\",\r\n        },\r\n        {\r\n          value: \"invite\",\r\n          label: \"Invite Only\",\r\n          description: \"Only you and people you invite can access\",\r\n        },\r\n        {\r\n          value: \"public\",\r\n          label: \"Everyone\",\r\n          description: \"All workspace members can access\",\r\n        },\r\n      ];\r\n    }\r\n\r\n    response.setBody({\r\n      filters: filtersObj,\r\n      currentUserId: this.getUserInfo(gs.getUserID()),\r\n      accessOptions,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  getUserInfo: function (userSysId) {\r\n    result = {};\r\n    if (userSysId) {\r\n      result.value = userSysId;\r\n      const userGr = new GlideRecord(\"sys_user\");\r\n      if (userGr.get(userSysId)) {\r\n        result.user = userSysId;\r\n        const avatar = userGr.getValue(\"photo\") || userGr.getValue(\"avatar\");\r\n        result.avatar = avatar ? avatar + \".iix\" : \"\";\r\n        result.displayValue = userGr.getDisplayValue(\"name\");\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n\r\n  get_references: function (request, response) {\r\n    let { filterTable = \"\", fields = [], queryString = \"\" } = request.body.data;\r\n\r\n    var results = [];\r\n    for (var x = 0; x < fields.length; x++) {\r\n      const field = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(\r\n        filterTable,\r\n        fields[x],\r\n        queryString\r\n      );\r\n      results.push(field);\r\n    }\r\n\r\n    response.setBody({ results });\r\n    return response;\r\n  },\r\n\r\n  delete: function (request, response) {\r\n    const { data = { filter: \"\" } } = request.body;\r\n    const { filter = \"\" } = data;\r\n    const filterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (filterGr.get(filter)) {\r\n      if (!filterGr.canDelete()) {\r\n        response.setBody({ error: \"Not enough access.\", success: false });\r\n        return response;\r\n      }\r\n\r\n      filterGr.deleteRecord();\r\n      response.setBody({ success: true, sysId: filter });\r\n\r\n      return response;\r\n    } else {\r\n      response.setBody({ error: \"Filter does not exist.\", success: false });\r\n      return response;\r\n    }\r\n  },\r\n\r\n  saveFilter: function (request, response) {\r\n    const {\r\n      data = {\r\n        value: \"\",\r\n        displayValue: \"\",\r\n        condition: \"\",\r\n        items: [],\r\n        access: \"\",\r\n        saveType: \"insert\",\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const {\r\n      value: sysId = \"\",\r\n      displayValue = \"\",\r\n      condition = \"\",\r\n      items = [],\r\n      access = \"\",\r\n      saveType = \"insert\" || \"update\",\r\n      table = \"\",\r\n      filterObject = [],\r\n      listQuery = {},\r\n    } = data;\r\n\r\n    gs.info(\"SH listQuery\" + JSON.stringify(data));\r\n\r\n    const recordsNotUpdate = [];\r\n\r\n    if (!sysId && saveType === \"update\") {\r\n      response.setBody({\r\n        successful: false,\r\n        error: 'No record id (field: value) was sent for saveType of \"update\".',\r\n        recordsNotUpdate,\r\n      });\r\n      return response;\r\n    } else if (!table && saveType === \"insert\") {\r\n      response.setBody({ successful: false, error: \"No table value was sent.\", recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    var savedFilterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (saveType === \"update\" && !savedFilterGr.get(sysId)) {\r\n      response.setBody({ successful: false, error: \"Record was not found.\", recordsNotUpdate });\r\n    } else if (saveType === \"insert\") {\r\n      savedFilterGr.newRecord();\r\n      savedFilterGr.setValue(\"table\", table);\r\n    } else if (saveType === \"delete\") {\r\n      // TODO: add delete, we dont want this table to get crazy large.\r\n      response.setBody({ successful: successfulUpdate, recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    savedFilterGr.setValue(\"name\", displayValue);\r\n    savedFilterGr.setValue(\"condition\", condition);\r\n    savedFilterGr.setValue(\"filter_object\", JSON.stringify(filterObject));\r\n    savedFilterGr.setValue(\"access\", access);\r\n    savedFilterGr.setValue(\"query\", JSON.stringify(listQuery));\r\n\r\n    var successfulUpdate = savedFilterGr.update();\r\n\r\n    // making a new filter object to pass back to client\r\n    var newFilter = {};\r\n    if (successfulUpdate) {\r\n      newFilter = data;\r\n      newFilter.sysId = successfulUpdate;\r\n      newFilter.filterObject = filterObject;\r\n    }\r\n\r\n    const newItems = [];\r\n    if (items && items.length) {\r\n      // Looping logic\r\n      items.forEach((item, index) => {\r\n        var workSavedFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n        if (item.delete && workSavedFilterM2MGr.get(item.value)) {\r\n          //delete\r\n          workSavedFilterM2MGr.deleteRecord();\r\n        } else if (item.value && workSavedFilterM2MGr.get(item.value)) {\r\n          // update\r\n          this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else if (item[item.type] && !item.delete && !item.value) {\r\n          // create\r\n          workSavedFilterM2MGr.initialize();\r\n          workSavedFilterM2MGr.newRecord();\r\n          item.value = this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else {\r\n          recordsNotUpdate.push(item);\r\n        }\r\n      });\r\n      if (successfulUpdate) {\r\n        newFilter.items = newItems;\r\n      }\r\n    }\r\n\r\n    // TODO: Send back the data for the filter\r\n\r\n    response.setBody({ successful: successfulUpdate, recordsNotUpdate, newFilter, saveType });\r\n\r\n    return response;\r\n  },\r\n\r\n  setValues: function (workSavedFilterM2MGr, item, filterSysId) {\r\n    // Add Filter\r\n    workSavedFilterM2MGr.setValue(\"user\", item.user);\r\n    workSavedFilterM2MGr.setValue(\"segment\", item.segment);\r\n    workSavedFilterM2MGr.setValue(\"group\", item.group);\r\n    workSavedFilterM2MGr.setValue(\"type\", item.type);\r\n    workSavedFilterM2MGr.setValue(\"rights\", item.rights);\r\n    workSavedFilterM2MGr.setValue(\"filter\", filterSysId);\r\n    let value = workSavedFilterM2MGr.update();\r\n    return value;\r\n  },\r\n\r\n  type: \"CustomFilterApiMSv2\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 375,
      "char_count": 12448,
      "preview": "var CustomFilterApiMSv2 = Class.create();\r\nCustomFilterApiMSv2.prototype = {\r\n  initialize: function () {},\r\n\r\n  fetch_sharing_options: function (request, response) {\r\n    const {\r\n      data = {\r\n   ...",
      "full_script": "var CustomFilterApiMSv2 = Class.create();\r\nCustomFilterApiMSv2.prototype = {\r\n  initialize: function () {},\r\n\r\n  fetch_sharing_options: function (request, response) {\r\n    const {\r\n      data = {\r\n        searchText: \"\",\r\n      },\r\n    } = request.body;\r\n    const { searchText = \"\" } = data;\r\n    const options = [];\r\n    const userId = gs.getUserID();\r\n\r\n    const workClientApi = new x_cadso_work.WorkClientUtils();\r\n    const agileSegments = workClientApi.getAllAgileSegmentsForUser(userId);\r\n    const nonAgileSegments = workClientApi.getAllSegmentsForUser(userId);\r\n    const agileSegmentsUniques = agileSegments.filter(function (val) {\r\n      return nonAgileSegments.indexOf(val) == -1;\r\n    });\r\n    const segmentsArr = [...agileSegmentsUniques, ...nonAgileSegments];\r\n\r\n    var segmentGr = new GlideRecord(\"x_cadso_work_segment\");\r\n    segmentGr.addQuery(\"sys_id\", \"IN\", segmentsArr.join(\",\"));\r\n\r\n    if (searchText) {\r\n      segmentGr.addQuery(\"short_description\", \"=\", searchText);\r\n    }\r\n\r\n    segmentGr.addActiveQuery();\r\n    segmentGr.orderBy(\"short_description\");\r\n    // \tsegmentGr.setLimit(12);\r\n    segmentGr.query();\r\n\r\n    while (segmentGr.next()) {\r\n      options.push({\r\n        displayValue: segmentGr.getDisplayValue(),\r\n        value: segmentGr.getUniqueValue(),\r\n        type: \"segment\",\r\n      });\r\n    }\r\n\r\n    // TODO\r\n    // Add Users (with Avatars)\r\n    // Add Assignment Groups\r\n    // DECISION\r\n    // Do we add a setLimit once we expand the search\r\n\r\n    response.setBody({\r\n      options,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  main: function (request, response) {\r\n    const {\r\n      data = {\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const { table = \"\" } = data;\r\n    if (!table) {\r\n      response.setBody({\r\n        filters: [],\r\n        error: \"No table was sent.\",\r\n      });\r\n      return response;\r\n    }\r\n\r\n    const customFilters = [];\r\n    const filtersObj = {};\r\n    const filters = [];\r\n\r\n    var publicQuery = \"filter.access=public\";\r\n    var userQuery = \"userDYNAMIC90d1921e5f510100a9ad2572f2b477fe\";\r\n    var segmentQuery =\r\n      \"segmentDYNAMIC127538294701e15085d19fd8036d438a^ORsegmentDYNAMIC6bfd507497083510ac33f109c253aff7\";\r\n    var assignmentGroup = \"assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\";\r\n    var query = [publicQuery, userQuery, segmentQuery, assignmentGroup].join(\"^OR\");\r\n\r\n    //Get all base Filters that user can see. put this into an array and use it to get all the data from those filter\r\n    var baseFilters = [];\r\n    var baseFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filterISNOTEMPTY\");\r\n    baseFilterM2MGr.addEncodedQuery(\"filter.table=\" + table);\r\n    baseFilterM2MGr.addEncodedQuery(query);\r\n    baseFilterM2MGr.orderBy(\"filter\");\r\n    baseFilterM2MGr.query();\r\n    while (baseFilterM2MGr.next()) {\r\n      baseFilters.push(baseFilterM2MGr.getValue(\"filter\"));\r\n    }\r\n    if (baseFilters.length > 0) {\r\n      var baseFiltersQuery = baseFilters.join(\",\");\r\n      var allFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n      allFilterM2MGr.addEncodedQuery(\"filterIN\" + baseFiltersQuery);\r\n      allFilterM2MGr.orderBy(\"filter\");\r\n      allFilterM2MGr.query();\r\n\r\n      // \tvar workSavedFilterM2MGr = new GlideRecord('x_cadso_work_saved_filter_to_associate_m2m');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filterISNOTEMPTY');\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery('filter.table=' + table);\r\n      // \tworkSavedFilterM2MGr.addEncodedQuery(query);\r\n      // \tworkSavedFilterM2MGr.orderBy('filter');\r\n      // \tworkSavedFilterM2MGr.query();\r\n\r\n      while (allFilterM2MGr.next()) {\r\n        const filter = allFilterM2MGr.getValue(\"filter\");\r\n        const savedFilterGr = allFilterM2MGr.filter.getRefRecord();\r\n\r\n        if (!savedFilterGr.isValidRecord()) {\r\n          continue;\r\n        }\r\n\r\n        if (!filtersObj[filter]) {\r\n          filtersObj[filter] = {\r\n            displayValue: savedFilterGr.getDisplayValue(),\r\n            value: savedFilterGr.getUniqueValue(),\r\n            private: savedFilterGr.getValue(\"access\") === \"private\",\r\n            public: savedFilterGr.getValue(\"access\") === \"public\",\r\n            invite: savedFilterGr.getValue(\"access\") === \"invite\",\r\n            condition: savedFilterGr.getValue(\"condition\"),\r\n            filterObject: JSON.parse(savedFilterGr.getValue(\"filter_object\")),\r\n            access: savedFilterGr.getValue(\"access\"),\r\n            rights: \"owner\",\r\n            items: [],\r\n          };\r\n        }\r\n\r\n        if (\r\n          allFilterM2MGr.getValue(\"rights\") === \"editor\" &&\r\n          filtersObj[filter].rights !== \"owner\"\r\n        ) {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        } else if (allFilterM2MGr.getValue(\"rights\") === \"owner\") {\r\n          filtersObj[filter].rights = allFilterM2MGr.getValue(\"rights\");\r\n        }\r\n\r\n        const type = allFilterM2MGr.getValue(\"type\");\r\n        var item = {\r\n          type: type,\r\n          user: null,\r\n          segment: null,\r\n          group: null,\r\n          rights: allFilterM2MGr.getValue(\"rights\"),\r\n          displayValue: allFilterM2MGr.getDisplayValue(type),\r\n          value: allFilterM2MGr.getUniqueValue(),\r\n          avatar: null,\r\n        };\r\n\r\n        if (type === \"user\") {\r\n          const userSysId = allFilterM2MGr.getValue(\"user\");\r\n          let user = this.getUserInfo(userSysId);\r\n          item.user = user.user;\r\n          item.avatar = user.avatar;\r\n          item.displayValue = user.displayValue;\r\n        } else if (type === \"segment\") {\r\n          item.segment = allFilterM2MGr.getValue(\"segment\");\r\n        } else if (type === \"group\") {\r\n          item.group = allFilterM2MGr.getValue(\"assignment_group\");\r\n        }\r\n\r\n        filtersObj[filter].items.push(item);\r\n      }\r\n    } else {\r\n      gs.info(\"No base filters found for the given table\");\r\n    }\r\n\r\n    // make it so only people with admin can make invite and public.\r\n    //make it so only view can view\r\n    let accessOptions = [\r\n      {\r\n        value: \"private\",\r\n        label: \"Private\",\r\n        description: \"Only you can access.\",\r\n      },\r\n    ];\r\n    if (gs.getUser().hasRole(\"x_cadso_work.admin\") === true) {\r\n      accessOptions = [\r\n        {\r\n          value: \"private\",\r\n          label: \"Private\",\r\n          description: \"Only you can access\",\r\n        },\r\n        {\r\n          value: \"invite\",\r\n          label: \"Invite Only\",\r\n          description: \"Only you and people you invite can access\",\r\n        },\r\n        {\r\n          value: \"public\",\r\n          label: \"Everyone\",\r\n          description: \"All workspace members can access\",\r\n        },\r\n      ];\r\n    }\r\n\r\n    response.setBody({\r\n      filters: filtersObj,\r\n      currentUserId: this.getUserInfo(gs.getUserID()),\r\n      accessOptions,\r\n    });\r\n\r\n    return response;\r\n  },\r\n\r\n  getUserInfo: function (userSysId) {\r\n    result = {};\r\n    if (userSysId) {\r\n      result.value = userSysId;\r\n      const userGr = new GlideRecord(\"sys_user\");\r\n      if (userGr.get(userSysId)) {\r\n        result.user = userSysId;\r\n        const avatar = userGr.getValue(\"photo\") || userGr.getValue(\"avatar\");\r\n        result.avatar = avatar ? avatar + \".iix\" : \"\";\r\n        result.displayValue = userGr.getDisplayValue(\"name\");\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n\r\n  get_references: function (request, response) {\r\n    let { filterTable = \"\", fields = [], queryString = \"\" } = request.body.data;\r\n\r\n    var results = [];\r\n    for (var x = 0; x < fields.length; x++) {\r\n      const field = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(\r\n        filterTable,\r\n        fields[x],\r\n        queryString\r\n      );\r\n      results.push(field);\r\n    }\r\n\r\n    response.setBody({ results });\r\n    return response;\r\n  },\r\n\r\n  delete: function (request, response) {\r\n    const { data = { filter: \"\" } } = request.body;\r\n    const { filter = \"\" } = data;\r\n    const filterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (filterGr.get(filter)) {\r\n      if (!filterGr.canDelete()) {\r\n        response.setBody({ error: \"Not enough access.\", success: false });\r\n        return response;\r\n      }\r\n\r\n      filterGr.deleteRecord();\r\n      response.setBody({ success: true, sysId: filter });\r\n\r\n      return response;\r\n    } else {\r\n      response.setBody({ error: \"Filter does not exist.\", success: false });\r\n      return response;\r\n    }\r\n  },\r\n\r\n  saveFilter: function (request, response) {\r\n    const {\r\n      data = {\r\n        value: \"\",\r\n        displayValue: \"\",\r\n        condition: \"\",\r\n        items: [],\r\n        access: \"\",\r\n        saveType: \"insert\",\r\n        table: \"\",\r\n      },\r\n    } = request.body;\r\n    const {\r\n      value: sysId = \"\",\r\n      displayValue = \"\",\r\n      condition = \"\",\r\n      items = [],\r\n      access = \"\",\r\n      saveType = \"insert\" || \"update\",\r\n      table = \"\",\r\n      filterObject = [],\r\n      listQuery = {},\r\n    } = data;\r\n\r\n    gs.info(\"SH listQuery\" + JSON.stringify(data));\r\n\r\n    const recordsNotUpdate = [];\r\n\r\n    if (!sysId && saveType === \"update\") {\r\n      response.setBody({\r\n        successful: false,\r\n        error: 'No record id (field: value) was sent for saveType of \"update\".',\r\n        recordsNotUpdate,\r\n      });\r\n      return response;\r\n    } else if (!table && saveType === \"insert\") {\r\n      response.setBody({ successful: false, error: \"No table value was sent.\", recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    var savedFilterGr = new GlideRecord(\"x_cadso_work_saved_filter\");\r\n    if (saveType === \"update\" && !savedFilterGr.get(sysId)) {\r\n      response.setBody({ successful: false, error: \"Record was not found.\", recordsNotUpdate });\r\n    } else if (saveType === \"insert\") {\r\n      savedFilterGr.newRecord();\r\n      savedFilterGr.setValue(\"table\", table);\r\n    } else if (saveType === \"delete\") {\r\n      // TODO: add delete, we dont want this table to get crazy large.\r\n      response.setBody({ successful: successfulUpdate, recordsNotUpdate });\r\n      return response;\r\n    }\r\n\r\n    savedFilterGr.setValue(\"name\", displayValue);\r\n    savedFilterGr.setValue(\"condition\", condition);\r\n    savedFilterGr.setValue(\"filter_object\", JSON.stringify(filterObject));\r\n    savedFilterGr.setValue(\"access\", access);\r\n    savedFilterGr.setValue(\"query\", JSON.stringify(listQuery));\r\n\r\n    var successfulUpdate = savedFilterGr.update();\r\n\r\n    // making a new filter object to pass back to client\r\n    var newFilter = {};\r\n    if (successfulUpdate) {\r\n      newFilter = data;\r\n      newFilter.sysId = successfulUpdate;\r\n      newFilter.filterObject = filterObject;\r\n    }\r\n\r\n    const newItems = [];\r\n    if (items && items.length) {\r\n      // Looping logic\r\n      items.forEach((item, index) => {\r\n        var workSavedFilterM2MGr = new GlideRecord(\"x_cadso_work_saved_filter_to_associate_m2m\");\r\n        if (item.delete && workSavedFilterM2MGr.get(item.value)) {\r\n          //delete\r\n          workSavedFilterM2MGr.deleteRecord();\r\n        } else if (item.value && workSavedFilterM2MGr.get(item.value)) {\r\n          // update\r\n          this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else if (item[item.type] && !item.delete && !item.value) {\r\n          // create\r\n          workSavedFilterM2MGr.initialize();\r\n          workSavedFilterM2MGr.newRecord();\r\n          item.value = this.setValues(workSavedFilterM2MGr, item, successfulUpdate);\r\n          newItems.push(item);\r\n        } else {\r\n          recordsNotUpdate.push(item);\r\n        }\r\n      });\r\n      if (successfulUpdate) {\r\n        newFilter.items = newItems;\r\n      }\r\n    }\r\n\r\n    // TODO: Send back the data for the filter\r\n\r\n    response.setBody({ successful: successfulUpdate, recordsNotUpdate, newFilter, saveType });\r\n\r\n    return response;\r\n  },\r\n\r\n  setValues: function (workSavedFilterM2MGr, item, filterSysId) {\r\n    // Add Filter\r\n    workSavedFilterM2MGr.setValue(\"user\", item.user);\r\n    workSavedFilterM2MGr.setValue(\"segment\", item.segment);\r\n    workSavedFilterM2MGr.setValue(\"group\", item.group);\r\n    workSavedFilterM2MGr.setValue(\"type\", item.type);\r\n    workSavedFilterM2MGr.setValue(\"rights\", item.rights);\r\n    workSavedFilterM2MGr.setValue(\"filter\", filterSysId);\r\n    let value = workSavedFilterM2MGr.update();\r\n    return value;\r\n  },\r\n\r\n  type: \"CustomFilterApiMSv2\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_7b5fb5694782061098519fd8036d43d6",
    "display_value": "sys_script_include_7b5fb5694782061098519fd8036d43d6"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.CustomFilterApiMSv2",
    "display_value": "x_cadso_work.CustomFilterApiMSv2"
  },
  "sys_created_on": {
    "value": "2024-05-08 15:41:56",
    "display_value": "2024-05-08 08:41:56 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "CustomFilterApiMSv2",
    "display_value": "CustomFilterApiMSv2"
  },
  "sys_name": {
    "value": "CustomFilterApiMSv2",
    "display_value": "CustomFilterApiMSv2"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "rumman.tariq",
    "display_value": "rumman.tariq"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
