{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "96b7d07b47fef110b0361ae8036d4356",
    "extracted_at": "2025-09-19T21:48:31.138Z",
    "display_value": "ListActionMenuApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "205",
    "display_value": "205"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-09-19 13:33:03",
    "display_value": "2025-09-19 06:33:03 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var ListActionMenuApiMS = Class.create();\r\nListActionMenuApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    // export to CSV\r\n    exportToCSV: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var headers = [];\r\n        var rows = [];\r\n        var csvData = '';\r\n        var actionType = '';\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                for (const field in tableGR) {\r\n                    if (tableGR.isValidField(field) && field !== 'getRowCount') {\r\n                        header = tableGR[field].getLabel();\r\n                        headers.push(header);\r\n                        row = tableGR.getDisplayValue(field);\r\n                        rows.push(row);\r\n                    }\r\n                }\r\n\r\n                if (!csvData) {\r\n                    csvData += headers.map(function(label) {\r\n                        return '\"' + label + '\"';\r\n                    }).join(',') + '\\r\\n';\r\n                }\r\n\r\n                csvData += rows.map(function(value) {\r\n                    return '\"' + (value || '').toString() + '\"';\r\n                }).join(',') + '\\r\\n';\r\n\r\n                headers = [];\r\n                rows = [];\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) have been successfully exported to CSV',\r\n            table: table,\r\n            csvData,\r\n            actionType: 'export'\r\n        });\r\n\r\n        return response;\r\n    },\r\n\r\n    // duplicate records\r\n\tduplicateRecords: function(request, response) {\r\n\t\tconst { sysIds, table } = request.body.data;\r\n\t\tconst dupDisplayValues = [];\r\n\r\n\t\tfor (let i = 0; i < sysIds.length; i++) {\r\n\t\t\tconst originalTableGR = new GlideRecord(table);\r\n\t\t\tif (originalTableGR.get(sysIds[i]) && originalTableGR.isValidRecord()) {\r\n\t\t\t\tconst duplicateTableGR = new GlideRecord(table);\r\n\t\t\t\tduplicateTableGR.initialize();\r\n\t\t\t\t//duplicateTableGR.autoSysFields(false);\r\n\r\n\t\t\t\tfor (const field in originalTableGR) {\r\n\t\t\t\t\tif (originalTableGR.isValidField(field) && field.indexOf('sys_') === -1) {\r\n\t\t\t\t\t\tif (field === \"slug\" && !originalTableGR[field].nil()) {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field] + '-copy';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (duplicateTableGR.isValidField('name')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.name || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.name = originalValue + ' (Duplicate)';\r\n\t\t\t\t} else if (duplicateTableGR.isValidField('short_description')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.short_description || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.short_description = originalValue + ' (Duplicate)';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduplicateTableGR.insert();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) duplicated successfully',\r\n\t\t\tactionType: 'duplicate',\r\n\t\t\tsysIds,\r\n\t\t\ttable,\r\n\t\t\tdisplayValues: dupDisplayValues\r\n\t\t});\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n    // copy link\r\n\tcopyRecLink: function(request, response) {\r\n\t\tconst { sysIds, table, templateType = \"email\" } = request.body.data;\r\n\t\tconst instanceURL = gs.getProperty('glide.servlet.uri');\r\n\t\t\r\n\t\tconst tableMappings = {\r\n\t\t\t'x_cadso_work_task': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'my-tasks',\r\n\t\t\t\ttab: 'list',\r\n\t\t\t\tformat: 'tasks'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_project': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'project',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_campaign': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'campaign',\r\n\t\t\t\ttab: 'details'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_sprint': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'sprint',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_goal': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'goal',\r\n\t\t\t\ttab: ''\r\n\t\t\t},\r\n\t\t\t'x_cadso_cloud_page': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: 'landing-page-editor',\r\n\t\t\t\ttab: 'design'\r\n\t\t\t},\r\n\t\t\t'x_cadso_automate_content_template': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: `${templateType}-template-editor`\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst mapping = tableMappings[table] || {\r\n\t\t\tapp: 'work',\r\n\t\t\tpage: table,\r\n\t\t\ttab: ''\r\n\t\t};\r\n\r\n\t\tlet fullLink = '';\r\n\t\tconst timestamp = new Date().getTime();\r\n\r\n\t\tgs.info(\"dh copy link \" + JSON.stringify(mapping))\r\n\r\n\t\tif (mapping.format === 'tasks') {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${mapping.tab}/${timestamp}/params/sys-id/${sysIds}`;\r\n\t\t} else {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${sysIds}`;\r\n\t\t\tif (mapping.tab) fullLink += `/${mapping.tab}`;\r\n\t\t\tfullLink += `/${timestamp}`;\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) copied to clipboard',\r\n\t\t\tfullLink,\r\n\t\t\tactionType: 'copy',\r\n\t\t});\r\n\t},\r\n\r\n    // get record title\r\n    getRecordTitle: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        recordTitle = [];\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                const title = tableGR.getValue('short_description') || tableGR.getDisplayValue();\r\n                recordTitle.push(title);\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record title retrieved',\r\n            recordTitle\r\n        });\r\n    },\r\n\r\n    // archive records\r\n    archiveRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        var archievedStatus = gs.getProperty('x_cadso_work.archived_status');\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                if (table === 'x_cadso_work_task') {\r\n                    tableGR.setValue('status', archievedStatus);\r\n                    tableGR.update();\r\n                }\r\n            } else {\r\n                tableGR.setValue('state', '333');\r\n                tableGR.update();\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) archived successfully',\r\n            actionType: 'archive',\r\n            sysIds,\r\n            table,\r\n        });\r\n    },\r\n\r\n    // delete records\r\n    deleteRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        const tableGR = new GlideRecord(table);\r\n        tableGR.addQuery('sys_id', 'IN', sysIds);\r\n        tableGR.query();\r\n\r\n        tableGR.deleteMultiple();\r\n        const updatedSysIds = sysIds.filter(id => !tableGR.isValidRecord(id));\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) deleted successfully',\r\n            sysIds,\r\n            table,\r\n            updatedSysIds,\r\n            actionType: 'delete',\r\n        });\r\n    },\r\n\r\n    updateReferenceField: function(request, response) {\r\n        const {\r\n            table,\r\n            field,\r\n            textSearch,\r\n\t\t\tsysId,\r\n\t\t\tisList,\r\n\t\t\tisBulk,\r\n\t\t\tbulkSysIds,\r\n        } = request.body.data;\r\n        var updatedField = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(table, field, textSearch, sysId, isList, isBulk, bulkSysIds);\r\n\r\n        response.setBody({\r\n            field: updatedField\r\n        });\r\n    },\r\n\r\n\r\n    type: 'ListActionMenuApiMS',\r\n};",
    "display_value": "var ListActionMenuApiMS = Class.create();\r\nListActionMenuApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    // export to CSV\r\n    exportToCSV: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var headers = [];\r\n        var rows = [];\r\n        var csvData = '';\r\n        var actionType = '';\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                for (const field in tableGR) {\r\n                    if (tableGR.isValidField(field) && field !== 'getRowCount') {\r\n                        header = tableGR[field].getLabel();\r\n                        headers.push(header);\r\n                        row = tableGR.getDisplayValue(field);\r\n                        rows.push(row);\r\n                    }\r\n                }\r\n\r\n                if (!csvData) {\r\n                    csvData += headers.map(function(label) {\r\n                        return '\"' + label + '\"';\r\n                    }).join(',') + '\\r\\n';\r\n                }\r\n\r\n                csvData += rows.map(function(value) {\r\n                    return '\"' + (value || '').toString() + '\"';\r\n                }).join(',') + '\\r\\n';\r\n\r\n                headers = [];\r\n                rows = [];\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) have been successfully exported to CSV',\r\n            table: table,\r\n            csvData,\r\n            actionType: 'export'\r\n        });\r\n\r\n        return response;\r\n    },\r\n\r\n    // duplicate records\r\n\tduplicateRecords: function(request, response) {\r\n\t\tconst { sysIds, table } = request.body.data;\r\n\t\tconst dupDisplayValues = [];\r\n\r\n\t\tfor (let i = 0; i < sysIds.length; i++) {\r\n\t\t\tconst originalTableGR = new GlideRecord(table);\r\n\t\t\tif (originalTableGR.get(sysIds[i]) && originalTableGR.isValidRecord()) {\r\n\t\t\t\tconst duplicateTableGR = new GlideRecord(table);\r\n\t\t\t\tduplicateTableGR.initialize();\r\n\t\t\t\t//duplicateTableGR.autoSysFields(false);\r\n\r\n\t\t\t\tfor (const field in originalTableGR) {\r\n\t\t\t\t\tif (originalTableGR.isValidField(field) && field.indexOf('sys_') === -1) {\r\n\t\t\t\t\t\tif (field === \"slug\" && !originalTableGR[field].nil()) {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field] + '-copy';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (duplicateTableGR.isValidField('name')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.name || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.name = originalValue + ' (Duplicate)';\r\n\t\t\t\t} else if (duplicateTableGR.isValidField('short_description')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.short_description || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.short_description = originalValue + ' (Duplicate)';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduplicateTableGR.insert();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) duplicated successfully',\r\n\t\t\tactionType: 'duplicate',\r\n\t\t\tsysIds,\r\n\t\t\ttable,\r\n\t\t\tdisplayValues: dupDisplayValues\r\n\t\t});\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n    // copy link\r\n\tcopyRecLink: function(request, response) {\r\n\t\tconst { sysIds, table, templateType = \"email\" } = request.body.data;\r\n\t\tconst instanceURL = gs.getProperty('glide.servlet.uri');\r\n\t\t\r\n\t\tconst tableMappings = {\r\n\t\t\t'x_cadso_work_task': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'my-tasks',\r\n\t\t\t\ttab: 'list',\r\n\t\t\t\tformat: 'tasks'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_project': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'project',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_campaign': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'campaign',\r\n\t\t\t\ttab: 'details'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_sprint': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'sprint',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_goal': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'goal',\r\n\t\t\t\ttab: ''\r\n\t\t\t},\r\n\t\t\t'x_cadso_cloud_page': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: 'landing-page-editor',\r\n\t\t\t\ttab: 'design'\r\n\t\t\t},\r\n\t\t\t'x_cadso_automate_content_template': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: `${templateType}-template-editor`\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst mapping = tableMappings[table] || {\r\n\t\t\tapp: 'work',\r\n\t\t\tpage: table,\r\n\t\t\ttab: ''\r\n\t\t};\r\n\r\n\t\tlet fullLink = '';\r\n\t\tconst timestamp = new Date().getTime();\r\n\r\n\t\tgs.info(\"dh copy link \" + JSON.stringify(mapping))\r\n\r\n\t\tif (mapping.format === 'tasks') {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${mapping.tab}/${timestamp}/params/sys-id/${sysIds}`;\r\n\t\t} else {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${sysIds}`;\r\n\t\t\tif (mapping.tab) fullLink += `/${mapping.tab}`;\r\n\t\t\tfullLink += `/${timestamp}`;\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) copied to clipboard',\r\n\t\t\tfullLink,\r\n\t\t\tactionType: 'copy',\r\n\t\t});\r\n\t},\r\n\r\n    // get record title\r\n    getRecordTitle: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        recordTitle = [];\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                const title = tableGR.getValue('short_description') || tableGR.getDisplayValue();\r\n                recordTitle.push(title);\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record title retrieved',\r\n            recordTitle\r\n        });\r\n    },\r\n\r\n    // archive records\r\n    archiveRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        var archievedStatus = gs.getProperty('x_cadso_work.archived_status');\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                if (table === 'x_cadso_work_task') {\r\n                    tableGR.setValue('status', archievedStatus);\r\n                    tableGR.update();\r\n                }\r\n            } else {\r\n                tableGR.setValue('state', '333');\r\n                tableGR.update();\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) archived successfully',\r\n            actionType: 'archive',\r\n            sysIds,\r\n            table,\r\n        });\r\n    },\r\n\r\n    // delete records\r\n    deleteRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        const tableGR = new GlideRecord(table);\r\n        tableGR.addQuery('sys_id', 'IN', sysIds);\r\n        tableGR.query();\r\n\r\n        tableGR.deleteMultiple();\r\n        const updatedSysIds = sysIds.filter(id => !tableGR.isValidRecord(id));\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) deleted successfully',\r\n            sysIds,\r\n            table,\r\n            updatedSysIds,\r\n            actionType: 'delete',\r\n        });\r\n    },\r\n\r\n    updateReferenceField: function(request, response) {\r\n        const {\r\n            table,\r\n            field,\r\n            textSearch,\r\n\t\t\tsysId,\r\n\t\t\tisList,\r\n\t\t\tisBulk,\r\n\t\t\tbulkSysIds,\r\n        } = request.body.data;\r\n        var updatedField = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(table, field, textSearch, sysId, isList, isBulk, bulkSysIds);\r\n\r\n        response.setBody({\r\n            field: updatedField\r\n        });\r\n    },\r\n\r\n\r\n    type: 'ListActionMenuApiMS',\r\n};",
    "formatted_script": {
      "line_count": 269,
      "char_count": 7661,
      "preview": "var ListActionMenuApiMS = Class.create();\r\nListActionMenuApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    // export to CSV\r\n    exportToCSV: function(request, response) {\r\n        const {\r\n ...",
      "full_script": "var ListActionMenuApiMS = Class.create();\r\nListActionMenuApiMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    // export to CSV\r\n    exportToCSV: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var headers = [];\r\n        var rows = [];\r\n        var csvData = '';\r\n        var actionType = '';\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                for (const field in tableGR) {\r\n                    if (tableGR.isValidField(field) && field !== 'getRowCount') {\r\n                        header = tableGR[field].getLabel();\r\n                        headers.push(header);\r\n                        row = tableGR.getDisplayValue(field);\r\n                        rows.push(row);\r\n                    }\r\n                }\r\n\r\n                if (!csvData) {\r\n                    csvData += headers.map(function(label) {\r\n                        return '\"' + label + '\"';\r\n                    }).join(',') + '\\r\\n';\r\n                }\r\n\r\n                csvData += rows.map(function(value) {\r\n                    return '\"' + (value || '').toString() + '\"';\r\n                }).join(',') + '\\r\\n';\r\n\r\n                headers = [];\r\n                rows = [];\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) have been successfully exported to CSV',\r\n            table: table,\r\n            csvData,\r\n            actionType: 'export'\r\n        });\r\n\r\n        return response;\r\n    },\r\n\r\n    // duplicate records\r\n\tduplicateRecords: function(request, response) {\r\n\t\tconst { sysIds, table } = request.body.data;\r\n\t\tconst dupDisplayValues = [];\r\n\r\n\t\tfor (let i = 0; i < sysIds.length; i++) {\r\n\t\t\tconst originalTableGR = new GlideRecord(table);\r\n\t\t\tif (originalTableGR.get(sysIds[i]) && originalTableGR.isValidRecord()) {\r\n\t\t\t\tconst duplicateTableGR = new GlideRecord(table);\r\n\t\t\t\tduplicateTableGR.initialize();\r\n\t\t\t\t//duplicateTableGR.autoSysFields(false);\r\n\r\n\t\t\t\tfor (const field in originalTableGR) {\r\n\t\t\t\t\tif (originalTableGR.isValidField(field) && field.indexOf('sys_') === -1) {\r\n\t\t\t\t\t\tif (field === \"slug\" && !originalTableGR[field].nil()) {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field] + '-copy';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tduplicateTableGR[field] = originalTableGR[field];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (duplicateTableGR.isValidField('name')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.name || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.name = originalValue + ' (Duplicate)';\r\n\t\t\t\t} else if (duplicateTableGR.isValidField('short_description')) {\r\n\t\t\t\t\tconst originalValue = originalTableGR.short_description || '';\r\n\t\t\t\t\tdupDisplayValues.push(originalValue);\r\n\t\t\t\t\tduplicateTableGR.short_description = originalValue + ' (Duplicate)';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduplicateTableGR.insert();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) duplicated successfully',\r\n\t\t\tactionType: 'duplicate',\r\n\t\t\tsysIds,\r\n\t\t\ttable,\r\n\t\t\tdisplayValues: dupDisplayValues\r\n\t\t});\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n    // copy link\r\n\tcopyRecLink: function(request, response) {\r\n\t\tconst { sysIds, table, templateType = \"email\" } = request.body.data;\r\n\t\tconst instanceURL = gs.getProperty('glide.servlet.uri');\r\n\t\t\r\n\t\tconst tableMappings = {\r\n\t\t\t'x_cadso_work_task': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'my-tasks',\r\n\t\t\t\ttab: 'list',\r\n\t\t\t\tformat: 'tasks'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_project': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'project',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_campaign': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'campaign',\r\n\t\t\t\ttab: 'details'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_sprint': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'sprint',\r\n\t\t\t\ttab: 'overview'\r\n\t\t\t},\r\n\t\t\t'x_cadso_work_goal': {\r\n\t\t\t\tapp: 'work',\r\n\t\t\t\tpage: 'goal',\r\n\t\t\t\ttab: ''\r\n\t\t\t},\r\n\t\t\t'x_cadso_cloud_page': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: 'landing-page-editor',\r\n\t\t\t\ttab: 'design'\r\n\t\t\t},\r\n\t\t\t'x_cadso_automate_content_template': {\r\n\t\t\t\tapp: 'automate',\r\n\t\t\t\tpage: `${templateType}-template-editor`\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst mapping = tableMappings[table] || {\r\n\t\t\tapp: 'work',\r\n\t\t\tpage: table,\r\n\t\t\ttab: ''\r\n\t\t};\r\n\r\n\t\tlet fullLink = '';\r\n\t\tconst timestamp = new Date().getTime();\r\n\r\n\t\tgs.info(\"dh copy link \" + JSON.stringify(mapping))\r\n\r\n\t\tif (mapping.format === 'tasks') {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${mapping.tab}/${timestamp}/params/sys-id/${sysIds}`;\r\n\t\t} else {\r\n\t\t\tfullLink = `${instanceURL}x/cadso/${mapping.app}/${mapping.page}/${sysIds}`;\r\n\t\t\tif (mapping.tab) fullLink += `/${mapping.tab}`;\r\n\t\t\tfullLink += `/${timestamp}`;\r\n\t\t}\r\n\r\n\t\tresponse.setBody({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'Record(s) copied to clipboard',\r\n\t\t\tfullLink,\r\n\t\t\tactionType: 'copy',\r\n\t\t});\r\n\t},\r\n\r\n    // get record title\r\n    getRecordTitle: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        recordTitle = [];\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                const title = tableGR.getValue('short_description') || tableGR.getDisplayValue();\r\n                recordTitle.push(title);\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record title retrieved',\r\n            recordTitle\r\n        });\r\n    },\r\n\r\n    // archive records\r\n    archiveRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        var archievedStatus = gs.getProperty('x_cadso_work.archived_status');\r\n\r\n        for (let i = 0; i < sysIds.length; i++) {\r\n            const tableGR = new GlideRecord(table);\r\n            if (tableGR.get(sysIds[i])) {\r\n                if (table === 'x_cadso_work_task') {\r\n                    tableGR.setValue('status', archievedStatus);\r\n                    tableGR.update();\r\n                }\r\n            } else {\r\n                tableGR.setValue('state', '333');\r\n                tableGR.update();\r\n            }\r\n        }\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) archived successfully',\r\n            actionType: 'archive',\r\n            sysIds,\r\n            table,\r\n        });\r\n    },\r\n\r\n    // delete records\r\n    deleteRecords: function(request, response) {\r\n        const {\r\n            sysIds,\r\n            table\r\n        } = request.body.data;\r\n        var actionType = '';\r\n        const tableGR = new GlideRecord(table);\r\n        tableGR.addQuery('sys_id', 'IN', sysIds);\r\n        tableGR.query();\r\n\r\n        tableGR.deleteMultiple();\r\n        const updatedSysIds = sysIds.filter(id => !tableGR.isValidRecord(id));\r\n\r\n        response.setBody({\r\n            success: true,\r\n            message: 'Record(s) deleted successfully',\r\n            sysIds,\r\n            table,\r\n            updatedSysIds,\r\n            actionType: 'delete',\r\n        });\r\n    },\r\n\r\n    updateReferenceField: function(request, response) {\r\n        const {\r\n            table,\r\n            field,\r\n            textSearch,\r\n\t\t\tsysId,\r\n\t\t\tisList,\r\n\t\t\tisBulk,\r\n\t\t\tbulkSysIds,\r\n        } = request.body.data;\r\n        var updatedField = new x_cadso_work.GetTableDropdownsData().updateReferenceFieldOptions(table, field, textSearch, sysId, isList, isBulk, bulkSysIds);\r\n\r\n        response.setBody({\r\n            field: updatedField\r\n        });\r\n    },\r\n\r\n\r\n    type: 'ListActionMenuApiMS',\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_96b7d07b47fef110b0361ae8036d4356",
    "display_value": "sys_script_include_96b7d07b47fef110b0361ae8036d4356"
  },
  "sys_updated_by": {
    "value": "desiree.morehouse",
    "display_value": "desiree.morehouse"
  },
  "api_name": {
    "value": "x_cadso_work.ListActionMenuApiMS",
    "display_value": "x_cadso_work.ListActionMenuApiMS"
  },
  "sys_created_on": {
    "value": "2023-12-05 18:30:36",
    "display_value": "2023-12-05 10:30:36 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ListActionMenuApiMS",
    "display_value": "ListActionMenuApiMS"
  },
  "sys_name": {
    "value": "ListActionMenuApiMS",
    "display_value": "ListActionMenuApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "desiree.morehouse",
    "display_value": "desiree.morehouse"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
