{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "de9a3b3247786910a1052a02e26d4329",
    "extracted_at": "2025-09-19T21:48:31.765Z",
    "display_value": "SegmentHelperUtilsMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "35",
    "display_value": "35"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-08-22 18:04:07",
    "display_value": "2025-08-22 11:04:07 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var SegmentHelperUtilsMS = Class.create();\r\nSegmentHelperUtilsMS.prototype = {\r\n\tinitialize: function() {\r\n\r\n\t},\r\n\r\n\thasRole: function(user, role) {\r\n\t\treturn gs.hasRole(role);\r\n\t},\r\n\r\n\tvalidateCreatedBy: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tif (gs.getUserID() === userId) {\r\n\t\t\tvalid = taskGr.getValue('sys_created_by') === gs.getUserName();\r\n\t\t}\r\n\r\n\t\tthis.results.createdBy = valid;\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateAssignment: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\t\tconst assignedTo = taskGr.getValue('assigned_to');\r\n\t\tconst assignmentGroup = taskGr.getValue('assignment_group');\r\n\r\n\t\t\r\n\t\tif ((this.testing || !valid) && userId === assignedTo) {\r\n\t\t\tvalid = true;\r\n\t\t\tthis.results.assignedTo = valid;\r\n\t\t}\r\n\r\n\t\tif ((this.testing || !valid) && assignmentGroup) {\r\n\t\t\tvalid = this.validateSysGroupUser(assignmentGroup, userId);\r\n\t\t\tthis.results.assignmentGroup = valid;\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateSegments: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tlet segments = `${taskGr.getValue('segment')}`;\r\n\t\tsegments = segments.split(',');\r\n\r\n\t\tvalid = this.validateSegmentsList(segments, userId);\t\r\n\r\n\t\treturn valid;\t\r\n\t},\r\n\r\n\tvalidateSegmentsList: function(segments, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\treturn !!segments.find((segment) => {\r\n\t\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\t\tworkUserSegmentM2MGr.addQuery('segment', segment);\r\n\t\t\tworkUserSegmentM2MGr.query();\r\n\t\t\tif (workUserSegmentM2MGr.hasNext()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, this);\r\n\t},\r\n\r\n\tgetAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n\t\tconst segmentsObj = {};\r\n\t\tconst segmentsArr = [];\r\n\r\n\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\tworkUserSegmentM2MGr.orderBy('segment');\r\n\t\tworkUserSegmentM2MGr.query();\r\n\r\n\t\twhile (workUserSegmentM2MGr.next()) {\r\n\t\t\tconst segment = workUserSegmentM2MGr.getValue('segment');\r\n\t\t\tif (!segmentsObj[segment]) {\r\n\t\t\t\tsegmentsObj[segment] = true;\r\n\t\t\t\tsegmentsArr.push(segment);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn segmentsArr.map((segment) => `segmentLIKE${segment}`).join('^OR');\r\n\t},\r\n\r\n\tgetACLApprovedRecords: function(table) {\r\n\t\tconst listGr = new GlideRecordSecure(table);\r\n\t\tlistGr.query();\r\n\r\n\t\tconst numbers = [];\r\n\r\n\t\twhile(listGr.next()) {\r\n\t\t\tnumbers.push(listGr.getValue('number'));\r\n\t\t}\r\n\r\n\t\treturn numbers.join() || '';\r\n\t},\r\n\r\n\tvalidateSysGroupUser: function(assignmentGroup, userId) {\r\n\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\tgroupMemberGr.addQuery('user', userId);\r\n\t\tgroupMemberGr.query();\r\n\t\treturn groupMemberGr.hasNext();\r\n\t},\r\n\r\n\ttype: 'SegmentHelperUtilsMS'\r\n};",
    "display_value": "var SegmentHelperUtilsMS = Class.create();\r\nSegmentHelperUtilsMS.prototype = {\r\n\tinitialize: function() {\r\n\r\n\t},\r\n\r\n\thasRole: function(user, role) {\r\n\t\treturn gs.hasRole(role);\r\n\t},\r\n\r\n\tvalidateCreatedBy: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tif (gs.getUserID() === userId) {\r\n\t\t\tvalid = taskGr.getValue('sys_created_by') === gs.getUserName();\r\n\t\t}\r\n\r\n\t\tthis.results.createdBy = valid;\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateAssignment: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\t\tconst assignedTo = taskGr.getValue('assigned_to');\r\n\t\tconst assignmentGroup = taskGr.getValue('assignment_group');\r\n\r\n\t\t\r\n\t\tif ((this.testing || !valid) && userId === assignedTo) {\r\n\t\t\tvalid = true;\r\n\t\t\tthis.results.assignedTo = valid;\r\n\t\t}\r\n\r\n\t\tif ((this.testing || !valid) && assignmentGroup) {\r\n\t\t\tvalid = this.validateSysGroupUser(assignmentGroup, userId);\r\n\t\t\tthis.results.assignmentGroup = valid;\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateSegments: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tlet segments = `${taskGr.getValue('segment')}`;\r\n\t\tsegments = segments.split(',');\r\n\r\n\t\tvalid = this.validateSegmentsList(segments, userId);\t\r\n\r\n\t\treturn valid;\t\r\n\t},\r\n\r\n\tvalidateSegmentsList: function(segments, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\treturn !!segments.find((segment) => {\r\n\t\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\t\tworkUserSegmentM2MGr.addQuery('segment', segment);\r\n\t\t\tworkUserSegmentM2MGr.query();\r\n\t\t\tif (workUserSegmentM2MGr.hasNext()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, this);\r\n\t},\r\n\r\n\tgetAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n\t\tconst segmentsObj = {};\r\n\t\tconst segmentsArr = [];\r\n\r\n\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\tworkUserSegmentM2MGr.orderBy('segment');\r\n\t\tworkUserSegmentM2MGr.query();\r\n\r\n\t\twhile (workUserSegmentM2MGr.next()) {\r\n\t\t\tconst segment = workUserSegmentM2MGr.getValue('segment');\r\n\t\t\tif (!segmentsObj[segment]) {\r\n\t\t\t\tsegmentsObj[segment] = true;\r\n\t\t\t\tsegmentsArr.push(segment);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn segmentsArr.map((segment) => `segmentLIKE${segment}`).join('^OR');\r\n\t},\r\n\r\n\tgetACLApprovedRecords: function(table) {\r\n\t\tconst listGr = new GlideRecordSecure(table);\r\n\t\tlistGr.query();\r\n\r\n\t\tconst numbers = [];\r\n\r\n\t\twhile(listGr.next()) {\r\n\t\t\tnumbers.push(listGr.getValue('number'));\r\n\t\t}\r\n\r\n\t\treturn numbers.join() || '';\r\n\t},\r\n\r\n\tvalidateSysGroupUser: function(assignmentGroup, userId) {\r\n\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\tgroupMemberGr.addQuery('user', userId);\r\n\t\tgroupMemberGr.query();\r\n\t\treturn groupMemberGr.hasNext();\r\n\t},\r\n\r\n\ttype: 'SegmentHelperUtilsMS'\r\n};",
    "formatted_script": {
      "line_count": 113,
      "char_count": 3020,
      "preview": "var SegmentHelperUtilsMS = Class.create();\r\nSegmentHelperUtilsMS.prototype = {\r\n\tinitialize: function() {\r\n\r\n\t},\r\n\r\n\thasRole: function(user, role) {\r\n\t\treturn gs.hasRole(role);\r\n\t},\r\n\r\n\tvalidateCreate...",
      "full_script": "var SegmentHelperUtilsMS = Class.create();\r\nSegmentHelperUtilsMS.prototype = {\r\n\tinitialize: function() {\r\n\r\n\t},\r\n\r\n\thasRole: function(user, role) {\r\n\t\treturn gs.hasRole(role);\r\n\t},\r\n\r\n\tvalidateCreatedBy: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tif (gs.getUserID() === userId) {\r\n\t\t\tvalid = taskGr.getValue('sys_created_by') === gs.getUserName();\r\n\t\t}\r\n\r\n\t\tthis.results.createdBy = valid;\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateAssignment: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\t\tconst assignedTo = taskGr.getValue('assigned_to');\r\n\t\tconst assignmentGroup = taskGr.getValue('assignment_group');\r\n\r\n\t\t\r\n\t\tif ((this.testing || !valid) && userId === assignedTo) {\r\n\t\t\tvalid = true;\r\n\t\t\tthis.results.assignedTo = valid;\r\n\t\t}\r\n\r\n\t\tif ((this.testing || !valid) && assignmentGroup) {\r\n\t\t\tvalid = this.validateSysGroupUser(assignmentGroup, userId);\r\n\t\t\tthis.results.assignmentGroup = valid;\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\t},\r\n\r\n\tvalidateSegments: function(taskGr, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\tlet segments = `${taskGr.getValue('segment')}`;\r\n\t\tsegments = segments.split(',');\r\n\r\n\t\tvalid = this.validateSegmentsList(segments, userId);\t\r\n\r\n\t\treturn valid;\t\r\n\t},\r\n\r\n\tvalidateSegmentsList: function(segments, user) {\r\n\t\tlet valid = false;\r\n\t\tconst userId = user || gs.getUserID();\r\n\r\n\t\treturn !!segments.find((segment) => {\r\n\t\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\t\tworkUserSegmentM2MGr.addQuery('segment', segment);\r\n\t\t\tworkUserSegmentM2MGr.query();\r\n\t\t\tif (workUserSegmentM2MGr.hasNext()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}, this);\r\n\t},\r\n\r\n\tgetAllSegmentsForUser: function(userId = gs.getUserID()) {\r\n\t\tconst segmentsObj = {};\r\n\t\tconst segmentsArr = [];\r\n\r\n\t\tconst workUserSegmentM2MGr = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\tworkUserSegmentM2MGr.addEncodedQuery('work_user.user=' + userId);\r\n\t\tworkUserSegmentM2MGr.orderBy('segment');\r\n\t\tworkUserSegmentM2MGr.query();\r\n\r\n\t\twhile (workUserSegmentM2MGr.next()) {\r\n\t\t\tconst segment = workUserSegmentM2MGr.getValue('segment');\r\n\t\t\tif (!segmentsObj[segment]) {\r\n\t\t\t\tsegmentsObj[segment] = true;\r\n\t\t\t\tsegmentsArr.push(segment);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn segmentsArr.map((segment) => `segmentLIKE${segment}`).join('^OR');\r\n\t},\r\n\r\n\tgetACLApprovedRecords: function(table) {\r\n\t\tconst listGr = new GlideRecordSecure(table);\r\n\t\tlistGr.query();\r\n\r\n\t\tconst numbers = [];\r\n\r\n\t\twhile(listGr.next()) {\r\n\t\t\tnumbers.push(listGr.getValue('number'));\r\n\t\t}\r\n\r\n\t\treturn numbers.join() || '';\r\n\t},\r\n\r\n\tvalidateSysGroupUser: function(assignmentGroup, userId) {\r\n\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\tgroupMemberGr.addQuery('user', userId);\r\n\t\tgroupMemberGr.query();\r\n\t\treturn groupMemberGr.hasNext();\r\n\t},\r\n\r\n\ttype: 'SegmentHelperUtilsMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_de9a3b3247786910a1052a02e26d4329",
    "display_value": "sys_script_include_de9a3b3247786910a1052a02e26d4329"
  },
  "sys_updated_by": {
    "value": "ryan.sanders",
    "display_value": "ryan.sanders"
  },
  "api_name": {
    "value": "x_cadso_work.SegmentHelperUtilsMS",
    "display_value": "x_cadso_work.SegmentHelperUtilsMS"
  },
  "sys_created_on": {
    "value": "2023-02-08 02:11:37",
    "display_value": "2023-02-07 06:11:37 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "SegmentHelperUtilsMS",
    "display_value": "SegmentHelperUtilsMS"
  },
  "sys_name": {
    "value": "SegmentHelperUtilsMS",
    "display_value": "SegmentHelperUtilsMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
