{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "d12da6b847e5bd1098519fd8036d4320",
    "extracted_at": "2025-09-19T21:48:31.366Z",
    "display_value": "NotificationApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "126",
    "display_value": "126"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-11 21:02:35",
    "display_value": "2025-03-11 02:02:35 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const NotificationApiMS = Class.create();\r\nNotificationApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.routes = {\r\n\t\t\ttask: {\r\n\t\t\t\troute: 'my-tasks',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\ttab: 'list',\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t},\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tproject: {\r\n\t\t\t\troute: 'project',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tcampaign: {\r\n\t\t\t\troute: 'campaign',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tsprint: {\r\n\t\t\t\troute: 'sprint',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tapproval: {\r\n\t\t\t\troute: 'inbox',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'newRequests',\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\r\n\ttrigger: function(recordGr, sender, type) {\r\n\t\tif (type == 'comment') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'mention') {\r\n\t\t\tvar documentGr = recordGr.document.getRefRecord();\r\n\t\t\tif (documentGr.isValidRecord()) {\r\n\t\t\t\tthis.createNotification({ user: recordGr.getValue('user'), sender, type, recordGr: documentGr });\r\n\t\t\t}\r\n\t\t} else if (type == 'mentionAS') {\r\n\t\t\tconst data = JSON.parse(sender);\r\n\t\t\tthis.createNotification({ user: data.user, sender: data.sender, type, recordGr });\r\n\t\t} else if (type == 'updated') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'status') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'assigned') {\r\n\t\t\tthis.createNotification({ user: recordGr.getValue('assigned_to'), sender, type, recordGr });\r\n\t\t} else if (type == 'approval') {\r\n\t\t\tvar sourceTableGr = new GlideRecord(recordGr.getValue('source_table'));\r\n\t\t\tif (sourceTableGr.get(recordGr.getValue('sysapproval'))) {\r\n\t\t\t\tvar user = recordGr.getValue('approver');\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr: sourceTableGr, documentId: recordGr.getUniqueValue(), table: 'sysapproval_approver'});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == 'request') {\r\n\t\t\tthis.getProjectApprovals({ recordGr, sender, type, users: [] });\r\n\t\t} else if (type == 'overdue') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t}\r\n\t},\r\n\r\n\tgetProjectApprovals: function({ recordGr, sender, type, users = [] }) {\r\n\t\tconst projectTemplateGr = recordGr.project_template.getRefRecord();\r\n\t\tif (!projectTemplateGr.isValidRecord()) return;\r\n\t\tlet approvalGroup = projectTemplateGr.getValue('group') + '';\r\n\t\tapprovalGroup = approvalGroup == 'null' ? '' : approvalGroup;\r\n\r\n\t\tif (approvalGroup) {\r\n\t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t\tgroupMemberGr.addQuery('group', approvalGroup);\r\n\t\t\tif (users.length) {\r\n\t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t\t}\r\n\t\t\tgroupMemberGr.query();\r\n\r\n\t\t\twhile (groupMemberGr.next()) {\r\n\t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t\t\t\tusers.push(user);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tmyRecords: function(recordGr, sender, type) {\r\n\r\n\t\tconst assignedTo = recordGr.getValue('assigned_to');\r\n\t\tconst segments = recordGr.getValue('segment');\r\n\t\tlet assignmentGroup = recordGr.getValue('assignment_group') + '';\r\n\t\tassignmentGroup = assignmentGroup == 'null' ? [] : assignmentGroup;\r\n\t\tlet watchList = recordGr.getValue('watch_list') + '';\r\n\t\twatchList = watchList == 'null' ? [] : watchList.split(',');\r\n\r\n\t\tconst users = sender ? [sender] : [];\r\n\r\n\t\tvar recordTable = recordGr.getValue('sys_class_name');\r\n\t\tif(recordTable === \"x_cadso_work_project\") {\r\n\t\t\tvar projectOwner = recordGr.getValue('project_owner');\r\n\t\t\tif(projectOwner !== assignedTo && projectOwner !== sender) {\r\n\t\t\t\tthis.createNotification({ user: projectOwner, sender, type, recordGr });\r\n\t\t\t\tusers.push(projectOwner);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (assignedTo && assignedTo != sender) {\r\n\t\t\tthis.createNotification({ user: assignedTo, sender, type, recordGr });\r\n\t\t\tusers.push(assignedTo);\r\n\t\t}\r\n\r\n\t\t// \t\tif (assignmentGroup) {\r\n\t\t// \t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t// \t\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\t// \t\t\tif (users.length) {\r\n\t\t// \t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t// \t\t\t}\r\n\t\t// \t\t\tgroupMemberGr.query();\r\n\r\n\t\t// \t\t\twhile (groupMemberGr.next()) {\r\n\t\t// \t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\t\t// \t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\t\t\tusers.push(user);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\r\n\t\tif (watchList.length) {\r\n\t\t\twatchList.filter(function(watcher) {\r\n\t\t\t\treturn !users.includes(watcher);\r\n\t\t\t}).forEach(function(watcher) {\r\n\t\t\t\tthis.createNotification({ user: watcher, sender, type, recordGr });\r\n\t\t\t\tusers.push(watcher);\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t\t// if (segments) {\r\n\t\t// \tvar gr_x_cadso_work_user_segment_m2m = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('work_user.user', 'NOT IN', users.join(','));\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_user.userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('segment', 'IN', segments);\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.query();\r\n\t\t// \tconst usersObj = {};\r\n\r\n\t\t// \twhile (gr_x_cadso_work_user_segment_m2m.next()) {\r\n\t\t// \t\tconst wUser = gr_x_cadso_work_user_segment_m2m.getValue('work_user');\r\n\t\t// \t\tconst userGr = gr_x_cadso_work_user_segment_m2m.work_user.getRefRecord();\r\n\t\t// \t\tif (!userGr.isValidRecord()) continue;\r\n\t\t// \t\tvar user = userGr.getValue('user');\r\n\t\t// \t\tif (usersObj[user]) {\r\n\t\t// \t\t\tcontinue;\r\n\t\t// \t\t}\r\n\t\t// \t\tusersObj[user] = true;\r\n\t\t// \t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\tusers.push(user);\r\n\t\t// \t}\r\n\t\t// }\r\n\t},\r\n\r\n\tcreateNotification: function(data) {\r\n\t\tconst { user, sender, recordGr, type, documentId, table } = data;\r\n\t\tconst notificationGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tnotificationGr.newRecord();\r\n\t\tnotificationGr.setValue('user', user);\r\n\t\tnotificationGr.setValue('sender', sender);\r\n\t\tnotificationGr.setValue('type', type);\r\n\t\tnotificationGr.setValue('record', recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('document_id', documentId || recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('table', table || recordGr.getValue('sys_class_name'));\r\n\t\tnotificationGr.insert();\r\n\t},\r\n\r\n\tfetch: function (request, response) {\r\n\t\tconst { limit } = request.body.data;\r\n\t\tconst notifications = [];\r\n\t\tconst unreadNotifications = [];\r\n\r\n\t\tvar workNotifGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '0');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'record'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tunreadNotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tworkNotifGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '!=', '40');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tnotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ notifications, unreadNotifications, counts: this.getCounts(), limit: limit + 20 });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tgetCounts: function() {\r\n\t\tconst counts = {};\r\n\t\tvar ga = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga.addQuery('state', '0');\r\n\t\tga.addQuery('user', gs.getUserID());\r\n\t\tga.addAggregate('COUNT');\r\n\t\tga.query();\r\n\r\n\t\twhile (ga.next()) {\r\n\t\t\tconst count = parseInt(ga.getAggregate('COUNT'));\r\n\t\t\tcounts.unread = count;\r\n\t\t}\r\n\r\n\t\tconst ga2 = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga2.addQuery('state', '!=', '40');\r\n\t\tga2.addQuery('user', gs.getUserID());\r\n\t\tga2.addAggregate('COUNT');\r\n\t\tga2.query();\r\n\r\n\t\twhile (ga2.next()) {\r\n\t\t\tconst count2 = parseInt(ga2.getAggregate('COUNT'));\r\n\t\t\tcounts.total = count2;\r\n\t\t}\r\n\r\n\t\treturn counts;\r\n\t},\r\n\r\n\tgetValues: (tableGr, field) => {\r\n\t\tconst valueObj = {\r\n\t\t\tvalue: tableGr.getValue(field),\r\n\t\t\tdisplayValue: tableGr.getDisplayValue(field),\r\n\t\t};\r\n\r\n\t\tif ('user,sender'.indexOf(field) > -1) {\r\n\t\t\tconst userGr = tableGr[field].getRefRecord();\r\n\t\t\tif (userGr.isValidRecord()) {\r\n\t\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\r\n\t\t\t\tvalueObj.avatar = avatar ? avatar + '.iix' : '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn valueObj;\r\n\t},\r\n\r\n\tread: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\r\n\t\tconst updateCount = this.updateState(notifications, '30');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tremove: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\t\tconst updateCount = this.updateState(notifications, '40');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tupdateState: function(notifications = [], state) {\r\n\t\tvar notificationGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tnotificationGr.addQuery('sys_id', 'IN', notifications.join(','));\r\n\t\tnotificationGr.query();\r\n\t\tlet x = 0;\r\n\r\n\t\twhile(notificationGr.next()) {\r\n\t\t\tx++;\r\n\t\t\tnotificationGr.setValue('state', state);\r\n\t\t\tnotificationGr.update();\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t},\r\n\r\n\t// add function to check for overdue records to trigger notification event\r\n\t// look for due_date for the past 24 hours\r\n\toverdue: function(recordGr) {\r\n\t\tvar documentGR = recordGr.document.getRefRecord();\r\n\t\tif (documentGR.isValidRecord()) {\r\n\t\t\tvar diff = this.getOverdueCount(documentGR);\r\n\t\t\tif (diff > 0) {\r\n\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', documentGR, gs.getUserID(), 'overdue');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetStatus: function(workNotifGr) {\r\n\t\tlet status = {\r\n\t\t\tdisplayValue: '',\r\n\t\t\tvalue: ''\r\n\t\t};\r\n\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\tif (!recordGr.isValidRecord()) return status;\r\n\t\tconst taskType = workNotifGr.getValue('task_type');\r\n\t\tlet statusField = taskType === 'x_cadso_work_task' ? 'status' : 'state';\r\n\r\n\t\tif (recordGr.isValidRecord()) {\r\n\t\t\tstatus = this.getValues(recordGr, statusField);\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t},\r\n\r\n\tgetRoute: function(notificationGr) {\r\n\t\tlet taskType = notificationGr.getValue('task_type');\r\n\t\tlet isApproval = notificationGr.getValue('type') === 'approval';\r\n\t\ttaskType = taskType.replace('x_cadso_work_', '');\r\n\r\n\t\tconst routes = (JSON.parse(JSON.stringify(this.routes)));\r\n\t\tconst route = (isApproval ? routes.approval : routes[taskType]) || false;\r\n\t\tif (!route) return {};\r\n\r\n\t\tif (route.fields && route.fields.forceLoad) {\r\n\t\t\troute.fields.forceLoad = new Date().getTime();\r\n\t\t}\r\n\r\n\t\tif (route.fields && route.fields.sysId) {\r\n\t\t\troute.fields.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (route.params && route.params.sysId) {\r\n\t\t\troute.params.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (isApproval) {\r\n\t\t\tvar recordGr = notificationGr.document_id.getRefRecord();\r\n\t\t\tif (recordGr.isValidRecord()) {\r\n\t\t\t\tconst state = recordGr.getValue('state');\r\n\t\t\t\tvar requested = state === 'requested';\r\n\t\t\t\tvar approved = state === 'approved';\r\n\t\t\t\tvar rejected = state === 'rejected';\r\n\r\n\t\t\t\troute.fields.tab = requested ? 'newRequests' : approved ? 'accepted' : 'declined';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn route;\r\n\t},\r\n\r\n\tgetOverdueCount: function(recordGr) {\r\n\t\tif (!recordGr || !recordGr.isValidRecord() || !recordGr.due_date || recordGr.due_date.nil()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tvar currentDateTime = new GlideDateTime();\r\n\t\ttargetDateValue = recordGr.getValue('due_date');\r\n\t\tvar targetDate = new GlideDateTime();\r\n\t\ttargetDate.setValue(targetDateValue);\r\n\t\tvar differenceInDays = GlideDateTime.subtract(targetDate, currentDateTime);\r\n\t\tvar daysOverdue = Math.ceil(differenceInDays.getNumericValue() / (24 * 60 * 60 * 1000));\r\n\t\treturn daysOverdue;\r\n\t},\r\n\r\n\thasRole: ({ userSysId, role }) => {\r\n\t\tvar gr_sys_user_has_role = new GlideRecord('sys_user_has_role');\r\n\t\tgr_sys_user_has_role.addQuery('user', userSysId);\r\n\t\tgr_sys_user_has_role.addEncodedQuery('role.name=x_cadso_work.' + role);\r\n\t\tgr_sys_user_has_role.query();\r\n\t\treturn gr_sys_user_has_role.hasNext();\r\n\t},\r\n\r\n\tcanApprove: function(userSysId) {\r\n\t\treturn (this.hasRole({ userSysId, role: 'admin' }) ? true : this.hasRole({ userSysId, role: 'configurator' }) ? true : this.hasRole({ userSysId, role: 'manager' }));\r\n\t},\r\n\r\n\ttype: \"NotificationApiMS\",\r\n};\r\n",
    "display_value": "const NotificationApiMS = Class.create();\r\nNotificationApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.routes = {\r\n\t\t\ttask: {\r\n\t\t\t\troute: 'my-tasks',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\ttab: 'list',\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t},\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tproject: {\r\n\t\t\t\troute: 'project',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tcampaign: {\r\n\t\t\t\troute: 'campaign',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tsprint: {\r\n\t\t\t\troute: 'sprint',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tapproval: {\r\n\t\t\t\troute: 'inbox',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'newRequests',\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\r\n\ttrigger: function(recordGr, sender, type) {\r\n\t\tif (type == 'comment') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'mention') {\r\n\t\t\tvar documentGr = recordGr.document.getRefRecord();\r\n\t\t\tif (documentGr.isValidRecord()) {\r\n\t\t\t\tthis.createNotification({ user: recordGr.getValue('user'), sender, type, recordGr: documentGr });\r\n\t\t\t}\r\n\t\t} else if (type == 'mentionAS') {\r\n\t\t\tconst data = JSON.parse(sender);\r\n\t\t\tthis.createNotification({ user: data.user, sender: data.sender, type, recordGr });\r\n\t\t} else if (type == 'updated') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'status') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'assigned') {\r\n\t\t\tthis.createNotification({ user: recordGr.getValue('assigned_to'), sender, type, recordGr });\r\n\t\t} else if (type == 'approval') {\r\n\t\t\tvar sourceTableGr = new GlideRecord(recordGr.getValue('source_table'));\r\n\t\t\tif (sourceTableGr.get(recordGr.getValue('sysapproval'))) {\r\n\t\t\t\tvar user = recordGr.getValue('approver');\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr: sourceTableGr, documentId: recordGr.getUniqueValue(), table: 'sysapproval_approver'});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == 'request') {\r\n\t\t\tthis.getProjectApprovals({ recordGr, sender, type, users: [] });\r\n\t\t} else if (type == 'overdue') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t}\r\n\t},\r\n\r\n\tgetProjectApprovals: function({ recordGr, sender, type, users = [] }) {\r\n\t\tconst projectTemplateGr = recordGr.project_template.getRefRecord();\r\n\t\tif (!projectTemplateGr.isValidRecord()) return;\r\n\t\tlet approvalGroup = projectTemplateGr.getValue('group') + '';\r\n\t\tapprovalGroup = approvalGroup == 'null' ? '' : approvalGroup;\r\n\r\n\t\tif (approvalGroup) {\r\n\t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t\tgroupMemberGr.addQuery('group', approvalGroup);\r\n\t\t\tif (users.length) {\r\n\t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t\t}\r\n\t\t\tgroupMemberGr.query();\r\n\r\n\t\t\twhile (groupMemberGr.next()) {\r\n\t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t\t\t\tusers.push(user);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tmyRecords: function(recordGr, sender, type) {\r\n\r\n\t\tconst assignedTo = recordGr.getValue('assigned_to');\r\n\t\tconst segments = recordGr.getValue('segment');\r\n\t\tlet assignmentGroup = recordGr.getValue('assignment_group') + '';\r\n\t\tassignmentGroup = assignmentGroup == 'null' ? [] : assignmentGroup;\r\n\t\tlet watchList = recordGr.getValue('watch_list') + '';\r\n\t\twatchList = watchList == 'null' ? [] : watchList.split(',');\r\n\r\n\t\tconst users = sender ? [sender] : [];\r\n\r\n\t\tvar recordTable = recordGr.getValue('sys_class_name');\r\n\t\tif(recordTable === \"x_cadso_work_project\") {\r\n\t\t\tvar projectOwner = recordGr.getValue('project_owner');\r\n\t\t\tif(projectOwner !== assignedTo && projectOwner !== sender) {\r\n\t\t\t\tthis.createNotification({ user: projectOwner, sender, type, recordGr });\r\n\t\t\t\tusers.push(projectOwner);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (assignedTo && assignedTo != sender) {\r\n\t\t\tthis.createNotification({ user: assignedTo, sender, type, recordGr });\r\n\t\t\tusers.push(assignedTo);\r\n\t\t}\r\n\r\n\t\t// \t\tif (assignmentGroup) {\r\n\t\t// \t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t// \t\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\t// \t\t\tif (users.length) {\r\n\t\t// \t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t// \t\t\t}\r\n\t\t// \t\t\tgroupMemberGr.query();\r\n\r\n\t\t// \t\t\twhile (groupMemberGr.next()) {\r\n\t\t// \t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\t\t// \t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\t\t\tusers.push(user);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\r\n\t\tif (watchList.length) {\r\n\t\t\twatchList.filter(function(watcher) {\r\n\t\t\t\treturn !users.includes(watcher);\r\n\t\t\t}).forEach(function(watcher) {\r\n\t\t\t\tthis.createNotification({ user: watcher, sender, type, recordGr });\r\n\t\t\t\tusers.push(watcher);\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t\t// if (segments) {\r\n\t\t// \tvar gr_x_cadso_work_user_segment_m2m = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('work_user.user', 'NOT IN', users.join(','));\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_user.userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('segment', 'IN', segments);\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.query();\r\n\t\t// \tconst usersObj = {};\r\n\r\n\t\t// \twhile (gr_x_cadso_work_user_segment_m2m.next()) {\r\n\t\t// \t\tconst wUser = gr_x_cadso_work_user_segment_m2m.getValue('work_user');\r\n\t\t// \t\tconst userGr = gr_x_cadso_work_user_segment_m2m.work_user.getRefRecord();\r\n\t\t// \t\tif (!userGr.isValidRecord()) continue;\r\n\t\t// \t\tvar user = userGr.getValue('user');\r\n\t\t// \t\tif (usersObj[user]) {\r\n\t\t// \t\t\tcontinue;\r\n\t\t// \t\t}\r\n\t\t// \t\tusersObj[user] = true;\r\n\t\t// \t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\tusers.push(user);\r\n\t\t// \t}\r\n\t\t// }\r\n\t},\r\n\r\n\tcreateNotification: function(data) {\r\n\t\tconst { user, sender, recordGr, type, documentId, table } = data;\r\n\t\tconst notificationGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tnotificationGr.newRecord();\r\n\t\tnotificationGr.setValue('user', user);\r\n\t\tnotificationGr.setValue('sender', sender);\r\n\t\tnotificationGr.setValue('type', type);\r\n\t\tnotificationGr.setValue('record', recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('document_id', documentId || recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('table', table || recordGr.getValue('sys_class_name'));\r\n\t\tnotificationGr.insert();\r\n\t},\r\n\r\n\tfetch: function (request, response) {\r\n\t\tconst { limit } = request.body.data;\r\n\t\tconst notifications = [];\r\n\t\tconst unreadNotifications = [];\r\n\r\n\t\tvar workNotifGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '0');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'record'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tunreadNotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tworkNotifGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '!=', '40');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tnotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ notifications, unreadNotifications, counts: this.getCounts(), limit: limit + 20 });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tgetCounts: function() {\r\n\t\tconst counts = {};\r\n\t\tvar ga = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga.addQuery('state', '0');\r\n\t\tga.addQuery('user', gs.getUserID());\r\n\t\tga.addAggregate('COUNT');\r\n\t\tga.query();\r\n\r\n\t\twhile (ga.next()) {\r\n\t\t\tconst count = parseInt(ga.getAggregate('COUNT'));\r\n\t\t\tcounts.unread = count;\r\n\t\t}\r\n\r\n\t\tconst ga2 = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga2.addQuery('state', '!=', '40');\r\n\t\tga2.addQuery('user', gs.getUserID());\r\n\t\tga2.addAggregate('COUNT');\r\n\t\tga2.query();\r\n\r\n\t\twhile (ga2.next()) {\r\n\t\t\tconst count2 = parseInt(ga2.getAggregate('COUNT'));\r\n\t\t\tcounts.total = count2;\r\n\t\t}\r\n\r\n\t\treturn counts;\r\n\t},\r\n\r\n\tgetValues: (tableGr, field) => {\r\n\t\tconst valueObj = {\r\n\t\t\tvalue: tableGr.getValue(field),\r\n\t\t\tdisplayValue: tableGr.getDisplayValue(field),\r\n\t\t};\r\n\r\n\t\tif ('user,sender'.indexOf(field) > -1) {\r\n\t\t\tconst userGr = tableGr[field].getRefRecord();\r\n\t\t\tif (userGr.isValidRecord()) {\r\n\t\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\r\n\t\t\t\tvalueObj.avatar = avatar ? avatar + '.iix' : '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn valueObj;\r\n\t},\r\n\r\n\tread: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\r\n\t\tconst updateCount = this.updateState(notifications, '30');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tremove: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\t\tconst updateCount = this.updateState(notifications, '40');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tupdateState: function(notifications = [], state) {\r\n\t\tvar notificationGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tnotificationGr.addQuery('sys_id', 'IN', notifications.join(','));\r\n\t\tnotificationGr.query();\r\n\t\tlet x = 0;\r\n\r\n\t\twhile(notificationGr.next()) {\r\n\t\t\tx++;\r\n\t\t\tnotificationGr.setValue('state', state);\r\n\t\t\tnotificationGr.update();\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t},\r\n\r\n\t// add function to check for overdue records to trigger notification event\r\n\t// look for due_date for the past 24 hours\r\n\toverdue: function(recordGr) {\r\n\t\tvar documentGR = recordGr.document.getRefRecord();\r\n\t\tif (documentGR.isValidRecord()) {\r\n\t\t\tvar diff = this.getOverdueCount(documentGR);\r\n\t\t\tif (diff > 0) {\r\n\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', documentGR, gs.getUserID(), 'overdue');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetStatus: function(workNotifGr) {\r\n\t\tlet status = {\r\n\t\t\tdisplayValue: '',\r\n\t\t\tvalue: ''\r\n\t\t};\r\n\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\tif (!recordGr.isValidRecord()) return status;\r\n\t\tconst taskType = workNotifGr.getValue('task_type');\r\n\t\tlet statusField = taskType === 'x_cadso_work_task' ? 'status' : 'state';\r\n\r\n\t\tif (recordGr.isValidRecord()) {\r\n\t\t\tstatus = this.getValues(recordGr, statusField);\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t},\r\n\r\n\tgetRoute: function(notificationGr) {\r\n\t\tlet taskType = notificationGr.getValue('task_type');\r\n\t\tlet isApproval = notificationGr.getValue('type') === 'approval';\r\n\t\ttaskType = taskType.replace('x_cadso_work_', '');\r\n\r\n\t\tconst routes = (JSON.parse(JSON.stringify(this.routes)));\r\n\t\tconst route = (isApproval ? routes.approval : routes[taskType]) || false;\r\n\t\tif (!route) return {};\r\n\r\n\t\tif (route.fields && route.fields.forceLoad) {\r\n\t\t\troute.fields.forceLoad = new Date().getTime();\r\n\t\t}\r\n\r\n\t\tif (route.fields && route.fields.sysId) {\r\n\t\t\troute.fields.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (route.params && route.params.sysId) {\r\n\t\t\troute.params.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (isApproval) {\r\n\t\t\tvar recordGr = notificationGr.document_id.getRefRecord();\r\n\t\t\tif (recordGr.isValidRecord()) {\r\n\t\t\t\tconst state = recordGr.getValue('state');\r\n\t\t\t\tvar requested = state === 'requested';\r\n\t\t\t\tvar approved = state === 'approved';\r\n\t\t\t\tvar rejected = state === 'rejected';\r\n\r\n\t\t\t\troute.fields.tab = requested ? 'newRequests' : approved ? 'accepted' : 'declined';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn route;\r\n\t},\r\n\r\n\tgetOverdueCount: function(recordGr) {\r\n\t\tif (!recordGr || !recordGr.isValidRecord() || !recordGr.due_date || recordGr.due_date.nil()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tvar currentDateTime = new GlideDateTime();\r\n\t\ttargetDateValue = recordGr.getValue('due_date');\r\n\t\tvar targetDate = new GlideDateTime();\r\n\t\ttargetDate.setValue(targetDateValue);\r\n\t\tvar differenceInDays = GlideDateTime.subtract(targetDate, currentDateTime);\r\n\t\tvar daysOverdue = Math.ceil(differenceInDays.getNumericValue() / (24 * 60 * 60 * 1000));\r\n\t\treturn daysOverdue;\r\n\t},\r\n\r\n\thasRole: ({ userSysId, role }) => {\r\n\t\tvar gr_sys_user_has_role = new GlideRecord('sys_user_has_role');\r\n\t\tgr_sys_user_has_role.addQuery('user', userSysId);\r\n\t\tgr_sys_user_has_role.addEncodedQuery('role.name=x_cadso_work.' + role);\r\n\t\tgr_sys_user_has_role.query();\r\n\t\treturn gr_sys_user_has_role.hasNext();\r\n\t},\r\n\r\n\tcanApprove: function(userSysId) {\r\n\t\treturn (this.hasRole({ userSysId, role: 'admin' }) ? true : this.hasRole({ userSysId, role: 'configurator' }) ? true : this.hasRole({ userSysId, role: 'manager' }));\r\n\t},\r\n\r\n\ttype: \"NotificationApiMS\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 438,
      "char_count": 14534,
      "preview": "const NotificationApiMS = Class.create();\r\nNotificationApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.routes = {\r\n\t\t\ttask: {\r\n\t\t\t\troute: 'my-tasks',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\ttab: 'list',\r\n\t\t\t\t\tfo...",
      "full_script": "const NotificationApiMS = Class.create();\r\nNotificationApiMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.routes = {\r\n\t\t\ttask: {\r\n\t\t\t\troute: 'my-tasks',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\ttab: 'list',\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t},\r\n\t\t\t\tparams: {\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tproject: {\r\n\t\t\t\troute: 'project',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tcampaign: {\r\n\t\t\t\troute: 'campaign',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tsprint: {\r\n\t\t\t\troute: 'sprint',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'overview',\r\n\t\t\t\t\tsysId: true\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t},\r\n\t\t\tapproval: {\r\n\t\t\t\troute: 'inbox',\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tforceLoad: true,\r\n\t\t\t\t\ttab: 'newRequests',\r\n\t\t\t\t},\r\n\t\t\t\tparams: null\r\n\t\t\t}\r\n\t\t};\r\n\t},\r\n\r\n\ttrigger: function(recordGr, sender, type) {\r\n\t\tif (type == 'comment') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'mention') {\r\n\t\t\tvar documentGr = recordGr.document.getRefRecord();\r\n\t\t\tif (documentGr.isValidRecord()) {\r\n\t\t\t\tthis.createNotification({ user: recordGr.getValue('user'), sender, type, recordGr: documentGr });\r\n\t\t\t}\r\n\t\t} else if (type == 'mentionAS') {\r\n\t\t\tconst data = JSON.parse(sender);\r\n\t\t\tthis.createNotification({ user: data.user, sender: data.sender, type, recordGr });\r\n\t\t} else if (type == 'updated') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'status') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t} else if (type == 'assigned') {\r\n\t\t\tthis.createNotification({ user: recordGr.getValue('assigned_to'), sender, type, recordGr });\r\n\t\t} else if (type == 'approval') {\r\n\t\t\tvar sourceTableGr = new GlideRecord(recordGr.getValue('source_table'));\r\n\t\t\tif (sourceTableGr.get(recordGr.getValue('sysapproval'))) {\r\n\t\t\t\tvar user = recordGr.getValue('approver');\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr: sourceTableGr, documentId: recordGr.getUniqueValue(), table: 'sysapproval_approver'});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == 'request') {\r\n\t\t\tthis.getProjectApprovals({ recordGr, sender, type, users: [] });\r\n\t\t} else if (type == 'overdue') {\r\n\t\t\tthis.myRecords(recordGr, sender, type);\r\n\t\t}\r\n\t},\r\n\r\n\tgetProjectApprovals: function({ recordGr, sender, type, users = [] }) {\r\n\t\tconst projectTemplateGr = recordGr.project_template.getRefRecord();\r\n\t\tif (!projectTemplateGr.isValidRecord()) return;\r\n\t\tlet approvalGroup = projectTemplateGr.getValue('group') + '';\r\n\t\tapprovalGroup = approvalGroup == 'null' ? '' : approvalGroup;\r\n\r\n\t\tif (approvalGroup) {\r\n\t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t\tgroupMemberGr.addQuery('group', approvalGroup);\r\n\t\t\tif (users.length) {\r\n\t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t\t}\r\n\t\t\tgroupMemberGr.query();\r\n\r\n\t\t\twhile (groupMemberGr.next()) {\r\n\t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\r\n\t\t\t\tvar hasApproverRole = this.canApprove(user);\r\n\t\t\t\tif (hasApproverRole) {\r\n\t\t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t\t\t\tusers.push(user);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tmyRecords: function(recordGr, sender, type) {\r\n\r\n\t\tconst assignedTo = recordGr.getValue('assigned_to');\r\n\t\tconst segments = recordGr.getValue('segment');\r\n\t\tlet assignmentGroup = recordGr.getValue('assignment_group') + '';\r\n\t\tassignmentGroup = assignmentGroup == 'null' ? [] : assignmentGroup;\r\n\t\tlet watchList = recordGr.getValue('watch_list') + '';\r\n\t\twatchList = watchList == 'null' ? [] : watchList.split(',');\r\n\r\n\t\tconst users = sender ? [sender] : [];\r\n\r\n\t\tvar recordTable = recordGr.getValue('sys_class_name');\r\n\t\tif(recordTable === \"x_cadso_work_project\") {\r\n\t\t\tvar projectOwner = recordGr.getValue('project_owner');\r\n\t\t\tif(projectOwner !== assignedTo && projectOwner !== sender) {\r\n\t\t\t\tthis.createNotification({ user: projectOwner, sender, type, recordGr });\r\n\t\t\t\tusers.push(projectOwner);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (assignedTo && assignedTo != sender) {\r\n\t\t\tthis.createNotification({ user: assignedTo, sender, type, recordGr });\r\n\t\t\tusers.push(assignedTo);\r\n\t\t}\r\n\r\n\t\t// \t\tif (assignmentGroup) {\r\n\t\t// \t\t\tvar groupMemberGr = new GlideRecord('sys_user_grmember');\r\n\t\t// \t\t\tgroupMemberGr.addQuery('group', assignmentGroup);\r\n\t\t// \t\t\tif (users.length) {\r\n\t\t// \t\t\t\tgroupMemberGr.addQuery('user', 'NOT IN', users.join(','));\r\n\t\t// \t\t\t}\r\n\t\t// \t\t\tgroupMemberGr.query();\r\n\r\n\t\t// \t\t\twhile (groupMemberGr.next()) {\r\n\t\t// \t\t\t\tconst user = groupMemberGr.getValue('user');\r\n\t\t// \t\t\t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\t\t\tusers.push(user);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\r\n\t\tif (watchList.length) {\r\n\t\t\twatchList.filter(function(watcher) {\r\n\t\t\t\treturn !users.includes(watcher);\r\n\t\t\t}).forEach(function(watcher) {\r\n\t\t\t\tthis.createNotification({ user: watcher, sender, type, recordGr });\r\n\t\t\t\tusers.push(watcher);\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t\t// if (segments) {\r\n\t\t// \tvar gr_x_cadso_work_user_segment_m2m = new GlideRecord('x_cadso_work_user_segment_m2m');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('work_user.user', 'NOT IN', users.join(','));\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addEncodedQuery('work_user.userISNOTEMPTY');\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.addQuery('segment', 'IN', segments);\r\n\t\t// \tgr_x_cadso_work_user_segment_m2m.query();\r\n\t\t// \tconst usersObj = {};\r\n\r\n\t\t// \twhile (gr_x_cadso_work_user_segment_m2m.next()) {\r\n\t\t// \t\tconst wUser = gr_x_cadso_work_user_segment_m2m.getValue('work_user');\r\n\t\t// \t\tconst userGr = gr_x_cadso_work_user_segment_m2m.work_user.getRefRecord();\r\n\t\t// \t\tif (!userGr.isValidRecord()) continue;\r\n\t\t// \t\tvar user = userGr.getValue('user');\r\n\t\t// \t\tif (usersObj[user]) {\r\n\t\t// \t\t\tcontinue;\r\n\t\t// \t\t}\r\n\t\t// \t\tusersObj[user] = true;\r\n\t\t// \t\tthis.createNotification({ user, sender, type, recordGr });\r\n\t\t// \t\tusers.push(user);\r\n\t\t// \t}\r\n\t\t// }\r\n\t},\r\n\r\n\tcreateNotification: function(data) {\r\n\t\tconst { user, sender, recordGr, type, documentId, table } = data;\r\n\t\tconst notificationGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tnotificationGr.newRecord();\r\n\t\tnotificationGr.setValue('user', user);\r\n\t\tnotificationGr.setValue('sender', sender);\r\n\t\tnotificationGr.setValue('type', type);\r\n\t\tnotificationGr.setValue('record', recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('document_id', documentId || recordGr.getUniqueValue());\r\n\t\tnotificationGr.setValue('table', table || recordGr.getValue('sys_class_name'));\r\n\t\tnotificationGr.insert();\r\n\t},\r\n\r\n\tfetch: function (request, response) {\r\n\t\tconst { limit } = request.body.data;\r\n\t\tconst notifications = [];\r\n\t\tconst unreadNotifications = [];\r\n\r\n\t\tvar workNotifGr = new GlideRecordSecure('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '0');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'record'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tunreadNotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tworkNotifGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tworkNotifGr.addQuery('state', '!=', '40');\r\n\t\tworkNotifGr.addQuery('user', gs.getUserID());\r\n\t\tworkNotifGr.orderByDesc('sys_created_on');\r\n\t\tworkNotifGr.chooseWindow(0, limit);\r\n\t\tworkNotifGr.query();\r\n\r\n\t\twhile (workNotifGr.next()) {\r\n\t\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\t\tif (!recordGr.isValidRecord()) continue;\r\n\t\t\tvar recordSysCreatedOn = workNotifGr.getDisplayValue('sys_created_on');\r\n\r\n\t\t\tconst notification = {\r\n\t\t\t\tsysId: workNotifGr.getUniqueValue(),\r\n\t\t\t\tdocumentId: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\trecord: this.getValues(workNotifGr, 'document_id'),\r\n\t\t\t\tstatus: this.getStatus(workNotifGr),\r\n\t\t\t\tstate: this.getValues(workNotifGr, 'state'),\r\n\t\t\t\ttable: this.getValues(workNotifGr, 'table'),\r\n\t\t\t\ttype: this.getValues(workNotifGr, 'type'),\r\n\t\t\t\ttaskType: this.getValues(workNotifGr, 'task_type'),\r\n\t\t\t\tuser: this.getValues(workNotifGr, 'user'),\r\n\t\t\t\tsender: this.getValues(workNotifGr, 'sender'),\r\n\t\t\t\tunread: workNotifGr.getValue('state') === \"0\",\r\n\t\t\t\tcreated: recordSysCreatedOn,\r\n\t\t\t\tsysCreatedOn: this.getValues(workNotifGr, 'sys_created_on'),\r\n\t\t\t\tlink: this.getRoute(workNotifGr),\r\n\t\t\t\toverdueDays: this.getOverdueCount(recordGr)\r\n\t\t\t};\r\n\r\n\t\t\tnotifications.push(notification);\r\n\t\t}\r\n\r\n\t\tresponse.setBody({ notifications, unreadNotifications, counts: this.getCounts(), limit: limit + 20 });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tgetCounts: function() {\r\n\t\tconst counts = {};\r\n\t\tvar ga = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga.addQuery('state', '0');\r\n\t\tga.addQuery('user', gs.getUserID());\r\n\t\tga.addAggregate('COUNT');\r\n\t\tga.query();\r\n\r\n\t\twhile (ga.next()) {\r\n\t\t\tconst count = parseInt(ga.getAggregate('COUNT'));\r\n\t\t\tcounts.unread = count;\r\n\t\t}\r\n\r\n\t\tconst ga2 = new GlideAggregate('x_cadso_work_notification');\r\n\t\tga2.addQuery('state', '!=', '40');\r\n\t\tga2.addQuery('user', gs.getUserID());\r\n\t\tga2.addAggregate('COUNT');\r\n\t\tga2.query();\r\n\r\n\t\twhile (ga2.next()) {\r\n\t\t\tconst count2 = parseInt(ga2.getAggregate('COUNT'));\r\n\t\t\tcounts.total = count2;\r\n\t\t}\r\n\r\n\t\treturn counts;\r\n\t},\r\n\r\n\tgetValues: (tableGr, field) => {\r\n\t\tconst valueObj = {\r\n\t\t\tvalue: tableGr.getValue(field),\r\n\t\t\tdisplayValue: tableGr.getDisplayValue(field),\r\n\t\t};\r\n\r\n\t\tif ('user,sender'.indexOf(field) > -1) {\r\n\t\t\tconst userGr = tableGr[field].getRefRecord();\r\n\t\t\tif (userGr.isValidRecord()) {\r\n\t\t\t\tconst avatar = userGr.getValue('photo') || userGr.getValue('avatar') || '';\r\n\t\t\t\tvalueObj.avatar = avatar ? avatar + '.iix' : '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn valueObj;\r\n\t},\r\n\r\n\tread: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\r\n\t\tconst updateCount = this.updateState(notifications, '30');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tremove: function(request, response) {\r\n\t\tconst { notifications = [] } = request.body.data;\r\n\t\tconst updateCount = this.updateState(notifications, '40');\r\n\t\tresponse.setBody({ updateCount });\r\n\t\treturn response;\r\n\t},\r\n\r\n\tupdateState: function(notifications = [], state) {\r\n\t\tvar notificationGr = new GlideRecord('x_cadso_work_notification');\r\n\t\tnotificationGr.addQuery('sys_id', 'IN', notifications.join(','));\r\n\t\tnotificationGr.query();\r\n\t\tlet x = 0;\r\n\r\n\t\twhile(notificationGr.next()) {\r\n\t\t\tx++;\r\n\t\t\tnotificationGr.setValue('state', state);\r\n\t\t\tnotificationGr.update();\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t},\r\n\r\n\t// add function to check for overdue records to trigger notification event\r\n\t// look for due_date for the past 24 hours\r\n\toverdue: function(recordGr) {\r\n\t\tvar documentGR = recordGr.document.getRefRecord();\r\n\t\tif (documentGR.isValidRecord()) {\r\n\t\t\tvar diff = this.getOverdueCount(documentGR);\r\n\t\t\tif (diff > 0) {\r\n\t\t\t\tgs.eventQueue('x_cadso_work.notification_init', documentGR, gs.getUserID(), 'overdue');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetStatus: function(workNotifGr) {\r\n\t\tlet status = {\r\n\t\t\tdisplayValue: '',\r\n\t\t\tvalue: ''\r\n\t\t};\r\n\t\tconst recordGr = workNotifGr.record.getRefRecord();\r\n\t\tif (!recordGr.isValidRecord()) return status;\r\n\t\tconst taskType = workNotifGr.getValue('task_type');\r\n\t\tlet statusField = taskType === 'x_cadso_work_task' ? 'status' : 'state';\r\n\r\n\t\tif (recordGr.isValidRecord()) {\r\n\t\t\tstatus = this.getValues(recordGr, statusField);\r\n\t\t}\r\n\r\n\t\treturn status;\r\n\t},\r\n\r\n\tgetRoute: function(notificationGr) {\r\n\t\tlet taskType = notificationGr.getValue('task_type');\r\n\t\tlet isApproval = notificationGr.getValue('type') === 'approval';\r\n\t\ttaskType = taskType.replace('x_cadso_work_', '');\r\n\r\n\t\tconst routes = (JSON.parse(JSON.stringify(this.routes)));\r\n\t\tconst route = (isApproval ? routes.approval : routes[taskType]) || false;\r\n\t\tif (!route) return {};\r\n\r\n\t\tif (route.fields && route.fields.forceLoad) {\r\n\t\t\troute.fields.forceLoad = new Date().getTime();\r\n\t\t}\r\n\r\n\t\tif (route.fields && route.fields.sysId) {\r\n\t\t\troute.fields.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (route.params && route.params.sysId) {\r\n\t\t\troute.params.sysId = notificationGr.getValue('record');\r\n\t\t}\r\n\r\n\t\tif (isApproval) {\r\n\t\t\tvar recordGr = notificationGr.document_id.getRefRecord();\r\n\t\t\tif (recordGr.isValidRecord()) {\r\n\t\t\t\tconst state = recordGr.getValue('state');\r\n\t\t\t\tvar requested = state === 'requested';\r\n\t\t\t\tvar approved = state === 'approved';\r\n\t\t\t\tvar rejected = state === 'rejected';\r\n\r\n\t\t\t\troute.fields.tab = requested ? 'newRequests' : approved ? 'accepted' : 'declined';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn route;\r\n\t},\r\n\r\n\tgetOverdueCount: function(recordGr) {\r\n\t\tif (!recordGr || !recordGr.isValidRecord() || !recordGr.due_date || recordGr.due_date.nil()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tvar currentDateTime = new GlideDateTime();\r\n\t\ttargetDateValue = recordGr.getValue('due_date');\r\n\t\tvar targetDate = new GlideDateTime();\r\n\t\ttargetDate.setValue(targetDateValue);\r\n\t\tvar differenceInDays = GlideDateTime.subtract(targetDate, currentDateTime);\r\n\t\tvar daysOverdue = Math.ceil(differenceInDays.getNumericValue() / (24 * 60 * 60 * 1000));\r\n\t\treturn daysOverdue;\r\n\t},\r\n\r\n\thasRole: ({ userSysId, role }) => {\r\n\t\tvar gr_sys_user_has_role = new GlideRecord('sys_user_has_role');\r\n\t\tgr_sys_user_has_role.addQuery('user', userSysId);\r\n\t\tgr_sys_user_has_role.addEncodedQuery('role.name=x_cadso_work.' + role);\r\n\t\tgr_sys_user_has_role.query();\r\n\t\treturn gr_sys_user_has_role.hasNext();\r\n\t},\r\n\r\n\tcanApprove: function(userSysId) {\r\n\t\treturn (this.hasRole({ userSysId, role: 'admin' }) ? true : this.hasRole({ userSysId, role: 'configurator' }) ? true : this.hasRole({ userSysId, role: 'manager' }));\r\n\t},\r\n\r\n\ttype: \"NotificationApiMS\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_d12da6b847e5bd1098519fd8036d4320",
    "display_value": "sys_script_include_d12da6b847e5bd1098519fd8036d4320"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.NotificationApiMS",
    "display_value": "x_cadso_work.NotificationApiMS"
  },
  "sys_created_on": {
    "value": "2023-09-25 18:22:38",
    "display_value": "2023-09-25 11:22:38 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "NotificationApiMS",
    "display_value": "NotificationApiMS"
  },
  "sys_name": {
    "value": "NotificationApiMS",
    "display_value": "NotificationApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
