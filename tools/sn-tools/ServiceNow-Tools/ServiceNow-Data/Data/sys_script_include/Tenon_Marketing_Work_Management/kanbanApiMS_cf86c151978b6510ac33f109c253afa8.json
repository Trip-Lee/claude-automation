{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "cf86c151978b6510ac33f109c253afa8",
    "extracted_at": "2025-09-19T21:48:31.609Z",
    "display_value": "kanbanApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "84",
    "display_value": "84"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-15 00:34:13",
    "display_value": "2025-07-14 05:34:13 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "/* eslint-disable max-lines */\r\nconst kanbanApiMS = Class.create();\r\nkanbanApiMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n\tinitialize: function () {\r\n\t\tx_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n\t},\r\n\r\n\tqueryConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.addQuery(\"table\", data.table);\r\n\t\tkanbanConfigGr.addQuery(\"page\", data.page);\r\n\t\tkanbanConfigGr.addQuery(\"group_by\", data.groupBy);\r\n\t\tkanbanConfigGr.query();\r\n\r\n\t\treturn kanbanConfigGr;\r\n\t},\r\n\r\n\tgetConfig: function (data) {\r\n\t\tlet configRecord = false;\r\n\t\tconst last3 = data.query.slice(-3);\r\n\t\tif (last3.toLowerCase() !== \"^eq\") {\r\n\t\t\tdata.query += \"^EQ\";\r\n\t\t}\r\n\t\tconst kanbanConfigGr = this.queryConfig(data);\r\n\r\n\t\twhile (kanbanConfigGr.next()) {\r\n\t\t\tconst groupBy = kanbanConfigGr.getValue(\"group_by\");\r\n\t\t\tconst columnsData = JSON.parse(kanbanConfigGr.getValue(\"columns\"));\r\n\t\t\tconst query = data.query;\r\n\t\t\tconst table = kanbanConfigGr.getValue(\"table\");\r\n\t\t\tconst page = kanbanConfigGr.getValue(\"page\");\r\n\t\t\tconst fields = kanbanConfigGr.getValue(\"fields\");\r\n\t\t\tconst sortBy = kanbanConfigGr.getValue(\"sort_by\");\r\n\t\t\tconst sysId = kanbanConfigGr.getUniqueValue();\r\n\t\t\tconfigRecord = {\r\n\t\t\t\tcolumnsData,\r\n\t\t\t\tquery,\r\n\t\t\t\ttable,\r\n\t\t\t\tfields,\r\n\t\t\t\tsysId,\r\n\t\t\t\tsortBy,\r\n\t\t\t\tgroupBy,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn configRecord;\r\n\t},\r\n\r\n\tcreateConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.initialize();\r\n\t\tkanbanConfigGr.setValue(\"table\", data.table);\r\n\t\tkanbanConfigGr.setValue(\"page\", data.page);\r\n\t\tkanbanConfigGr.setValue(\"group_by\", data.groupBy);\r\n\t\t\t//\tkanbanConfigGr.setValue('sort_by', data.sortBy);\r\n\t\tkanbanConfigGr.insert();\r\n\t},\r\n\r\n\tfetch: function (data) {\r\n\t\tlet configRecord = this.getConfig(data);\r\n\t\t\r\n\t\tif (!configRecord) {\r\n\t\t\tthis.createConfig(data);\r\n\t\t\tgs.info(\"TENON: Kanban config did not exsist. Created config.\")\r\n\t\t\tconfigRecord = this.getConfig(data);\r\n\t\t}\r\n\t\tconst columns = this.getRecords({ data, configRecord });\r\n\r\n\t\treturn { columns, data, configRecord };\r\n\t},\r\n\r\n\tsaveItem: function (data) {\r\n\t\tconst { table, sysId, sysID, groupBy, value } = data;\r\n\t\tconst tableGr = new GlideRecord(table);\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet triggerForm = false;\r\n\t\tlet title = \"Invalid Record\";\r\n\t\tlet recordtitle = '';\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\t\tvar _sysId = sysID || sysId;\r\n\t\tlet foundRecord = false;\r\n\r\n\t\tif (tableGr.get(_sysId)) {\r\n\t\t\tfoundRecord = true;\r\n\r\n\t\t\tif (tableGr.canWrite()) {\r\n\t\t\t\ttableGr.setValue(groupBy, value);\r\n\t\t\t\tvalid = tableGr.update();\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\trefresh = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trecordtitle = tableGr.getDisplayValue();\r\n\t\t\t\t\ttriggerForm = true;\r\n\t\t\t\t\ttitle = \"Unable to update record\";\r\n\t\t\t\t\tmessage = `Please see additional errors.`;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttitle = \"Insufficient Permission to Save\";\r\n\t\t\t\tmessage = `Unable to save changes to '${tableGr.getDisplayValue()}' due to your current role permissions.`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet validData = {};\r\n\t\tif (refresh) {\r\n\t\t\tvalidData = this.fetch(data);\r\n\t\t}\r\n\t\treturn { valid, message, title, refresh, validData, triggerForm, ...data, sysId: sysID || sysId, recordtitle };\r\n\t},\r\n\r\n\tsaveColumns: function (data) {\r\n\t\tconst { columns, configRecord } = data;\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet title = \"Invalid Record to Save\";\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\r\n\t\tif (kanbanConfigGr.get(configRecord.sysId)) {\r\n\t\t\trefresh = false;\r\n\t\t\tkanbanConfigGr.setValue(\"columns\", JSON.stringify(columns));\r\n\t\t\tvalid = kanbanConfigGr.update();\r\n\t\t\tif (valid === false) {\r\n\t\t\t\ttitle = \"Failed to Save\";\r\n\t\t\t\tmessage = `The columns failed to save the order to the system.`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { valid, message, title, refresh };\r\n\t},\r\n\r\n\tgetRecords: function ({ data, configRecord }) {\r\n\t\tconst columns = [];\r\n\t\tconst tableGr = new GlideRecord(data.table);\r\n\t\ttableGr.addEncodedQuery(data.query);\r\n\t\tif (data.sortAsc) {\r\n\t\t\ttableGr.orderBy(data.sortBy);\r\n\t\t} else {\r\n\t\t\ttableGr.orderByDesc(data.sortBy);\r\n\t\t}\r\n\t\ttableGr.orderBy(\"short_description\");\r\n\t\ttableGr.setLimit(500);\r\n\t\ttableGr.query();\r\n\t\twhile (tableGr.next()) {\r\n\t\t\tif (!tableGr.canRead()) continue;\r\n\t\t\tconst record = {};\r\n\t\t\tconst column = tableGr.getValue(data.groupBy);\r\n\r\n\t\t\tif (configRecord.fields && configRecord.fields.length) {\r\n\t\t\t\tconfigRecord.fields.split(\",\").map((field) => {\r\n\t\t\t\t\trecord[field] = {\r\n\t\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(field) || \"\",\r\n\t\t\t\t\t\tvalue: tableGr.getValue(field) || \"\",\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (\r\n\t\t\t\t(!record[data.sortBy] || !record[data.sortBy].vaule) &&\r\n\t\t\t\t\"sys_created_on,sys_updated_on\".indexOf(data.sortBy) == -1\r\n\t\t\t) {\r\n\t\t\t\trecord[data.sortBy] = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(data.sortBy) || \"\",\r\n\t\t\t\t\tvalue: tableGr.getValue(data.sortBy) || \"\",\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.sys_created_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_created_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_created_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\t\t\trecord.sys_updated_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_updated_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_updated_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\r\n\t\t\tif (record.assigned_to) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"assigned_to\",\r\n\t\t\t\t\tvalue: record.assigned_to.value,\r\n\t\t\t\t\tfieldName: \"photo\",\r\n\t\t\t\t\tkeyName: \"avatar\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.project) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"project\",\r\n\t\t\t\t\tvalue: record.project.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.campaign) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"campaign\",\r\n\t\t\t\t\tvalue: record.campaign.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (data.table === \"x_cadso_work_sprint_retro_feedback\") {\r\n\t\t\t\trecord.likes = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"likes\"),\r\n\t\t\t\t\tvalue: tableGr.getValue(\"likes\"),\r\n\t\t\t\t\tlikedByMe: this.currentLike({ sysId: tableGr.getUniqueValue() }),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.displayValue = tableGr.getDisplayValue();\r\n\t\t\trecord.value = tableGr.getUniqueValue();\r\n\t\t\tconst index = configRecord.columnsData.columnsMap[column];\r\n\t\t\tif (index >= 0) {\r\n\t\t\t\tconfigRecord.columnsData.columns[index].items.push(record);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn configRecord.columnsData.columns;\r\n\t},\r\n\r\n\tcurrentLike: function ({ sysId, user = gs.getUserID() }) {\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\treturn tableGr.hasNext();\r\n\t},\r\n\r\n\tsetLike: function (data) {\r\n\t\tconst { sysId, user = gs.getUserID() } = data;\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\tif (tableGr.next()) {\r\n\t\t\ttableGr.deleteRecord();\r\n\t\t} else {\r\n\t\t\ttableGr.initialize();\r\n\t\t\ttableGr.newRecord();\r\n\t\t\ttableGr.setValue(\"user\", user);\r\n\t\t\ttableGr.setValue(\"feedback\", sysId);\r\n\t\t\ttableGr.insert();\r\n\t\t}\r\n\t\treturn this.fetch(data);\r\n\t},\r\n\r\n\ttype: \"kanbanApiMS\",\r\n});\r\n",
    "display_value": "/* eslint-disable max-lines */\r\nconst kanbanApiMS = Class.create();\r\nkanbanApiMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n\tinitialize: function () {\r\n\t\tx_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n\t},\r\n\r\n\tqueryConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.addQuery(\"table\", data.table);\r\n\t\tkanbanConfigGr.addQuery(\"page\", data.page);\r\n\t\tkanbanConfigGr.addQuery(\"group_by\", data.groupBy);\r\n\t\tkanbanConfigGr.query();\r\n\r\n\t\treturn kanbanConfigGr;\r\n\t},\r\n\r\n\tgetConfig: function (data) {\r\n\t\tlet configRecord = false;\r\n\t\tconst last3 = data.query.slice(-3);\r\n\t\tif (last3.toLowerCase() !== \"^eq\") {\r\n\t\t\tdata.query += \"^EQ\";\r\n\t\t}\r\n\t\tconst kanbanConfigGr = this.queryConfig(data);\r\n\r\n\t\twhile (kanbanConfigGr.next()) {\r\n\t\t\tconst groupBy = kanbanConfigGr.getValue(\"group_by\");\r\n\t\t\tconst columnsData = JSON.parse(kanbanConfigGr.getValue(\"columns\"));\r\n\t\t\tconst query = data.query;\r\n\t\t\tconst table = kanbanConfigGr.getValue(\"table\");\r\n\t\t\tconst page = kanbanConfigGr.getValue(\"page\");\r\n\t\t\tconst fields = kanbanConfigGr.getValue(\"fields\");\r\n\t\t\tconst sortBy = kanbanConfigGr.getValue(\"sort_by\");\r\n\t\t\tconst sysId = kanbanConfigGr.getUniqueValue();\r\n\t\t\tconfigRecord = {\r\n\t\t\t\tcolumnsData,\r\n\t\t\t\tquery,\r\n\t\t\t\ttable,\r\n\t\t\t\tfields,\r\n\t\t\t\tsysId,\r\n\t\t\t\tsortBy,\r\n\t\t\t\tgroupBy,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn configRecord;\r\n\t},\r\n\r\n\tcreateConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.initialize();\r\n\t\tkanbanConfigGr.setValue(\"table\", data.table);\r\n\t\tkanbanConfigGr.setValue(\"page\", data.page);\r\n\t\tkanbanConfigGr.setValue(\"group_by\", data.groupBy);\r\n\t\t\t//\tkanbanConfigGr.setValue('sort_by', data.sortBy);\r\n\t\tkanbanConfigGr.insert();\r\n\t},\r\n\r\n\tfetch: function (data) {\r\n\t\tlet configRecord = this.getConfig(data);\r\n\t\t\r\n\t\tif (!configRecord) {\r\n\t\t\tthis.createConfig(data);\r\n\t\t\tgs.info(\"TENON: Kanban config did not exsist. Created config.\")\r\n\t\t\tconfigRecord = this.getConfig(data);\r\n\t\t}\r\n\t\tconst columns = this.getRecords({ data, configRecord });\r\n\r\n\t\treturn { columns, data, configRecord };\r\n\t},\r\n\r\n\tsaveItem: function (data) {\r\n\t\tconst { table, sysId, sysID, groupBy, value } = data;\r\n\t\tconst tableGr = new GlideRecord(table);\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet triggerForm = false;\r\n\t\tlet title = \"Invalid Record\";\r\n\t\tlet recordtitle = '';\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\t\tvar _sysId = sysID || sysId;\r\n\t\tlet foundRecord = false;\r\n\r\n\t\tif (tableGr.get(_sysId)) {\r\n\t\t\tfoundRecord = true;\r\n\r\n\t\t\tif (tableGr.canWrite()) {\r\n\t\t\t\ttableGr.setValue(groupBy, value);\r\n\t\t\t\tvalid = tableGr.update();\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\trefresh = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trecordtitle = tableGr.getDisplayValue();\r\n\t\t\t\t\ttriggerForm = true;\r\n\t\t\t\t\ttitle = \"Unable to update record\";\r\n\t\t\t\t\tmessage = `Please see additional errors.`;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttitle = \"Insufficient Permission to Save\";\r\n\t\t\t\tmessage = `Unable to save changes to '${tableGr.getDisplayValue()}' due to your current role permissions.`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet validData = {};\r\n\t\tif (refresh) {\r\n\t\t\tvalidData = this.fetch(data);\r\n\t\t}\r\n\t\treturn { valid, message, title, refresh, validData, triggerForm, ...data, sysId: sysID || sysId, recordtitle };\r\n\t},\r\n\r\n\tsaveColumns: function (data) {\r\n\t\tconst { columns, configRecord } = data;\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet title = \"Invalid Record to Save\";\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\r\n\t\tif (kanbanConfigGr.get(configRecord.sysId)) {\r\n\t\t\trefresh = false;\r\n\t\t\tkanbanConfigGr.setValue(\"columns\", JSON.stringify(columns));\r\n\t\t\tvalid = kanbanConfigGr.update();\r\n\t\t\tif (valid === false) {\r\n\t\t\t\ttitle = \"Failed to Save\";\r\n\t\t\t\tmessage = `The columns failed to save the order to the system.`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { valid, message, title, refresh };\r\n\t},\r\n\r\n\tgetRecords: function ({ data, configRecord }) {\r\n\t\tconst columns = [];\r\n\t\tconst tableGr = new GlideRecord(data.table);\r\n\t\ttableGr.addEncodedQuery(data.query);\r\n\t\tif (data.sortAsc) {\r\n\t\t\ttableGr.orderBy(data.sortBy);\r\n\t\t} else {\r\n\t\t\ttableGr.orderByDesc(data.sortBy);\r\n\t\t}\r\n\t\ttableGr.orderBy(\"short_description\");\r\n\t\ttableGr.setLimit(500);\r\n\t\ttableGr.query();\r\n\t\twhile (tableGr.next()) {\r\n\t\t\tif (!tableGr.canRead()) continue;\r\n\t\t\tconst record = {};\r\n\t\t\tconst column = tableGr.getValue(data.groupBy);\r\n\r\n\t\t\tif (configRecord.fields && configRecord.fields.length) {\r\n\t\t\t\tconfigRecord.fields.split(\",\").map((field) => {\r\n\t\t\t\t\trecord[field] = {\r\n\t\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(field) || \"\",\r\n\t\t\t\t\t\tvalue: tableGr.getValue(field) || \"\",\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (\r\n\t\t\t\t(!record[data.sortBy] || !record[data.sortBy].vaule) &&\r\n\t\t\t\t\"sys_created_on,sys_updated_on\".indexOf(data.sortBy) == -1\r\n\t\t\t) {\r\n\t\t\t\trecord[data.sortBy] = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(data.sortBy) || \"\",\r\n\t\t\t\t\tvalue: tableGr.getValue(data.sortBy) || \"\",\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.sys_created_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_created_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_created_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\t\t\trecord.sys_updated_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_updated_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_updated_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\r\n\t\t\tif (record.assigned_to) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"assigned_to\",\r\n\t\t\t\t\tvalue: record.assigned_to.value,\r\n\t\t\t\t\tfieldName: \"photo\",\r\n\t\t\t\t\tkeyName: \"avatar\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.project) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"project\",\r\n\t\t\t\t\tvalue: record.project.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.campaign) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"campaign\",\r\n\t\t\t\t\tvalue: record.campaign.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (data.table === \"x_cadso_work_sprint_retro_feedback\") {\r\n\t\t\t\trecord.likes = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"likes\"),\r\n\t\t\t\t\tvalue: tableGr.getValue(\"likes\"),\r\n\t\t\t\t\tlikedByMe: this.currentLike({ sysId: tableGr.getUniqueValue() }),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.displayValue = tableGr.getDisplayValue();\r\n\t\t\trecord.value = tableGr.getUniqueValue();\r\n\t\t\tconst index = configRecord.columnsData.columnsMap[column];\r\n\t\t\tif (index >= 0) {\r\n\t\t\t\tconfigRecord.columnsData.columns[index].items.push(record);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn configRecord.columnsData.columns;\r\n\t},\r\n\r\n\tcurrentLike: function ({ sysId, user = gs.getUserID() }) {\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\treturn tableGr.hasNext();\r\n\t},\r\n\r\n\tsetLike: function (data) {\r\n\t\tconst { sysId, user = gs.getUserID() } = data;\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\tif (tableGr.next()) {\r\n\t\t\ttableGr.deleteRecord();\r\n\t\t} else {\r\n\t\t\ttableGr.initialize();\r\n\t\t\ttableGr.newRecord();\r\n\t\t\ttableGr.setValue(\"user\", user);\r\n\t\t\ttableGr.setValue(\"feedback\", sysId);\r\n\t\t\ttableGr.insert();\r\n\t\t}\r\n\t\treturn this.fetch(data);\r\n\t},\r\n\r\n\ttype: \"kanbanApiMS\",\r\n});\r\n",
    "formatted_script": {
      "line_count": 258,
      "char_count": 7534,
      "preview": "/* eslint-disable max-lines */\r\nconst kanbanApiMS = Class.create();\r\nkanbanApiMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n\tinitialize: function () {\r\n\t\tx_cadso_work.workMainUtil...",
      "full_script": "/* eslint-disable max-lines */\r\nconst kanbanApiMS = Class.create();\r\nkanbanApiMS.prototype = Object.extendsObject(x_cadso_work.workMainUtils, {\r\n\tinitialize: function () {\r\n\t\tx_cadso_work.workMainUtils.prototype.initialize.apply(this, arguments);\r\n\t},\r\n\r\n\tqueryConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.addQuery(\"table\", data.table);\r\n\t\tkanbanConfigGr.addQuery(\"page\", data.page);\r\n\t\tkanbanConfigGr.addQuery(\"group_by\", data.groupBy);\r\n\t\tkanbanConfigGr.query();\r\n\r\n\t\treturn kanbanConfigGr;\r\n\t},\r\n\r\n\tgetConfig: function (data) {\r\n\t\tlet configRecord = false;\r\n\t\tconst last3 = data.query.slice(-3);\r\n\t\tif (last3.toLowerCase() !== \"^eq\") {\r\n\t\t\tdata.query += \"^EQ\";\r\n\t\t}\r\n\t\tconst kanbanConfigGr = this.queryConfig(data);\r\n\r\n\t\twhile (kanbanConfigGr.next()) {\r\n\t\t\tconst groupBy = kanbanConfigGr.getValue(\"group_by\");\r\n\t\t\tconst columnsData = JSON.parse(kanbanConfigGr.getValue(\"columns\"));\r\n\t\t\tconst query = data.query;\r\n\t\t\tconst table = kanbanConfigGr.getValue(\"table\");\r\n\t\t\tconst page = kanbanConfigGr.getValue(\"page\");\r\n\t\t\tconst fields = kanbanConfigGr.getValue(\"fields\");\r\n\t\t\tconst sortBy = kanbanConfigGr.getValue(\"sort_by\");\r\n\t\t\tconst sysId = kanbanConfigGr.getUniqueValue();\r\n\t\t\tconfigRecord = {\r\n\t\t\t\tcolumnsData,\r\n\t\t\t\tquery,\r\n\t\t\t\ttable,\r\n\t\t\t\tfields,\r\n\t\t\t\tsysId,\r\n\t\t\t\tsortBy,\r\n\t\t\t\tgroupBy,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn configRecord;\r\n\t},\r\n\r\n\tcreateConfig: function (data) {\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tkanbanConfigGr.initialize();\r\n\t\tkanbanConfigGr.setValue(\"table\", data.table);\r\n\t\tkanbanConfigGr.setValue(\"page\", data.page);\r\n\t\tkanbanConfigGr.setValue(\"group_by\", data.groupBy);\r\n\t\t\t//\tkanbanConfigGr.setValue('sort_by', data.sortBy);\r\n\t\tkanbanConfigGr.insert();\r\n\t},\r\n\r\n\tfetch: function (data) {\r\n\t\tlet configRecord = this.getConfig(data);\r\n\t\t\r\n\t\tif (!configRecord) {\r\n\t\t\tthis.createConfig(data);\r\n\t\t\tgs.info(\"TENON: Kanban config did not exsist. Created config.\")\r\n\t\t\tconfigRecord = this.getConfig(data);\r\n\t\t}\r\n\t\tconst columns = this.getRecords({ data, configRecord });\r\n\r\n\t\treturn { columns, data, configRecord };\r\n\t},\r\n\r\n\tsaveItem: function (data) {\r\n\t\tconst { table, sysId, sysID, groupBy, value } = data;\r\n\t\tconst tableGr = new GlideRecord(table);\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet triggerForm = false;\r\n\t\tlet title = \"Invalid Record\";\r\n\t\tlet recordtitle = '';\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\t\tvar _sysId = sysID || sysId;\r\n\t\tlet foundRecord = false;\r\n\r\n\t\tif (tableGr.get(_sysId)) {\r\n\t\t\tfoundRecord = true;\r\n\r\n\t\t\tif (tableGr.canWrite()) {\r\n\t\t\t\ttableGr.setValue(groupBy, value);\r\n\t\t\t\tvalid = tableGr.update();\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\trefresh = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trecordtitle = tableGr.getDisplayValue();\r\n\t\t\t\t\ttriggerForm = true;\r\n\t\t\t\t\ttitle = \"Unable to update record\";\r\n\t\t\t\t\tmessage = `Please see additional errors.`;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttitle = \"Insufficient Permission to Save\";\r\n\t\t\t\tmessage = `Unable to save changes to '${tableGr.getDisplayValue()}' due to your current role permissions.`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet validData = {};\r\n\t\tif (refresh) {\r\n\t\t\tvalidData = this.fetch(data);\r\n\t\t}\r\n\t\treturn { valid, message, title, refresh, validData, triggerForm, ...data, sysId: sysID || sysId, recordtitle };\r\n\t},\r\n\r\n\tsaveColumns: function (data) {\r\n\t\tconst { columns, configRecord } = data;\r\n\t\tconst kanbanConfigGr = new GlideRecord(\"x_cadso_work_config_kanban\");\r\n\t\tlet refresh = true;\r\n\t\tlet valid = false;\r\n\t\tlet title = \"Invalid Record to Save\";\r\n\t\tlet message = \"The page is out of sync because this record appears to no longer exist.\";\r\n\r\n\t\tif (kanbanConfigGr.get(configRecord.sysId)) {\r\n\t\t\trefresh = false;\r\n\t\t\tkanbanConfigGr.setValue(\"columns\", JSON.stringify(columns));\r\n\t\t\tvalid = kanbanConfigGr.update();\r\n\t\t\tif (valid === false) {\r\n\t\t\t\ttitle = \"Failed to Save\";\r\n\t\t\t\tmessage = `The columns failed to save the order to the system.`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { valid, message, title, refresh };\r\n\t},\r\n\r\n\tgetRecords: function ({ data, configRecord }) {\r\n\t\tconst columns = [];\r\n\t\tconst tableGr = new GlideRecord(data.table);\r\n\t\ttableGr.addEncodedQuery(data.query);\r\n\t\tif (data.sortAsc) {\r\n\t\t\ttableGr.orderBy(data.sortBy);\r\n\t\t} else {\r\n\t\t\ttableGr.orderByDesc(data.sortBy);\r\n\t\t}\r\n\t\ttableGr.orderBy(\"short_description\");\r\n\t\ttableGr.setLimit(500);\r\n\t\ttableGr.query();\r\n\t\twhile (tableGr.next()) {\r\n\t\t\tif (!tableGr.canRead()) continue;\r\n\t\t\tconst record = {};\r\n\t\t\tconst column = tableGr.getValue(data.groupBy);\r\n\r\n\t\t\tif (configRecord.fields && configRecord.fields.length) {\r\n\t\t\t\tconfigRecord.fields.split(\",\").map((field) => {\r\n\t\t\t\t\trecord[field] = {\r\n\t\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(field) || \"\",\r\n\t\t\t\t\t\tvalue: tableGr.getValue(field) || \"\",\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (\r\n\t\t\t\t(!record[data.sortBy] || !record[data.sortBy].vaule) &&\r\n\t\t\t\t\"sys_created_on,sys_updated_on\".indexOf(data.sortBy) == -1\r\n\t\t\t) {\r\n\t\t\t\trecord[data.sortBy] = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(data.sortBy) || \"\",\r\n\t\t\t\t\tvalue: tableGr.getValue(data.sortBy) || \"\",\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.sys_created_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_created_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_created_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\t\t\trecord.sys_updated_on = {\r\n\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"sys_updated_on\"),\r\n\t\t\t\tvalue: new GlideDateTime(tableGr.getValue(\"sys_updated_on\")).getNumericValue() + \"\",\r\n\t\t\t};\r\n\r\n\t\t\tif (record.assigned_to) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"assigned_to\",\r\n\t\t\t\t\tvalue: record.assigned_to.value,\r\n\t\t\t\t\tfieldName: \"photo\",\r\n\t\t\t\t\tkeyName: \"avatar\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.project) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"project\",\r\n\t\t\t\t\tvalue: record.project.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (record.campaign) {\r\n\t\t\t\tthis.getRefValue({\r\n\t\t\t\t\ttableGr,\r\n\t\t\t\t\tfield: \"campaign\",\r\n\t\t\t\t\tvalue: record.campaign.value,\r\n\t\t\t\t\tfieldName: \"glyph_color\",\r\n\t\t\t\t\tkeyName: \"glyphColor\",\r\n\t\t\t\t\trecord,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (data.table === \"x_cadso_work_sprint_retro_feedback\") {\r\n\t\t\t\trecord.likes = {\r\n\t\t\t\t\tdisplayValue: tableGr.getDisplayValue(\"likes\"),\r\n\t\t\t\t\tvalue: tableGr.getValue(\"likes\"),\r\n\t\t\t\t\tlikedByMe: this.currentLike({ sysId: tableGr.getUniqueValue() }),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\trecord.displayValue = tableGr.getDisplayValue();\r\n\t\t\trecord.value = tableGr.getUniqueValue();\r\n\t\t\tconst index = configRecord.columnsData.columnsMap[column];\r\n\t\t\tif (index >= 0) {\r\n\t\t\t\tconfigRecord.columnsData.columns[index].items.push(record);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn configRecord.columnsData.columns;\r\n\t},\r\n\r\n\tcurrentLike: function ({ sysId, user = gs.getUserID() }) {\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\treturn tableGr.hasNext();\r\n\t},\r\n\r\n\tsetLike: function (data) {\r\n\t\tconst { sysId, user = gs.getUserID() } = data;\r\n\t\tconst tableGr = new GlideRecord(\"x_cadso_work_sprint_retro_feedback_like\");\r\n\t\ttableGr.addQuery(\"user\", user);\r\n\t\ttableGr.addQuery(\"feedback\", sysId);\r\n\t\ttableGr.query();\r\n\t\tif (tableGr.next()) {\r\n\t\t\ttableGr.deleteRecord();\r\n\t\t} else {\r\n\t\t\ttableGr.initialize();\r\n\t\t\ttableGr.newRecord();\r\n\t\t\ttableGr.setValue(\"user\", user);\r\n\t\t\ttableGr.setValue(\"feedback\", sysId);\r\n\t\t\ttableGr.insert();\r\n\t\t}\r\n\t\treturn this.fetch(data);\r\n\t},\r\n\r\n\ttype: \"kanbanApiMS\",\r\n});\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_cf86c151978b6510ac33f109c253afa8",
    "display_value": "sys_script_include_cf86c151978b6510ac33f109c253afa8"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_work.kanbanApiMS",
    "display_value": "x_cadso_work.kanbanApiMS"
  },
  "sys_created_on": {
    "value": "2023-05-25 17:34:23",
    "display_value": "2023-05-25 10:34:23 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "kanbanApiMS",
    "display_value": "kanbanApiMS"
  },
  "sys_name": {
    "value": "kanbanApiMS",
    "display_value": "kanbanApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
