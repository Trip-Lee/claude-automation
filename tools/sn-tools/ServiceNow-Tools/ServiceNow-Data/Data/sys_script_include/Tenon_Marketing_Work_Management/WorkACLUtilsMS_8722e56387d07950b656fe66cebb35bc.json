{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "8722e56387d07950b656fe66cebb35bc",
    "extracted_at": "2025-09-19T21:48:31.396Z",
    "display_value": "WorkACLUtilsMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "50",
    "display_value": "50"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2023-08-03 18:59:52",
    "display_value": "2023-08-03 11:59:52 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const WorkACLUtilsMS = Class.create();\nWorkACLUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentUtils, {\n  initialize: function ({ table, field, action }) {\n    x_cadso_work.SegmentUtils.prototype.initialize.apply(this, arguments);\n    this.table = table;\n    this.field = field;\n    this.action = action;\n    this.userID = gs.getUserID();\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n\n    this.results = {\n      hasAdminRole: this.hasRoleExplicitly({ role: this.adminRole }),\n      hasConfiguratorRole: this.hasRoleExplicitly({ role: this.configuratorRole }),\n      hasManagerRole: this.hasRoleExplicitly({ role: this.managerRole }),\n      hasEnhancedRole: this.hasRoleExplicitly({ role: this.enhancedRole }),\n      hasUserRole: this.hasRoleExplicitly({ role: this.userRole }),\n    };\n  },\n\n  fetchExtendedTaskTableACLs: function ({ currentGr }) {\n    if (this.hasAdminRole) {\n      return true;\n    } else if (this.action === \"read\") {\n      return this._getReadACL({ currentGr });\n    } else if (this.action === \"write\") {\n      return this._getWriteACL({ currentGr });\n    } else if (this.action === \"delete\") {\n      return this._getDeleteACL({ currentGr });\n    } else if (this.action === \"create\") {\n      return this._getCreateACL({ currentGr });\n    }\n    return false;\n  },\n\n  _getCreateACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"task\", \"project\", \"sprint_retro_feedback\"].includes(table)) {\n      this._taskProjectFeedbackCreateACL({ currentGr });\n    } else if (\n      this.results.hasManagerRole &&\n      (this.validateSegments(currentGr, this.userID) || this.isRecordAccess({ currentGr }))\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getReadACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getWriteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"sprint\", \"campaign\"].includes(table)) {\n      return this._sprintCampaignWriteACL({ currentGr });\n    } else if ([\"task\", \"project\", \"sprint_retro\", \"sprint_retro_feedback\"].includes(table)) {\n      return this._taskProjectRetroFeedbackWriteACL({ currentGr });\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (\n      this.isRecordAccess({ currentGr }) ||\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getDeleteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"campaign\", \"project\", \"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else {\n      return this.results.hasConfiguratorRole;\n    }\n  },\n\n  isAssignee: function ({ currentGr, user = this.userID }) {\n    return user === currentGr.getValue(\"assigned_to\");\n  },\n\n  isMemberOfGroup: function ({ currentGr }) {\n    return gs.getUser().isMemberOf(currentGr.getDisplayValue(\"assignment_group\"));\n  },\n\n  isRecordAccess: function ({ currentGr }) {\n    return (\n      this.isCreatedBy({ currentGr }) ||\n      this.isAssignee({ currentGr }) ||\n      this.isMemberOfGroup({ currentGr })\n    );\n  },\n\n  hasRoleExplicitly: function ({ user = this.userID, role }) {\n    const roleGr = new GlideRecord(\"sys_user_has_role\");\n    roleGr.addQuery(\"user\", user);\n    roleGr.addQuery(\"role\", role);\n    roleGr.addQuery(\"state\", \"active\");\n    roleGr.setLimit(1);\n    roleGr.query();\n    return roleGr.hasNext();\n  },\n\n  isCreatedBy: function ({ currentGr, user = this.userID }) {\n    return currentGr.getValue(\"sys_created_by\") === gs.getUserName();\n  },\n\n  _taskProjectRetroFeedbackWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _sprintCampaignWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr }) && this.results.managerRole) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _taskProjectFeedbackCreateACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  type: \"WorkACLUtilsMS\",\n});\n",
    "display_value": "const WorkACLUtilsMS = Class.create();\nWorkACLUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentUtils, {\n  initialize: function ({ table, field, action }) {\n    x_cadso_work.SegmentUtils.prototype.initialize.apply(this, arguments);\n    this.table = table;\n    this.field = field;\n    this.action = action;\n    this.userID = gs.getUserID();\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n\n    this.results = {\n      hasAdminRole: this.hasRoleExplicitly({ role: this.adminRole }),\n      hasConfiguratorRole: this.hasRoleExplicitly({ role: this.configuratorRole }),\n      hasManagerRole: this.hasRoleExplicitly({ role: this.managerRole }),\n      hasEnhancedRole: this.hasRoleExplicitly({ role: this.enhancedRole }),\n      hasUserRole: this.hasRoleExplicitly({ role: this.userRole }),\n    };\n  },\n\n  fetchExtendedTaskTableACLs: function ({ currentGr }) {\n    if (this.hasAdminRole) {\n      return true;\n    } else if (this.action === \"read\") {\n      return this._getReadACL({ currentGr });\n    } else if (this.action === \"write\") {\n      return this._getWriteACL({ currentGr });\n    } else if (this.action === \"delete\") {\n      return this._getDeleteACL({ currentGr });\n    } else if (this.action === \"create\") {\n      return this._getCreateACL({ currentGr });\n    }\n    return false;\n  },\n\n  _getCreateACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"task\", \"project\", \"sprint_retro_feedback\"].includes(table)) {\n      this._taskProjectFeedbackCreateACL({ currentGr });\n    } else if (\n      this.results.hasManagerRole &&\n      (this.validateSegments(currentGr, this.userID) || this.isRecordAccess({ currentGr }))\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getReadACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getWriteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"sprint\", \"campaign\"].includes(table)) {\n      return this._sprintCampaignWriteACL({ currentGr });\n    } else if ([\"task\", \"project\", \"sprint_retro\", \"sprint_retro_feedback\"].includes(table)) {\n      return this._taskProjectRetroFeedbackWriteACL({ currentGr });\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (\n      this.isRecordAccess({ currentGr }) ||\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getDeleteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"campaign\", \"project\", \"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else {\n      return this.results.hasConfiguratorRole;\n    }\n  },\n\n  isAssignee: function ({ currentGr, user = this.userID }) {\n    return user === currentGr.getValue(\"assigned_to\");\n  },\n\n  isMemberOfGroup: function ({ currentGr }) {\n    return gs.getUser().isMemberOf(currentGr.getDisplayValue(\"assignment_group\"));\n  },\n\n  isRecordAccess: function ({ currentGr }) {\n    return (\n      this.isCreatedBy({ currentGr }) ||\n      this.isAssignee({ currentGr }) ||\n      this.isMemberOfGroup({ currentGr })\n    );\n  },\n\n  hasRoleExplicitly: function ({ user = this.userID, role }) {\n    const roleGr = new GlideRecord(\"sys_user_has_role\");\n    roleGr.addQuery(\"user\", user);\n    roleGr.addQuery(\"role\", role);\n    roleGr.addQuery(\"state\", \"active\");\n    roleGr.setLimit(1);\n    roleGr.query();\n    return roleGr.hasNext();\n  },\n\n  isCreatedBy: function ({ currentGr, user = this.userID }) {\n    return currentGr.getValue(\"sys_created_by\") === gs.getUserName();\n  },\n\n  _taskProjectRetroFeedbackWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _sprintCampaignWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr }) && this.results.managerRole) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _taskProjectFeedbackCreateACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  type: \"WorkACLUtilsMS\",\n});\n",
    "formatted_script": {
      "line_count": 179,
      "char_count": 5667,
      "preview": "const WorkACLUtilsMS = Class.create();\nWorkACLUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentUtils, {\n  initialize: function ({ table, field, action }) {\n    x_cadso_work.SegmentUtils.pr...",
      "full_script": "const WorkACLUtilsMS = Class.create();\nWorkACLUtilsMS.prototype = Object.extendsObject(x_cadso_work.SegmentUtils, {\n  initialize: function ({ table, field, action }) {\n    x_cadso_work.SegmentUtils.prototype.initialize.apply(this, arguments);\n    this.table = table;\n    this.field = field;\n    this.action = action;\n    this.userID = gs.getUserID();\n\n    this.adminRole = \"x_cadso_work.admin\";\n    this.configuratorRole = \"x_cadso_work.configurator\";\n    this.managerRole = \"x_cadso_work.manager\";\n    this.enhancedRole = \"x_cadso_work.enhanced_user\";\n    this.userRole = \"x_cadso_work.user\";\n\n    this.results = {\n      hasAdminRole: this.hasRoleExplicitly({ role: this.adminRole }),\n      hasConfiguratorRole: this.hasRoleExplicitly({ role: this.configuratorRole }),\n      hasManagerRole: this.hasRoleExplicitly({ role: this.managerRole }),\n      hasEnhancedRole: this.hasRoleExplicitly({ role: this.enhancedRole }),\n      hasUserRole: this.hasRoleExplicitly({ role: this.userRole }),\n    };\n  },\n\n  fetchExtendedTaskTableACLs: function ({ currentGr }) {\n    if (this.hasAdminRole) {\n      return true;\n    } else if (this.action === \"read\") {\n      return this._getReadACL({ currentGr });\n    } else if (this.action === \"write\") {\n      return this._getWriteACL({ currentGr });\n    } else if (this.action === \"delete\") {\n      return this._getDeleteACL({ currentGr });\n    } else if (this.action === \"create\") {\n      return this._getCreateACL({ currentGr });\n    }\n    return false;\n  },\n\n  _getCreateACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"task\", \"project\", \"sprint_retro_feedback\"].includes(table)) {\n      this._taskProjectFeedbackCreateACL({ currentGr });\n    } else if (\n      this.results.hasManagerRole &&\n      (this.validateSegments(currentGr, this.userID) || this.isRecordAccess({ currentGr }))\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getReadACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getWriteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else if ([\"sprint\", \"campaign\"].includes(table)) {\n      return this._sprintCampaignWriteACL({ currentGr });\n    } else if ([\"task\", \"project\", \"sprint_retro\", \"sprint_retro_feedback\"].includes(table)) {\n      return this._taskProjectRetroFeedbackWriteACL({ currentGr });\n    } else if (this.results.configuratorRole) {\n      return true;\n    } else if (\n      this.isRecordAccess({ currentGr }) ||\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _getDeleteACL: function ({ currentGr }) {\n    let { table } = this;\n    table = table.replace(\"x_cadso_work_\", \"\");\n    if ([\"campaign\", \"project\", \"work_user\", \"work_group\"].includes(table)) {\n      return this.results.hasAdminRole;\n    } else {\n      return this.results.hasConfiguratorRole;\n    }\n  },\n\n  isAssignee: function ({ currentGr, user = this.userID }) {\n    return user === currentGr.getValue(\"assigned_to\");\n  },\n\n  isMemberOfGroup: function ({ currentGr }) {\n    return gs.getUser().isMemberOf(currentGr.getDisplayValue(\"assignment_group\"));\n  },\n\n  isRecordAccess: function ({ currentGr }) {\n    return (\n      this.isCreatedBy({ currentGr }) ||\n      this.isAssignee({ currentGr }) ||\n      this.isMemberOfGroup({ currentGr })\n    );\n  },\n\n  hasRoleExplicitly: function ({ user = this.userID, role }) {\n    const roleGr = new GlideRecord(\"sys_user_has_role\");\n    roleGr.addQuery(\"user\", user);\n    roleGr.addQuery(\"role\", role);\n    roleGr.addQuery(\"state\", \"active\");\n    roleGr.setLimit(1);\n    roleGr.query();\n    return roleGr.hasNext();\n  },\n\n  isCreatedBy: function ({ currentGr, user = this.userID }) {\n    return currentGr.getValue(\"sys_created_by\") === gs.getUserName();\n  },\n\n  _taskProjectRetroFeedbackWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _sprintCampaignWriteACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr }) && this.results.managerRole) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _taskProjectFeedbackCreateACL: function ({ currentGr }) {\n    if (this.results.configuratorRole) {\n      return true;\n    } else if (this.isRecordAccess({ currentGr })) {\n      return true;\n    } else if (\n      (this.results.hasEnhancedRole || this.results.hasManagerRole) &&\n      this.validateSegments(currentGr, this.userID)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  type: \"WorkACLUtilsMS\",\n});\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_8722e56387d07950b656fe66cebb35bc",
    "display_value": "sys_script_include_8722e56387d07950b656fe66cebb35bc"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.WorkACLUtilsMS",
    "display_value": "x_cadso_work.WorkACLUtilsMS"
  },
  "sys_created_on": {
    "value": "2023-08-02 22:39:53",
    "display_value": "2023-08-02 03:39:53 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "WorkACLUtilsMS",
    "display_value": "WorkACLUtilsMS"
  },
  "sys_name": {
    "value": "WorkACLUtilsMS",
    "display_value": "WorkACLUtilsMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
