{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "c1a00fd0474b751098519fd8036d43e9",
    "extracted_at": "2025-09-19T21:48:31.126Z",
    "display_value": "GetTableDropdownsDataMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "573",
    "display_value": "573"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "This is used to get the dropdown data for the list and complex filter. This goes through each field on the table (that we allow) and gets any data associated to it. ex, choices, referacenes, ect.",
    "display_value": "This is used to get the dropdown data for the list and complex filter. This goes through each field on the table (that we allow) and gets any data associated to it. ex, choices, referacenes, ect."
  },
  "sys_updated_on": {
    "value": "2025-08-27 01:23:33",
    "display_value": "2025-08-26 06:23:33 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const GetTableDropdownsDataMS = Class.create();\r\nGetTableDropdownsDataMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.language = gs.getSession().getLanguage();\r\n\t},\r\n\r\n\tgetColorsForField: function (field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tconst api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === \"priority\" || field === \"state\";\r\n\t},\r\n\r\n\tgetData: function (table, isList, relatedFilterToggle = false) {\r\n\t\tthis.table = table;\r\n\t\tconst fields = [];\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro,sn_customerservice_case\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery = \"name=\" + table + \"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\t} else if (table === \"customer_contact\") {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=sys_user^internal_type!=collection^internal_type!=integer^ORinternal_type=NULL^active=true\";\r\n\t\t}\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\t//TODOs\r\n\t\t// - move from passing all variables to moving them to this. object to just be grabbed\r\n\r\n\t\tvar tableName = \"\";\r\n\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\ttableFieldsGR.query();\r\n\t\tvar i = 0;\r\n\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t// declare base data\r\n\t\t\tvar referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet element = {};\r\n\t\t\tconst choices = [];\r\n\t\t\tconst references = [];\r\n\r\n\t\t\t// get basic data\r\n\t\t\tlet fieldName = tableFieldsGR.getValue(\"column_label\"); // Name of the field on the table\r\n\t\t\tconst fieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\tconst fieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\tconst maxLength = tableFieldsGR.getValue(\"max_length\");\r\n\r\n\t\t\t// get element to tell us if this is a choice field or reference\r\n\t\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\t\ttableOverridesGR.setLimit(1);\r\n\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\r\n\t\t\t// get overridden fieldName\r\n\t\t\tconst sysDocumentationGR = new GlideRecord(\"sys_documentation\");\r\n\t\t\tsysDocumentationGR.addQuery(\"name\", table);\r\n\t\t\tsysDocumentationGR.addQuery(\"element\", fieldValue);\r\n\t\t\tsysDocumentationGR.addQuery(\"language\", this.language || \"en\");\r\n\t\t\tsysDocumentationGR.query();\r\n\t\t\twhile (sysDocumentationGR.next()) {\r\n\t\t\t\tif (sysDocumentationGR.getValue(\"element\") === fieldValue) {\r\n\t\t\t\t\tif (fieldName !== sysDocumentationGR.getValue(\"label\")) {\r\n\t\t\t\t\t\tfieldName = sysDocumentationGR.getValue(\"label\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//check the overrides for the refQual\r\n\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\trefQualOverRideGR.query();\r\n\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\tlet refQual = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\tif (refQual && !refQual.includes(\"javascript:\")) {\r\n\t\t\t\t\t\treferenceQualifier = refQual;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet attributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\tlet refSequence = \"\";\r\n\t\t\tif (attributesValuePairs) {\r\n\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\tlet fieldOverrideLabel = fieldName;\r\n\r\n\t\t\tconst canClearFields = fieldChecker.fieldsThatCanNotBeCleared;\r\n\t\t\tconst canClear = !fieldChecker.checkField(canClearFields, fieldValue);\r\n\t\t\tconst fieldValuesToInclude = fieldChecker.fieldValuesToIncludeFromList[table];\r\n\t\t\tif (isList) {\r\n\t\t\t\tif (fieldChecker.checkField(fieldValuesToInclude, fieldValue)) {\r\n\t\t\t\t\tlet isChoice = false;\r\n\t\t\t\t\tlet edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\t\tif (edCheck) {\r\n\t\t\t\t\t\tlet elmEd = element.getED();\r\n\t\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\t\tif (isChoice) {\r\n\t\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\t\tlet field = this.getReference({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// This else is for the Complex Filter\r\n\t\t\telse {\r\n\t\t\t\tlet isChoice = false;\r\n\t\t\t\tlet edCheck =\r\n\t\t\t\t\telement !== null &&\r\n\t\t\t\t\telement !== \"null\" &&\r\n\t\t\t\t\ttypeof element === \"object\" &&\r\n\t\t\t\t\telement.getED &&\r\n\t\t\t\t\ttypeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\tif (isChoice) {\r\n\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\tvar field = this.getReference({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\tcanWrite: true,\r\n\t\t\t\t\t\t// canWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fetch Related Filter records\r\n\t\tif (relatedFilterToggle && table) {\r\n\t\t\ttry {\r\n\t\t\t\tvar relatedFilterAPI = new x_cadso_core.RelatedListFilter();\r\n\t\t\t\tvar relatedFilters = relatedFilterAPI.getAll({ table: table });\r\n\t\t\t\t// Transform and add related filters to fields array\r\n\t\t\t\trelatedFilters.forEach((filter, index) => {\r\n\t\t\t\t\tif (filter.active && filter.active.value === \"1\") {\r\n\t\t\t\t\t\tvar transformedField = relatedFilterAPI._transformRelatedFilterToField(filter);\r\n\t\t\t\t\t\tfields.push(transformedField);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\t// Sort all fields alphabetically by name\r\n\t\t\t\tfields.sort((a, b) => {\r\n\t\t\t\t\tvar nameA = (a.label || a.displayValue || a.name || \"\").toLowerCase();\r\n\t\t\t\t\tvar nameB = (b.label || b.displayValue || b.name || \"\").toLowerCase();\r\n\t\t\t\t\treturn nameA.localeCompare(nameB);\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tgs.error(\"Failed to fetch related filters: \".concat(e.message));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fields;\r\n\t},\r\n\r\n\tupdateReferenceFieldOptions: function (table, field, queryString, sysId, isList, isBulk, bulkSysIds) {\r\n\t\tlet bulkAssignedTo = false;\r\n\t\tif (isBulk && (field.value === \"assigned_to\" || field.value === \"additional_assignee_list\")) {\r\n\t\t\tbulkAssignedTo = true;\r\n\t\t}\r\n\r\n\t\tif (table) {\r\n\t\t\tlet query =\r\n\t\t\t\t\"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + field.value;\r\n\t\t\tif (\r\n\t\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\t\ttable,\r\n\t\t\t\t) > -1\r\n\t\t\t) {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t} else if (table === \"customer_contact\") {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=sys_user^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t}\r\n\r\n\t\t\tlet referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet tableName = \"\";\r\n\t\t\tconst dictionaryGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\tdictionaryGR.addEncodedQuery(query);\r\n\t\t\tdictionaryGR.orderBy(\"column_label\");\r\n\t\t\tdictionaryGR.query();\r\n\t\t\twhile (dictionaryGR.next()) {\r\n\t\t\t\t// gs.info(\"RT - Ref Qual - is List: \" + isList + isBulk + bulkAssignedTo)\r\n\t\t\t\ttableName = dictionaryGR.getDisplayValue(\"column_label\");\r\n\t\t\t\tif (isList === true || (isBulk === true && bulkAssignedTo === false)) {\r\n\t\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + field.value);\r\n\t\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\t\tif (refQualOverRideGR.next()) {\r\n\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// gs.info(\"RT - Ref Qual -\"+ \"table: \" + table+\" , \" + \"Field:\" + field.value + \" , \" +\"Sys_id: \" + sysId +\" , \"+ referenceQualifier);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (dictionaryGR.getValue(\"use_reference_qualifier\") === \"simple\") {\r\n\t\t\t\t\t\tif (dictionaryGR.getValue(\"reference_qual_condition\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = dictionaryGR.getValue(\"reference_qual_condition\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treferenceQualifier = \"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet attributesValuePairs = dictionaryGR.getValue(\"attributes\");\r\n\t\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\t\tlet refSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tfield.sys_id = sysId;\r\n\t\t\t}\r\n\t\t\tif (bulkAssignedTo) {\r\n\t\t\t\tvar bulkQuery = bulkSysIds.join(\",\");\r\n\t\t\t\tvar groupsArray = [];\r\n\t\t\t\tvar groupsQuery = \"\";\r\n\t\t\t\tvar returnUserArr = [];\r\n\t\t\t\tvar userQuery = \"\";\r\n\r\n\t\t\t\t//Grab unique assignemnt groups with glide aggregate from the referring table\r\n\t\t\t\tvar assignmentGA = new GlideAggregate(table);\r\n\t\t\t\tassignmentGA.addAggregate(\"COUNT\");\r\n\t\t\t\tassignmentGA.groupBy(\"assignment_group\");\r\n\t\t\t\tassignmentGA.addQuery(\"sys_id\", \"IN\", bulkQuery);\r\n\t\t\t\tassignmentGA.query();\r\n\r\n\t\t\t\t//Push unique values to groups array\r\n\t\t\t\twhile (assignmentGA.next()) {\r\n\t\t\t\t\tgroupsArray.push(assignmentGA.getValue(\"assignment_group\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupsQuery = groupsArray.join(\",\");\r\n\r\n\t\t\t\t//Query the group members table for assignment groups associated to bulk records\r\n\t\t\t\tvar groupGA = new GlideAggregate(\"sys_user_grmember\");\r\n\t\t\t\tgroupGA.addAggregate(\"COUNT\");\r\n\t\t\t\tgroupGA.groupBy(\"user\");\r\n\t\t\t\tgroupGA.addQuery(\"user.name\", \"CONTAINS\", queryString);\r\n\t\t\t\tgroupGA.addQuery(\"group\", \"IN\", groupsQuery);\r\n\t\t\t\tgroupGA.query();\r\n\r\n\t\t\t\twhile (groupGA.next()) {\r\n\t\t\t\t\t//Get the count of user records on the goupe members table\r\n\t\t\t\t\tvar userCount = groupGA.getAggregate(\"COUNT\");\r\n\r\n\t\t\t\t\t//If a users record count matches the length of unique assignment groups add to return array\r\n\t\t\t\t\tif (userCount >= groupsArray.length) {\r\n\t\t\t\t\t\treturnUserArr.push(groupGA.getValue(\"user\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//return here\r\n\t\t\t\tif (returnUserArr.length > 0) {\r\n\t\t\t\t\tuserQuery = returnUserArr.join(\",\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst records = [];\r\n\t\t\tthis.table = field.refTable;\r\n\t\t\tconst fetchColors = this.getColorsForField(field.value);\r\n\t\t\tconst referenceGR = new GlideRecordSecure(field.refTable);\r\n\r\n\t\t\tif (bulkAssignedTo && field.refTable === \"sys_user\") {\r\n\t\t\t\treferenceGR.addQuery(\"sys_id\", \"IN\", userQuery);\r\n\t\t\t} else if (field.value === \"parent_goals\") {\r\n\t\t\t\tvar parentGoalsQuery = this.getRefQualValue(\"x_cadso_work_goal\", field.value, field.referringRecordId);\r\n\t\t\t\treferenceGR.addEncodedQuery(parentGoalsQuery);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.addEncodedQuery(referenceQualifier + \"^\" + referenceGR.getDisplayName() + \"LIKE\" + queryString);\r\n\t\t\t}\r\n\r\n\t\t\tif (attributesOrderBy) {\r\n\t\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t\t}\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t\treferenceGR.query();\r\n\t\t\twhile (referenceGR.next()) {\r\n\t\t\t\tconst icon = this.colors.icons[field.refTable] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][choiceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tif (field.refTable === \"sys_user\") {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\t\trefTable: \"sys_user\",\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(field.refTable) > -1) {\r\n\t\t\t\t\tconst colorElement = field.refTable === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\t\trefTable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\trefRable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolor,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfield.references = records;\r\n\r\n\t\t\treturn field;\r\n\t\t}\r\n\t},\r\n\r\n\tgetRefQualValue: function (table, field, sysid) {\r\n\t\t//gs.info('RT --'+table + field + sysid );\r\n\t\tvar refQual;\r\n\t\tvar refQualGR = new GlideRecord(\"x_cadso_work_ref_qual_scripts\");\r\n\t\trefQualGR.addEncodedQuery(\"table=\" + table + \"^field_name=\" + field);\r\n\t\trefQualGR.query();\r\n\t\tif (refQualGR.next()) {\r\n\t\t\tif (refQualGR.record_dependent_fields) {\r\n\t\t\t\tvar recordFields = refQualGR.getValue(\"record_dependent_fields\");\r\n\t\t\t\tvar lookupFieldValue = new GlideRecord(table);\r\n\t\t\t\tlookupFieldValue.addQuery(\"sys_id\", sysid);\r\n\t\t\t\tlookupFieldValue.query();\r\n\t\t\t\tif (lookupFieldValue.next()) {\r\n\t\t\t\t\tvar scriptVariable = lookupFieldValue.getValue(recordFields);\r\n\t\t\t\t\tvar script = refQualGR.u_script;\r\n\t\t\t\t\tvar evaluator = new GlideScopedEvaluator();\r\n\t\t\t\t\tevaluator.putVariable(recordFields, scriptVariable);\r\n\t\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tscript = refQualGR.u_script;\r\n\t\t\t\tevaluator = new GlideScopedEvaluator();\r\n\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn refQual;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tconst sysUserGr = new GlideRecord(\"sys_user\");\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue(\"avatar\");\r\n\t\t\tavatar = avatar == null ? \"\" : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue(\"photo\");\r\n\t\t\tphoto = photo == null ? \"\" : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + \".iix\" : \"\";\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = \"\";\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetChoice: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tchoices,\r\n\t\tfetchColors,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\tlimitResults = false,\r\n\t}) {\r\n\t\tconst icon = this.colors.icons[fieldValue] || false;\r\n\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=\" + table);\r\n\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\tchoiceGR.orderBy(\"value\");\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tchoiceGR.query();\r\n\t\twhile (choiceGR.next()) {\r\n\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\tvar color = \"\";\r\n\t\t\tvar className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\r\n\t\t\tchoices.push({\r\n\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\tvalue,\r\n\t\t\t\tcolor,\r\n\t\t\t\tclassName,\r\n\t\t\t\ticon,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!choices.length) {\r\n\t\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=task\");\r\n\t\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\t\tchoiceGR.orderBy(\"value\");\r\n\t\t\tchoiceGR.query();\r\n\t\t\twhile (choiceGR.next()) {\r\n\t\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\t\tvar color = \"\";\r\n\t\t\t\tvar className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchoices.push({\r\n\t\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\tchoices,\r\n\t\t\tisChoice,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetReference: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tfetchColors,\r\n\t\ttableReferance,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\treferences,\r\n\t\tchoices,\r\n\t\tattributesOrderBy,\r\n\t\tadditionalFilterQuery = \"\",\r\n\t\treferenceQualifier = \"\",\r\n\t\tlimitResults = true,\r\n\t\tgroupByField = \"\",\r\n\t}) {\r\n\t\tconst referenceGR = new GlideRecordSecure(tableReferance);\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tif (referenceQualifier) {\r\n\t\t\treferenceGR.addEncodedQuery(referenceQualifier);\r\n\t\t}\r\n\t\tif (additionalFilterQuery) {\r\n\t\t\treferenceGR.addEncodedQuery(additionalFilterQuery);\r\n\t\t}\r\n\t\tif (attributesOrderBy) {\r\n\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t} else {\r\n\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t}\r\n\t\treferenceGR.query();\r\n\t\twhile (referenceGR.next()) {\r\n\t\t\tlet data = {};\r\n\t\t\tlet tempGroupField = {};\r\n\t\t\tif (groupByField) {\r\n\t\t\t\ttempGroupField.value = referenceGR.getValue(groupByField);\r\n\t\t\t\ttempGroupField.displayValue = referenceGR.getDisplayValue(groupByField);\r\n\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t} else if (\r\n\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t) {\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\tlet color = \"\";\r\n\t\t\tlet className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\t\t\tif (tableReferance === \"sys_user\") {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(tableReferance) > -1) {\r\n\t\t\t\tconst colorElement = tableReferance === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\trefRable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treferences.push(data);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\treferences,\r\n\t\t\trefTable: tableReferance,\r\n\t\t\tisChoice,\r\n\t\t\tchoices,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetAdditionalFilterData: function (additionalFilter) {\r\n\t\tlet table = additionalFilter.filterTable;\r\n\t\tthis.table = table;\r\n\t\tlet fieldValue = additionalFilter.additionalFilterField;\r\n\t\tlet additionalFilterQuery = \"\";\r\n\t\tif (additionalFilter.customFilterOptions && additionalFilter.customFilterOptions.length) {\r\n\t\t\tadditionalFilterQuery = additionalFilter.customFilterOptions[0].query;\r\n\t\t}\r\n\r\n\t\tlet groupByField = additionalFilter.groupBy;\r\n\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tconst fields = [];\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + fieldValue;\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\tfieldValue;\r\n\t\t}\r\n\r\n\t\tlet referenceQualifier = \"\";\r\n\t\tlet attributesOrderBy = \"\";\r\n\t\tlet choices = [];\r\n\t\tlet references = [];\r\n\t\tlet fieldName = \"\";\r\n\t\tlet fieldType = \"\";\r\n\t\tlet maxLength = \"\";\r\n\t\tlet element = \"\";\r\n\t\tlet tableReferance = \"\";\r\n\t\tlet isChoice = false;\r\n\t\tlet attributesValuePairs = \"\";\r\n\t\tlet refAcOrderBy = \"\";\r\n\t\tlet refSequence = \"\";\r\n\r\n\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\ttableOverridesGR.setLimit(1);\r\n\t\ttableOverridesGR.query();\r\n\t\twhile (tableOverridesGR.next()) {\r\n\t\t\tvar tableName = \"\";\r\n\t\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\t\ttableFieldsGR.query();\r\n\t\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t\tfieldName = tableFieldsGR.getValue(\"column_label\");\r\n\t\t\t\tfieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\t\tfieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\t\tmaxLength = tableFieldsGR.getValue(\"max_length\");\r\n\t\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\t\t\t\ttableReferance = tableFieldsGR.getValue(\"reference\");\r\n\t\t\t\t//check the overrides for the refQual\r\n\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\tif (!refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\t\trefAcOrderBy = \"\";\r\n\t\t\t\trefSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tlet fieldOverrideLabel = fieldName;\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tfieldOverrideLabel = element.getLabel();\r\n\t\t\t\t}\r\n\t\t\t\tfieldName = fieldOverrideLabel;\r\n\r\n\t\t\t\tvar edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (fieldType !== \"reference\" && fieldType !== \"choice\") {\r\n\t\t\tlet choices = [];\r\n\t\t\tlet references = [];\r\n\r\n\t\t\tlet additionalFilterGR = new GlideRecord(table);\r\n\t\t\t// additionalFilterGR.addEncodedQuery();\r\n\t\t\tif (fieldValue) {\r\n\t\t\t\tadditionalFilterGR.orderBy(fieldValue);\r\n\t\t\t}\r\n\t\t\tadditionalFilterGR.query();\r\n\t\t\twhile (additionalFilterGR.next()) {\r\n\t\t\t\tif (!fieldValue) {\r\n\t\t\t\t\tfieldValue = additionalFilterGR.getDisplayName();\r\n\t\t\t\t}\r\n\t\t\t\tlet label = additionalFilterGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: additionalFilterGR.getValue(\"sys_id\"),\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tlet tempGroupField = {};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\ttempGroupField.value = additionalFilterGR.getValue(groupByField);\r\n\t\t\t\t\ttempGroupField.displayValue = additionalFilterGR.getDisplayValue(groupByField);\r\n\t\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t\treferences.push(data);\r\n\t\t\t}\r\n\t\t\tadditionalFilter.fieldData = {\r\n\t\t\t\ttype: fieldType,\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tvalue: fieldValue,\r\n\t\t\t\treferences,\r\n\t\t\t\trefTable: tableReferance,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tchoices,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tcanWrite: false,\r\n\t\t\t\tcanClear: false,\r\n\t\t\t};\r\n\t\t} else if (fieldType === \"reference\") {\r\n\t\t\tadditionalFilter.fieldData = this.getReference({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfieldChecker,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\ttableReferance,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear: false,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\treferences,\r\n\t\t\t\tchoices,\r\n\t\t\t\tattributesOrderBy,\r\n\t\t\t\treferenceQualifier,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t\tgroupByField,\r\n\t\t\t\tadditionalFilterQuery,\r\n\t\t\t});\r\n\t\t} else if (fieldType === \"choice\") {\r\n\t\t\tadditionalFilter.fieldData = this.getChoice({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\tchoices,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn additionalFilter;\r\n\t},\r\n\r\n\ttype: \"GetTableDropdownsDataMS\",\r\n};\r\n",
    "display_value": "const GetTableDropdownsDataMS = Class.create();\r\nGetTableDropdownsDataMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.language = gs.getSession().getLanguage();\r\n\t},\r\n\r\n\tgetColorsForField: function (field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tconst api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === \"priority\" || field === \"state\";\r\n\t},\r\n\r\n\tgetData: function (table, isList, relatedFilterToggle = false) {\r\n\t\tthis.table = table;\r\n\t\tconst fields = [];\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro,sn_customerservice_case\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery = \"name=\" + table + \"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\t} else if (table === \"customer_contact\") {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=sys_user^internal_type!=collection^internal_type!=integer^ORinternal_type=NULL^active=true\";\r\n\t\t}\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\t//TODOs\r\n\t\t// - move from passing all variables to moving them to this. object to just be grabbed\r\n\r\n\t\tvar tableName = \"\";\r\n\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\ttableFieldsGR.query();\r\n\t\tvar i = 0;\r\n\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t// declare base data\r\n\t\t\tvar referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet element = {};\r\n\t\t\tconst choices = [];\r\n\t\t\tconst references = [];\r\n\r\n\t\t\t// get basic data\r\n\t\t\tlet fieldName = tableFieldsGR.getValue(\"column_label\"); // Name of the field on the table\r\n\t\t\tconst fieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\tconst fieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\tconst maxLength = tableFieldsGR.getValue(\"max_length\");\r\n\r\n\t\t\t// get element to tell us if this is a choice field or reference\r\n\t\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\t\ttableOverridesGR.setLimit(1);\r\n\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\r\n\t\t\t// get overridden fieldName\r\n\t\t\tconst sysDocumentationGR = new GlideRecord(\"sys_documentation\");\r\n\t\t\tsysDocumentationGR.addQuery(\"name\", table);\r\n\t\t\tsysDocumentationGR.addQuery(\"element\", fieldValue);\r\n\t\t\tsysDocumentationGR.addQuery(\"language\", this.language || \"en\");\r\n\t\t\tsysDocumentationGR.query();\r\n\t\t\twhile (sysDocumentationGR.next()) {\r\n\t\t\t\tif (sysDocumentationGR.getValue(\"element\") === fieldValue) {\r\n\t\t\t\t\tif (fieldName !== sysDocumentationGR.getValue(\"label\")) {\r\n\t\t\t\t\t\tfieldName = sysDocumentationGR.getValue(\"label\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//check the overrides for the refQual\r\n\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\trefQualOverRideGR.query();\r\n\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\tlet refQual = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\tif (refQual && !refQual.includes(\"javascript:\")) {\r\n\t\t\t\t\t\treferenceQualifier = refQual;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet attributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\tlet refSequence = \"\";\r\n\t\t\tif (attributesValuePairs) {\r\n\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\tlet fieldOverrideLabel = fieldName;\r\n\r\n\t\t\tconst canClearFields = fieldChecker.fieldsThatCanNotBeCleared;\r\n\t\t\tconst canClear = !fieldChecker.checkField(canClearFields, fieldValue);\r\n\t\t\tconst fieldValuesToInclude = fieldChecker.fieldValuesToIncludeFromList[table];\r\n\t\t\tif (isList) {\r\n\t\t\t\tif (fieldChecker.checkField(fieldValuesToInclude, fieldValue)) {\r\n\t\t\t\t\tlet isChoice = false;\r\n\t\t\t\t\tlet edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\t\tif (edCheck) {\r\n\t\t\t\t\t\tlet elmEd = element.getED();\r\n\t\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\t\tif (isChoice) {\r\n\t\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\t\tlet field = this.getReference({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// This else is for the Complex Filter\r\n\t\t\telse {\r\n\t\t\t\tlet isChoice = false;\r\n\t\t\t\tlet edCheck =\r\n\t\t\t\t\telement !== null &&\r\n\t\t\t\t\telement !== \"null\" &&\r\n\t\t\t\t\ttypeof element === \"object\" &&\r\n\t\t\t\t\telement.getED &&\r\n\t\t\t\t\ttypeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\tif (isChoice) {\r\n\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\tvar field = this.getReference({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\tcanWrite: true,\r\n\t\t\t\t\t\t// canWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fetch Related Filter records\r\n\t\tif (relatedFilterToggle && table) {\r\n\t\t\ttry {\r\n\t\t\t\tvar relatedFilterAPI = new x_cadso_core.RelatedListFilter();\r\n\t\t\t\tvar relatedFilters = relatedFilterAPI.getAll({ table: table });\r\n\t\t\t\t// Transform and add related filters to fields array\r\n\t\t\t\trelatedFilters.forEach((filter, index) => {\r\n\t\t\t\t\tif (filter.active && filter.active.value === \"1\") {\r\n\t\t\t\t\t\tvar transformedField = relatedFilterAPI._transformRelatedFilterToField(filter);\r\n\t\t\t\t\t\tfields.push(transformedField);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\t// Sort all fields alphabetically by name\r\n\t\t\t\tfields.sort((a, b) => {\r\n\t\t\t\t\tvar nameA = (a.label || a.displayValue || a.name || \"\").toLowerCase();\r\n\t\t\t\t\tvar nameB = (b.label || b.displayValue || b.name || \"\").toLowerCase();\r\n\t\t\t\t\treturn nameA.localeCompare(nameB);\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tgs.error(\"Failed to fetch related filters: \".concat(e.message));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fields;\r\n\t},\r\n\r\n\tupdateReferenceFieldOptions: function (table, field, queryString, sysId, isList, isBulk, bulkSysIds) {\r\n\t\tlet bulkAssignedTo = false;\r\n\t\tif (isBulk && (field.value === \"assigned_to\" || field.value === \"additional_assignee_list\")) {\r\n\t\t\tbulkAssignedTo = true;\r\n\t\t}\r\n\r\n\t\tif (table) {\r\n\t\t\tlet query =\r\n\t\t\t\t\"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + field.value;\r\n\t\t\tif (\r\n\t\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\t\ttable,\r\n\t\t\t\t) > -1\r\n\t\t\t) {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t} else if (table === \"customer_contact\") {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=sys_user^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t}\r\n\r\n\t\t\tlet referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet tableName = \"\";\r\n\t\t\tconst dictionaryGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\tdictionaryGR.addEncodedQuery(query);\r\n\t\t\tdictionaryGR.orderBy(\"column_label\");\r\n\t\t\tdictionaryGR.query();\r\n\t\t\twhile (dictionaryGR.next()) {\r\n\t\t\t\t// gs.info(\"RT - Ref Qual - is List: \" + isList + isBulk + bulkAssignedTo)\r\n\t\t\t\ttableName = dictionaryGR.getDisplayValue(\"column_label\");\r\n\t\t\t\tif (isList === true || (isBulk === true && bulkAssignedTo === false)) {\r\n\t\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + field.value);\r\n\t\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\t\tif (refQualOverRideGR.next()) {\r\n\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// gs.info(\"RT - Ref Qual -\"+ \"table: \" + table+\" , \" + \"Field:\" + field.value + \" , \" +\"Sys_id: \" + sysId +\" , \"+ referenceQualifier);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (dictionaryGR.getValue(\"use_reference_qualifier\") === \"simple\") {\r\n\t\t\t\t\t\tif (dictionaryGR.getValue(\"reference_qual_condition\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = dictionaryGR.getValue(\"reference_qual_condition\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treferenceQualifier = \"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet attributesValuePairs = dictionaryGR.getValue(\"attributes\");\r\n\t\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\t\tlet refSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tfield.sys_id = sysId;\r\n\t\t\t}\r\n\t\t\tif (bulkAssignedTo) {\r\n\t\t\t\tvar bulkQuery = bulkSysIds.join(\",\");\r\n\t\t\t\tvar groupsArray = [];\r\n\t\t\t\tvar groupsQuery = \"\";\r\n\t\t\t\tvar returnUserArr = [];\r\n\t\t\t\tvar userQuery = \"\";\r\n\r\n\t\t\t\t//Grab unique assignemnt groups with glide aggregate from the referring table\r\n\t\t\t\tvar assignmentGA = new GlideAggregate(table);\r\n\t\t\t\tassignmentGA.addAggregate(\"COUNT\");\r\n\t\t\t\tassignmentGA.groupBy(\"assignment_group\");\r\n\t\t\t\tassignmentGA.addQuery(\"sys_id\", \"IN\", bulkQuery);\r\n\t\t\t\tassignmentGA.query();\r\n\r\n\t\t\t\t//Push unique values to groups array\r\n\t\t\t\twhile (assignmentGA.next()) {\r\n\t\t\t\t\tgroupsArray.push(assignmentGA.getValue(\"assignment_group\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupsQuery = groupsArray.join(\",\");\r\n\r\n\t\t\t\t//Query the group members table for assignment groups associated to bulk records\r\n\t\t\t\tvar groupGA = new GlideAggregate(\"sys_user_grmember\");\r\n\t\t\t\tgroupGA.addAggregate(\"COUNT\");\r\n\t\t\t\tgroupGA.groupBy(\"user\");\r\n\t\t\t\tgroupGA.addQuery(\"user.name\", \"CONTAINS\", queryString);\r\n\t\t\t\tgroupGA.addQuery(\"group\", \"IN\", groupsQuery);\r\n\t\t\t\tgroupGA.query();\r\n\r\n\t\t\t\twhile (groupGA.next()) {\r\n\t\t\t\t\t//Get the count of user records on the goupe members table\r\n\t\t\t\t\tvar userCount = groupGA.getAggregate(\"COUNT\");\r\n\r\n\t\t\t\t\t//If a users record count matches the length of unique assignment groups add to return array\r\n\t\t\t\t\tif (userCount >= groupsArray.length) {\r\n\t\t\t\t\t\treturnUserArr.push(groupGA.getValue(\"user\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//return here\r\n\t\t\t\tif (returnUserArr.length > 0) {\r\n\t\t\t\t\tuserQuery = returnUserArr.join(\",\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst records = [];\r\n\t\t\tthis.table = field.refTable;\r\n\t\t\tconst fetchColors = this.getColorsForField(field.value);\r\n\t\t\tconst referenceGR = new GlideRecordSecure(field.refTable);\r\n\r\n\t\t\tif (bulkAssignedTo && field.refTable === \"sys_user\") {\r\n\t\t\t\treferenceGR.addQuery(\"sys_id\", \"IN\", userQuery);\r\n\t\t\t} else if (field.value === \"parent_goals\") {\r\n\t\t\t\tvar parentGoalsQuery = this.getRefQualValue(\"x_cadso_work_goal\", field.value, field.referringRecordId);\r\n\t\t\t\treferenceGR.addEncodedQuery(parentGoalsQuery);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.addEncodedQuery(referenceQualifier + \"^\" + referenceGR.getDisplayName() + \"LIKE\" + queryString);\r\n\t\t\t}\r\n\r\n\t\t\tif (attributesOrderBy) {\r\n\t\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t\t}\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t\treferenceGR.query();\r\n\t\t\twhile (referenceGR.next()) {\r\n\t\t\t\tconst icon = this.colors.icons[field.refTable] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][choiceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tif (field.refTable === \"sys_user\") {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\t\trefTable: \"sys_user\",\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(field.refTable) > -1) {\r\n\t\t\t\t\tconst colorElement = field.refTable === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\t\trefTable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\trefRable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolor,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfield.references = records;\r\n\r\n\t\t\treturn field;\r\n\t\t}\r\n\t},\r\n\r\n\tgetRefQualValue: function (table, field, sysid) {\r\n\t\t//gs.info('RT --'+table + field + sysid );\r\n\t\tvar refQual;\r\n\t\tvar refQualGR = new GlideRecord(\"x_cadso_work_ref_qual_scripts\");\r\n\t\trefQualGR.addEncodedQuery(\"table=\" + table + \"^field_name=\" + field);\r\n\t\trefQualGR.query();\r\n\t\tif (refQualGR.next()) {\r\n\t\t\tif (refQualGR.record_dependent_fields) {\r\n\t\t\t\tvar recordFields = refQualGR.getValue(\"record_dependent_fields\");\r\n\t\t\t\tvar lookupFieldValue = new GlideRecord(table);\r\n\t\t\t\tlookupFieldValue.addQuery(\"sys_id\", sysid);\r\n\t\t\t\tlookupFieldValue.query();\r\n\t\t\t\tif (lookupFieldValue.next()) {\r\n\t\t\t\t\tvar scriptVariable = lookupFieldValue.getValue(recordFields);\r\n\t\t\t\t\tvar script = refQualGR.u_script;\r\n\t\t\t\t\tvar evaluator = new GlideScopedEvaluator();\r\n\t\t\t\t\tevaluator.putVariable(recordFields, scriptVariable);\r\n\t\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tscript = refQualGR.u_script;\r\n\t\t\t\tevaluator = new GlideScopedEvaluator();\r\n\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn refQual;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tconst sysUserGr = new GlideRecord(\"sys_user\");\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue(\"avatar\");\r\n\t\t\tavatar = avatar == null ? \"\" : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue(\"photo\");\r\n\t\t\tphoto = photo == null ? \"\" : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + \".iix\" : \"\";\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = \"\";\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetChoice: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tchoices,\r\n\t\tfetchColors,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\tlimitResults = false,\r\n\t}) {\r\n\t\tconst icon = this.colors.icons[fieldValue] || false;\r\n\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=\" + table);\r\n\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\tchoiceGR.orderBy(\"value\");\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tchoiceGR.query();\r\n\t\twhile (choiceGR.next()) {\r\n\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\tvar color = \"\";\r\n\t\t\tvar className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\r\n\t\t\tchoices.push({\r\n\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\tvalue,\r\n\t\t\t\tcolor,\r\n\t\t\t\tclassName,\r\n\t\t\t\ticon,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!choices.length) {\r\n\t\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=task\");\r\n\t\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\t\tchoiceGR.orderBy(\"value\");\r\n\t\t\tchoiceGR.query();\r\n\t\t\twhile (choiceGR.next()) {\r\n\t\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\t\tvar color = \"\";\r\n\t\t\t\tvar className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchoices.push({\r\n\t\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\tchoices,\r\n\t\t\tisChoice,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetReference: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tfetchColors,\r\n\t\ttableReferance,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\treferences,\r\n\t\tchoices,\r\n\t\tattributesOrderBy,\r\n\t\tadditionalFilterQuery = \"\",\r\n\t\treferenceQualifier = \"\",\r\n\t\tlimitResults = true,\r\n\t\tgroupByField = \"\",\r\n\t}) {\r\n\t\tconst referenceGR = new GlideRecordSecure(tableReferance);\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tif (referenceQualifier) {\r\n\t\t\treferenceGR.addEncodedQuery(referenceQualifier);\r\n\t\t}\r\n\t\tif (additionalFilterQuery) {\r\n\t\t\treferenceGR.addEncodedQuery(additionalFilterQuery);\r\n\t\t}\r\n\t\tif (attributesOrderBy) {\r\n\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t} else {\r\n\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t}\r\n\t\treferenceGR.query();\r\n\t\twhile (referenceGR.next()) {\r\n\t\t\tlet data = {};\r\n\t\t\tlet tempGroupField = {};\r\n\t\t\tif (groupByField) {\r\n\t\t\t\ttempGroupField.value = referenceGR.getValue(groupByField);\r\n\t\t\t\ttempGroupField.displayValue = referenceGR.getDisplayValue(groupByField);\r\n\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t} else if (\r\n\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t) {\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\tlet color = \"\";\r\n\t\t\tlet className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\t\t\tif (tableReferance === \"sys_user\") {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(tableReferance) > -1) {\r\n\t\t\t\tconst colorElement = tableReferance === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\trefRable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treferences.push(data);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\treferences,\r\n\t\t\trefTable: tableReferance,\r\n\t\t\tisChoice,\r\n\t\t\tchoices,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetAdditionalFilterData: function (additionalFilter) {\r\n\t\tlet table = additionalFilter.filterTable;\r\n\t\tthis.table = table;\r\n\t\tlet fieldValue = additionalFilter.additionalFilterField;\r\n\t\tlet additionalFilterQuery = \"\";\r\n\t\tif (additionalFilter.customFilterOptions && additionalFilter.customFilterOptions.length) {\r\n\t\t\tadditionalFilterQuery = additionalFilter.customFilterOptions[0].query;\r\n\t\t}\r\n\r\n\t\tlet groupByField = additionalFilter.groupBy;\r\n\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tconst fields = [];\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + fieldValue;\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\tfieldValue;\r\n\t\t}\r\n\r\n\t\tlet referenceQualifier = \"\";\r\n\t\tlet attributesOrderBy = \"\";\r\n\t\tlet choices = [];\r\n\t\tlet references = [];\r\n\t\tlet fieldName = \"\";\r\n\t\tlet fieldType = \"\";\r\n\t\tlet maxLength = \"\";\r\n\t\tlet element = \"\";\r\n\t\tlet tableReferance = \"\";\r\n\t\tlet isChoice = false;\r\n\t\tlet attributesValuePairs = \"\";\r\n\t\tlet refAcOrderBy = \"\";\r\n\t\tlet refSequence = \"\";\r\n\r\n\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\ttableOverridesGR.setLimit(1);\r\n\t\ttableOverridesGR.query();\r\n\t\twhile (tableOverridesGR.next()) {\r\n\t\t\tvar tableName = \"\";\r\n\t\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\t\ttableFieldsGR.query();\r\n\t\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t\tfieldName = tableFieldsGR.getValue(\"column_label\");\r\n\t\t\t\tfieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\t\tfieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\t\tmaxLength = tableFieldsGR.getValue(\"max_length\");\r\n\t\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\t\t\t\ttableReferance = tableFieldsGR.getValue(\"reference\");\r\n\t\t\t\t//check the overrides for the refQual\r\n\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\tif (!refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\t\trefAcOrderBy = \"\";\r\n\t\t\t\trefSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tlet fieldOverrideLabel = fieldName;\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tfieldOverrideLabel = element.getLabel();\r\n\t\t\t\t}\r\n\t\t\t\tfieldName = fieldOverrideLabel;\r\n\r\n\t\t\t\tvar edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (fieldType !== \"reference\" && fieldType !== \"choice\") {\r\n\t\t\tlet choices = [];\r\n\t\t\tlet references = [];\r\n\r\n\t\t\tlet additionalFilterGR = new GlideRecord(table);\r\n\t\t\t// additionalFilterGR.addEncodedQuery();\r\n\t\t\tif (fieldValue) {\r\n\t\t\t\tadditionalFilterGR.orderBy(fieldValue);\r\n\t\t\t}\r\n\t\t\tadditionalFilterGR.query();\r\n\t\t\twhile (additionalFilterGR.next()) {\r\n\t\t\t\tif (!fieldValue) {\r\n\t\t\t\t\tfieldValue = additionalFilterGR.getDisplayName();\r\n\t\t\t\t}\r\n\t\t\t\tlet label = additionalFilterGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: additionalFilterGR.getValue(\"sys_id\"),\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tlet tempGroupField = {};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\ttempGroupField.value = additionalFilterGR.getValue(groupByField);\r\n\t\t\t\t\ttempGroupField.displayValue = additionalFilterGR.getDisplayValue(groupByField);\r\n\t\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t\treferences.push(data);\r\n\t\t\t}\r\n\t\t\tadditionalFilter.fieldData = {\r\n\t\t\t\ttype: fieldType,\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tvalue: fieldValue,\r\n\t\t\t\treferences,\r\n\t\t\t\trefTable: tableReferance,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tchoices,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tcanWrite: false,\r\n\t\t\t\tcanClear: false,\r\n\t\t\t};\r\n\t\t} else if (fieldType === \"reference\") {\r\n\t\t\tadditionalFilter.fieldData = this.getReference({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfieldChecker,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\ttableReferance,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear: false,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\treferences,\r\n\t\t\t\tchoices,\r\n\t\t\t\tattributesOrderBy,\r\n\t\t\t\treferenceQualifier,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t\tgroupByField,\r\n\t\t\t\tadditionalFilterQuery,\r\n\t\t\t});\r\n\t\t} else if (fieldType === \"choice\") {\r\n\t\t\tadditionalFilter.fieldData = this.getChoice({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\tchoices,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn additionalFilter;\r\n\t},\r\n\r\n\ttype: \"GetTableDropdownsDataMS\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 937,
      "char_count": 29241,
      "preview": "const GetTableDropdownsDataMS = Class.create();\r\nGetTableDropdownsDataMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.language = gs.getSession()....",
      "full_script": "const GetTableDropdownsDataMS = Class.create();\r\nGetTableDropdownsDataMS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.userAvatars = {};\r\n\t\tthis.colors = false;\r\n\t\tthis.language = gs.getSession().getLanguage();\r\n\t},\r\n\r\n\tgetColorsForField: function (field) {\r\n\t\tif (!this.colors) {\r\n\t\t\tconst api = new x_cadso_work.GetColorsForFields();\r\n\t\t\tthis.colors = api.fetch(this.table);\r\n\t\t}\r\n\t\treturn field === \"priority\" || field === \"state\";\r\n\t},\r\n\r\n\tgetData: function (table, isList, relatedFilterToggle = false) {\r\n\t\tthis.table = table;\r\n\t\tconst fields = [];\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro,sn_customerservice_case\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery = \"name=\" + table + \"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true\";\r\n\t\t} else if (table === \"customer_contact\") {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=sys_user^internal_type!=collection^internal_type!=integer^ORinternal_type=NULL^active=true\";\r\n\t\t}\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\t//TODOs\r\n\t\t// - move from passing all variables to moving them to this. object to just be grabbed\r\n\r\n\t\tvar tableName = \"\";\r\n\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\ttableFieldsGR.query();\r\n\t\tvar i = 0;\r\n\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t// declare base data\r\n\t\t\tvar referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet element = {};\r\n\t\t\tconst choices = [];\r\n\t\t\tconst references = [];\r\n\r\n\t\t\t// get basic data\r\n\t\t\tlet fieldName = tableFieldsGR.getValue(\"column_label\"); // Name of the field on the table\r\n\t\t\tconst fieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\tconst fieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\tconst maxLength = tableFieldsGR.getValue(\"max_length\");\r\n\r\n\t\t\t// get element to tell us if this is a choice field or reference\r\n\t\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\t\ttableOverridesGR.setLimit(1);\r\n\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\r\n\t\t\t// get overridden fieldName\r\n\t\t\tconst sysDocumentationGR = new GlideRecord(\"sys_documentation\");\r\n\t\t\tsysDocumentationGR.addQuery(\"name\", table);\r\n\t\t\tsysDocumentationGR.addQuery(\"element\", fieldValue);\r\n\t\t\tsysDocumentationGR.addQuery(\"language\", this.language || \"en\");\r\n\t\t\tsysDocumentationGR.query();\r\n\t\t\twhile (sysDocumentationGR.next()) {\r\n\t\t\t\tif (sysDocumentationGR.getValue(\"element\") === fieldValue) {\r\n\t\t\t\t\tif (fieldName !== sysDocumentationGR.getValue(\"label\")) {\r\n\t\t\t\t\t\tfieldName = sysDocumentationGR.getValue(\"label\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//check the overrides for the refQual\r\n\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\trefQualOverRideGR.query();\r\n\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\tlet refQual = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\tif (refQual && !refQual.includes(\"javascript:\")) {\r\n\t\t\t\t\t\treferenceQualifier = refQual;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet attributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\tlet refSequence = \"\";\r\n\t\t\tif (attributesValuePairs) {\r\n\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\tlet fieldOverrideLabel = fieldName;\r\n\r\n\t\t\tconst canClearFields = fieldChecker.fieldsThatCanNotBeCleared;\r\n\t\t\tconst canClear = !fieldChecker.checkField(canClearFields, fieldValue);\r\n\t\t\tconst fieldValuesToInclude = fieldChecker.fieldValuesToIncludeFromList[table];\r\n\t\t\tif (isList) {\r\n\t\t\t\tif (fieldChecker.checkField(fieldValuesToInclude, fieldValue)) {\r\n\t\t\t\t\tlet isChoice = false;\r\n\t\t\t\t\tlet edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\t\tif (edCheck) {\r\n\t\t\t\t\t\tlet elmEd = element.getED();\r\n\t\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\t\tif (isChoice) {\r\n\t\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\t\tlet field = this.getReference({\r\n\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// This else is for the Complex Filter\r\n\t\t\telse {\r\n\t\t\t\tlet isChoice = false;\r\n\t\t\t\tlet edCheck =\r\n\t\t\t\t\telement !== null &&\r\n\t\t\t\t\telement !== \"null\" &&\r\n\t\t\t\t\ttypeof element === \"object\" &&\r\n\t\t\t\t\telement.getED &&\r\n\t\t\t\t\ttypeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\t\t\tif (isChoice) {\r\n\t\t\t\t\tlet field = this.getChoice({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (fieldType === \"reference\" || fieldType === \"glide_list\") {\r\n\t\t\t\t\tvar field = this.getReference({\r\n\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\tfieldValue,\r\n\t\t\t\t\t\tfieldType,\r\n\t\t\t\t\t\ttable,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tfieldChecker,\r\n\t\t\t\t\t\tfetchColors,\r\n\t\t\t\t\t\ttableReferance: tableFieldsGR.getValue(\"reference\"),\r\n\t\t\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\treferences,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tattributesOrderBy,\r\n\t\t\t\t\t\treferenceQualifier,\r\n\t\t\t\t\t\tgroupByField: \"\",\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (field) {\r\n\t\t\t\t\t\tfields.push(field);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfields.push({\r\n\t\t\t\t\t\ttype: fieldType,\r\n\t\t\t\t\t\tname: fieldName,\r\n\t\t\t\t\t\tvalue: fieldValue,\r\n\t\t\t\t\t\tisChoice,\r\n\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\tmaxLength,\r\n\t\t\t\t\t\tcanWrite: true,\r\n\t\t\t\t\t\t// canWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\t\t\tcanClear,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fetch Related Filter records\r\n\t\tif (relatedFilterToggle && table) {\r\n\t\t\ttry {\r\n\t\t\t\tvar relatedFilterAPI = new x_cadso_core.RelatedListFilter();\r\n\t\t\t\tvar relatedFilters = relatedFilterAPI.getAll({ table: table });\r\n\t\t\t\t// Transform and add related filters to fields array\r\n\t\t\t\trelatedFilters.forEach((filter, index) => {\r\n\t\t\t\t\tif (filter.active && filter.active.value === \"1\") {\r\n\t\t\t\t\t\tvar transformedField = relatedFilterAPI._transformRelatedFilterToField(filter);\r\n\t\t\t\t\t\tfields.push(transformedField);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\t// Sort all fields alphabetically by name\r\n\t\t\t\tfields.sort((a, b) => {\r\n\t\t\t\t\tvar nameA = (a.label || a.displayValue || a.name || \"\").toLowerCase();\r\n\t\t\t\t\tvar nameB = (b.label || b.displayValue || b.name || \"\").toLowerCase();\r\n\t\t\t\t\treturn nameA.localeCompare(nameB);\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tgs.error(\"Failed to fetch related filters: \".concat(e.message));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fields;\r\n\t},\r\n\r\n\tupdateReferenceFieldOptions: function (table, field, queryString, sysId, isList, isBulk, bulkSysIds) {\r\n\t\tlet bulkAssignedTo = false;\r\n\t\tif (isBulk && (field.value === \"assigned_to\" || field.value === \"additional_assignee_list\")) {\r\n\t\t\tbulkAssignedTo = true;\r\n\t\t}\r\n\r\n\t\tif (table) {\r\n\t\t\tlet query =\r\n\t\t\t\t\"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + field.value;\r\n\t\t\tif (\r\n\t\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\t\ttable,\r\n\t\t\t\t) > -1\r\n\t\t\t) {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t} else if (table === \"customer_contact\") {\r\n\t\t\t\tquery =\r\n\t\t\t\t\t\"name=\" +\r\n\t\t\t\t\ttable +\r\n\t\t\t\t\t\"^ORname=sys_user^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\t\tfield.value;\r\n\t\t\t}\r\n\r\n\t\t\tlet referenceQualifier = \"\";\r\n\t\t\tlet attributesOrderBy = \"\";\r\n\t\t\tlet tableName = \"\";\r\n\t\t\tconst dictionaryGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\tdictionaryGR.addEncodedQuery(query);\r\n\t\t\tdictionaryGR.orderBy(\"column_label\");\r\n\t\t\tdictionaryGR.query();\r\n\t\t\twhile (dictionaryGR.next()) {\r\n\t\t\t\t// gs.info(\"RT - Ref Qual - is List: \" + isList + isBulk + bulkAssignedTo)\r\n\t\t\t\ttableName = dictionaryGR.getDisplayValue(\"column_label\");\r\n\t\t\t\tif (isList === true || (isBulk === true && bulkAssignedTo === false)) {\r\n\t\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + field.value);\r\n\t\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\t\tif (refQualOverRideGR.next()) {\r\n\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// gs.info(\"RT - Ref Qual -\"+ \"table: \" + table+\" , \" + \"Field:\" + field.value + \" , \" +\"Sys_id: \" + sysId +\" , \"+ referenceQualifier);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (dictionaryGR.getValue(\"use_reference_qualifier\") === \"simple\") {\r\n\t\t\t\t\t\tif (dictionaryGR.getValue(\"reference_qual_condition\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = dictionaryGR.getValue(\"reference_qual_condition\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treferenceQualifier = \"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treferenceQualifier = this.getRefQualValue(table, field.value, sysId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet attributesValuePairs = dictionaryGR.getValue(\"attributes\");\r\n\t\t\t\tlet refAcOrderBy = \"\";\r\n\t\t\t\tlet refSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tfield.sys_id = sysId;\r\n\t\t\t}\r\n\t\t\tif (bulkAssignedTo) {\r\n\t\t\t\tvar bulkQuery = bulkSysIds.join(\",\");\r\n\t\t\t\tvar groupsArray = [];\r\n\t\t\t\tvar groupsQuery = \"\";\r\n\t\t\t\tvar returnUserArr = [];\r\n\t\t\t\tvar userQuery = \"\";\r\n\r\n\t\t\t\t//Grab unique assignemnt groups with glide aggregate from the referring table\r\n\t\t\t\tvar assignmentGA = new GlideAggregate(table);\r\n\t\t\t\tassignmentGA.addAggregate(\"COUNT\");\r\n\t\t\t\tassignmentGA.groupBy(\"assignment_group\");\r\n\t\t\t\tassignmentGA.addQuery(\"sys_id\", \"IN\", bulkQuery);\r\n\t\t\t\tassignmentGA.query();\r\n\r\n\t\t\t\t//Push unique values to groups array\r\n\t\t\t\twhile (assignmentGA.next()) {\r\n\t\t\t\t\tgroupsArray.push(assignmentGA.getValue(\"assignment_group\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupsQuery = groupsArray.join(\",\");\r\n\r\n\t\t\t\t//Query the group members table for assignment groups associated to bulk records\r\n\t\t\t\tvar groupGA = new GlideAggregate(\"sys_user_grmember\");\r\n\t\t\t\tgroupGA.addAggregate(\"COUNT\");\r\n\t\t\t\tgroupGA.groupBy(\"user\");\r\n\t\t\t\tgroupGA.addQuery(\"user.name\", \"CONTAINS\", queryString);\r\n\t\t\t\tgroupGA.addQuery(\"group\", \"IN\", groupsQuery);\r\n\t\t\t\tgroupGA.query();\r\n\r\n\t\t\t\twhile (groupGA.next()) {\r\n\t\t\t\t\t//Get the count of user records on the goupe members table\r\n\t\t\t\t\tvar userCount = groupGA.getAggregate(\"COUNT\");\r\n\r\n\t\t\t\t\t//If a users record count matches the length of unique assignment groups add to return array\r\n\t\t\t\t\tif (userCount >= groupsArray.length) {\r\n\t\t\t\t\t\treturnUserArr.push(groupGA.getValue(\"user\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//return here\r\n\t\t\t\tif (returnUserArr.length > 0) {\r\n\t\t\t\t\tuserQuery = returnUserArr.join(\",\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst records = [];\r\n\t\t\tthis.table = field.refTable;\r\n\t\t\tconst fetchColors = this.getColorsForField(field.value);\r\n\t\t\tconst referenceGR = new GlideRecordSecure(field.refTable);\r\n\r\n\t\t\tif (bulkAssignedTo && field.refTable === \"sys_user\") {\r\n\t\t\t\treferenceGR.addQuery(\"sys_id\", \"IN\", userQuery);\r\n\t\t\t} else if (field.value === \"parent_goals\") {\r\n\t\t\t\tvar parentGoalsQuery = this.getRefQualValue(\"x_cadso_work_goal\", field.value, field.referringRecordId);\r\n\t\t\t\treferenceGR.addEncodedQuery(parentGoalsQuery);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.addEncodedQuery(referenceQualifier + \"^\" + referenceGR.getDisplayName() + \"LIKE\" + queryString);\r\n\t\t\t}\r\n\r\n\t\t\tif (attributesOrderBy) {\r\n\t\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t\t} else {\r\n\t\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t\t}\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t\treferenceGR.query();\r\n\t\t\twhile (referenceGR.next()) {\r\n\t\t\t\tconst icon = this.colors.icons[field.refTable] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][choiceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tif (field.refTable === \"sys_user\") {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\t\trefTable: \"sys_user\",\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(field.refTable) > -1) {\r\n\t\t\t\t\tconst colorElement = field.refTable === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\t\trefTable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\t\tif (!label) {\r\n\t\t\t\t\t\tlabel = \"Empty \" + tableName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trecords.push({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\t\trefRable: field.refTable,\r\n\t\t\t\t\t\ticon,\r\n\t\t\t\t\t\tcolor,\r\n\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfield.references = records;\r\n\r\n\t\t\treturn field;\r\n\t\t}\r\n\t},\r\n\r\n\tgetRefQualValue: function (table, field, sysid) {\r\n\t\t//gs.info('RT --'+table + field + sysid );\r\n\t\tvar refQual;\r\n\t\tvar refQualGR = new GlideRecord(\"x_cadso_work_ref_qual_scripts\");\r\n\t\trefQualGR.addEncodedQuery(\"table=\" + table + \"^field_name=\" + field);\r\n\t\trefQualGR.query();\r\n\t\tif (refQualGR.next()) {\r\n\t\t\tif (refQualGR.record_dependent_fields) {\r\n\t\t\t\tvar recordFields = refQualGR.getValue(\"record_dependent_fields\");\r\n\t\t\t\tvar lookupFieldValue = new GlideRecord(table);\r\n\t\t\t\tlookupFieldValue.addQuery(\"sys_id\", sysid);\r\n\t\t\t\tlookupFieldValue.query();\r\n\t\t\t\tif (lookupFieldValue.next()) {\r\n\t\t\t\t\tvar scriptVariable = lookupFieldValue.getValue(recordFields);\r\n\t\t\t\t\tvar script = refQualGR.u_script;\r\n\t\t\t\t\tvar evaluator = new GlideScopedEvaluator();\r\n\t\t\t\t\tevaluator.putVariable(recordFields, scriptVariable);\r\n\t\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tscript = refQualGR.u_script;\r\n\t\t\t\tevaluator = new GlideScopedEvaluator();\r\n\t\t\t\trefQual = evaluator.evaluateScript(refQualGR, \"u_script\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn refQual;\r\n\t},\r\n\r\n\t_getCachedAvatar: function (userSysId) {\r\n\t\tif (this.userAvatars[userSysId]) {\r\n\t\t\treturn this.userAvatars[userSysId];\r\n\t\t}\r\n\r\n\t\tconst sysUserGr = new GlideRecord(\"sys_user\");\r\n\r\n\t\tif (sysUserGr.get(userSysId)) {\r\n\t\t\tlet avatar = sysUserGr.getValue(\"avatar\");\r\n\t\t\tavatar = avatar == null ? \"\" : avatar;\r\n\t\t\tlet photo = sysUserGr.getValue(\"photo\");\r\n\t\t\tphoto = photo == null ? \"\" : photo;\r\n\t\t\tconst userAvatar = avatar || photo;\r\n\t\t\tthis.userAvatars[userSysId] = userAvatar ? userAvatar + \".iix\" : \"\";\r\n\t\t} else {\r\n\t\t\tthis.userAvatars[userSysId] = \"\";\r\n\t\t}\r\n\r\n\t\treturn this.userAvatars[userSysId];\r\n\t},\r\n\r\n\tgetChoice: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tchoices,\r\n\t\tfetchColors,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\tlimitResults = false,\r\n\t}) {\r\n\t\tconst icon = this.colors.icons[fieldValue] || false;\r\n\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=\" + table);\r\n\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\tchoiceGR.orderBy(\"value\");\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tchoiceGR.query();\r\n\t\twhile (choiceGR.next()) {\r\n\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\tvar color = \"\";\r\n\t\t\tvar className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\r\n\t\t\tchoices.push({\r\n\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\tvalue,\r\n\t\t\t\tcolor,\r\n\t\t\t\tclassName,\r\n\t\t\t\ticon,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!choices.length) {\r\n\t\t\tvar choiceGR = new GlideRecordSecure(\"sys_choice\");\r\n\t\t\tchoiceGR.addEncodedQuery(\"element=\" + fieldValue + \"^name=task\");\r\n\t\t\tchoiceGR.addQuery(\"inactive=false\");\r\n\t\t\tchoiceGR.addQuery(\"language=en\"); // TODO: Allow for multiple languages\r\n\t\t\tchoiceGR.orderBy(\"sequence\");\r\n\t\t\tchoiceGR.orderBy(\"value\");\r\n\t\t\tchoiceGR.query();\r\n\t\t\twhile (choiceGR.next()) {\r\n\t\t\t\tvar value = choiceGR.getValue(\"value\");\r\n\t\t\t\tvar color = \"\";\r\n\t\t\t\tvar className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tvar colors = this.colors[fieldValue][value];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchoices.push({\r\n\t\t\t\t\tlabel: choiceGR.getValue(\"label\"),\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\tchoices,\r\n\t\t\tisChoice,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetReference: function ({\r\n\t\tfieldName,\r\n\t\tfieldValue,\r\n\t\tfieldType,\r\n\t\ttable,\r\n\t\tisChoice,\r\n\t\tfetchColors,\r\n\t\ttableReferance,\r\n\t\tcanWrite,\r\n\t\tcanClear,\r\n\t\tmaxLength,\r\n\t\treferences,\r\n\t\tchoices,\r\n\t\tattributesOrderBy,\r\n\t\tadditionalFilterQuery = \"\",\r\n\t\treferenceQualifier = \"\",\r\n\t\tlimitResults = true,\r\n\t\tgroupByField = \"\",\r\n\t}) {\r\n\t\tconst referenceGR = new GlideRecordSecure(tableReferance);\r\n\t\tif (limitResults) {\r\n\t\t\treferenceGR.setLimit(12);\r\n\t\t}\r\n\t\tif (referenceQualifier) {\r\n\t\t\treferenceGR.addEncodedQuery(referenceQualifier);\r\n\t\t}\r\n\t\tif (additionalFilterQuery) {\r\n\t\t\treferenceGR.addEncodedQuery(additionalFilterQuery);\r\n\t\t}\r\n\t\tif (attributesOrderBy) {\r\n\t\t\treferenceGR.orderBy(attributesOrderBy);\r\n\t\t} else {\r\n\t\t\treferenceGR.orderBy(referenceGR.getDisplayName());\r\n\t\t}\r\n\t\treferenceGR.query();\r\n\t\twhile (referenceGR.next()) {\r\n\t\t\tlet data = {};\r\n\t\t\tlet tempGroupField = {};\r\n\t\t\tif (groupByField) {\r\n\t\t\t\ttempGroupField.value = referenceGR.getValue(groupByField);\r\n\t\t\t\ttempGroupField.displayValue = referenceGR.getDisplayValue(groupByField);\r\n\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t} else if (\r\n\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t) {\r\n\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\tlet color = \"\";\r\n\t\t\tlet className = \"\";\r\n\t\t\tif (fetchColors) {\r\n\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t}\r\n\t\t\tif (tableReferance === \"sys_user\") {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tavatar: this._getCachedAvatar(referenceGR.getValue(\"sys_id\")),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else if (\"x_cadso_work_status,x_cadso_work_project,x_cadso_work_campaign\".indexOf(tableReferance) > -1) {\r\n\t\t\t\tconst colorElement = tableReferance === \"x_cadso_work_status\" ? \"color\" : \"glyph_color\";\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\tcolor: referenceGR.getValue(colorElement),\r\n\t\t\t\t\trefTable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet label = referenceGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: referenceGR.getValue(\"sys_id\"),\r\n\t\t\t\t\trefRable: tableReferance,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treferences.push(data);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttype: fieldType,\r\n\t\t\tname: fieldName,\r\n\t\t\tvalue: fieldValue,\r\n\t\t\treferences,\r\n\t\t\trefTable: tableReferance,\r\n\t\t\tisChoice,\r\n\t\t\tchoices,\r\n\t\t\tmaxLength,\r\n\t\t\tcanWrite,\r\n\t\t\tcanClear,\r\n\t\t};\r\n\t},\r\n\r\n\tgetAdditionalFilterData: function (additionalFilter) {\r\n\t\tlet table = additionalFilter.filterTable;\r\n\t\tthis.table = table;\r\n\t\tlet fieldValue = additionalFilter.additionalFilterField;\r\n\t\tlet additionalFilterQuery = \"\";\r\n\t\tif (additionalFilter.customFilterOptions && additionalFilter.customFilterOptions.length) {\r\n\t\t\tadditionalFilterQuery = additionalFilter.customFilterOptions[0].query;\r\n\t\t}\r\n\r\n\t\tlet groupByField = additionalFilter.groupBy;\r\n\r\n\t\tthis.getColorsForField(\"\");\r\n\r\n\t\tconst fields = [];\r\n\t\tconst fieldChecker = new x_cadso_work.TenonListFIeldsToExclude();\r\n\t\tlet query = \"name=\" + table + \"^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" + fieldValue;\r\n\t\tif (\r\n\t\t\t\"x_cadso_work_project,x_cadso_work_campaign,x_cadso_work_goal,x_cadso_work_task,x_cadso_work_sprint,x_cadso_work_sprint_retro\".indexOf(\r\n\t\t\t\ttable,\r\n\t\t\t) > -1\r\n\t\t) {\r\n\t\t\tquery =\r\n\t\t\t\t\"name=\" +\r\n\t\t\t\ttable +\r\n\t\t\t\t\"^ORname=task^internal_type!=collection^ORinternal_type=NULL^active=true^element=\" +\r\n\t\t\t\tfieldValue;\r\n\t\t}\r\n\r\n\t\tlet referenceQualifier = \"\";\r\n\t\tlet attributesOrderBy = \"\";\r\n\t\tlet choices = [];\r\n\t\tlet references = [];\r\n\t\tlet fieldName = \"\";\r\n\t\tlet fieldType = \"\";\r\n\t\tlet maxLength = \"\";\r\n\t\tlet element = \"\";\r\n\t\tlet tableReferance = \"\";\r\n\t\tlet isChoice = false;\r\n\t\tlet attributesValuePairs = \"\";\r\n\t\tlet refAcOrderBy = \"\";\r\n\t\tlet refSequence = \"\";\r\n\r\n\t\tlet fetchColors = this.getColorsForField(fieldValue);\r\n\t\tconst tableOverridesGR = new GlideRecord(table);\r\n\t\ttableOverridesGR.orderBy(tableOverridesGR.getDisplayName());\r\n\t\ttableOverridesGR.setLimit(1);\r\n\t\ttableOverridesGR.query();\r\n\t\twhile (tableOverridesGR.next()) {\r\n\t\t\tvar tableName = \"\";\r\n\t\t\tconst tableFieldsGR = new GlideRecord(\"sys_dictionary\");\r\n\t\t\ttableFieldsGR.addEncodedQuery(query);\r\n\t\t\ttableFieldsGR.orderBy(\"column_label\");\r\n\t\t\ttableFieldsGR.query();\r\n\t\t\twhile (tableFieldsGR.next()) {\r\n\t\t\t\tfieldName = tableFieldsGR.getValue(\"column_label\");\r\n\t\t\t\tfieldValue = tableFieldsGR.getValue(\"element\");\r\n\t\t\t\tfieldType = tableFieldsGR.getValue(\"internal_type\");\r\n\t\t\t\tmaxLength = tableFieldsGR.getValue(\"max_length\");\r\n\t\t\t\telement = tableOverridesGR.getElement(fieldValue);\r\n\t\t\t\ttableReferance = tableFieldsGR.getValue(\"reference\");\r\n\t\t\t\t//check the overrides for the refQual\r\n\t\t\t\tconst refQualOverRideGR = new GlideRecord(\"sys_dictionary_override\");\r\n\t\t\t\trefQualOverRideGR.addEncodedQuery(\"name=\" + table + \"^element=\" + fieldValue);\r\n\t\t\t\trefQualOverRideGR.query();\r\n\t\t\t\twhile (refQualOverRideGR.next()) {\r\n\t\t\t\t\tif (refQualOverRideGR.getValue(\"reference_qual_override\") + \"\" === \"1\") {\r\n\t\t\t\t\t\tif (!refQualOverRideGR.getValue(\"reference_qual\").includes(\"javascript:\")) {\r\n\t\t\t\t\t\t\treferenceQualifier = refQualOverRideGR.getValue(\"reference_qual\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributesValuePairs = tableFieldsGR.getValue(\"attributes\");\r\n\t\t\t\trefAcOrderBy = \"\";\r\n\t\t\t\trefSequence = \"\";\r\n\t\t\t\tif (attributesValuePairs) {\r\n\t\t\t\t\tattributesValuePairs = attributesValuePairs.split(\",\");\r\n\t\t\t\t\tattributesValuePairs.forEach((pair) => {\r\n\t\t\t\t\t\tconst [key, value] = pair.split(\"=\");\r\n\t\t\t\t\t\tif (key === \"ref_ac_order_by\") {\r\n\t\t\t\t\t\t\trefAcOrderBy = value;\r\n\t\t\t\t\t\t} else if (key === \"ref_sequence\") {\r\n\t\t\t\t\t\t\trefSequence = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tattributesOrderBy = refAcOrderBy !== \"\" ? refAcOrderBy : refSequence !== \"\" ? refSequence : \"\";\r\n\t\t\t\tlet fieldOverrideLabel = fieldName;\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tfieldOverrideLabel = element.getLabel();\r\n\t\t\t\t}\r\n\t\t\t\tfieldName = fieldOverrideLabel;\r\n\r\n\t\t\t\tvar edCheck = typeof element === \"object\" && element.getED && typeof element.getED === \"function\";\r\n\t\t\t\tif (edCheck) {\r\n\t\t\t\t\tvar elmEd = element.getED();\r\n\t\t\t\t\tisChoice = elmEd.isChoiceTable();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (fieldType !== \"reference\" && fieldType !== \"choice\") {\r\n\t\t\tlet choices = [];\r\n\t\t\tlet references = [];\r\n\r\n\t\t\tlet additionalFilterGR = new GlideRecord(table);\r\n\t\t\t// additionalFilterGR.addEncodedQuery();\r\n\t\t\tif (fieldValue) {\r\n\t\t\t\tadditionalFilterGR.orderBy(fieldValue);\r\n\t\t\t}\r\n\t\t\tadditionalFilterGR.query();\r\n\t\t\twhile (additionalFilterGR.next()) {\r\n\t\t\t\tif (!fieldValue) {\r\n\t\t\t\t\tfieldValue = additionalFilterGR.getDisplayName();\r\n\t\t\t\t}\r\n\t\t\t\tlet label = additionalFilterGR.getDisplayValue();\r\n\t\t\t\tif (!label) {\r\n\t\t\t\t\tlabel = \"Empty \" + fieldName;\r\n\t\t\t\t}\r\n\t\t\t\tconst icon = this.colors.icons[tableReferance] || false;\r\n\t\t\t\tlet color = \"\";\r\n\t\t\t\tlet className = \"\";\r\n\t\t\t\tif (fetchColors) {\r\n\t\t\t\t\tconst colors = this.colors[element][referenceGR.getValue(\"value\")];\r\n\t\t\t\t\tcolor = colors ? colors.color : false;\r\n\t\t\t\t\tclassName = colors ? colors.className : false;\r\n\t\t\t\t}\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tvalue: additionalFilterGR.getValue(\"sys_id\"),\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t};\r\n\t\t\t\tlet tempGroupField = {};\r\n\t\t\t\tif (groupByField) {\r\n\t\t\t\t\ttempGroupField.value = additionalFilterGR.getValue(groupByField);\r\n\t\t\t\t\ttempGroupField.displayValue = additionalFilterGR.getDisplayValue(groupByField);\r\n\t\t\t\t\tif (tempGroupField.value === null || tempGroupField.value === \"null\") {\r\n\t\t\t\t\t\ttempGroupField.value = \"\";\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\ttempGroupField.displayValue === undefined ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"\" ||\r\n\t\t\t\t\t\ttempGroupField.displayValue === \"undefined\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\ttempGroupField.displayValue = \"Empty\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.groupBy = tempGroupField;\r\n\t\t\t\t}\r\n\t\t\t\treferences.push(data);\r\n\t\t\t}\r\n\t\t\tadditionalFilter.fieldData = {\r\n\t\t\t\ttype: fieldType,\r\n\t\t\t\tname: fieldName,\r\n\t\t\t\tvalue: fieldValue,\r\n\t\t\t\treferences,\r\n\t\t\t\trefTable: tableReferance,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tchoices,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tcanWrite: false,\r\n\t\t\t\tcanClear: false,\r\n\t\t\t};\r\n\t\t} else if (fieldType === \"reference\") {\r\n\t\t\tadditionalFilter.fieldData = this.getReference({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfieldChecker,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\ttableReferance,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear: false,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\treferences,\r\n\t\t\t\tchoices,\r\n\t\t\t\tattributesOrderBy,\r\n\t\t\t\treferenceQualifier,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t\tgroupByField,\r\n\t\t\t\tadditionalFilterQuery,\r\n\t\t\t});\r\n\t\t} else if (fieldType === \"choice\") {\r\n\t\t\tadditionalFilter.fieldData = this.getChoice({\r\n\t\t\t\tfieldName,\r\n\t\t\t\tfieldValue,\r\n\t\t\t\tfieldType,\r\n\t\t\t\ttable,\r\n\t\t\t\tisChoice,\r\n\t\t\t\tfetchColors,\r\n\t\t\t\tchoices,\r\n\t\t\t\tcanWrite: tableOverridesGR[fieldValue].canWrite(),\r\n\t\t\t\tcanClear,\r\n\t\t\t\tmaxLength,\r\n\t\t\t\tlimitResults: false,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn additionalFilter;\r\n\t},\r\n\r\n\ttype: \"GetTableDropdownsDataMS\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_c1a00fd0474b751098519fd8036d43e9",
    "display_value": "sys_script_include_c1a00fd0474b751098519fd8036d43e9"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "api_name": {
    "value": "x_cadso_work.GetTableDropdownsDataMS",
    "display_value": "x_cadso_work.GetTableDropdownsDataMS"
  },
  "sys_created_on": {
    "value": "2023-12-07 20:36:13",
    "display_value": "2023-12-07 12:36:13 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "GetTableDropdownsDataMS",
    "display_value": "GetTableDropdownsDataMS"
  },
  "sys_name": {
    "value": "GetTableDropdownsDataMS",
    "display_value": "GetTableDropdownsDataMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
