{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "8fcbbd1987876510b656fe66cebb3579",
    "extracted_at": "2025-09-19T21:48:31.589Z",
    "display_value": "UIFilterApiMS",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "102",
    "display_value": "102"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-01-02 23:01:52",
    "display_value": "2025-01-02 03:01:52 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var UIFilterApiMS = Class.create();\r\nUIFilterApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.searchField = null;\r\n\t\tthis.query = null;\r\n\t\tthis.listTable = null;\r\n\t\tthis.field = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.groupBy = false;\r\n\t\tthis.groupByField = '';\r\n\t\tthis.sortBy = '';\r\n\t\tthis.choiceList = false;\r\n\t\tthis.choiceListField = '';\r\n\t\tthis.m2mEnabled = false;\r\n\t\tthis.m2mTable = null;\r\n\t\tthis.m2mFilterField = null;\r\n\t\tthis.m2mListField = null;\r\n\t},\r\n\r\n\r\n\tgetFilters: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { filterTable,\r\n\t\t\t filterField,\r\n\t\t\t searchField,\r\n\t\t\t query,\r\n\t\t\t filtergroupBy, \r\n\t\t\t filtergroupByField, \r\n\t\t\t listTable, \r\n\t\t\t choiceList, \r\n\t\t\t choiceListField,\r\n\t\t\t m2mEnabled,\r\n\t\t\t m2mTable,\r\n\t\t\t m2mFilterField,\r\n\t\t\t m2mListField,\r\n\t\t\t} = queryParams;\r\n\r\n\t\tthis.table = filterTable;\r\n\t\tthis.field = filterField;\r\n\t\tthis.groupBy = filtergroupBy;\r\n\t\tthis.groupByField = filtergroupByField;\r\n\t\tthis.choiceList = choiceList;\r\n\t\tthis.choiceListField = choiceListField;\r\n\t\tthis.sortBy = '';\r\n\t\tthis.listTable = listTable;\r\n\t\tthis.m2mEnabled = m2mEnabled;\r\n\t\tthis.m2mTable = m2mTable;\r\n\t\tthis.m2mFilterField = m2mFilterField;\r\n\t\tthis.m2mListField = m2mListField;\r\n\t\tthis.searchField = searchField;\r\n\t\tthis.query = query;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tfilter: {},\r\n\t\t\tlabels: [],\r\n\t\t};\r\n\r\n\t\tgs.info(\"m2mEnabled : \" + this.m2mEnabled)\r\n\t\tgs.info(\"m2mEnabled typeof true: \" +  (this.m2mEnabled == true))\r\n\t\tgs.info(\"m2mEnabled typeof 'true': \" +  (this.m2mEnabled == \"true\"))\r\n\r\n\t\tgs.info(\"m2mTable : \" + this.m2mTable)\r\n\t\tgs.info(\"m2mFilterField : \" + this.m2mFilterField)\r\n\t\tgs.info(\"m2mListField : \" + this.m2mListField) \r\n\r\n\t\tif(this.choiceList == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getChoiceListFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse if(this.m2mEnabled == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getM2MFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getfilters();\r\n\t\t\tdata.queryColumnName = this.field;\r\n\t\t}\r\n\r\n\t\tdata.filter.filterGroup = this._getTableName(filterTable);\r\n\t\tdata.query = this.query;\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getfilters: function() {\r\n\r\n\t\tconst filterGR = new GlideRecord(this.table);\r\n\t\t//filterGR.orderBy(this.field);\r\n\t\tfilterGR.orderBy(filterGR.getDisplayName());\r\n\t\tif(this.searchField && this.query){\r\n\t\t\tfilterGR.addEncodedQuery(this.searchField+\"LIKE\"+this.query);\r\n\t\t}\r\n\t\tfilterGR.setLimit(12);\r\n\t\tfilterGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(filterGR.next() && filterGR.canRead())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = filterGR.getValue(\"sys_id\");\r\n\t\t\titem.displayValue = filterGR.getDisplayValue();\r\n\t\t\t// \t\t\titem.element = {\r\n\t\t\t// \t\t\t\tlabel : filterGR.getElement(this.field).getLabel(),\r\n\t\t\t// \t\t\t\tchoices : filterGR.getElement(this.field).getChoices(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\r\n\t\t\t// \t\t\t} \r\n\r\n\r\n\t\t\tif(this.groupBy)\r\n\t\t\t{\r\n\t\t\t\titem[this.groupByField] = filterGR.getDisplayValue(this.groupByField);\r\n\t\t\t\tif(item[this.groupByField] === \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem[this.groupByField] = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getTableName: function(tableName) {\r\n\r\n\t\tconst tableNameGR = new GlideRecord(\"sys_db_object\");\r\n\t\ttableNameGR.addEncodedQuery(\"name=\" + tableName);\r\n\t\ttableNameGR.query();\r\n\r\n\t\tvar name = \"\";\r\n\t\twhile(tableNameGR.next())\r\n\t\t{\r\n\t\t\tname = tableNameGR.getDisplayValue(\"label\");\r\n\t\t}\r\n\t\treturn name;\r\n\t},\r\n\t_getQueryColumnName: function(filterTable, listTable) {\r\n\r\n\t\tconst columnNameGR = new GlideRecord(\"sys_dictionary\");\r\n\t\tcolumnNameGR.addEncodedQuery(\"name=\" + listTable + \"^reference=\" + filterTable);\r\n\t\tcolumnNameGR.query();\r\n\r\n\t\tvar columnName = \"\";\r\n\t\twhile(columnNameGR.next())\r\n\t\t{\r\n\t\t\tcolumnName = columnNameGR.getValue(\"element\");\r\n\t\t}\r\n\t\treturn columnName;\r\n\t},\r\n\t_getChoiceListFilter: function() {\t\t\r\n\t\tconst choiceListGR = new GlideRecord(\"sys_choice\");\r\n\t\tchoiceListGR.addEncodedQuery(\"element=\" + this.choiceListField + \"^name=\" + this.listTable);\r\n\t\tchoiceListGR.orderBy(\"sequence\");\r\n\t\tchoiceListGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(choiceListGR.next())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = choiceListGR.getValue(\"value\");\r\n\t\t\titem.displayValue = choiceListGR.getDisplayValue();\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getM2MFilter: function() {\r\n\r\n\r\n\t\tgs.info(\"HERE\")\r\n\r\n\t\tconst groupByGR = new GlideAggregate(this.m2mTable);\r\n\t\tgroupByGR.groupBy(this.m2mFilterField);\r\n\t\tgroupByGR.query();\r\n\r\n\t\tconst items = [];\r\n\t\twhile(groupByGR.next())\r\n\t\t{\r\n\t\t\tgs.info(\"tempQuery : \" + groupByGR.getDisplayValue(this.m2mFilterField) )\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.displayValue = groupByGR.getDisplayValue(this.m2mFilterField);\r\n\r\n\t\t\tgs.info(\"addEncodedQuery : \" + this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField) )\r\n\r\n\t\t\tconst filterGR = new GlideRecord(this.m2mTable);\r\n\t\t\tfilterGR.addEncodedQuery(this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField));\r\n\t\t\tfilterGR.query();\r\n\r\n\t\t\tvar tempQuery = \"\"\r\n\t\t\twhile(filterGR.next())\r\n\t\t\t{\r\n\t\t\t\ttempQuery += \"sys_id\" + \"=\" + filterGR.getValue(this.m2mListField) + \"^OR\";\r\n\r\n\r\n\t\t\t}\r\n\t\t\tgs.info(\"tempQuery : \" + tempQuery )\r\n\t\t\titem.query = tempQuery;\r\n\t\t\titems.push(item);\r\n\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\r\n\ttype: 'UIFilterApiMS'\r\n};",
    "display_value": "var UIFilterApiMS = Class.create();\r\nUIFilterApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.searchField = null;\r\n\t\tthis.query = null;\r\n\t\tthis.listTable = null;\r\n\t\tthis.field = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.groupBy = false;\r\n\t\tthis.groupByField = '';\r\n\t\tthis.sortBy = '';\r\n\t\tthis.choiceList = false;\r\n\t\tthis.choiceListField = '';\r\n\t\tthis.m2mEnabled = false;\r\n\t\tthis.m2mTable = null;\r\n\t\tthis.m2mFilterField = null;\r\n\t\tthis.m2mListField = null;\r\n\t},\r\n\r\n\r\n\tgetFilters: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { filterTable,\r\n\t\t\t filterField,\r\n\t\t\t searchField,\r\n\t\t\t query,\r\n\t\t\t filtergroupBy, \r\n\t\t\t filtergroupByField, \r\n\t\t\t listTable, \r\n\t\t\t choiceList, \r\n\t\t\t choiceListField,\r\n\t\t\t m2mEnabled,\r\n\t\t\t m2mTable,\r\n\t\t\t m2mFilterField,\r\n\t\t\t m2mListField,\r\n\t\t\t} = queryParams;\r\n\r\n\t\tthis.table = filterTable;\r\n\t\tthis.field = filterField;\r\n\t\tthis.groupBy = filtergroupBy;\r\n\t\tthis.groupByField = filtergroupByField;\r\n\t\tthis.choiceList = choiceList;\r\n\t\tthis.choiceListField = choiceListField;\r\n\t\tthis.sortBy = '';\r\n\t\tthis.listTable = listTable;\r\n\t\tthis.m2mEnabled = m2mEnabled;\r\n\t\tthis.m2mTable = m2mTable;\r\n\t\tthis.m2mFilterField = m2mFilterField;\r\n\t\tthis.m2mListField = m2mListField;\r\n\t\tthis.searchField = searchField;\r\n\t\tthis.query = query;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tfilter: {},\r\n\t\t\tlabels: [],\r\n\t\t};\r\n\r\n\t\tgs.info(\"m2mEnabled : \" + this.m2mEnabled)\r\n\t\tgs.info(\"m2mEnabled typeof true: \" +  (this.m2mEnabled == true))\r\n\t\tgs.info(\"m2mEnabled typeof 'true': \" +  (this.m2mEnabled == \"true\"))\r\n\r\n\t\tgs.info(\"m2mTable : \" + this.m2mTable)\r\n\t\tgs.info(\"m2mFilterField : \" + this.m2mFilterField)\r\n\t\tgs.info(\"m2mListField : \" + this.m2mListField) \r\n\r\n\t\tif(this.choiceList == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getChoiceListFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse if(this.m2mEnabled == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getM2MFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getfilters();\r\n\t\t\tdata.queryColumnName = this.field;\r\n\t\t}\r\n\r\n\t\tdata.filter.filterGroup = this._getTableName(filterTable);\r\n\t\tdata.query = this.query;\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getfilters: function() {\r\n\r\n\t\tconst filterGR = new GlideRecord(this.table);\r\n\t\t//filterGR.orderBy(this.field);\r\n\t\tfilterGR.orderBy(filterGR.getDisplayName());\r\n\t\tif(this.searchField && this.query){\r\n\t\t\tfilterGR.addEncodedQuery(this.searchField+\"LIKE\"+this.query);\r\n\t\t}\r\n\t\tfilterGR.setLimit(12);\r\n\t\tfilterGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(filterGR.next() && filterGR.canRead())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = filterGR.getValue(\"sys_id\");\r\n\t\t\titem.displayValue = filterGR.getDisplayValue();\r\n\t\t\t// \t\t\titem.element = {\r\n\t\t\t// \t\t\t\tlabel : filterGR.getElement(this.field).getLabel(),\r\n\t\t\t// \t\t\t\tchoices : filterGR.getElement(this.field).getChoices(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\r\n\t\t\t// \t\t\t} \r\n\r\n\r\n\t\t\tif(this.groupBy)\r\n\t\t\t{\r\n\t\t\t\titem[this.groupByField] = filterGR.getDisplayValue(this.groupByField);\r\n\t\t\t\tif(item[this.groupByField] === \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem[this.groupByField] = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getTableName: function(tableName) {\r\n\r\n\t\tconst tableNameGR = new GlideRecord(\"sys_db_object\");\r\n\t\ttableNameGR.addEncodedQuery(\"name=\" + tableName);\r\n\t\ttableNameGR.query();\r\n\r\n\t\tvar name = \"\";\r\n\t\twhile(tableNameGR.next())\r\n\t\t{\r\n\t\t\tname = tableNameGR.getDisplayValue(\"label\");\r\n\t\t}\r\n\t\treturn name;\r\n\t},\r\n\t_getQueryColumnName: function(filterTable, listTable) {\r\n\r\n\t\tconst columnNameGR = new GlideRecord(\"sys_dictionary\");\r\n\t\tcolumnNameGR.addEncodedQuery(\"name=\" + listTable + \"^reference=\" + filterTable);\r\n\t\tcolumnNameGR.query();\r\n\r\n\t\tvar columnName = \"\";\r\n\t\twhile(columnNameGR.next())\r\n\t\t{\r\n\t\t\tcolumnName = columnNameGR.getValue(\"element\");\r\n\t\t}\r\n\t\treturn columnName;\r\n\t},\r\n\t_getChoiceListFilter: function() {\t\t\r\n\t\tconst choiceListGR = new GlideRecord(\"sys_choice\");\r\n\t\tchoiceListGR.addEncodedQuery(\"element=\" + this.choiceListField + \"^name=\" + this.listTable);\r\n\t\tchoiceListGR.orderBy(\"sequence\");\r\n\t\tchoiceListGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(choiceListGR.next())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = choiceListGR.getValue(\"value\");\r\n\t\t\titem.displayValue = choiceListGR.getDisplayValue();\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getM2MFilter: function() {\r\n\r\n\r\n\t\tgs.info(\"HERE\")\r\n\r\n\t\tconst groupByGR = new GlideAggregate(this.m2mTable);\r\n\t\tgroupByGR.groupBy(this.m2mFilterField);\r\n\t\tgroupByGR.query();\r\n\r\n\t\tconst items = [];\r\n\t\twhile(groupByGR.next())\r\n\t\t{\r\n\t\t\tgs.info(\"tempQuery : \" + groupByGR.getDisplayValue(this.m2mFilterField) )\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.displayValue = groupByGR.getDisplayValue(this.m2mFilterField);\r\n\r\n\t\t\tgs.info(\"addEncodedQuery : \" + this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField) )\r\n\r\n\t\t\tconst filterGR = new GlideRecord(this.m2mTable);\r\n\t\t\tfilterGR.addEncodedQuery(this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField));\r\n\t\t\tfilterGR.query();\r\n\r\n\t\t\tvar tempQuery = \"\"\r\n\t\t\twhile(filterGR.next())\r\n\t\t\t{\r\n\t\t\t\ttempQuery += \"sys_id\" + \"=\" + filterGR.getValue(this.m2mListField) + \"^OR\";\r\n\r\n\r\n\t\t\t}\r\n\t\t\tgs.info(\"tempQuery : \" + tempQuery )\r\n\t\t\titem.query = tempQuery;\r\n\t\t\titems.push(item);\r\n\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\r\n\ttype: 'UIFilterApiMS'\r\n};",
    "formatted_script": {
      "line_count": 225,
      "char_count": 5755,
      "preview": "var UIFilterApiMS = Class.create();\r\nUIFilterApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.searchField = null;\r\n\t\tthis.query = null;\r\n\t\tthis.listTable = null;\r\n\t\tthis.fi...",
      "full_script": "var UIFilterApiMS = Class.create();\r\nUIFilterApiMS.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.table = null;\r\n\t\tthis.searchField = null;\r\n\t\tthis.query = null;\r\n\t\tthis.listTable = null;\r\n\t\tthis.field = null;\r\n\t\tthis.query = null;\r\n\t\tthis.labels = [];\r\n\t\tthis.groupBy = false;\r\n\t\tthis.groupByField = '';\r\n\t\tthis.sortBy = '';\r\n\t\tthis.choiceList = false;\r\n\t\tthis.choiceListField = '';\r\n\t\tthis.m2mEnabled = false;\r\n\t\tthis.m2mTable = null;\r\n\t\tthis.m2mFilterField = null;\r\n\t\tthis.m2mListField = null;\r\n\t},\r\n\r\n\r\n\tgetFilters: function(request, response) {\r\n\t\tconst { queryParams } = request;\r\n\t\tlet { filterTable,\r\n\t\t\t filterField,\r\n\t\t\t searchField,\r\n\t\t\t query,\r\n\t\t\t filtergroupBy, \r\n\t\t\t filtergroupByField, \r\n\t\t\t listTable, \r\n\t\t\t choiceList, \r\n\t\t\t choiceListField,\r\n\t\t\t m2mEnabled,\r\n\t\t\t m2mTable,\r\n\t\t\t m2mFilterField,\r\n\t\t\t m2mListField,\r\n\t\t\t} = queryParams;\r\n\r\n\t\tthis.table = filterTable;\r\n\t\tthis.field = filterField;\r\n\t\tthis.groupBy = filtergroupBy;\r\n\t\tthis.groupByField = filtergroupByField;\r\n\t\tthis.choiceList = choiceList;\r\n\t\tthis.choiceListField = choiceListField;\r\n\t\tthis.sortBy = '';\r\n\t\tthis.listTable = listTable;\r\n\t\tthis.m2mEnabled = m2mEnabled;\r\n\t\tthis.m2mTable = m2mTable;\r\n\t\tthis.m2mFilterField = m2mFilterField;\r\n\t\tthis.m2mListField = m2mListField;\r\n\t\tthis.searchField = searchField;\r\n\t\tthis.query = query;\r\n\r\n\t\tlet data = {\r\n\t\t\tmessage: 'Success!',\r\n\t\t\tstatusCode: 200,\r\n\t\t\tfilter: {},\r\n\t\t\tlabels: [],\r\n\t\t};\r\n\r\n\t\tgs.info(\"m2mEnabled : \" + this.m2mEnabled)\r\n\t\tgs.info(\"m2mEnabled typeof true: \" +  (this.m2mEnabled == true))\r\n\t\tgs.info(\"m2mEnabled typeof 'true': \" +  (this.m2mEnabled == \"true\"))\r\n\r\n\t\tgs.info(\"m2mTable : \" + this.m2mTable)\r\n\t\tgs.info(\"m2mFilterField : \" + this.m2mFilterField)\r\n\t\tgs.info(\"m2mListField : \" + this.m2mListField) \r\n\r\n\t\tif(this.choiceList == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getChoiceListFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse if(this.m2mEnabled == 'true')\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getM2MFilter();\r\n\t\t\tdata.queryColumnName = this.choiceListField;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdata.filter.list = this._getfilters();\r\n\t\t\tdata.queryColumnName = this.field;\r\n\t\t}\r\n\r\n\t\tdata.filter.filterGroup = this._getTableName(filterTable);\r\n\t\tdata.query = this.query;\r\n\r\n\t\tresponse.setStatus(data.statusCode);\r\n\t\tresponse.setBody(data);\r\n\t\treturn response;\r\n\t},\r\n\r\n\t_getfilters: function() {\r\n\r\n\t\tconst filterGR = new GlideRecord(this.table);\r\n\t\t//filterGR.orderBy(this.field);\r\n\t\tfilterGR.orderBy(filterGR.getDisplayName());\r\n\t\tif(this.searchField && this.query){\r\n\t\t\tfilterGR.addEncodedQuery(this.searchField+\"LIKE\"+this.query);\r\n\t\t}\r\n\t\tfilterGR.setLimit(12);\r\n\t\tfilterGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(filterGR.next() && filterGR.canRead())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = filterGR.getValue(\"sys_id\");\r\n\t\t\titem.displayValue = filterGR.getDisplayValue();\r\n\t\t\t// \t\t\titem.element = {\r\n\t\t\t// \t\t\t\tlabel : filterGR.getElement(this.field).getLabel(),\r\n\t\t\t// \t\t\t\tchoices : filterGR.getElement(this.field).getChoices(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\t\t\t// \t\t\t\ttype : filterGR.getElement(this.field).getED().getInternalType(),\r\n\r\n\t\t\t// \t\t\t} \r\n\r\n\r\n\t\t\tif(this.groupBy)\r\n\t\t\t{\r\n\t\t\t\titem[this.groupByField] = filterGR.getDisplayValue(this.groupByField);\r\n\t\t\t\tif(item[this.groupByField] === \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\titem[this.groupByField] = \"Empty\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getTableName: function(tableName) {\r\n\r\n\t\tconst tableNameGR = new GlideRecord(\"sys_db_object\");\r\n\t\ttableNameGR.addEncodedQuery(\"name=\" + tableName);\r\n\t\ttableNameGR.query();\r\n\r\n\t\tvar name = \"\";\r\n\t\twhile(tableNameGR.next())\r\n\t\t{\r\n\t\t\tname = tableNameGR.getDisplayValue(\"label\");\r\n\t\t}\r\n\t\treturn name;\r\n\t},\r\n\t_getQueryColumnName: function(filterTable, listTable) {\r\n\r\n\t\tconst columnNameGR = new GlideRecord(\"sys_dictionary\");\r\n\t\tcolumnNameGR.addEncodedQuery(\"name=\" + listTable + \"^reference=\" + filterTable);\r\n\t\tcolumnNameGR.query();\r\n\r\n\t\tvar columnName = \"\";\r\n\t\twhile(columnNameGR.next())\r\n\t\t{\r\n\t\t\tcolumnName = columnNameGR.getValue(\"element\");\r\n\t\t}\r\n\t\treturn columnName;\r\n\t},\r\n\t_getChoiceListFilter: function() {\t\t\r\n\t\tconst choiceListGR = new GlideRecord(\"sys_choice\");\r\n\t\tchoiceListGR.addEncodedQuery(\"element=\" + this.choiceListField + \"^name=\" + this.listTable);\r\n\t\tchoiceListGR.orderBy(\"sequence\");\r\n\t\tchoiceListGR.query();\r\n\r\n\t\tconst items = [];\r\n\r\n\t\twhile(choiceListGR.next())\r\n\t\t{\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.query = choiceListGR.getValue(\"value\");\r\n\t\t\titem.displayValue = choiceListGR.getDisplayValue();\r\n\r\n\r\n\t\t\titems.push(item);\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t},\r\n\t_getM2MFilter: function() {\r\n\r\n\r\n\t\tgs.info(\"HERE\")\r\n\r\n\t\tconst groupByGR = new GlideAggregate(this.m2mTable);\r\n\t\tgroupByGR.groupBy(this.m2mFilterField);\r\n\t\tgroupByGR.query();\r\n\r\n\t\tconst items = [];\r\n\t\twhile(groupByGR.next())\r\n\t\t{\r\n\t\t\tgs.info(\"tempQuery : \" + groupByGR.getDisplayValue(this.m2mFilterField) )\r\n\t\t\tconst item = {};\r\n\t\t\titem.table = this.table;\r\n\t\t\titem.displayValue = groupByGR.getDisplayValue(this.m2mFilterField);\r\n\r\n\t\t\tgs.info(\"addEncodedQuery : \" + this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField) )\r\n\r\n\t\t\tconst filterGR = new GlideRecord(this.m2mTable);\r\n\t\t\tfilterGR.addEncodedQuery(this.m2mFilterField + \"=\" + groupByGR.getValue(this.m2mFilterField));\r\n\t\t\tfilterGR.query();\r\n\r\n\t\t\tvar tempQuery = \"\"\r\n\t\t\twhile(filterGR.next())\r\n\t\t\t{\r\n\t\t\t\ttempQuery += \"sys_id\" + \"=\" + filterGR.getValue(this.m2mListField) + \"^OR\";\r\n\r\n\r\n\t\t\t}\r\n\t\t\tgs.info(\"tempQuery : \" + tempQuery )\r\n\t\t\titem.query = tempQuery;\r\n\t\t\titems.push(item);\r\n\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\r\n\ttype: 'UIFilterApiMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_8fcbbd1987876510b656fe66cebb3579",
    "display_value": "sys_script_include_8fcbbd1987876510b656fe66cebb3579"
  },
  "sys_updated_by": {
    "value": "rumman.tariq",
    "display_value": "rumman.tariq"
  },
  "api_name": {
    "value": "x_cadso_work.UIFilterApiMS",
    "display_value": "x_cadso_work.UIFilterApiMS"
  },
  "sys_created_on": {
    "value": "2023-05-25 21:27:01",
    "display_value": "2023-05-25 02:27:01 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "UIFilterApiMS",
    "display_value": "UIFilterApiMS"
  },
  "sys_name": {
    "value": "UIFilterApiMS",
    "display_value": "UIFilterApiMS"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
