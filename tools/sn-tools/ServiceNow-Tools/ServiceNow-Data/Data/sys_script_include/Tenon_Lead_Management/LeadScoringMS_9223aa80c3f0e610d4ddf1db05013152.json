{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "9223aa80c3f0e610d4ddf1db05013152",
    "extracted_at": "2025-09-19T21:48:28.999Z",
    "display_value": "LeadScoringMS",
    "application": "Tenon_Lead_Management",
    "scope": {
      "display_value": "Tenon Lead Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/d7d2017bc3646610d4ddf1db050131db",
      "value": "d7d2017bc3646610d4ddf1db050131db"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "472",
    "display_value": "472"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-11 14:40:28",
    "display_value": "2025-07-11 07:40:28 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var LeadScoringMS = Class.create();\r\nLeadScoringMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    getScore: function(event, eventType) {\r\n        var score = 0;\r\n        var eventField = eventType == 'email' ? 'email_event.value' : eventType == 'message' ? 'message_event.value' : 'activity_type';\r\n\r\n        if (event && eventType) {\r\n            var leadDefGR = new GlideRecordSecure('x_cadso_lead_event_score_definition');\r\n            leadDefGR.addQuery('active', true);\r\n            leadDefGR.addEncodedQuery('event_definition.' + eventField + '=' + event);\r\n            leadDefGR.addQuery('event_type.value', eventType);\r\n            leadDefGR.setLimit(1);\r\n            leadDefGR.query();\r\n            if (leadDefGR.next()) {\r\n                score = leadDefGR.getValue('score');\r\n                score = parseInt(score);\r\n            }\r\n        }\r\n        return score;\r\n    },\r\n\r\n    hashStringToIndex: function(sysId, arraySize) {\r\n        let hash = 0;\r\n        for (let i = 0; i < sysId.length; i++) {\r\n            const char = sysId.charCodeAt(i);\r\n            hash = (hash << 5) - hash + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n\r\n        return Math.abs(hash) % arraySize;\r\n    },\r\n\r\n\r\n    calculateScores: function() {\r\n        try {\r\n            const leadScoringEnabled = this.getProperty(\"x_cadso_lead.tenon_marketing_lead_scoring\") || \"false\";\r\n            const useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n            //Check if lead scoring is enabled\r\n            if (leadScoringEnabled == \"false\") {\r\n                return;\r\n            }\r\n            let scoreData = [];\r\n            let totalScore = 0;\r\n            let currentScore = 0;\r\n            let newScore = 0;\r\n            let marketScore = 0;\r\n            let salesScore = 0;\r\n            let newMarketScore = 0;\r\n            let newSalesScore = 0;\r\n            let scoreTypeArr = [];\r\n            let leadRatings = this.getLeadRating();\r\n\r\n            let currentDate = new GlideDate();\r\n            let sysIdArr = [];\r\n            let leadEvents = [];\r\n            let eventHash = new Map();\r\n            let x = 0;\r\n\r\n            let leadEventGR = new GlideRecord(\"x_cadso_lead_event\");\r\n            leadEventGR.addEncodedQuery(\"lead!=NULL^lead.stage!=400_closed_won\");\r\n            leadEventGR.query();\r\n            while (leadEventGR.next()) {\r\n\r\n                let lead = leadEventGR.getValue(\"lead\");\r\n                let type = leadEventGR.getValue(\"event_type\");\r\n                let leadEvent = leadEventGR.getValue(\"event\");\r\n                let score = parseInt(leadEventGR.getValue(\"score\"));\r\n                if (type === \"message\" || type === \"email\") {\r\n                    type = \"marketing\";\r\n                }\r\n                sysIdArr.push(lead);\r\n                if (!eventHash.has(lead)) {\r\n                    eventHash.set(lead, {\r\n                        lead,\r\n                        eventObj: [{\r\n                            event: leadEvent,\r\n                            type: type,\r\n                            score: score,\r\n                        }, ],\r\n                        message: \"Update for \" + currentDate + \":\\n1. \" + this.pushWorkNotes(type, leadEvent, score),\r\n                        totalScore: score,\r\n                        eventAggregate: {\r\n                            marketing: type === \"marketing\" ? score : 0,\r\n                            custom: type === \"custom\" ? score : 0,\r\n                        },\r\n                    });\r\n                } else {\r\n                    let entry = eventHash.get(lead);\r\n                    entry.eventObj.push({\r\n                        event: leadEvent,\r\n                        type: type,\r\n                        score: score,\r\n                    });\r\n                    entry.message += \"\\n\" + (entry.eventObj.length) + \". \" + this.pushWorkNotes(type, leadEvent, score);\r\n                    entry.totalScore += score;\r\n                    entry.eventAggregate[type] += score;\r\n                }\r\n                x++;\r\n            }\r\n\r\n            //Calculate all leads with no scores\r\n            var emptyLeadGR = new GlideRecord('sn_lead_mgmt_core_lead');\r\n            emptyLeadGR.addQuery('lead_score', 'NULL');\r\n            emptyLeadGR.setValue('lead_score', 0);\r\n            emptyLeadGR.setValue('lead_rating', '100_cold');\r\n            emptyLeadGR.setValue('x_cadso_lead_marketing_sales_action', '');\r\n            emptyLeadGR.updateMultiple();\r\n\t\t\t\r\n\t\t\t//No need to query if there are no events\r\n            if (hashEvent.size == 0) {\r\n                return;\r\n            }\r\n            var leadUpdateGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            x = 0;\r\n            let queryArr = [];\r\n            let querylength = 0;\r\n            let y = 0;\r\n            let total = eventHash.size;\r\n            let count = 0;\r\n            for (let [key, value] of eventHash) {\r\n                count++;\r\n                queryArr.push(value.lead);\r\n                querylength += value.lead.length + 1;\r\n\r\n                if (querylength > 30000000 || count >= total) {\r\n                    let stringQuery = \"sys_idIN\" + queryArr.join(',');\r\n                    leadUpdateGR.addEncodedQuery(stringQuery);\r\n                    queryArr = [];\r\n                    querylength = 0;\r\n                    y++;\r\n                }\r\n            }\r\n\r\n            leadUpdateGR.query();\r\n            while (leadUpdateGR.next()) {\r\n\r\n                const leadID = leadUpdateGR.getValue('sys_id');\r\n\r\n                if (eventHash.has(leadID)) {\r\n                    let hashedEvent = eventHash.get(leadID);\r\n\r\n                    const addedMarketScore = hashedEvent.eventAggregate.marketing;\r\n                    const addedCustomScore = hashedEvent.eventAggregate.custom;\r\n                    const message = hashedEvent.message;\r\n                    const totalScore = hashedEvent.totalScore;\r\n                    let newScore = 0;\r\n\r\n                    currentScore = leadUpdateGR.getValue(\"lead_score\") || 0;\r\n                    salesScore = leadUpdateGR.getValue(\"x_cadso_lead_sales_score\");\r\n                    marketScore = leadUpdateGR.getValue(\"x_cadso_lead_marketing_score\");\r\n                    // newScore = Number(totalScore) + Number(currentScore);\r\n                    //Calculate market and custom score max and update new score \r\n                    newScore = currentScore;\r\n                    const weightedMarket = this.scoreThresholdCheck(addedMarketScore, 'marketing', newScore, salesScore, marketScore);\r\n                    newScore = weightedMarket[\"leadScore\"];\r\n\r\n                    const weightedCustom = this.scoreThresholdCheck(addedCustomScore, 'custom', newScore, salesScore, marketScore);\r\n                    newScore = weightedCustom[\"leadScore\"];\r\n\r\n                    // if we are not using median percentile, set lead rating based on lead score\r\n\r\n                    if (newScore && useMedPercent == \"false\") {\r\n\r\n                        let highestRating = 0;\r\n                        let tempScore = newScore;\r\n                        for (let r = 0; r < leadRatings.length; r++) {\r\n\r\n                            if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                                highestRating = leadRatings[r].scoreRange[1];\r\n                            }\r\n                        }\r\n\r\n                        for (let w = 0; w < leadRatings.length; w++) {\r\n                            let minRating = leadRatings[w].scoreRange[0];\r\n                            let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                            if (tempScore > highestRating) {\r\n                                tempScore = highestRating;\r\n                            }\r\n\r\n                            if (tempScore <= 0) {\r\n                                tempScore = 1;\r\n                            }\r\n                            if (tempScore > minRating && tempScore <= maxRating) {\r\n\r\n                                leadUpdateGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                                leadUpdateGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_marketing_score\", weightedMarket[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_sales_score\", weightedCustom[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"lead_score\", newScore);\r\n                    leadUpdateGR.work_notes = message;\r\n                    leadUpdateGR.update();\r\n                } else {\r\n                    gs.info(\"Lead Score MAP DOES NOT HAVE THIS LEAD : \" + leadID);\r\n                }\r\n                x++;\r\n            }\r\n            this.deleteLeadEvents();\r\n\r\n\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Calculate Score Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteLeadEvents: function() {\r\n        var leadEventsDeleteGR = new GlideRecordSecure(\"x_cadso_lead_event\");\r\n        leadEventsDeleteGR.query();\r\n        leadEventsDeleteGR.setWorkflow(false);\r\n        leadEventsDeleteGR.deleteMultiple();\r\n    },\r\n\r\n    getLeadRating: function() {\r\n\r\n        let eventMaxScore = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        let customEventMaxScore = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        let useMedPercentile = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n\r\n        let minRating = 0;\r\n        let lowestRating = 0;\r\n        let leadRatings = [];\r\n        let ratingGR = new GlideRecord('x_cadso_lead_rating_definition');\r\n        ratingGR.orderBy('max_rating');\r\n        ratingGR.query();\r\n\r\n        while (ratingGR.next()) {\r\n            let maxRating = Number(ratingGR.getValue('max_rating'));\r\n            if (maxRating < 0) {\r\n                gs.info(\"LEAD SCORING ERROR: RATING SCORE WAS LESS THEN 0. THE RATING WAS CHANGED TO 0\")\r\n                maxRating = 0;\r\n            }\r\n            let newRating = ratingGR.segment_name.value.getValue();\r\n            let newAction = ratingGR.getValue('marketing_sales_action');\r\n            leadRatings.push({\r\n                scoreRange: [minRating, maxRating],\r\n                rating: newRating,\r\n                action: newAction\r\n            });\r\n            minRating = maxRating;\r\n        }\r\n        return leadRatings;\r\n        // if (score > maxRating) {\r\n        //     score = maxRating;\r\n        // } else if (score < 0) {\r\n        //     score = 0;\r\n        // }\r\n        // let rating = leadRatings.find(r => score >= r.scoreRange[0] && score <= r.scoreRange[1]);\r\n\r\n        // if (rating) {\r\n        //     // return rating.rating;\r\n        //     return rating;\r\n        // }\r\n\r\n    },\r\n\r\n    medianPercentile: function(data, score) {\r\n        if (!data.length) return null;\r\n        var count = 0;\r\n        for (var x = 0; x < data.length; x++) {\r\n            if (Number(data[x]) <= Number(score)) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        var percentileRank = (count / data.length) * 100;\r\n\r\n        return percentileRank;\r\n    },\r\n\r\n\r\n\r\n\r\n    calculateMedianRatings: function() {\r\n\r\n        let leadRatings = this.getLeadRating();\r\n        var start = Date.now();\r\n\r\n        var newScoreData = [];\r\n        var allLeadGR = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.groupBy(\"lead_score\");\r\n        allLeadGR.orderBy(\"lead_score\");\r\n        allLeadGR.addAggregate('COUNT');\r\n        allLeadGR.query();\r\n        let x = 1;\r\n        let scoreHash = new Map();\r\n        while (allLeadGR.next()) {\r\n            var leadScore = allLeadGR.getValue('lead_score');\r\n\r\n            if (!scoreHash.has(x)) {\r\n                scoreHash.set(x, leadScore);\r\n            }\r\n            x++;\r\n        }\r\n\r\n        if (!scoreHash.size) {\r\n            gs.indo(\"LEAD SCORING ERROR: NO SCORES TO UPDATE IN MEDIAN SCORING\")\r\n            return;\r\n        }\r\n\r\n        for (let [key, value] of scoreHash) {\r\n\r\n            let scorePercentile = Math.ceil((key / scoreHash.size) * 100);\r\n            if (scorePercentile === 0) {\r\n                gs.info(\"LEAD SCORE ERROR: PERCENTILE WAS 0. SHOULD NOT BE POSSIBLE - VALUE: \" + key + \" - SCORE HASH SIZE: \" + scoreHash.size);\r\n                continue;\r\n            }\r\n\r\n            let highestRating = 0;\r\n            for (let r = 0; r < leadRatings.length; r++) {\r\n                if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                    highestRating = leadRatings[r].scoreRange[1];\r\n                }\r\n            }\r\n            var medLeadGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            medLeadGR.addEncodedQuery(\"lead_score= \" + value);\r\n            medLeadGR.query();\r\n            for (let w = 0; w < leadRatings.length; w++) {\r\n                let minRating = leadRatings[w].scoreRange[0];\r\n                let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                if (scorePercentile > highestRating) {\r\n                    scorePercentile = highestRating;\r\n                }\r\n                if (scorePercentile > minRating && scorePercentile <= maxRating) {\r\n\r\n                    medLeadGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                    medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                    medLeadGR.updateMultiple();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // var medLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        // medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        // // medLeadGR.addEncodedQuery(\"lead_score=0\");\r\n        // // medLeadGR.setLimit(100);\r\n        // medLeadGR.orderBy(\"lead_score\");\r\n        // medLeadGR.query();\r\n\r\n        // while (medLeadGR.next()) {\r\n        //     var updatedScore = medLeadGR.getValue(\"lead_score\") || 0;\r\n        //     var percentRank = this.medianPercentile(newScoreData, updatedScore);\r\n        //     var updatedRating = this.getLeadRating(percentRank);\r\n\r\n        //     if (updatedRating) {\r\n        //         medLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n        //         medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n        //         medLeadGR.setValue(\"lead_score\", updatedScore);\r\n        //     }\r\n        //     medLeadGR.update();\r\n        // }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    calcStandardScores: function() {\r\n        var start = Date.now();\r\n\r\n        var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.query();\r\n\r\n        while (allLeadGR.next()) {\r\n            var updatedScore = allLeadGR.getValue(\"lead_score\") || 0;\r\n            var updatedRating = this.getLeadRating(updatedScore);\r\n\r\n            if (updatedRating) {\r\n                allLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                allLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                allLeadGR.setValue(\"lead_score\", updatedScore);\r\n            }\r\n            allLeadGR.update();\r\n        }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    scoreThresholdCheck: function(eventScore, eventType, leadScore, salesScore, marketScore) {\r\n        // extract max score\r\n        var customMax = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        var marketingMax = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        // initialize variables\r\n        var typeScore = 0;\r\n        var maxScore = 0;\r\n        eventScore = Number(eventScore);\r\n        leadScore = Number(leadScore);\r\n        salesScore = Number(salesScore);\r\n        marketScore = Number(marketScore);\r\n\r\n        // set max score and choose between market/sales score based on the type\r\n        if (eventType == \"custom\") {\r\n            maxScore = customMax;\r\n            typeScore = salesScore;\r\n        } else {\r\n            maxScore = marketingMax;\r\n            typeScore = marketScore;\r\n        }\r\n\r\n        // // if the new score is larger than max\r\n        if (eventScore + typeScore >= maxScore) {\r\n            // substract the overflow and add the rest to lead score, then set the typeScore to maxScore based on type\r\n            var diff = eventScore + typeScore - maxScore;\r\n            leadScore = eventScore + leadScore - diff;\r\n            typeScore = maxScore;\r\n        } else {\r\n            // add eventscore normally\r\n            leadScore = eventScore + leadScore;\r\n            typeScore = eventScore + typeScore;\r\n        }\r\n\r\n        return {\r\n            \"leadScore\": leadScore,\r\n            \"typeScore\": typeScore\r\n        };\r\n    },\r\n\r\n\r\n    getProperty: function(name) {\r\n        var coreSettingGR = new GlideRecordSecure(\"x_cadso_core_setting\");\r\n        coreSettingGR.addQuery(\"name\", name);\r\n        coreSettingGR.addQuery(\"active\", \"true\");\r\n        coreSettingGR.query();\r\n        if (coreSettingGR.next()) {\r\n            var result = coreSettingGR.getValue(\"value\");\r\n        }\r\n\r\n        return result;\r\n\r\n    },\r\n\r\n\r\n    pushWorkNotes: function(type, event, score) {\r\n        var message = \"\";\r\n        var marketingMessages = {\r\n            'Clicked': 'Clicked on an email',\r\n            'Opened': 'Opened an email',\r\n            'Complained': 'Marked an email as spam',\r\n            'Subscribed': 'Subscribed to email marketing',\r\n            'Unsubscribed': 'Unsubscribed',\r\n            'Opted-In': 'Opted-In to SMS marketing',\r\n            'Opted-Out': 'Opted-Out of SMS marketing'\r\n        };\r\n        if (type === \"marketing\") {\r\n            var upperEvent = event[0].toUpperCase() + event.slice(1);\r\n            event = upperEvent;\r\n        } else if (type === \"custom\") {\r\n            var typeId = event;\r\n\r\n            var actTypeGR = new GlideRecordSecure('sn_actsub_activity_type');\r\n            actTypeGR.get(typeId);\r\n\r\n            if (actTypeGR.isValid()) {\r\n                var description = actTypeGR.getValue('short_description') || \"\";\r\n                event = description;\r\n            }\r\n        }\r\n\r\n        if (type === \"custom\") {\r\n            message += \" \" + event + \"\";\r\n        } else {\r\n            message += \" \" + marketingMessages[event];\r\n        }\r\n        message += \": Lead score updated by \" + score;\r\n\r\n        return message;\r\n\r\n    },\r\n\r\n    calcStandardScoresAgg: function() {\r\n        try {\r\n            let start = Date.now();\r\n            let leadRatings = this.getLeadRating();\r\n            let updatedRating = leadRatings[0];\r\n            let allLeadGA = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGA.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            allLeadGA.groupBy('lead_score');\r\n            allLeadGA.query();\r\n\r\n            while (allLeadGA.next()) {\r\n                let groupScore = allLeadGA.getValue(\"lead_score\") || 0;\r\n                let returnScore = groupScore == \"\" ? 0 : groupScore;\r\n                let highestRating = 0;\r\n                let updatedRating = leadRatings[0];\r\n                for (let r = 0; r < leadRatings.length; r++) {\r\n                    if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                        highestRating = leadRatings[r].scoreRange[1];\r\n                    }\r\n                }\r\n\r\n                for (let w = 0; w < leadRatings.length; w++) {\r\n                    let minRating = leadRatings[w].scoreRange[0];\r\n                    let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                    if (groupScore > highestRating) {\r\n                        returnScore = highestRating;\r\n                    }\r\n                    if (groupScore < 0) {\r\n                        //Set to 1 to update rating to lowest, returnScore does not update lead score\r\n                        returnScore = 1;\r\n                    }\r\n                    if (returnScore > minRating && returnScore <= maxRating) {\r\n                        updatedRating = leadRatings[w];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (updatedRating) {\r\n                    let updateScoreGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n                    updateScoreGR.addQuery(\"lead_score\", groupScore);\r\n                    updateScoreGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n                    updateScoreGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                    updateScoreGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                    updateScoreGR.updateMultiple();\r\n                }\r\n\r\n            }\r\n            let end = Date.now();\r\n            var time = end - start;\r\n            gs.info(\"WM MEDIAN AGG TIME: \" + time);\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Aggregate Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    calculateLiveScore: function(event) {\r\n        var scoreData = [];\r\n        var useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n        if (useMedPercent == \"true\") {\r\n            var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGR.addEncodedQuery(\"stage!=400_closed_won^lead_scoreISNOTEMPTY\");\r\n            allLeadGR.orderBy(\"lead_score\");\r\n            allLeadGR.query();\r\n\r\n            while (allLeadGR.next()) {\r\n                scoreData.push(allLeadGR.getValue('lead_score'));\r\n            }\r\n        }\r\n        var leadScore = 0;\r\n        var newScore = 0;\r\n        var leadSysID = event.getValue(\"lead\");\r\n        var eventScore = event.getValue(\"score\");\r\n        var eventType = event.getValue(\"event_type\");\r\n        var leadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        leadGR.addQuery(\"sys_id\", leadSysID);\r\n        leadGR.query();\r\n        if (leadGR.next()) {\r\n            leadScore = leadGR.getValue(\"lead_score\");\r\n            newScore = Number(eventScore) + Number(leadScore);\r\n\r\n            var newRating = this.getLeadRating(newScore);\r\n            var salesScore = leadGR.getValue(\"x_cadso_lead_sales_score\");\r\n            var marketScore = leadGR.getValue(\"x_cadso_lead_marketing_score\");\r\n            var weightedScore = this.scoreThresholdCheck(eventScore, eventType, leadScore, salesScore, marketScore);\r\n            // if we are not using median percentile, set lead rating based on lead score\r\n            // else calculate median percentile rank and set rating appropriately\r\n            if (newRating && useMedPercent == \"false\") {\r\n                leadGR.setValue(\"lead_rating\", newRating.rating);\r\n                leadGR.setValue(\"x_cadso_lead_marketing_sales_action\", newRating.action);\r\n            }\r\n            leadGR.setValue(\"lead_score\", weightedScore[\"leadScore\"]);\r\n            if (eventType == \"custom\") {\r\n                leadGR.setValue(\"x_cadso_lead_sales_score\", weightedScore[\"typeScore\"]);\r\n            } else {\r\n                leadGR.setValue(\"x_cadso_lead_marketing_score\", weightedScore[\"typeScore\"]);\r\n            }\r\n            leadGR.update();\r\n        }\r\n    },\r\n    type: 'LeadScoringMS'\r\n};",
    "display_value": "var LeadScoringMS = Class.create();\r\nLeadScoringMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    getScore: function(event, eventType) {\r\n        var score = 0;\r\n        var eventField = eventType == 'email' ? 'email_event.value' : eventType == 'message' ? 'message_event.value' : 'activity_type';\r\n\r\n        if (event && eventType) {\r\n            var leadDefGR = new GlideRecordSecure('x_cadso_lead_event_score_definition');\r\n            leadDefGR.addQuery('active', true);\r\n            leadDefGR.addEncodedQuery('event_definition.' + eventField + '=' + event);\r\n            leadDefGR.addQuery('event_type.value', eventType);\r\n            leadDefGR.setLimit(1);\r\n            leadDefGR.query();\r\n            if (leadDefGR.next()) {\r\n                score = leadDefGR.getValue('score');\r\n                score = parseInt(score);\r\n            }\r\n        }\r\n        return score;\r\n    },\r\n\r\n    hashStringToIndex: function(sysId, arraySize) {\r\n        let hash = 0;\r\n        for (let i = 0; i < sysId.length; i++) {\r\n            const char = sysId.charCodeAt(i);\r\n            hash = (hash << 5) - hash + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n\r\n        return Math.abs(hash) % arraySize;\r\n    },\r\n\r\n\r\n    calculateScores: function() {\r\n        try {\r\n            const leadScoringEnabled = this.getProperty(\"x_cadso_lead.tenon_marketing_lead_scoring\") || \"false\";\r\n            const useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n            //Check if lead scoring is enabled\r\n            if (leadScoringEnabled == \"false\") {\r\n                return;\r\n            }\r\n            let scoreData = [];\r\n            let totalScore = 0;\r\n            let currentScore = 0;\r\n            let newScore = 0;\r\n            let marketScore = 0;\r\n            let salesScore = 0;\r\n            let newMarketScore = 0;\r\n            let newSalesScore = 0;\r\n            let scoreTypeArr = [];\r\n            let leadRatings = this.getLeadRating();\r\n\r\n            let currentDate = new GlideDate();\r\n            let sysIdArr = [];\r\n            let leadEvents = [];\r\n            let eventHash = new Map();\r\n            let x = 0;\r\n\r\n            let leadEventGR = new GlideRecord(\"x_cadso_lead_event\");\r\n            leadEventGR.addEncodedQuery(\"lead!=NULL^lead.stage!=400_closed_won\");\r\n            leadEventGR.query();\r\n            while (leadEventGR.next()) {\r\n\r\n                let lead = leadEventGR.getValue(\"lead\");\r\n                let type = leadEventGR.getValue(\"event_type\");\r\n                let leadEvent = leadEventGR.getValue(\"event\");\r\n                let score = parseInt(leadEventGR.getValue(\"score\"));\r\n                if (type === \"message\" || type === \"email\") {\r\n                    type = \"marketing\";\r\n                }\r\n                sysIdArr.push(lead);\r\n                if (!eventHash.has(lead)) {\r\n                    eventHash.set(lead, {\r\n                        lead,\r\n                        eventObj: [{\r\n                            event: leadEvent,\r\n                            type: type,\r\n                            score: score,\r\n                        }, ],\r\n                        message: \"Update for \" + currentDate + \":\\n1. \" + this.pushWorkNotes(type, leadEvent, score),\r\n                        totalScore: score,\r\n                        eventAggregate: {\r\n                            marketing: type === \"marketing\" ? score : 0,\r\n                            custom: type === \"custom\" ? score : 0,\r\n                        },\r\n                    });\r\n                } else {\r\n                    let entry = eventHash.get(lead);\r\n                    entry.eventObj.push({\r\n                        event: leadEvent,\r\n                        type: type,\r\n                        score: score,\r\n                    });\r\n                    entry.message += \"\\n\" + (entry.eventObj.length) + \". \" + this.pushWorkNotes(type, leadEvent, score);\r\n                    entry.totalScore += score;\r\n                    entry.eventAggregate[type] += score;\r\n                }\r\n                x++;\r\n            }\r\n\r\n            //Calculate all leads with no scores\r\n            var emptyLeadGR = new GlideRecord('sn_lead_mgmt_core_lead');\r\n            emptyLeadGR.addQuery('lead_score', 'NULL');\r\n            emptyLeadGR.setValue('lead_score', 0);\r\n            emptyLeadGR.setValue('lead_rating', '100_cold');\r\n            emptyLeadGR.setValue('x_cadso_lead_marketing_sales_action', '');\r\n            emptyLeadGR.updateMultiple();\r\n\t\t\t\r\n\t\t\t//No need to query if there are no events\r\n            if (hashEvent.size == 0) {\r\n                return;\r\n            }\r\n            var leadUpdateGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            x = 0;\r\n            let queryArr = [];\r\n            let querylength = 0;\r\n            let y = 0;\r\n            let total = eventHash.size;\r\n            let count = 0;\r\n            for (let [key, value] of eventHash) {\r\n                count++;\r\n                queryArr.push(value.lead);\r\n                querylength += value.lead.length + 1;\r\n\r\n                if (querylength > 30000000 || count >= total) {\r\n                    let stringQuery = \"sys_idIN\" + queryArr.join(',');\r\n                    leadUpdateGR.addEncodedQuery(stringQuery);\r\n                    queryArr = [];\r\n                    querylength = 0;\r\n                    y++;\r\n                }\r\n            }\r\n\r\n            leadUpdateGR.query();\r\n            while (leadUpdateGR.next()) {\r\n\r\n                const leadID = leadUpdateGR.getValue('sys_id');\r\n\r\n                if (eventHash.has(leadID)) {\r\n                    let hashedEvent = eventHash.get(leadID);\r\n\r\n                    const addedMarketScore = hashedEvent.eventAggregate.marketing;\r\n                    const addedCustomScore = hashedEvent.eventAggregate.custom;\r\n                    const message = hashedEvent.message;\r\n                    const totalScore = hashedEvent.totalScore;\r\n                    let newScore = 0;\r\n\r\n                    currentScore = leadUpdateGR.getValue(\"lead_score\") || 0;\r\n                    salesScore = leadUpdateGR.getValue(\"x_cadso_lead_sales_score\");\r\n                    marketScore = leadUpdateGR.getValue(\"x_cadso_lead_marketing_score\");\r\n                    // newScore = Number(totalScore) + Number(currentScore);\r\n                    //Calculate market and custom score max and update new score \r\n                    newScore = currentScore;\r\n                    const weightedMarket = this.scoreThresholdCheck(addedMarketScore, 'marketing', newScore, salesScore, marketScore);\r\n                    newScore = weightedMarket[\"leadScore\"];\r\n\r\n                    const weightedCustom = this.scoreThresholdCheck(addedCustomScore, 'custom', newScore, salesScore, marketScore);\r\n                    newScore = weightedCustom[\"leadScore\"];\r\n\r\n                    // if we are not using median percentile, set lead rating based on lead score\r\n\r\n                    if (newScore && useMedPercent == \"false\") {\r\n\r\n                        let highestRating = 0;\r\n                        let tempScore = newScore;\r\n                        for (let r = 0; r < leadRatings.length; r++) {\r\n\r\n                            if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                                highestRating = leadRatings[r].scoreRange[1];\r\n                            }\r\n                        }\r\n\r\n                        for (let w = 0; w < leadRatings.length; w++) {\r\n                            let minRating = leadRatings[w].scoreRange[0];\r\n                            let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                            if (tempScore > highestRating) {\r\n                                tempScore = highestRating;\r\n                            }\r\n\r\n                            if (tempScore <= 0) {\r\n                                tempScore = 1;\r\n                            }\r\n                            if (tempScore > minRating && tempScore <= maxRating) {\r\n\r\n                                leadUpdateGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                                leadUpdateGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_marketing_score\", weightedMarket[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_sales_score\", weightedCustom[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"lead_score\", newScore);\r\n                    leadUpdateGR.work_notes = message;\r\n                    leadUpdateGR.update();\r\n                } else {\r\n                    gs.info(\"Lead Score MAP DOES NOT HAVE THIS LEAD : \" + leadID);\r\n                }\r\n                x++;\r\n            }\r\n            this.deleteLeadEvents();\r\n\r\n\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Calculate Score Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteLeadEvents: function() {\r\n        var leadEventsDeleteGR = new GlideRecordSecure(\"x_cadso_lead_event\");\r\n        leadEventsDeleteGR.query();\r\n        leadEventsDeleteGR.setWorkflow(false);\r\n        leadEventsDeleteGR.deleteMultiple();\r\n    },\r\n\r\n    getLeadRating: function() {\r\n\r\n        let eventMaxScore = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        let customEventMaxScore = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        let useMedPercentile = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n\r\n        let minRating = 0;\r\n        let lowestRating = 0;\r\n        let leadRatings = [];\r\n        let ratingGR = new GlideRecord('x_cadso_lead_rating_definition');\r\n        ratingGR.orderBy('max_rating');\r\n        ratingGR.query();\r\n\r\n        while (ratingGR.next()) {\r\n            let maxRating = Number(ratingGR.getValue('max_rating'));\r\n            if (maxRating < 0) {\r\n                gs.info(\"LEAD SCORING ERROR: RATING SCORE WAS LESS THEN 0. THE RATING WAS CHANGED TO 0\")\r\n                maxRating = 0;\r\n            }\r\n            let newRating = ratingGR.segment_name.value.getValue();\r\n            let newAction = ratingGR.getValue('marketing_sales_action');\r\n            leadRatings.push({\r\n                scoreRange: [minRating, maxRating],\r\n                rating: newRating,\r\n                action: newAction\r\n            });\r\n            minRating = maxRating;\r\n        }\r\n        return leadRatings;\r\n        // if (score > maxRating) {\r\n        //     score = maxRating;\r\n        // } else if (score < 0) {\r\n        //     score = 0;\r\n        // }\r\n        // let rating = leadRatings.find(r => score >= r.scoreRange[0] && score <= r.scoreRange[1]);\r\n\r\n        // if (rating) {\r\n        //     // return rating.rating;\r\n        //     return rating;\r\n        // }\r\n\r\n    },\r\n\r\n    medianPercentile: function(data, score) {\r\n        if (!data.length) return null;\r\n        var count = 0;\r\n        for (var x = 0; x < data.length; x++) {\r\n            if (Number(data[x]) <= Number(score)) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        var percentileRank = (count / data.length) * 100;\r\n\r\n        return percentileRank;\r\n    },\r\n\r\n\r\n\r\n\r\n    calculateMedianRatings: function() {\r\n\r\n        let leadRatings = this.getLeadRating();\r\n        var start = Date.now();\r\n\r\n        var newScoreData = [];\r\n        var allLeadGR = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.groupBy(\"lead_score\");\r\n        allLeadGR.orderBy(\"lead_score\");\r\n        allLeadGR.addAggregate('COUNT');\r\n        allLeadGR.query();\r\n        let x = 1;\r\n        let scoreHash = new Map();\r\n        while (allLeadGR.next()) {\r\n            var leadScore = allLeadGR.getValue('lead_score');\r\n\r\n            if (!scoreHash.has(x)) {\r\n                scoreHash.set(x, leadScore);\r\n            }\r\n            x++;\r\n        }\r\n\r\n        if (!scoreHash.size) {\r\n            gs.indo(\"LEAD SCORING ERROR: NO SCORES TO UPDATE IN MEDIAN SCORING\")\r\n            return;\r\n        }\r\n\r\n        for (let [key, value] of scoreHash) {\r\n\r\n            let scorePercentile = Math.ceil((key / scoreHash.size) * 100);\r\n            if (scorePercentile === 0) {\r\n                gs.info(\"LEAD SCORE ERROR: PERCENTILE WAS 0. SHOULD NOT BE POSSIBLE - VALUE: \" + key + \" - SCORE HASH SIZE: \" + scoreHash.size);\r\n                continue;\r\n            }\r\n\r\n            let highestRating = 0;\r\n            for (let r = 0; r < leadRatings.length; r++) {\r\n                if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                    highestRating = leadRatings[r].scoreRange[1];\r\n                }\r\n            }\r\n            var medLeadGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            medLeadGR.addEncodedQuery(\"lead_score= \" + value);\r\n            medLeadGR.query();\r\n            for (let w = 0; w < leadRatings.length; w++) {\r\n                let minRating = leadRatings[w].scoreRange[0];\r\n                let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                if (scorePercentile > highestRating) {\r\n                    scorePercentile = highestRating;\r\n                }\r\n                if (scorePercentile > minRating && scorePercentile <= maxRating) {\r\n\r\n                    medLeadGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                    medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                    medLeadGR.updateMultiple();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // var medLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        // medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        // // medLeadGR.addEncodedQuery(\"lead_score=0\");\r\n        // // medLeadGR.setLimit(100);\r\n        // medLeadGR.orderBy(\"lead_score\");\r\n        // medLeadGR.query();\r\n\r\n        // while (medLeadGR.next()) {\r\n        //     var updatedScore = medLeadGR.getValue(\"lead_score\") || 0;\r\n        //     var percentRank = this.medianPercentile(newScoreData, updatedScore);\r\n        //     var updatedRating = this.getLeadRating(percentRank);\r\n\r\n        //     if (updatedRating) {\r\n        //         medLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n        //         medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n        //         medLeadGR.setValue(\"lead_score\", updatedScore);\r\n        //     }\r\n        //     medLeadGR.update();\r\n        // }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    calcStandardScores: function() {\r\n        var start = Date.now();\r\n\r\n        var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.query();\r\n\r\n        while (allLeadGR.next()) {\r\n            var updatedScore = allLeadGR.getValue(\"lead_score\") || 0;\r\n            var updatedRating = this.getLeadRating(updatedScore);\r\n\r\n            if (updatedRating) {\r\n                allLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                allLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                allLeadGR.setValue(\"lead_score\", updatedScore);\r\n            }\r\n            allLeadGR.update();\r\n        }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    scoreThresholdCheck: function(eventScore, eventType, leadScore, salesScore, marketScore) {\r\n        // extract max score\r\n        var customMax = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        var marketingMax = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        // initialize variables\r\n        var typeScore = 0;\r\n        var maxScore = 0;\r\n        eventScore = Number(eventScore);\r\n        leadScore = Number(leadScore);\r\n        salesScore = Number(salesScore);\r\n        marketScore = Number(marketScore);\r\n\r\n        // set max score and choose between market/sales score based on the type\r\n        if (eventType == \"custom\") {\r\n            maxScore = customMax;\r\n            typeScore = salesScore;\r\n        } else {\r\n            maxScore = marketingMax;\r\n            typeScore = marketScore;\r\n        }\r\n\r\n        // // if the new score is larger than max\r\n        if (eventScore + typeScore >= maxScore) {\r\n            // substract the overflow and add the rest to lead score, then set the typeScore to maxScore based on type\r\n            var diff = eventScore + typeScore - maxScore;\r\n            leadScore = eventScore + leadScore - diff;\r\n            typeScore = maxScore;\r\n        } else {\r\n            // add eventscore normally\r\n            leadScore = eventScore + leadScore;\r\n            typeScore = eventScore + typeScore;\r\n        }\r\n\r\n        return {\r\n            \"leadScore\": leadScore,\r\n            \"typeScore\": typeScore\r\n        };\r\n    },\r\n\r\n\r\n    getProperty: function(name) {\r\n        var coreSettingGR = new GlideRecordSecure(\"x_cadso_core_setting\");\r\n        coreSettingGR.addQuery(\"name\", name);\r\n        coreSettingGR.addQuery(\"active\", \"true\");\r\n        coreSettingGR.query();\r\n        if (coreSettingGR.next()) {\r\n            var result = coreSettingGR.getValue(\"value\");\r\n        }\r\n\r\n        return result;\r\n\r\n    },\r\n\r\n\r\n    pushWorkNotes: function(type, event, score) {\r\n        var message = \"\";\r\n        var marketingMessages = {\r\n            'Clicked': 'Clicked on an email',\r\n            'Opened': 'Opened an email',\r\n            'Complained': 'Marked an email as spam',\r\n            'Subscribed': 'Subscribed to email marketing',\r\n            'Unsubscribed': 'Unsubscribed',\r\n            'Opted-In': 'Opted-In to SMS marketing',\r\n            'Opted-Out': 'Opted-Out of SMS marketing'\r\n        };\r\n        if (type === \"marketing\") {\r\n            var upperEvent = event[0].toUpperCase() + event.slice(1);\r\n            event = upperEvent;\r\n        } else if (type === \"custom\") {\r\n            var typeId = event;\r\n\r\n            var actTypeGR = new GlideRecordSecure('sn_actsub_activity_type');\r\n            actTypeGR.get(typeId);\r\n\r\n            if (actTypeGR.isValid()) {\r\n                var description = actTypeGR.getValue('short_description') || \"\";\r\n                event = description;\r\n            }\r\n        }\r\n\r\n        if (type === \"custom\") {\r\n            message += \" \" + event + \"\";\r\n        } else {\r\n            message += \" \" + marketingMessages[event];\r\n        }\r\n        message += \": Lead score updated by \" + score;\r\n\r\n        return message;\r\n\r\n    },\r\n\r\n    calcStandardScoresAgg: function() {\r\n        try {\r\n            let start = Date.now();\r\n            let leadRatings = this.getLeadRating();\r\n            let updatedRating = leadRatings[0];\r\n            let allLeadGA = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGA.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            allLeadGA.groupBy('lead_score');\r\n            allLeadGA.query();\r\n\r\n            while (allLeadGA.next()) {\r\n                let groupScore = allLeadGA.getValue(\"lead_score\") || 0;\r\n                let returnScore = groupScore == \"\" ? 0 : groupScore;\r\n                let highestRating = 0;\r\n                let updatedRating = leadRatings[0];\r\n                for (let r = 0; r < leadRatings.length; r++) {\r\n                    if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                        highestRating = leadRatings[r].scoreRange[1];\r\n                    }\r\n                }\r\n\r\n                for (let w = 0; w < leadRatings.length; w++) {\r\n                    let minRating = leadRatings[w].scoreRange[0];\r\n                    let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                    if (groupScore > highestRating) {\r\n                        returnScore = highestRating;\r\n                    }\r\n                    if (groupScore < 0) {\r\n                        //Set to 1 to update rating to lowest, returnScore does not update lead score\r\n                        returnScore = 1;\r\n                    }\r\n                    if (returnScore > minRating && returnScore <= maxRating) {\r\n                        updatedRating = leadRatings[w];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (updatedRating) {\r\n                    let updateScoreGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n                    updateScoreGR.addQuery(\"lead_score\", groupScore);\r\n                    updateScoreGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n                    updateScoreGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                    updateScoreGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                    updateScoreGR.updateMultiple();\r\n                }\r\n\r\n            }\r\n            let end = Date.now();\r\n            var time = end - start;\r\n            gs.info(\"WM MEDIAN AGG TIME: \" + time);\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Aggregate Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    calculateLiveScore: function(event) {\r\n        var scoreData = [];\r\n        var useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n        if (useMedPercent == \"true\") {\r\n            var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGR.addEncodedQuery(\"stage!=400_closed_won^lead_scoreISNOTEMPTY\");\r\n            allLeadGR.orderBy(\"lead_score\");\r\n            allLeadGR.query();\r\n\r\n            while (allLeadGR.next()) {\r\n                scoreData.push(allLeadGR.getValue('lead_score'));\r\n            }\r\n        }\r\n        var leadScore = 0;\r\n        var newScore = 0;\r\n        var leadSysID = event.getValue(\"lead\");\r\n        var eventScore = event.getValue(\"score\");\r\n        var eventType = event.getValue(\"event_type\");\r\n        var leadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        leadGR.addQuery(\"sys_id\", leadSysID);\r\n        leadGR.query();\r\n        if (leadGR.next()) {\r\n            leadScore = leadGR.getValue(\"lead_score\");\r\n            newScore = Number(eventScore) + Number(leadScore);\r\n\r\n            var newRating = this.getLeadRating(newScore);\r\n            var salesScore = leadGR.getValue(\"x_cadso_lead_sales_score\");\r\n            var marketScore = leadGR.getValue(\"x_cadso_lead_marketing_score\");\r\n            var weightedScore = this.scoreThresholdCheck(eventScore, eventType, leadScore, salesScore, marketScore);\r\n            // if we are not using median percentile, set lead rating based on lead score\r\n            // else calculate median percentile rank and set rating appropriately\r\n            if (newRating && useMedPercent == \"false\") {\r\n                leadGR.setValue(\"lead_rating\", newRating.rating);\r\n                leadGR.setValue(\"x_cadso_lead_marketing_sales_action\", newRating.action);\r\n            }\r\n            leadGR.setValue(\"lead_score\", weightedScore[\"leadScore\"]);\r\n            if (eventType == \"custom\") {\r\n                leadGR.setValue(\"x_cadso_lead_sales_score\", weightedScore[\"typeScore\"]);\r\n            } else {\r\n                leadGR.setValue(\"x_cadso_lead_marketing_score\", weightedScore[\"typeScore\"]);\r\n            }\r\n            leadGR.update();\r\n        }\r\n    },\r\n    type: 'LeadScoringMS'\r\n};",
    "formatted_script": {
      "line_count": 582,
      "char_count": 23530,
      "preview": "var LeadScoringMS = Class.create();\r\nLeadScoringMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    getScore: function(event, eventType) {\r\n        var score = 0;\r\n        var eventField = eventTy...",
      "full_script": "var LeadScoringMS = Class.create();\r\nLeadScoringMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    getScore: function(event, eventType) {\r\n        var score = 0;\r\n        var eventField = eventType == 'email' ? 'email_event.value' : eventType == 'message' ? 'message_event.value' : 'activity_type';\r\n\r\n        if (event && eventType) {\r\n            var leadDefGR = new GlideRecordSecure('x_cadso_lead_event_score_definition');\r\n            leadDefGR.addQuery('active', true);\r\n            leadDefGR.addEncodedQuery('event_definition.' + eventField + '=' + event);\r\n            leadDefGR.addQuery('event_type.value', eventType);\r\n            leadDefGR.setLimit(1);\r\n            leadDefGR.query();\r\n            if (leadDefGR.next()) {\r\n                score = leadDefGR.getValue('score');\r\n                score = parseInt(score);\r\n            }\r\n        }\r\n        return score;\r\n    },\r\n\r\n    hashStringToIndex: function(sysId, arraySize) {\r\n        let hash = 0;\r\n        for (let i = 0; i < sysId.length; i++) {\r\n            const char = sysId.charCodeAt(i);\r\n            hash = (hash << 5) - hash + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n\r\n        return Math.abs(hash) % arraySize;\r\n    },\r\n\r\n\r\n    calculateScores: function() {\r\n        try {\r\n            const leadScoringEnabled = this.getProperty(\"x_cadso_lead.tenon_marketing_lead_scoring\") || \"false\";\r\n            const useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n            //Check if lead scoring is enabled\r\n            if (leadScoringEnabled == \"false\") {\r\n                return;\r\n            }\r\n            let scoreData = [];\r\n            let totalScore = 0;\r\n            let currentScore = 0;\r\n            let newScore = 0;\r\n            let marketScore = 0;\r\n            let salesScore = 0;\r\n            let newMarketScore = 0;\r\n            let newSalesScore = 0;\r\n            let scoreTypeArr = [];\r\n            let leadRatings = this.getLeadRating();\r\n\r\n            let currentDate = new GlideDate();\r\n            let sysIdArr = [];\r\n            let leadEvents = [];\r\n            let eventHash = new Map();\r\n            let x = 0;\r\n\r\n            let leadEventGR = new GlideRecord(\"x_cadso_lead_event\");\r\n            leadEventGR.addEncodedQuery(\"lead!=NULL^lead.stage!=400_closed_won\");\r\n            leadEventGR.query();\r\n            while (leadEventGR.next()) {\r\n\r\n                let lead = leadEventGR.getValue(\"lead\");\r\n                let type = leadEventGR.getValue(\"event_type\");\r\n                let leadEvent = leadEventGR.getValue(\"event\");\r\n                let score = parseInt(leadEventGR.getValue(\"score\"));\r\n                if (type === \"message\" || type === \"email\") {\r\n                    type = \"marketing\";\r\n                }\r\n                sysIdArr.push(lead);\r\n                if (!eventHash.has(lead)) {\r\n                    eventHash.set(lead, {\r\n                        lead,\r\n                        eventObj: [{\r\n                            event: leadEvent,\r\n                            type: type,\r\n                            score: score,\r\n                        }, ],\r\n                        message: \"Update for \" + currentDate + \":\\n1. \" + this.pushWorkNotes(type, leadEvent, score),\r\n                        totalScore: score,\r\n                        eventAggregate: {\r\n                            marketing: type === \"marketing\" ? score : 0,\r\n                            custom: type === \"custom\" ? score : 0,\r\n                        },\r\n                    });\r\n                } else {\r\n                    let entry = eventHash.get(lead);\r\n                    entry.eventObj.push({\r\n                        event: leadEvent,\r\n                        type: type,\r\n                        score: score,\r\n                    });\r\n                    entry.message += \"\\n\" + (entry.eventObj.length) + \". \" + this.pushWorkNotes(type, leadEvent, score);\r\n                    entry.totalScore += score;\r\n                    entry.eventAggregate[type] += score;\r\n                }\r\n                x++;\r\n            }\r\n\r\n            //Calculate all leads with no scores\r\n            var emptyLeadGR = new GlideRecord('sn_lead_mgmt_core_lead');\r\n            emptyLeadGR.addQuery('lead_score', 'NULL');\r\n            emptyLeadGR.setValue('lead_score', 0);\r\n            emptyLeadGR.setValue('lead_rating', '100_cold');\r\n            emptyLeadGR.setValue('x_cadso_lead_marketing_sales_action', '');\r\n            emptyLeadGR.updateMultiple();\r\n\t\t\t\r\n\t\t\t//No need to query if there are no events\r\n            if (hashEvent.size == 0) {\r\n                return;\r\n            }\r\n            var leadUpdateGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            x = 0;\r\n            let queryArr = [];\r\n            let querylength = 0;\r\n            let y = 0;\r\n            let total = eventHash.size;\r\n            let count = 0;\r\n            for (let [key, value] of eventHash) {\r\n                count++;\r\n                queryArr.push(value.lead);\r\n                querylength += value.lead.length + 1;\r\n\r\n                if (querylength > 30000000 || count >= total) {\r\n                    let stringQuery = \"sys_idIN\" + queryArr.join(',');\r\n                    leadUpdateGR.addEncodedQuery(stringQuery);\r\n                    queryArr = [];\r\n                    querylength = 0;\r\n                    y++;\r\n                }\r\n            }\r\n\r\n            leadUpdateGR.query();\r\n            while (leadUpdateGR.next()) {\r\n\r\n                const leadID = leadUpdateGR.getValue('sys_id');\r\n\r\n                if (eventHash.has(leadID)) {\r\n                    let hashedEvent = eventHash.get(leadID);\r\n\r\n                    const addedMarketScore = hashedEvent.eventAggregate.marketing;\r\n                    const addedCustomScore = hashedEvent.eventAggregate.custom;\r\n                    const message = hashedEvent.message;\r\n                    const totalScore = hashedEvent.totalScore;\r\n                    let newScore = 0;\r\n\r\n                    currentScore = leadUpdateGR.getValue(\"lead_score\") || 0;\r\n                    salesScore = leadUpdateGR.getValue(\"x_cadso_lead_sales_score\");\r\n                    marketScore = leadUpdateGR.getValue(\"x_cadso_lead_marketing_score\");\r\n                    // newScore = Number(totalScore) + Number(currentScore);\r\n                    //Calculate market and custom score max and update new score \r\n                    newScore = currentScore;\r\n                    const weightedMarket = this.scoreThresholdCheck(addedMarketScore, 'marketing', newScore, salesScore, marketScore);\r\n                    newScore = weightedMarket[\"leadScore\"];\r\n\r\n                    const weightedCustom = this.scoreThresholdCheck(addedCustomScore, 'custom', newScore, salesScore, marketScore);\r\n                    newScore = weightedCustom[\"leadScore\"];\r\n\r\n                    // if we are not using median percentile, set lead rating based on lead score\r\n\r\n                    if (newScore && useMedPercent == \"false\") {\r\n\r\n                        let highestRating = 0;\r\n                        let tempScore = newScore;\r\n                        for (let r = 0; r < leadRatings.length; r++) {\r\n\r\n                            if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                                highestRating = leadRatings[r].scoreRange[1];\r\n                            }\r\n                        }\r\n\r\n                        for (let w = 0; w < leadRatings.length; w++) {\r\n                            let minRating = leadRatings[w].scoreRange[0];\r\n                            let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                            if (tempScore > highestRating) {\r\n                                tempScore = highestRating;\r\n                            }\r\n\r\n                            if (tempScore <= 0) {\r\n                                tempScore = 1;\r\n                            }\r\n                            if (tempScore > minRating && tempScore <= maxRating) {\r\n\r\n                                leadUpdateGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                                leadUpdateGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_marketing_score\", weightedMarket[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"x_cadso_lead_sales_score\", weightedCustom[\"typeScore\"]);\r\n                    leadUpdateGR.setValue(\"lead_score\", newScore);\r\n                    leadUpdateGR.work_notes = message;\r\n                    leadUpdateGR.update();\r\n                } else {\r\n                    gs.info(\"Lead Score MAP DOES NOT HAVE THIS LEAD : \" + leadID);\r\n                }\r\n                x++;\r\n            }\r\n            this.deleteLeadEvents();\r\n\r\n\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Calculate Score Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteLeadEvents: function() {\r\n        var leadEventsDeleteGR = new GlideRecordSecure(\"x_cadso_lead_event\");\r\n        leadEventsDeleteGR.query();\r\n        leadEventsDeleteGR.setWorkflow(false);\r\n        leadEventsDeleteGR.deleteMultiple();\r\n    },\r\n\r\n    getLeadRating: function() {\r\n\r\n        let eventMaxScore = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        let customEventMaxScore = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        let useMedPercentile = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n\r\n        let minRating = 0;\r\n        let lowestRating = 0;\r\n        let leadRatings = [];\r\n        let ratingGR = new GlideRecord('x_cadso_lead_rating_definition');\r\n        ratingGR.orderBy('max_rating');\r\n        ratingGR.query();\r\n\r\n        while (ratingGR.next()) {\r\n            let maxRating = Number(ratingGR.getValue('max_rating'));\r\n            if (maxRating < 0) {\r\n                gs.info(\"LEAD SCORING ERROR: RATING SCORE WAS LESS THEN 0. THE RATING WAS CHANGED TO 0\")\r\n                maxRating = 0;\r\n            }\r\n            let newRating = ratingGR.segment_name.value.getValue();\r\n            let newAction = ratingGR.getValue('marketing_sales_action');\r\n            leadRatings.push({\r\n                scoreRange: [minRating, maxRating],\r\n                rating: newRating,\r\n                action: newAction\r\n            });\r\n            minRating = maxRating;\r\n        }\r\n        return leadRatings;\r\n        // if (score > maxRating) {\r\n        //     score = maxRating;\r\n        // } else if (score < 0) {\r\n        //     score = 0;\r\n        // }\r\n        // let rating = leadRatings.find(r => score >= r.scoreRange[0] && score <= r.scoreRange[1]);\r\n\r\n        // if (rating) {\r\n        //     // return rating.rating;\r\n        //     return rating;\r\n        // }\r\n\r\n    },\r\n\r\n    medianPercentile: function(data, score) {\r\n        if (!data.length) return null;\r\n        var count = 0;\r\n        for (var x = 0; x < data.length; x++) {\r\n            if (Number(data[x]) <= Number(score)) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        var percentileRank = (count / data.length) * 100;\r\n\r\n        return percentileRank;\r\n    },\r\n\r\n\r\n\r\n\r\n    calculateMedianRatings: function() {\r\n\r\n        let leadRatings = this.getLeadRating();\r\n        var start = Date.now();\r\n\r\n        var newScoreData = [];\r\n        var allLeadGR = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.groupBy(\"lead_score\");\r\n        allLeadGR.orderBy(\"lead_score\");\r\n        allLeadGR.addAggregate('COUNT');\r\n        allLeadGR.query();\r\n        let x = 1;\r\n        let scoreHash = new Map();\r\n        while (allLeadGR.next()) {\r\n            var leadScore = allLeadGR.getValue('lead_score');\r\n\r\n            if (!scoreHash.has(x)) {\r\n                scoreHash.set(x, leadScore);\r\n            }\r\n            x++;\r\n        }\r\n\r\n        if (!scoreHash.size) {\r\n            gs.indo(\"LEAD SCORING ERROR: NO SCORES TO UPDATE IN MEDIAN SCORING\")\r\n            return;\r\n        }\r\n\r\n        for (let [key, value] of scoreHash) {\r\n\r\n            let scorePercentile = Math.ceil((key / scoreHash.size) * 100);\r\n            if (scorePercentile === 0) {\r\n                gs.info(\"LEAD SCORE ERROR: PERCENTILE WAS 0. SHOULD NOT BE POSSIBLE - VALUE: \" + key + \" - SCORE HASH SIZE: \" + scoreHash.size);\r\n                continue;\r\n            }\r\n\r\n            let highestRating = 0;\r\n            for (let r = 0; r < leadRatings.length; r++) {\r\n                if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                    highestRating = leadRatings[r].scoreRange[1];\r\n                }\r\n            }\r\n            var medLeadGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n            medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            medLeadGR.addEncodedQuery(\"lead_score= \" + value);\r\n            medLeadGR.query();\r\n            for (let w = 0; w < leadRatings.length; w++) {\r\n                let minRating = leadRatings[w].scoreRange[0];\r\n                let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                if (scorePercentile > highestRating) {\r\n                    scorePercentile = highestRating;\r\n                }\r\n                if (scorePercentile > minRating && scorePercentile <= maxRating) {\r\n\r\n                    medLeadGR.setValue(\"lead_rating\", leadRatings[w].rating);\r\n                    medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", leadRatings[w].action);\r\n                    medLeadGR.updateMultiple();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // var medLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        // medLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        // // medLeadGR.addEncodedQuery(\"lead_score=0\");\r\n        // // medLeadGR.setLimit(100);\r\n        // medLeadGR.orderBy(\"lead_score\");\r\n        // medLeadGR.query();\r\n\r\n        // while (medLeadGR.next()) {\r\n        //     var updatedScore = medLeadGR.getValue(\"lead_score\") || 0;\r\n        //     var percentRank = this.medianPercentile(newScoreData, updatedScore);\r\n        //     var updatedRating = this.getLeadRating(percentRank);\r\n\r\n        //     if (updatedRating) {\r\n        //         medLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n        //         medLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n        //         medLeadGR.setValue(\"lead_score\", updatedScore);\r\n        //     }\r\n        //     medLeadGR.update();\r\n        // }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    calcStandardScores: function() {\r\n        var start = Date.now();\r\n\r\n        var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        allLeadGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n        allLeadGR.query();\r\n\r\n        while (allLeadGR.next()) {\r\n            var updatedScore = allLeadGR.getValue(\"lead_score\") || 0;\r\n            var updatedRating = this.getLeadRating(updatedScore);\r\n\r\n            if (updatedRating) {\r\n                allLeadGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                allLeadGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                allLeadGR.setValue(\"lead_score\", updatedScore);\r\n            }\r\n            allLeadGR.update();\r\n        }\r\n        var end = Date.now();\r\n        var time = end - start;\r\n    },\r\n\r\n    scoreThresholdCheck: function(eventScore, eventType, leadScore, salesScore, marketScore) {\r\n        // extract max score\r\n        var customMax = this.getProperty(\"x_cadso_lead.tenon_custom_event_max_score\") || 150;\r\n        var marketingMax = this.getProperty(\"x_cadso_lead.tenon_event_max_score\") || 100;\r\n        // initialize variables\r\n        var typeScore = 0;\r\n        var maxScore = 0;\r\n        eventScore = Number(eventScore);\r\n        leadScore = Number(leadScore);\r\n        salesScore = Number(salesScore);\r\n        marketScore = Number(marketScore);\r\n\r\n        // set max score and choose between market/sales score based on the type\r\n        if (eventType == \"custom\") {\r\n            maxScore = customMax;\r\n            typeScore = salesScore;\r\n        } else {\r\n            maxScore = marketingMax;\r\n            typeScore = marketScore;\r\n        }\r\n\r\n        // // if the new score is larger than max\r\n        if (eventScore + typeScore >= maxScore) {\r\n            // substract the overflow and add the rest to lead score, then set the typeScore to maxScore based on type\r\n            var diff = eventScore + typeScore - maxScore;\r\n            leadScore = eventScore + leadScore - diff;\r\n            typeScore = maxScore;\r\n        } else {\r\n            // add eventscore normally\r\n            leadScore = eventScore + leadScore;\r\n            typeScore = eventScore + typeScore;\r\n        }\r\n\r\n        return {\r\n            \"leadScore\": leadScore,\r\n            \"typeScore\": typeScore\r\n        };\r\n    },\r\n\r\n\r\n    getProperty: function(name) {\r\n        var coreSettingGR = new GlideRecordSecure(\"x_cadso_core_setting\");\r\n        coreSettingGR.addQuery(\"name\", name);\r\n        coreSettingGR.addQuery(\"active\", \"true\");\r\n        coreSettingGR.query();\r\n        if (coreSettingGR.next()) {\r\n            var result = coreSettingGR.getValue(\"value\");\r\n        }\r\n\r\n        return result;\r\n\r\n    },\r\n\r\n\r\n    pushWorkNotes: function(type, event, score) {\r\n        var message = \"\";\r\n        var marketingMessages = {\r\n            'Clicked': 'Clicked on an email',\r\n            'Opened': 'Opened an email',\r\n            'Complained': 'Marked an email as spam',\r\n            'Subscribed': 'Subscribed to email marketing',\r\n            'Unsubscribed': 'Unsubscribed',\r\n            'Opted-In': 'Opted-In to SMS marketing',\r\n            'Opted-Out': 'Opted-Out of SMS marketing'\r\n        };\r\n        if (type === \"marketing\") {\r\n            var upperEvent = event[0].toUpperCase() + event.slice(1);\r\n            event = upperEvent;\r\n        } else if (type === \"custom\") {\r\n            var typeId = event;\r\n\r\n            var actTypeGR = new GlideRecordSecure('sn_actsub_activity_type');\r\n            actTypeGR.get(typeId);\r\n\r\n            if (actTypeGR.isValid()) {\r\n                var description = actTypeGR.getValue('short_description') || \"\";\r\n                event = description;\r\n            }\r\n        }\r\n\r\n        if (type === \"custom\") {\r\n            message += \" \" + event + \"\";\r\n        } else {\r\n            message += \" \" + marketingMessages[event];\r\n        }\r\n        message += \": Lead score updated by \" + score;\r\n\r\n        return message;\r\n\r\n    },\r\n\r\n    calcStandardScoresAgg: function() {\r\n        try {\r\n            let start = Date.now();\r\n            let leadRatings = this.getLeadRating();\r\n            let updatedRating = leadRatings[0];\r\n            let allLeadGA = new GlideAggregate(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGA.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n            allLeadGA.groupBy('lead_score');\r\n            allLeadGA.query();\r\n\r\n            while (allLeadGA.next()) {\r\n                let groupScore = allLeadGA.getValue(\"lead_score\") || 0;\r\n                let returnScore = groupScore == \"\" ? 0 : groupScore;\r\n                let highestRating = 0;\r\n                let updatedRating = leadRatings[0];\r\n                for (let r = 0; r < leadRatings.length; r++) {\r\n                    if (highestRating < leadRatings[r].scoreRange[1]) {\r\n                        highestRating = leadRatings[r].scoreRange[1];\r\n                    }\r\n                }\r\n\r\n                for (let w = 0; w < leadRatings.length; w++) {\r\n                    let minRating = leadRatings[w].scoreRange[0];\r\n                    let maxRating = leadRatings[w].scoreRange[1];\r\n\r\n                    if (groupScore > highestRating) {\r\n                        returnScore = highestRating;\r\n                    }\r\n                    if (groupScore < 0) {\r\n                        //Set to 1 to update rating to lowest, returnScore does not update lead score\r\n                        returnScore = 1;\r\n                    }\r\n                    if (returnScore > minRating && returnScore <= maxRating) {\r\n                        updatedRating = leadRatings[w];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (updatedRating) {\r\n                    let updateScoreGR = new GlideRecord(\"sn_lead_mgmt_core_lead\");\r\n                    updateScoreGR.addQuery(\"lead_score\", groupScore);\r\n                    updateScoreGR.addQuery(\"stage\", \"!=\", \"400_closed_won\");\r\n                    updateScoreGR.setValue(\"lead_rating\", updatedRating.rating);\r\n                    updateScoreGR.setValue(\"x_cadso_lead_marketing_sales_action\", updatedRating.action);\r\n                    updateScoreGR.updateMultiple();\r\n                }\r\n\r\n            }\r\n            let end = Date.now();\r\n            var time = end - start;\r\n            gs.info(\"WM MEDIAN AGG TIME: \" + time);\r\n        } catch (e) {\r\n            gs.info(\"Lead Score Aggregate Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    calculateLiveScore: function(event) {\r\n        var scoreData = [];\r\n        var useMedPercent = this.getProperty(\"x_cadso_lead.tenon_enable_median_lead_scoring\") || \"false\";\r\n        if (useMedPercent == \"true\") {\r\n            var allLeadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n            allLeadGR.addEncodedQuery(\"stage!=400_closed_won^lead_scoreISNOTEMPTY\");\r\n            allLeadGR.orderBy(\"lead_score\");\r\n            allLeadGR.query();\r\n\r\n            while (allLeadGR.next()) {\r\n                scoreData.push(allLeadGR.getValue('lead_score'));\r\n            }\r\n        }\r\n        var leadScore = 0;\r\n        var newScore = 0;\r\n        var leadSysID = event.getValue(\"lead\");\r\n        var eventScore = event.getValue(\"score\");\r\n        var eventType = event.getValue(\"event_type\");\r\n        var leadGR = new GlideRecordSecure(\"sn_lead_mgmt_core_lead\");\r\n        leadGR.addQuery(\"sys_id\", leadSysID);\r\n        leadGR.query();\r\n        if (leadGR.next()) {\r\n            leadScore = leadGR.getValue(\"lead_score\");\r\n            newScore = Number(eventScore) + Number(leadScore);\r\n\r\n            var newRating = this.getLeadRating(newScore);\r\n            var salesScore = leadGR.getValue(\"x_cadso_lead_sales_score\");\r\n            var marketScore = leadGR.getValue(\"x_cadso_lead_marketing_score\");\r\n            var weightedScore = this.scoreThresholdCheck(eventScore, eventType, leadScore, salesScore, marketScore);\r\n            // if we are not using median percentile, set lead rating based on lead score\r\n            // else calculate median percentile rank and set rating appropriately\r\n            if (newRating && useMedPercent == \"false\") {\r\n                leadGR.setValue(\"lead_rating\", newRating.rating);\r\n                leadGR.setValue(\"x_cadso_lead_marketing_sales_action\", newRating.action);\r\n            }\r\n            leadGR.setValue(\"lead_score\", weightedScore[\"leadScore\"]);\r\n            if (eventType == \"custom\") {\r\n                leadGR.setValue(\"x_cadso_lead_sales_score\", weightedScore[\"typeScore\"]);\r\n            } else {\r\n                leadGR.setValue(\"x_cadso_lead_marketing_score\", weightedScore[\"typeScore\"]);\r\n            }\r\n            leadGR.update();\r\n        }\r\n    },\r\n    type: 'LeadScoringMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "d7d2017bc3646610d4ddf1db050131db",
    "display_value": "Tenon Lead Management"
  },
  "sys_update_name": {
    "value": "sys_script_include_9223aa80c3f0e610d4ddf1db05013152",
    "display_value": "sys_script_include_9223aa80c3f0e610d4ddf1db05013152"
  },
  "sys_updated_by": {
    "value": "will.mcgill",
    "display_value": "will.mcgill"
  },
  "api_name": {
    "value": "x_cadso_lead.LeadScoringMS",
    "display_value": "x_cadso_lead.LeadScoringMS"
  },
  "sys_created_on": {
    "value": "2025-04-04 15:30:07",
    "display_value": "2025-04-04 08:30:07 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "LeadScoringMS",
    "display_value": "LeadScoringMS"
  },
  "sys_name": {
    "value": "LeadScoringMS",
    "display_value": "LeadScoringMS"
  },
  "sys_scope": {
    "value": "d7d2017bc3646610d4ddf1db050131db",
    "display_value": "Tenon Lead Management"
  },
  "sys_created_by": {
    "value": "rumman.tariq",
    "display_value": "rumman.tariq"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
