{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "96028aa6c36f065085b196c4e4013109",
    "extracted_at": "2025-09-19T21:48:29.413Z",
    "display_value": "AudienceMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "209",
    "display_value": "209"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "Test update at 2025-08-18T19:43:32.950Z",
    "display_value": "Test update at 2025-08-18T19:43:32.950Z"
  },
  "sys_updated_on": {
    "value": "2025-09-17 14:27:37",
    "display_value": "2025-09-17 07:27:37 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "// Updated by Trevor\r\nvar AudienceMS = Class.create();\r\nAudienceMS.prototype = {\r\n    initialize: function() {\r\n        this.tableFields = {\r\n            'sys_user': 'user',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n        this.audienceTableFields = {\r\n            'sys_user': 'employee',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n    },\r\n    getRecordFields: function(table) {\r\n        return this.tableFields[table];\r\n    },\r\n\r\n    refreshAudienceHash: function({\r\n        audienceSysID,\r\n        newConditions,\r\n        update\r\n    }) {\r\n\r\n        let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n        audienceMemberGR.addQuery('audience', audienceSysID);\r\n        audienceMemberGR.query();\r\n        audienceMemberGR.deleteMultiple();\r\n\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        let validAudience = audienceGR.get(audienceSysID);\r\n        if (!validAudience) {\r\n            throw new Error(`Error getting Audience Record for sysID ${audienceSysID}`);\r\n        }\r\n\r\n        let conditions = newConditions;\r\n        if (!conditions) {\r\n            throw new Error(`Error getting Audience conditions for sysID ${audienceSysID} - conditions : ${conditions}`);\r\n        }\r\n\r\n        //TODO: MAYBE ADD CHECK AGAISNT OLD CONDITIONS TO SEE IF WE NEED TO UPDATE??\r\n\r\n        let table = audienceGR.getValue(\"table\");\r\n        let batchSize = 1000;\r\n        let count = 0;\r\n        let memberBatches = [];\r\n        let members = new Map;\r\n        let batch = [];\r\n\r\n        // Get merge tag variables\r\n        // let vars = {};\r\n        // let fieldsToQuery = [];\r\n        // let mergeTagGR = new GlideRecord('x_cadso_core_merge_tag');\r\n        // mergeTagGR.addQuery('table', table);\r\n        // mergeTagGR.addQuery('active', true);\r\n        // mergeTagGR.query();\r\n\r\n        // while (mergeTagGR.next()) {\r\n        //     let field = mergeTagGR.getValue('field') || \"\";\r\n        //     if (field) {\r\n        //         vars[field] = \"\";\r\n        //         fieldsToQuery.push(field + '$DISPLAY');\r\n        //     }\r\n        // }\r\n        new global.GlideQuery.parse(table, conditions)\r\n            .select(['x_cadso_automate_contact_detail_data'])\r\n            .forEach(member => {\r\n                // for (let x = 0; x < fieldsToQuery.length; x++) {\r\n                //     vars[fieldsToQuery[x].replace('$DISPLAY', '')] = member[fieldsToQuery[x]] || \"\";\r\n                // }\r\n                // var parsedData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                // parsedData.email.member.vars = vars;\r\n                var memberData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                batch.push(memberData);\r\n\r\n                if (batch.length === batchSize) {\r\n                    // memberBatches.push(batch);\r\n                    let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                    audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n                    audienceMemberGR.setValue('audience', audienceSysID);\r\n                    audienceMemberGR.insert();\r\n                    batch = [];\r\n                }\r\n                count++;\r\n            });\r\n        // Push remaining records if not a full batch\r\n        if (batch.length > 0) {\r\n            let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n            audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n            audienceMemberGR.setValue('audience', audienceSysID);\r\n            audienceMemberGR.insert();\r\n        }\r\n\r\n        // for (let i = 0; i < memberBatches.length; i++) {\r\n\r\n        // }\r\n\r\n        let refreshed = new GlideDateTime();\r\n        if (update) {\r\n            audienceGR.setValue(\"count\", count);\r\n            audienceGR.setValue(\"conditions\", newConditions);\r\n            audienceGR.setValue(\"refreshed\", refreshed);\r\n            audienceGR.update();\r\n        }\r\n    },\r\n\r\n    refreshAudienceMembers: function({\r\n        audienceSysID,\r\n        update\r\n    }) {\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        if (!audienceGR.get(audienceSysID)) {\r\n            throw 'Audience Builder: Error getting Audience Record for sysID' + audienceSysID;\r\n        }\r\n\r\n        let conditions = audienceGR.getValue('conditions');\r\n        let audienceTable = audienceGR.getValue(\"table\");\r\n\r\n        let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberGR.addQuery(\"audience\", audienceSysID);\r\n        memberGR.query();\r\n        while (memberGR.next()) {\r\n            let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n            let memberSysId = memberData.sysId;\r\n\r\n            let memberExistsInHash = false;\r\n            // Check if this member exists in any hash record\r\n            let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n            hashGR.addQuery(\"audience\", audienceSysID);\r\n            hashGR.query();\r\n            while (hashGR.next()) {\r\n                let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n\r\n                // Check if memberSysId exists in this hash array\r\n                for (let i = 0; i < hashArray.length; i++) {\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!memberExistsInHash) {\r\n                // Member no longer exists in current hash, mark for deletion\r\n                memberGR.deleteRecord();\r\n            }\r\n        }\r\n\r\n        let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n        hashGR.addQuery(\"audience\", audienceSysID);\r\n        hashGR.query();\r\n        while (hashGR.next()) {\r\n            let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n            for (let i = 0; i < hashArray.length; i++) {\r\n                let memberExistsInHash = false;\r\n                let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                memberGR.addQuery(\"audience\", audienceSysID);\r\n                memberGR.query();\r\n                while (memberGR.next()) {\r\n                    let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n                    let memberSysId = memberData.sysId;\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!memberExistsInHash) {\r\n\r\n                    let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                    let data = JSON.stringify(hashArray[i]);\r\n                    let recordId = hashArray[i].sysId;\r\n                    let table = hashArray[i].table;\r\n                    let email = hashArray[i].email.address;\r\n                    let name = hashArray[i].email.member.name || \"\";\r\n                    let field = this.audienceTableFields[table];\r\n\r\n                    audienceMemberGR.initialize();\r\n                    audienceMemberGR.setValue(\"audience\", audienceSysID);\r\n                    audienceMemberGR.setValue(\"member_hash\", data);\r\n                    audienceMemberGR.setValue(\"name\", name);\r\n                    audienceMemberGR.setValue(field, recordId);\r\n                    audienceMemberGR.insert();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n    _getPreviousMembers: function(audienceID) {\r\n        let currentMembers = [];\r\n        let memberTableGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberTableGR.addQuery(\"audience\", audienceID);\r\n        memberTableGR.query();\r\n        while (memberTableGR.next()) {\r\n            let memberHash = JSON.parse(memberTableGR.getValue(\"member_hash\")) || null;\r\n            if (memberHash) {\r\n                currentMembers.push({\r\n                    sysId: memberTableGR.getValue(\"sys_id\"),\r\n                    memberHash: memberHash\r\n                });\r\n            }\r\n        }\r\n        return currentMembers;\r\n    },\r\n\r\n    _getCurrentMembers: function(audienceID) {\r\n        let previousMembers = new Map();\r\n        let previousMembersGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n\r\n        previousMembersGR.addQuery(\"audience\", audienceID);\r\n        previousMembersGR.query();\r\n\r\n        while (previousMembersGR.next()) {\r\n            let hash = JSON.parse(previousMembersGR.getValue(\"member_hash\"));\r\n            let y = 0;\r\n            for (let x = 0; x < hash.length; x++) {\r\n                if (hash[x]) {\r\n                    if (!previousMembers.get(hash[x].sysId)) {\r\n                        previousMembers.set(hash[x].sysId, hash[x]);\r\n                    }\r\n                } else {\r\n                    y++;\r\n                }\r\n            }\r\n            gs.warn(\"Audience Members do not have hash data for audience: \" + audienceID + \" - on Member Hash : \" + previousMembersGR.getUniqueValue() + \" - # of members \" + y);\r\n        }\r\n\r\n        return previousMembers;\r\n    },\r\n\r\n\r\n\r\n\r\n    _deleteRemovedMembers: function(membersToDelete, audienceID) {\r\n        let audienceMembersGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        audienceMembersGR.addQuery(\"audience\", audienceID);\r\n        audienceMembersGR.addQuery('sys_id', 'IN', membersToDelete);\r\n        audienceMembersGR.query();\r\n        audienceMembersGR.deleteMultiple();\r\n    },\r\n\r\n    _addNewMembers: function(membersToAdd, audienceID) {\r\n        let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        for (let i = 0; i < membersToAdd.length; i++) {\r\n            let data = JSON.stringify(membersToAdd[i])\r\n            audienceMemberGR.initialize();\r\n            audienceMemberGR.setValue(\"audience\", audienceID);\r\n            audienceMemberGR.setValue(\"member_hash\", data);\r\n            audienceMemberGR.setValue(\"name\", membersToAdd[i].email.member.name);\r\n            audienceMemberGR.insert();\r\n        }\r\n    },\r\n\r\n    generateEmailTemps: function(sendId) {\r\n        try {\r\n            var sendGR = new GlideRecord('x_cadso_automate_email_send');\r\n            sendGR.get(sendId);\r\n\r\n            if (sendGR.isValidRecord()) {\r\n                var excluded = sendGR.getValue('excluded_audiences');\r\n                var audiences = sendGR.getValue('audiences');\r\n                var audArr = [];\r\n                var exArr = [];\r\n\r\n                if (audiences) {\r\n                    audArr = audiences.split(',');\r\n                }\r\n                if (excluded) {\r\n                    exArr = excluded.split(',');\r\n                }\r\n\r\n                var excMap = new Map();\r\n                var excludeGR = new GlideRecord('x_cadso_automate_audience_hash')\r\n                excludeGR.addQuery('audience', 'IN', exArr);\r\n                excludeGR.query();\r\n\r\n                while (excludeGR.next()) {\r\n                    var members = JSON.parse(excludeGR.getValue('member_hash'))\r\n                    for (var i = 0; i < members.length; i++) {\r\n                        excMap.set(members[i].sysId, true);\r\n                    }\r\n                }\r\n\r\n                //get merge tags for this email send\r\n                let mergeTags = [];\r\n                var mergeTagGR = new GlideRecord('x_cadso_core_merge_tag_send');\r\n                mergeTagGR.addEncodedQuery(\"document_id=\" + sendId);\r\n                mergeTagGR.query();\r\n                while (mergeTagGR.next()) {\r\n                    let mergeTagsString = mergeTagGR.getValue(\"merge_tag_data\")\r\n\t\t\t\t\tmergeTags = JSON.parse(mergeTagsString);\r\n                }\r\n\r\n                var hashRecordGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                hashRecordGR.addQuery('audience', 'IN', audArr);\r\n                hashRecordGR.query();\r\n                while (hashRecordGR.next()) {\r\n                    var hashData = JSON.parse(hashRecordGR.getValue('member_hash'));\r\n                    let tempHashData = [];\r\n\r\n                    // Filter and transform valid members\r\n                    for (var y = 0; y < hashData.length; y++) {\r\n                        var member = hashData[y];\r\n                        var inExcluded = excMap.has(member.sysId);\r\n\r\n                        // Check if member is valid\r\n                        if (member.email && member.email.member && member.email.member.address && member.email.member.subscribed && !inExcluded) {\r\n\r\n                            var tempMember = {\r\n                                address: member.email.member.address,\r\n                                name: member.email.member.name || '', // Added fallback\r\n                                vars: {},\r\n                                subscribed: member.email.member.subscribed\r\n                            };\r\n\r\n                            // Add merge tag variables\r\n                            for (let x = 0; x < mergeTags.length; x++) {\r\n                                if (member.email.member.vars && member.email.member.vars[mergeTags[x]] !== undefined) {\r\n                                    tempMember.vars[mergeTags[x]] = member.email.member.vars[mergeTags[x]];\r\n                                }\r\n                            }\r\n\r\n                            tempHashData.push(tempMember);\r\n                        }\r\n                    }\r\n\r\n                    // Push to temp email table only if there are valid members\r\n                    if (tempHashData.length > 0) {\r\n                        var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n                        tempGR.initialize();\r\n                        tempGR.member_hash = JSON.stringify(tempHashData);\r\n                        tempGR.email_send = sendId;\r\n                        tempGR.insert();\r\n                    }\r\n                }\r\n            } else {\r\n                gs.info(\"Tenon generate Email Temp records error - Invalid email send record sys_id: \" + sendId);\r\n            }\r\n        } catch (e) {\r\n            gs.info(\"Generate Email Temps Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteEmailTemps: function(sendId) {\r\n        if (sendId) {\r\n            var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n            tempGR.addQuery('email_send', sendId);\r\n            tempGR.deleteMultiple();\r\n        }\r\n    },\r\n\r\n    formatPhoneNumber: function(phoneNumberString) {\r\n        var cleaned = ('' + phoneNumberString).replace(/\\D/g, '');\r\n        var match = cleaned.match(/^(\\d+)?(\\d{3})(\\d{3})(\\d{4})$/);\r\n\r\n        if (match) {\r\n            var intlCode = (match[1] ? '+' + match[1] : '+1');\r\n\r\n            return [intlCode, match[2], match[3], match[4]].join('');\r\n        }\r\n        gs.info(\"Phone number not formatted correctly for number \" + phoneNumberString);\r\n    },\r\n    // _updateAudience(audienceID, count, refreshed, conditions) {\r\n    //     let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n    //     if (audienceGR.get(audienceID)) {\r\n    //         if (conditions) {\r\n    //             audienceGR.setValue(\"conditions\", conditions);\r\n    //         }\r\n    //         audienceGR.setValue(\"count\", count);\r\n    //         audienceGR.setValue(\"refreshed\", refreshed);\r\n    //         audienceGR.update();\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // },\r\n\r\n    // _getContactDetailID: function (email, mobilePhone, table, tableID, name) {\r\n    // \tif(email){\r\n    // \t\tlet emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    // \t\temailGR.addQuery('email', email);\r\n    // \t\temailGR.addNotNullQuery('contact_detail');\r\n    // \t\temailGR.query()\r\n    // \t\tif(emailGR.next()){\r\n    // \t\t\tlet contactID = emailGR.getValue('contact_detail');\r\n    // \t\t\tlet phone = {\r\n    // \t\t\t\tphone_number: mobilePhone,\r\n    // \t\t\t\tcontact_detail: contactID\r\n    // \t\t\t};\r\n    // \t\t\tlet phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t.getBy(phone)\r\n    // \t\t\t.orElse(null);\r\n    // \t\t\tif(!phoneGQ){\r\n    // \t\t\t\tphoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t\t.insert(phone);\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tif(mobilePhone){\r\n    // \t\tlet phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    // \t\tphoneGR.addQuery('phone_number', mobilePhone);\r\n    // \t\tphoneGR.addNotNullQuery('contact_detail');\r\n    // \t\tphoneGR.query();\r\n    // \t\tif(phoneGR.next()){\r\n    // \t\t\tlet contactID = phoneGR.getValue('contact_detail');\r\n    // \t\t\tif(email){\r\n    // \t\t\t\tlet emailObj = {\r\n    // \t\t\t\t\temail_address: email,\r\n    // \t\t\t\t\tcontact_detail: contactID\r\n    // \t\t\t\t}\r\n    // \t\t\t\tlet emailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t.getBy(contactID)\r\n    // \t\t\t\t.orElse(null);\r\n    // \t\t\t\tif(!emailGQ){\r\n    // \t\t\t\t\temailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t\t.insert(emailObj);\r\n    // \t\t\t\t}\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tlet contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n    //     let field = this.tableFields[table];\r\n    //     contactDetailGR.addQuery(field, tableID);\r\n    // \tcontactDetailGR.query();\r\n    // \tif (contactDetailGR.next()) {\r\n    // \t\treturn contactDetailGR.getUniqueValue();\r\n    // \t} else {\r\n    //         let field = this.tableFields[table];\r\n    // \t\tcontactDetailGR.initialize();\r\n    // \t\tcontactDetailGR.setValue(\"email_address\", email);\r\n    // \t\tcontactDetailGR.setValue(\"phone_number\", mobilePhone);\r\n    //         contactDetailGR.setValue(field, tableID);\r\n    // \t\tcontactDetailGR.setValue('name', name);\r\n    // \t\tcontactDetailGR.setWorkflow(false);\r\n    // \t\tlet contactDetailID = contactDetailGR.insert();\r\n    // \t\treturn contactDetailID;\r\n    // \t}\r\n    // },\r\n\r\n    // _getContactDetailID: function(email, mobilePhone, table, tableID, name) {\r\n    //     let contactDetailID = null;\r\n    //     if (email) {\r\n    //         contactDetailID = this._getContactDetailByEmail(email);\r\n    //         if (contactDetailID) {\r\n    //             if (mobilePhone) {\r\n    //                 this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     if (mobilePhone) {\r\n    //         contactDetailID = this._getContactDetailByPhone(mobilePhone);\r\n    //         if (contactDetailID) {\r\n    //             if (email) {\r\n    //                 this._getOrInsertEmail(email, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     contactDetailID = this._createContactDetail(table, tableID, name);\r\n    //     if (email) {\r\n    //         this._getOrInsertEmail(email, contactDetailID);\r\n    //     }\r\n    //     if (mobilePhone) {\r\n    //         this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //     }\r\n    //     return contactDetailID;\r\n    // },\r\n\r\n    // _getContactDetailByEmail: function(email) {\r\n    //     let contactID = null;\r\n    //     let emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    //     emailGR.addQuery('email', email);\r\n    //     emailGR.addNotNullQuery('contact_detail');\r\n    //     emailGR.query();\r\n    //     if (emailGR.next()) {\r\n    //         contactID = emailGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getContactDetailByPhone: function(phone) {\r\n    //     let contactID = null;\r\n    //     let phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    //     phoneGR.addQuery('phone_number', phone);\r\n    //     phoneGR.addNotNullQuery('contact_detail');\r\n    //     phoneGR.query();\r\n    //     if (phoneGR.next()) {\r\n    //         contactID = phoneGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getOrInsertEmail: function(email, contactDetailID) {\r\n    //     let emailObj = {\r\n    //         email: email,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //         .getBy(emailObj)\r\n    //         .orElse(null)\r\n    //     if (!emailGQ) {\r\n    //         emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //             .insert(emailObj)\r\n    //     }\r\n    //     return (emailGQ.sys_id);\r\n    // },\r\n\r\n    // _getOrInsertPhone: function(mobilePhone, contactDetailID) {\r\n    //     let phoneObj = {\r\n    //         phone_number: mobilePhone,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //         .getBy(phoneObj)\r\n    //         .orElse(null)\r\n    //     if (!phoneGQ) {\r\n    //         phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //             .insert(phoneObj);\r\n    //     }\r\n    //     return phoneGQ.sys_id;\r\n    // },\r\n\r\n    _createContactDetail: function(table, tableID, name) {\r\n        let tableField = this.tableFields[table]\r\n        let contactDetail = {};\r\n        contactDetail[tableField] = tableID;\r\n        let contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n            .getBy(contactDetail)\r\n            .orElse(null);\r\n        if (!contactDetailGQ) {\r\n            contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .insert(contactDetail)\r\n                .get();\r\n        }\r\n        return contactDetailGQ.sys_id;\r\n    },\r\n\r\n    type: 'AudienceMS'\r\n};",
    "display_value": "// Updated by Trevor\r\nvar AudienceMS = Class.create();\r\nAudienceMS.prototype = {\r\n    initialize: function() {\r\n        this.tableFields = {\r\n            'sys_user': 'user',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n        this.audienceTableFields = {\r\n            'sys_user': 'employee',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n    },\r\n    getRecordFields: function(table) {\r\n        return this.tableFields[table];\r\n    },\r\n\r\n    refreshAudienceHash: function({\r\n        audienceSysID,\r\n        newConditions,\r\n        update\r\n    }) {\r\n\r\n        let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n        audienceMemberGR.addQuery('audience', audienceSysID);\r\n        audienceMemberGR.query();\r\n        audienceMemberGR.deleteMultiple();\r\n\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        let validAudience = audienceGR.get(audienceSysID);\r\n        if (!validAudience) {\r\n            throw new Error(`Error getting Audience Record for sysID ${audienceSysID}`);\r\n        }\r\n\r\n        let conditions = newConditions;\r\n        if (!conditions) {\r\n            throw new Error(`Error getting Audience conditions for sysID ${audienceSysID} - conditions : ${conditions}`);\r\n        }\r\n\r\n        //TODO: MAYBE ADD CHECK AGAISNT OLD CONDITIONS TO SEE IF WE NEED TO UPDATE??\r\n\r\n        let table = audienceGR.getValue(\"table\");\r\n        let batchSize = 1000;\r\n        let count = 0;\r\n        let memberBatches = [];\r\n        let members = new Map;\r\n        let batch = [];\r\n\r\n        // Get merge tag variables\r\n        // let vars = {};\r\n        // let fieldsToQuery = [];\r\n        // let mergeTagGR = new GlideRecord('x_cadso_core_merge_tag');\r\n        // mergeTagGR.addQuery('table', table);\r\n        // mergeTagGR.addQuery('active', true);\r\n        // mergeTagGR.query();\r\n\r\n        // while (mergeTagGR.next()) {\r\n        //     let field = mergeTagGR.getValue('field') || \"\";\r\n        //     if (field) {\r\n        //         vars[field] = \"\";\r\n        //         fieldsToQuery.push(field + '$DISPLAY');\r\n        //     }\r\n        // }\r\n        new global.GlideQuery.parse(table, conditions)\r\n            .select(['x_cadso_automate_contact_detail_data'])\r\n            .forEach(member => {\r\n                // for (let x = 0; x < fieldsToQuery.length; x++) {\r\n                //     vars[fieldsToQuery[x].replace('$DISPLAY', '')] = member[fieldsToQuery[x]] || \"\";\r\n                // }\r\n                // var parsedData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                // parsedData.email.member.vars = vars;\r\n                var memberData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                batch.push(memberData);\r\n\r\n                if (batch.length === batchSize) {\r\n                    // memberBatches.push(batch);\r\n                    let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                    audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n                    audienceMemberGR.setValue('audience', audienceSysID);\r\n                    audienceMemberGR.insert();\r\n                    batch = [];\r\n                }\r\n                count++;\r\n            });\r\n        // Push remaining records if not a full batch\r\n        if (batch.length > 0) {\r\n            let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n            audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n            audienceMemberGR.setValue('audience', audienceSysID);\r\n            audienceMemberGR.insert();\r\n        }\r\n\r\n        // for (let i = 0; i < memberBatches.length; i++) {\r\n\r\n        // }\r\n\r\n        let refreshed = new GlideDateTime();\r\n        if (update) {\r\n            audienceGR.setValue(\"count\", count);\r\n            audienceGR.setValue(\"conditions\", newConditions);\r\n            audienceGR.setValue(\"refreshed\", refreshed);\r\n            audienceGR.update();\r\n        }\r\n    },\r\n\r\n    refreshAudienceMembers: function({\r\n        audienceSysID,\r\n        update\r\n    }) {\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        if (!audienceGR.get(audienceSysID)) {\r\n            throw 'Audience Builder: Error getting Audience Record for sysID' + audienceSysID;\r\n        }\r\n\r\n        let conditions = audienceGR.getValue('conditions');\r\n        let audienceTable = audienceGR.getValue(\"table\");\r\n\r\n        let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberGR.addQuery(\"audience\", audienceSysID);\r\n        memberGR.query();\r\n        while (memberGR.next()) {\r\n            let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n            let memberSysId = memberData.sysId;\r\n\r\n            let memberExistsInHash = false;\r\n            // Check if this member exists in any hash record\r\n            let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n            hashGR.addQuery(\"audience\", audienceSysID);\r\n            hashGR.query();\r\n            while (hashGR.next()) {\r\n                let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n\r\n                // Check if memberSysId exists in this hash array\r\n                for (let i = 0; i < hashArray.length; i++) {\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!memberExistsInHash) {\r\n                // Member no longer exists in current hash, mark for deletion\r\n                memberGR.deleteRecord();\r\n            }\r\n        }\r\n\r\n        let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n        hashGR.addQuery(\"audience\", audienceSysID);\r\n        hashGR.query();\r\n        while (hashGR.next()) {\r\n            let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n            for (let i = 0; i < hashArray.length; i++) {\r\n                let memberExistsInHash = false;\r\n                let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                memberGR.addQuery(\"audience\", audienceSysID);\r\n                memberGR.query();\r\n                while (memberGR.next()) {\r\n                    let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n                    let memberSysId = memberData.sysId;\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!memberExistsInHash) {\r\n\r\n                    let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                    let data = JSON.stringify(hashArray[i]);\r\n                    let recordId = hashArray[i].sysId;\r\n                    let table = hashArray[i].table;\r\n                    let email = hashArray[i].email.address;\r\n                    let name = hashArray[i].email.member.name || \"\";\r\n                    let field = this.audienceTableFields[table];\r\n\r\n                    audienceMemberGR.initialize();\r\n                    audienceMemberGR.setValue(\"audience\", audienceSysID);\r\n                    audienceMemberGR.setValue(\"member_hash\", data);\r\n                    audienceMemberGR.setValue(\"name\", name);\r\n                    audienceMemberGR.setValue(field, recordId);\r\n                    audienceMemberGR.insert();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n    _getPreviousMembers: function(audienceID) {\r\n        let currentMembers = [];\r\n        let memberTableGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberTableGR.addQuery(\"audience\", audienceID);\r\n        memberTableGR.query();\r\n        while (memberTableGR.next()) {\r\n            let memberHash = JSON.parse(memberTableGR.getValue(\"member_hash\")) || null;\r\n            if (memberHash) {\r\n                currentMembers.push({\r\n                    sysId: memberTableGR.getValue(\"sys_id\"),\r\n                    memberHash: memberHash\r\n                });\r\n            }\r\n        }\r\n        return currentMembers;\r\n    },\r\n\r\n    _getCurrentMembers: function(audienceID) {\r\n        let previousMembers = new Map();\r\n        let previousMembersGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n\r\n        previousMembersGR.addQuery(\"audience\", audienceID);\r\n        previousMembersGR.query();\r\n\r\n        while (previousMembersGR.next()) {\r\n            let hash = JSON.parse(previousMembersGR.getValue(\"member_hash\"));\r\n            let y = 0;\r\n            for (let x = 0; x < hash.length; x++) {\r\n                if (hash[x]) {\r\n                    if (!previousMembers.get(hash[x].sysId)) {\r\n                        previousMembers.set(hash[x].sysId, hash[x]);\r\n                    }\r\n                } else {\r\n                    y++;\r\n                }\r\n            }\r\n            gs.warn(\"Audience Members do not have hash data for audience: \" + audienceID + \" - on Member Hash : \" + previousMembersGR.getUniqueValue() + \" - # of members \" + y);\r\n        }\r\n\r\n        return previousMembers;\r\n    },\r\n\r\n\r\n\r\n\r\n    _deleteRemovedMembers: function(membersToDelete, audienceID) {\r\n        let audienceMembersGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        audienceMembersGR.addQuery(\"audience\", audienceID);\r\n        audienceMembersGR.addQuery('sys_id', 'IN', membersToDelete);\r\n        audienceMembersGR.query();\r\n        audienceMembersGR.deleteMultiple();\r\n    },\r\n\r\n    _addNewMembers: function(membersToAdd, audienceID) {\r\n        let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        for (let i = 0; i < membersToAdd.length; i++) {\r\n            let data = JSON.stringify(membersToAdd[i])\r\n            audienceMemberGR.initialize();\r\n            audienceMemberGR.setValue(\"audience\", audienceID);\r\n            audienceMemberGR.setValue(\"member_hash\", data);\r\n            audienceMemberGR.setValue(\"name\", membersToAdd[i].email.member.name);\r\n            audienceMemberGR.insert();\r\n        }\r\n    },\r\n\r\n    generateEmailTemps: function(sendId) {\r\n        try {\r\n            var sendGR = new GlideRecord('x_cadso_automate_email_send');\r\n            sendGR.get(sendId);\r\n\r\n            if (sendGR.isValidRecord()) {\r\n                var excluded = sendGR.getValue('excluded_audiences');\r\n                var audiences = sendGR.getValue('audiences');\r\n                var audArr = [];\r\n                var exArr = [];\r\n\r\n                if (audiences) {\r\n                    audArr = audiences.split(',');\r\n                }\r\n                if (excluded) {\r\n                    exArr = excluded.split(',');\r\n                }\r\n\r\n                var excMap = new Map();\r\n                var excludeGR = new GlideRecord('x_cadso_automate_audience_hash')\r\n                excludeGR.addQuery('audience', 'IN', exArr);\r\n                excludeGR.query();\r\n\r\n                while (excludeGR.next()) {\r\n                    var members = JSON.parse(excludeGR.getValue('member_hash'))\r\n                    for (var i = 0; i < members.length; i++) {\r\n                        excMap.set(members[i].sysId, true);\r\n                    }\r\n                }\r\n\r\n                //get merge tags for this email send\r\n                let mergeTags = [];\r\n                var mergeTagGR = new GlideRecord('x_cadso_core_merge_tag_send');\r\n                mergeTagGR.addEncodedQuery(\"document_id=\" + sendId);\r\n                mergeTagGR.query();\r\n                while (mergeTagGR.next()) {\r\n                    let mergeTagsString = mergeTagGR.getValue(\"merge_tag_data\")\r\n\t\t\t\t\tmergeTags = JSON.parse(mergeTagsString);\r\n                }\r\n\r\n                var hashRecordGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                hashRecordGR.addQuery('audience', 'IN', audArr);\r\n                hashRecordGR.query();\r\n                while (hashRecordGR.next()) {\r\n                    var hashData = JSON.parse(hashRecordGR.getValue('member_hash'));\r\n                    let tempHashData = [];\r\n\r\n                    // Filter and transform valid members\r\n                    for (var y = 0; y < hashData.length; y++) {\r\n                        var member = hashData[y];\r\n                        var inExcluded = excMap.has(member.sysId);\r\n\r\n                        // Check if member is valid\r\n                        if (member.email && member.email.member && member.email.member.address && member.email.member.subscribed && !inExcluded) {\r\n\r\n                            var tempMember = {\r\n                                address: member.email.member.address,\r\n                                name: member.email.member.name || '', // Added fallback\r\n                                vars: {},\r\n                                subscribed: member.email.member.subscribed\r\n                            };\r\n\r\n                            // Add merge tag variables\r\n                            for (let x = 0; x < mergeTags.length; x++) {\r\n                                if (member.email.member.vars && member.email.member.vars[mergeTags[x]] !== undefined) {\r\n                                    tempMember.vars[mergeTags[x]] = member.email.member.vars[mergeTags[x]];\r\n                                }\r\n                            }\r\n\r\n                            tempHashData.push(tempMember);\r\n                        }\r\n                    }\r\n\r\n                    // Push to temp email table only if there are valid members\r\n                    if (tempHashData.length > 0) {\r\n                        var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n                        tempGR.initialize();\r\n                        tempGR.member_hash = JSON.stringify(tempHashData);\r\n                        tempGR.email_send = sendId;\r\n                        tempGR.insert();\r\n                    }\r\n                }\r\n            } else {\r\n                gs.info(\"Tenon generate Email Temp records error - Invalid email send record sys_id: \" + sendId);\r\n            }\r\n        } catch (e) {\r\n            gs.info(\"Generate Email Temps Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteEmailTemps: function(sendId) {\r\n        if (sendId) {\r\n            var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n            tempGR.addQuery('email_send', sendId);\r\n            tempGR.deleteMultiple();\r\n        }\r\n    },\r\n\r\n    formatPhoneNumber: function(phoneNumberString) {\r\n        var cleaned = ('' + phoneNumberString).replace(/\\D/g, '');\r\n        var match = cleaned.match(/^(\\d+)?(\\d{3})(\\d{3})(\\d{4})$/);\r\n\r\n        if (match) {\r\n            var intlCode = (match[1] ? '+' + match[1] : '+1');\r\n\r\n            return [intlCode, match[2], match[3], match[4]].join('');\r\n        }\r\n        gs.info(\"Phone number not formatted correctly for number \" + phoneNumberString);\r\n    },\r\n    // _updateAudience(audienceID, count, refreshed, conditions) {\r\n    //     let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n    //     if (audienceGR.get(audienceID)) {\r\n    //         if (conditions) {\r\n    //             audienceGR.setValue(\"conditions\", conditions);\r\n    //         }\r\n    //         audienceGR.setValue(\"count\", count);\r\n    //         audienceGR.setValue(\"refreshed\", refreshed);\r\n    //         audienceGR.update();\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // },\r\n\r\n    // _getContactDetailID: function (email, mobilePhone, table, tableID, name) {\r\n    // \tif(email){\r\n    // \t\tlet emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    // \t\temailGR.addQuery('email', email);\r\n    // \t\temailGR.addNotNullQuery('contact_detail');\r\n    // \t\temailGR.query()\r\n    // \t\tif(emailGR.next()){\r\n    // \t\t\tlet contactID = emailGR.getValue('contact_detail');\r\n    // \t\t\tlet phone = {\r\n    // \t\t\t\tphone_number: mobilePhone,\r\n    // \t\t\t\tcontact_detail: contactID\r\n    // \t\t\t};\r\n    // \t\t\tlet phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t.getBy(phone)\r\n    // \t\t\t.orElse(null);\r\n    // \t\t\tif(!phoneGQ){\r\n    // \t\t\t\tphoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t\t.insert(phone);\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tif(mobilePhone){\r\n    // \t\tlet phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    // \t\tphoneGR.addQuery('phone_number', mobilePhone);\r\n    // \t\tphoneGR.addNotNullQuery('contact_detail');\r\n    // \t\tphoneGR.query();\r\n    // \t\tif(phoneGR.next()){\r\n    // \t\t\tlet contactID = phoneGR.getValue('contact_detail');\r\n    // \t\t\tif(email){\r\n    // \t\t\t\tlet emailObj = {\r\n    // \t\t\t\t\temail_address: email,\r\n    // \t\t\t\t\tcontact_detail: contactID\r\n    // \t\t\t\t}\r\n    // \t\t\t\tlet emailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t.getBy(contactID)\r\n    // \t\t\t\t.orElse(null);\r\n    // \t\t\t\tif(!emailGQ){\r\n    // \t\t\t\t\temailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t\t.insert(emailObj);\r\n    // \t\t\t\t}\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tlet contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n    //     let field = this.tableFields[table];\r\n    //     contactDetailGR.addQuery(field, tableID);\r\n    // \tcontactDetailGR.query();\r\n    // \tif (contactDetailGR.next()) {\r\n    // \t\treturn contactDetailGR.getUniqueValue();\r\n    // \t} else {\r\n    //         let field = this.tableFields[table];\r\n    // \t\tcontactDetailGR.initialize();\r\n    // \t\tcontactDetailGR.setValue(\"email_address\", email);\r\n    // \t\tcontactDetailGR.setValue(\"phone_number\", mobilePhone);\r\n    //         contactDetailGR.setValue(field, tableID);\r\n    // \t\tcontactDetailGR.setValue('name', name);\r\n    // \t\tcontactDetailGR.setWorkflow(false);\r\n    // \t\tlet contactDetailID = contactDetailGR.insert();\r\n    // \t\treturn contactDetailID;\r\n    // \t}\r\n    // },\r\n\r\n    // _getContactDetailID: function(email, mobilePhone, table, tableID, name) {\r\n    //     let contactDetailID = null;\r\n    //     if (email) {\r\n    //         contactDetailID = this._getContactDetailByEmail(email);\r\n    //         if (contactDetailID) {\r\n    //             if (mobilePhone) {\r\n    //                 this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     if (mobilePhone) {\r\n    //         contactDetailID = this._getContactDetailByPhone(mobilePhone);\r\n    //         if (contactDetailID) {\r\n    //             if (email) {\r\n    //                 this._getOrInsertEmail(email, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     contactDetailID = this._createContactDetail(table, tableID, name);\r\n    //     if (email) {\r\n    //         this._getOrInsertEmail(email, contactDetailID);\r\n    //     }\r\n    //     if (mobilePhone) {\r\n    //         this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //     }\r\n    //     return contactDetailID;\r\n    // },\r\n\r\n    // _getContactDetailByEmail: function(email) {\r\n    //     let contactID = null;\r\n    //     let emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    //     emailGR.addQuery('email', email);\r\n    //     emailGR.addNotNullQuery('contact_detail');\r\n    //     emailGR.query();\r\n    //     if (emailGR.next()) {\r\n    //         contactID = emailGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getContactDetailByPhone: function(phone) {\r\n    //     let contactID = null;\r\n    //     let phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    //     phoneGR.addQuery('phone_number', phone);\r\n    //     phoneGR.addNotNullQuery('contact_detail');\r\n    //     phoneGR.query();\r\n    //     if (phoneGR.next()) {\r\n    //         contactID = phoneGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getOrInsertEmail: function(email, contactDetailID) {\r\n    //     let emailObj = {\r\n    //         email: email,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //         .getBy(emailObj)\r\n    //         .orElse(null)\r\n    //     if (!emailGQ) {\r\n    //         emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //             .insert(emailObj)\r\n    //     }\r\n    //     return (emailGQ.sys_id);\r\n    // },\r\n\r\n    // _getOrInsertPhone: function(mobilePhone, contactDetailID) {\r\n    //     let phoneObj = {\r\n    //         phone_number: mobilePhone,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //         .getBy(phoneObj)\r\n    //         .orElse(null)\r\n    //     if (!phoneGQ) {\r\n    //         phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //             .insert(phoneObj);\r\n    //     }\r\n    //     return phoneGQ.sys_id;\r\n    // },\r\n\r\n    _createContactDetail: function(table, tableID, name) {\r\n        let tableField = this.tableFields[table]\r\n        let contactDetail = {};\r\n        contactDetail[tableField] = tableID;\r\n        let contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n            .getBy(contactDetail)\r\n            .orElse(null);\r\n        if (!contactDetailGQ) {\r\n            contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .insert(contactDetail)\r\n                .get();\r\n        }\r\n        return contactDetailGQ.sys_id;\r\n    },\r\n\r\n    type: 'AudienceMS'\r\n};",
    "formatted_script": {
      "line_count": 552,
      "char_count": 22040,
      "preview": "// Updated by Trevor\r\nvar AudienceMS = Class.create();\r\nAudienceMS.prototype = {\r\n    initialize: function() {\r\n        this.tableFields = {\r\n            'sys_user': 'user',\r\n            'csm_consumer...",
      "full_script": "// Updated by Trevor\r\nvar AudienceMS = Class.create();\r\nAudienceMS.prototype = {\r\n    initialize: function() {\r\n        this.tableFields = {\r\n            'sys_user': 'user',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n        this.audienceTableFields = {\r\n            'sys_user': 'employee',\r\n            'csm_consumer': 'consumer',\r\n            'customer_contact': 'contact',\r\n            'core_company': 'company',\r\n            'sn_lead_mgmt_core_lead': 'lead'\r\n        };\r\n    },\r\n    getRecordFields: function(table) {\r\n        return this.tableFields[table];\r\n    },\r\n\r\n    refreshAudienceHash: function({\r\n        audienceSysID,\r\n        newConditions,\r\n        update\r\n    }) {\r\n\r\n        let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n        audienceMemberGR.addQuery('audience', audienceSysID);\r\n        audienceMemberGR.query();\r\n        audienceMemberGR.deleteMultiple();\r\n\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        let validAudience = audienceGR.get(audienceSysID);\r\n        if (!validAudience) {\r\n            throw new Error(`Error getting Audience Record for sysID ${audienceSysID}`);\r\n        }\r\n\r\n        let conditions = newConditions;\r\n        if (!conditions) {\r\n            throw new Error(`Error getting Audience conditions for sysID ${audienceSysID} - conditions : ${conditions}`);\r\n        }\r\n\r\n        //TODO: MAYBE ADD CHECK AGAISNT OLD CONDITIONS TO SEE IF WE NEED TO UPDATE??\r\n\r\n        let table = audienceGR.getValue(\"table\");\r\n        let batchSize = 1000;\r\n        let count = 0;\r\n        let memberBatches = [];\r\n        let members = new Map;\r\n        let batch = [];\r\n\r\n        // Get merge tag variables\r\n        // let vars = {};\r\n        // let fieldsToQuery = [];\r\n        // let mergeTagGR = new GlideRecord('x_cadso_core_merge_tag');\r\n        // mergeTagGR.addQuery('table', table);\r\n        // mergeTagGR.addQuery('active', true);\r\n        // mergeTagGR.query();\r\n\r\n        // while (mergeTagGR.next()) {\r\n        //     let field = mergeTagGR.getValue('field') || \"\";\r\n        //     if (field) {\r\n        //         vars[field] = \"\";\r\n        //         fieldsToQuery.push(field + '$DISPLAY');\r\n        //     }\r\n        // }\r\n        new global.GlideQuery.parse(table, conditions)\r\n            .select(['x_cadso_automate_contact_detail_data'])\r\n            .forEach(member => {\r\n                // for (let x = 0; x < fieldsToQuery.length; x++) {\r\n                //     vars[fieldsToQuery[x].replace('$DISPLAY', '')] = member[fieldsToQuery[x]] || \"\";\r\n                // }\r\n                // var parsedData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                // parsedData.email.member.vars = vars;\r\n                var memberData = JSON.parse(member.x_cadso_automate_contact_detail_data);\r\n                batch.push(memberData);\r\n\r\n                if (batch.length === batchSize) {\r\n                    // memberBatches.push(batch);\r\n                    let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                    audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n                    audienceMemberGR.setValue('audience', audienceSysID);\r\n                    audienceMemberGR.insert();\r\n                    batch = [];\r\n                }\r\n                count++;\r\n            });\r\n        // Push remaining records if not a full batch\r\n        if (batch.length > 0) {\r\n            let audienceMemberGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n            audienceMemberGR.setValue('member_hash', JSON.stringify(batch));\r\n            audienceMemberGR.setValue('audience', audienceSysID);\r\n            audienceMemberGR.insert();\r\n        }\r\n\r\n        // for (let i = 0; i < memberBatches.length; i++) {\r\n\r\n        // }\r\n\r\n        let refreshed = new GlideDateTime();\r\n        if (update) {\r\n            audienceGR.setValue(\"count\", count);\r\n            audienceGR.setValue(\"conditions\", newConditions);\r\n            audienceGR.setValue(\"refreshed\", refreshed);\r\n            audienceGR.update();\r\n        }\r\n    },\r\n\r\n    refreshAudienceMembers: function({\r\n        audienceSysID,\r\n        update\r\n    }) {\r\n        let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n        if (!audienceGR.get(audienceSysID)) {\r\n            throw 'Audience Builder: Error getting Audience Record for sysID' + audienceSysID;\r\n        }\r\n\r\n        let conditions = audienceGR.getValue('conditions');\r\n        let audienceTable = audienceGR.getValue(\"table\");\r\n\r\n        let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberGR.addQuery(\"audience\", audienceSysID);\r\n        memberGR.query();\r\n        while (memberGR.next()) {\r\n            let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n            let memberSysId = memberData.sysId;\r\n\r\n            let memberExistsInHash = false;\r\n            // Check if this member exists in any hash record\r\n            let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n            hashGR.addQuery(\"audience\", audienceSysID);\r\n            hashGR.query();\r\n            while (hashGR.next()) {\r\n                let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n\r\n                // Check if memberSysId exists in this hash array\r\n                for (let i = 0; i < hashArray.length; i++) {\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!memberExistsInHash) {\r\n                // Member no longer exists in current hash, mark for deletion\r\n                memberGR.deleteRecord();\r\n            }\r\n        }\r\n\r\n        let hashGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n        hashGR.addQuery(\"audience\", audienceSysID);\r\n        hashGR.query();\r\n        while (hashGR.next()) {\r\n            let hashArray = JSON.parse(hashGR.getValue(\"member_hash\") || \"[]\");\r\n            for (let i = 0; i < hashArray.length; i++) {\r\n                let memberExistsInHash = false;\r\n                let memberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                memberGR.addQuery(\"audience\", audienceSysID);\r\n                memberGR.query();\r\n                while (memberGR.next()) {\r\n                    let memberData = JSON.parse(memberGR.getValue(\"member_hash\") || {});\r\n                    let memberSysId = memberData.sysId;\r\n                    if (hashArray[i] && hashArray[i].sysId && hashArray[i].sysId === memberSysId) {\r\n                        memberExistsInHash = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!memberExistsInHash) {\r\n\r\n                    let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n                    let data = JSON.stringify(hashArray[i]);\r\n                    let recordId = hashArray[i].sysId;\r\n                    let table = hashArray[i].table;\r\n                    let email = hashArray[i].email.address;\r\n                    let name = hashArray[i].email.member.name || \"\";\r\n                    let field = this.audienceTableFields[table];\r\n\r\n                    audienceMemberGR.initialize();\r\n                    audienceMemberGR.setValue(\"audience\", audienceSysID);\r\n                    audienceMemberGR.setValue(\"member_hash\", data);\r\n                    audienceMemberGR.setValue(\"name\", name);\r\n                    audienceMemberGR.setValue(field, recordId);\r\n                    audienceMemberGR.insert();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n    _getPreviousMembers: function(audienceID) {\r\n        let currentMembers = [];\r\n        let memberTableGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        memberTableGR.addQuery(\"audience\", audienceID);\r\n        memberTableGR.query();\r\n        while (memberTableGR.next()) {\r\n            let memberHash = JSON.parse(memberTableGR.getValue(\"member_hash\")) || null;\r\n            if (memberHash) {\r\n                currentMembers.push({\r\n                    sysId: memberTableGR.getValue(\"sys_id\"),\r\n                    memberHash: memberHash\r\n                });\r\n            }\r\n        }\r\n        return currentMembers;\r\n    },\r\n\r\n    _getCurrentMembers: function(audienceID) {\r\n        let previousMembers = new Map();\r\n        let previousMembersGR = new GlideRecord(\"x_cadso_automate_audience_hash\");\r\n\r\n        previousMembersGR.addQuery(\"audience\", audienceID);\r\n        previousMembersGR.query();\r\n\r\n        while (previousMembersGR.next()) {\r\n            let hash = JSON.parse(previousMembersGR.getValue(\"member_hash\"));\r\n            let y = 0;\r\n            for (let x = 0; x < hash.length; x++) {\r\n                if (hash[x]) {\r\n                    if (!previousMembers.get(hash[x].sysId)) {\r\n                        previousMembers.set(hash[x].sysId, hash[x]);\r\n                    }\r\n                } else {\r\n                    y++;\r\n                }\r\n            }\r\n            gs.warn(\"Audience Members do not have hash data for audience: \" + audienceID + \" - on Member Hash : \" + previousMembersGR.getUniqueValue() + \" - # of members \" + y);\r\n        }\r\n\r\n        return previousMembers;\r\n    },\r\n\r\n\r\n\r\n\r\n    _deleteRemovedMembers: function(membersToDelete, audienceID) {\r\n        let audienceMembersGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        audienceMembersGR.addQuery(\"audience\", audienceID);\r\n        audienceMembersGR.addQuery('sys_id', 'IN', membersToDelete);\r\n        audienceMembersGR.query();\r\n        audienceMembersGR.deleteMultiple();\r\n    },\r\n\r\n    _addNewMembers: function(membersToAdd, audienceID) {\r\n        let audienceMemberGR = new GlideRecord(\"x_cadso_automate_audience_member\");\r\n        for (let i = 0; i < membersToAdd.length; i++) {\r\n            let data = JSON.stringify(membersToAdd[i])\r\n            audienceMemberGR.initialize();\r\n            audienceMemberGR.setValue(\"audience\", audienceID);\r\n            audienceMemberGR.setValue(\"member_hash\", data);\r\n            audienceMemberGR.setValue(\"name\", membersToAdd[i].email.member.name);\r\n            audienceMemberGR.insert();\r\n        }\r\n    },\r\n\r\n    generateEmailTemps: function(sendId) {\r\n        try {\r\n            var sendGR = new GlideRecord('x_cadso_automate_email_send');\r\n            sendGR.get(sendId);\r\n\r\n            if (sendGR.isValidRecord()) {\r\n                var excluded = sendGR.getValue('excluded_audiences');\r\n                var audiences = sendGR.getValue('audiences');\r\n                var audArr = [];\r\n                var exArr = [];\r\n\r\n                if (audiences) {\r\n                    audArr = audiences.split(',');\r\n                }\r\n                if (excluded) {\r\n                    exArr = excluded.split(',');\r\n                }\r\n\r\n                var excMap = new Map();\r\n                var excludeGR = new GlideRecord('x_cadso_automate_audience_hash')\r\n                excludeGR.addQuery('audience', 'IN', exArr);\r\n                excludeGR.query();\r\n\r\n                while (excludeGR.next()) {\r\n                    var members = JSON.parse(excludeGR.getValue('member_hash'))\r\n                    for (var i = 0; i < members.length; i++) {\r\n                        excMap.set(members[i].sysId, true);\r\n                    }\r\n                }\r\n\r\n                //get merge tags for this email send\r\n                let mergeTags = [];\r\n                var mergeTagGR = new GlideRecord('x_cadso_core_merge_tag_send');\r\n                mergeTagGR.addEncodedQuery(\"document_id=\" + sendId);\r\n                mergeTagGR.query();\r\n                while (mergeTagGR.next()) {\r\n                    let mergeTagsString = mergeTagGR.getValue(\"merge_tag_data\")\r\n\t\t\t\t\tmergeTags = JSON.parse(mergeTagsString);\r\n                }\r\n\r\n                var hashRecordGR = new GlideRecord('x_cadso_automate_audience_hash');\r\n                hashRecordGR.addQuery('audience', 'IN', audArr);\r\n                hashRecordGR.query();\r\n                while (hashRecordGR.next()) {\r\n                    var hashData = JSON.parse(hashRecordGR.getValue('member_hash'));\r\n                    let tempHashData = [];\r\n\r\n                    // Filter and transform valid members\r\n                    for (var y = 0; y < hashData.length; y++) {\r\n                        var member = hashData[y];\r\n                        var inExcluded = excMap.has(member.sysId);\r\n\r\n                        // Check if member is valid\r\n                        if (member.email && member.email.member && member.email.member.address && member.email.member.subscribed && !inExcluded) {\r\n\r\n                            var tempMember = {\r\n                                address: member.email.member.address,\r\n                                name: member.email.member.name || '', // Added fallback\r\n                                vars: {},\r\n                                subscribed: member.email.member.subscribed\r\n                            };\r\n\r\n                            // Add merge tag variables\r\n                            for (let x = 0; x < mergeTags.length; x++) {\r\n                                if (member.email.member.vars && member.email.member.vars[mergeTags[x]] !== undefined) {\r\n                                    tempMember.vars[mergeTags[x]] = member.email.member.vars[mergeTags[x]];\r\n                                }\r\n                            }\r\n\r\n                            tempHashData.push(tempMember);\r\n                        }\r\n                    }\r\n\r\n                    // Push to temp email table only if there are valid members\r\n                    if (tempHashData.length > 0) {\r\n                        var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n                        tempGR.initialize();\r\n                        tempGR.member_hash = JSON.stringify(tempHashData);\r\n                        tempGR.email_send = sendId;\r\n                        tempGR.insert();\r\n                    }\r\n                }\r\n            } else {\r\n                gs.info(\"Tenon generate Email Temp records error - Invalid email send record sys_id: \" + sendId);\r\n            }\r\n        } catch (e) {\r\n            gs.info(\"Generate Email Temps Error: \" + e.message);\r\n        }\r\n    },\r\n\r\n    deleteEmailTemps: function(sendId) {\r\n        if (sendId) {\r\n            var tempGR = new GlideRecord('x_cadso_automate_email_temp');\r\n            tempGR.addQuery('email_send', sendId);\r\n            tempGR.deleteMultiple();\r\n        }\r\n    },\r\n\r\n    formatPhoneNumber: function(phoneNumberString) {\r\n        var cleaned = ('' + phoneNumberString).replace(/\\D/g, '');\r\n        var match = cleaned.match(/^(\\d+)?(\\d{3})(\\d{3})(\\d{4})$/);\r\n\r\n        if (match) {\r\n            var intlCode = (match[1] ? '+' + match[1] : '+1');\r\n\r\n            return [intlCode, match[2], match[3], match[4]].join('');\r\n        }\r\n        gs.info(\"Phone number not formatted correctly for number \" + phoneNumberString);\r\n    },\r\n    // _updateAudience(audienceID, count, refreshed, conditions) {\r\n    //     let audienceGR = new GlideRecord(\"x_cadso_automate_audience\");\r\n    //     if (audienceGR.get(audienceID)) {\r\n    //         if (conditions) {\r\n    //             audienceGR.setValue(\"conditions\", conditions);\r\n    //         }\r\n    //         audienceGR.setValue(\"count\", count);\r\n    //         audienceGR.setValue(\"refreshed\", refreshed);\r\n    //         audienceGR.update();\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // },\r\n\r\n    // _getContactDetailID: function (email, mobilePhone, table, tableID, name) {\r\n    // \tif(email){\r\n    // \t\tlet emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    // \t\temailGR.addQuery('email', email);\r\n    // \t\temailGR.addNotNullQuery('contact_detail');\r\n    // \t\temailGR.query()\r\n    // \t\tif(emailGR.next()){\r\n    // \t\t\tlet contactID = emailGR.getValue('contact_detail');\r\n    // \t\t\tlet phone = {\r\n    // \t\t\t\tphone_number: mobilePhone,\r\n    // \t\t\t\tcontact_detail: contactID\r\n    // \t\t\t};\r\n    // \t\t\tlet phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t.getBy(phone)\r\n    // \t\t\t.orElse(null);\r\n    // \t\t\tif(!phoneGQ){\r\n    // \t\t\t\tphoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    // \t\t\t\t.insert(phone);\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tif(mobilePhone){\r\n    // \t\tlet phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    // \t\tphoneGR.addQuery('phone_number', mobilePhone);\r\n    // \t\tphoneGR.addNotNullQuery('contact_detail');\r\n    // \t\tphoneGR.query();\r\n    // \t\tif(phoneGR.next()){\r\n    // \t\t\tlet contactID = phoneGR.getValue('contact_detail');\r\n    // \t\t\tif(email){\r\n    // \t\t\t\tlet emailObj = {\r\n    // \t\t\t\t\temail_address: email,\r\n    // \t\t\t\t\tcontact_detail: contactID\r\n    // \t\t\t\t}\r\n    // \t\t\t\tlet emailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t.getBy(contactID)\r\n    // \t\t\t\t.orElse(null);\r\n    // \t\t\t\tif(!emailGQ){\r\n    // \t\t\t\t\temailGQ = new global.GlideQuery('x_cadso_core_email')\r\n    // \t\t\t\t\t.insert(emailObj);\r\n    // \t\t\t\t}\r\n    // \t\t\t}\r\n    // \t\t\treturn contactID;\r\n    // \t\t}\r\n    // \t}\r\n\r\n    // \tlet contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n    //     let field = this.tableFields[table];\r\n    //     contactDetailGR.addQuery(field, tableID);\r\n    // \tcontactDetailGR.query();\r\n    // \tif (contactDetailGR.next()) {\r\n    // \t\treturn contactDetailGR.getUniqueValue();\r\n    // \t} else {\r\n    //         let field = this.tableFields[table];\r\n    // \t\tcontactDetailGR.initialize();\r\n    // \t\tcontactDetailGR.setValue(\"email_address\", email);\r\n    // \t\tcontactDetailGR.setValue(\"phone_number\", mobilePhone);\r\n    //         contactDetailGR.setValue(field, tableID);\r\n    // \t\tcontactDetailGR.setValue('name', name);\r\n    // \t\tcontactDetailGR.setWorkflow(false);\r\n    // \t\tlet contactDetailID = contactDetailGR.insert();\r\n    // \t\treturn contactDetailID;\r\n    // \t}\r\n    // },\r\n\r\n    // _getContactDetailID: function(email, mobilePhone, table, tableID, name) {\r\n    //     let contactDetailID = null;\r\n    //     if (email) {\r\n    //         contactDetailID = this._getContactDetailByEmail(email);\r\n    //         if (contactDetailID) {\r\n    //             if (mobilePhone) {\r\n    //                 this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     if (mobilePhone) {\r\n    //         contactDetailID = this._getContactDetailByPhone(mobilePhone);\r\n    //         if (contactDetailID) {\r\n    //             if (email) {\r\n    //                 this._getOrInsertEmail(email, contactDetailID)\r\n    //             }\r\n    //             return contactDetailID;\r\n    //         }\r\n    //     }\r\n\r\n    //     contactDetailID = this._createContactDetail(table, tableID, name);\r\n    //     if (email) {\r\n    //         this._getOrInsertEmail(email, contactDetailID);\r\n    //     }\r\n    //     if (mobilePhone) {\r\n    //         this._getOrInsertPhone(mobilePhone, contactDetailID)\r\n    //     }\r\n    //     return contactDetailID;\r\n    // },\r\n\r\n    // _getContactDetailByEmail: function(email) {\r\n    //     let contactID = null;\r\n    //     let emailGR = new GlideRecordSecure('x_cadso_core_email_address');\r\n    //     emailGR.addQuery('email', email);\r\n    //     emailGR.addNotNullQuery('contact_detail');\r\n    //     emailGR.query();\r\n    //     if (emailGR.next()) {\r\n    //         contactID = emailGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getContactDetailByPhone: function(phone) {\r\n    //     let contactID = null;\r\n    //     let phoneGR = new GlideRecordSecure('x_cadso_core_phone_number');\r\n    //     phoneGR.addQuery('phone_number', phone);\r\n    //     phoneGR.addNotNullQuery('contact_detail');\r\n    //     phoneGR.query();\r\n    //     if (phoneGR.next()) {\r\n    //         contactID = phoneGR.getValue('contact_detail');\r\n    //     }\r\n    //     return contactID;\r\n    // },\r\n\r\n    // _getOrInsertEmail: function(email, contactDetailID) {\r\n    //     let emailObj = {\r\n    //         email: email,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //         .getBy(emailObj)\r\n    //         .orElse(null)\r\n    //     if (!emailGQ) {\r\n    //         emailGQ = new global.GlideQuery('x_cadso_core_email_address')\r\n    //             .insert(emailObj)\r\n    //     }\r\n    //     return (emailGQ.sys_id);\r\n    // },\r\n\r\n    // _getOrInsertPhone: function(mobilePhone, contactDetailID) {\r\n    //     let phoneObj = {\r\n    //         phone_number: mobilePhone,\r\n    //         contact_detail: contactDetailID\r\n    //     }\r\n    //     let phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //         .getBy(phoneObj)\r\n    //         .orElse(null)\r\n    //     if (!phoneGQ) {\r\n    //         phoneGQ = new global.GlideQuery('x_cadso_core_phone_number')\r\n    //             .insert(phoneObj);\r\n    //     }\r\n    //     return phoneGQ.sys_id;\r\n    // },\r\n\r\n    _createContactDetail: function(table, tableID, name) {\r\n        let tableField = this.tableFields[table]\r\n        let contactDetail = {};\r\n        contactDetail[tableField] = tableID;\r\n        let contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n            .getBy(contactDetail)\r\n            .orElse(null);\r\n        if (!contactDetailGQ) {\r\n            contactDetailGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .insert(contactDetail)\r\n                .get();\r\n        }\r\n        return contactDetailGQ.sys_id;\r\n    },\r\n\r\n    type: 'AudienceMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_96028aa6c36f065085b196c4e4013109",
    "display_value": "sys_script_include_96028aa6c36f065085b196c4e4013109"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_automate.AudienceMS",
    "display_value": "x_cadso_automate.AudienceMS"
  },
  "sys_created_on": {
    "value": "2024-07-25 08:00:24",
    "display_value": "2024-07-25 01:00:24 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "AudienceMS",
    "display_value": "AudienceMS"
  },
  "sys_name": {
    "value": "AudienceMS",
    "display_value": "AudienceMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
