{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "11fe02b2c3fec21085b196c4e4013101",
    "extracted_at": "2025-09-19T21:48:29.495Z",
    "display_value": "ContentTemplateUtilsMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "33",
    "display_value": "33"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2024-06-20 21:59:17",
    "display_value": "2024-06-20 02:59:17 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const ContentTemplateUtilsMS = function(contentType) {\r\n\r\n    const baseUrl = 'https://api.getbee.io/';\r\n    const token = _getToken();\r\n\r\n    function _getToken() {\r\n        let provider = new sn_cc.StandardCredentialsProvider();\r\n        let credential, clientID, clientSecret;\r\n\r\n        if (contentType === 'email_builder') {\r\n            credential = provider.getCredentialByID('6545472c87620a50369f33373cbb355f');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else if (contentType === 'page_builder') {\r\n            credential = provider.getCredentialByID('1149fbec87660a50369f33373cbb357e');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else {\r\n            throw new Error('Unrecognized content type: ' + contentType);\r\n        }\r\n        let requestBody = JSON.stringify({\r\n            client_id: clientID,\r\n            client_secret: clientSecret,\r\n            uid: \"test1-clientside\"\r\n        });\r\n        let headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n        let tokenResponse = _callContentService('POST', 'loginV2', requestBody, headers);\r\n        let newToken = tokenResponse.access_token;\r\n        return newToken;\r\n    }\r\n\r\n    function getThumbnail(body, recordToAttachTo) {\r\n        if (!body) {\r\n            throw new Error(\"must include body\");\r\n        };\r\n        return _callContentService('POST', 'v1/page/image', JSON.stringify(body), null, recordToAttachTo);\r\n    }\r\n\r\n    function _callContentService(method, resource, body, headers, recordGR) {\r\n        let request = new sn_ws.RESTMessageV2();\r\n        request.setHttpMethod(method);\r\n        let endpoint = resource == 'loginV2' ? 'https://auth.getbee.io/loginV2' : baseUrl + resource;\r\n        request.setEndpoint(endpoint);\r\n        if (body) {\r\n            request.setRequestBody(body);\r\n        }\r\n        if (headers) {\r\n            for (var key in headers) {\r\n                request.setRequestHeader(key, headers[key]);\r\n            }\r\n        }\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        if (token) {\r\n            request.setRequestHeader('Authorization', 'Bearer ' + token);\r\n        }\r\n        if (recordGR) {\r\n            request.saveResponseBodyAsAttachment(recordGR.getValue('sys_class_name'), recordGR.getUniqueValue(), 'thumbnail.jpg');\r\n        }\r\n        let response = request.execute();\r\n        let statusCode = response.getStatusCode();\r\n        if (response.haveError() || statusCode.toString().indexOf('2') != 0) {\r\n            throw new Error(response.getErrorMessage());\r\n        }\r\n        if (!recordGR) {\r\n            let requestBody = JSON.parse(response.getBody());\r\n            return requestBody;\r\n        }else{\r\n\t\t\treturn statusCode;\r\n\t\t}\r\n    }\r\n\r\n    return Object.freeze({\r\n        \"token\": token,\r\n        \"getThumbnail\": getThumbnail\r\n    });\r\n};",
    "display_value": "const ContentTemplateUtilsMS = function(contentType) {\r\n\r\n    const baseUrl = 'https://api.getbee.io/';\r\n    const token = _getToken();\r\n\r\n    function _getToken() {\r\n        let provider = new sn_cc.StandardCredentialsProvider();\r\n        let credential, clientID, clientSecret;\r\n\r\n        if (contentType === 'email_builder') {\r\n            credential = provider.getCredentialByID('6545472c87620a50369f33373cbb355f');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else if (contentType === 'page_builder') {\r\n            credential = provider.getCredentialByID('1149fbec87660a50369f33373cbb357e');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else {\r\n            throw new Error('Unrecognized content type: ' + contentType);\r\n        }\r\n        let requestBody = JSON.stringify({\r\n            client_id: clientID,\r\n            client_secret: clientSecret,\r\n            uid: \"test1-clientside\"\r\n        });\r\n        let headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n        let tokenResponse = _callContentService('POST', 'loginV2', requestBody, headers);\r\n        let newToken = tokenResponse.access_token;\r\n        return newToken;\r\n    }\r\n\r\n    function getThumbnail(body, recordToAttachTo) {\r\n        if (!body) {\r\n            throw new Error(\"must include body\");\r\n        };\r\n        return _callContentService('POST', 'v1/page/image', JSON.stringify(body), null, recordToAttachTo);\r\n    }\r\n\r\n    function _callContentService(method, resource, body, headers, recordGR) {\r\n        let request = new sn_ws.RESTMessageV2();\r\n        request.setHttpMethod(method);\r\n        let endpoint = resource == 'loginV2' ? 'https://auth.getbee.io/loginV2' : baseUrl + resource;\r\n        request.setEndpoint(endpoint);\r\n        if (body) {\r\n            request.setRequestBody(body);\r\n        }\r\n        if (headers) {\r\n            for (var key in headers) {\r\n                request.setRequestHeader(key, headers[key]);\r\n            }\r\n        }\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        if (token) {\r\n            request.setRequestHeader('Authorization', 'Bearer ' + token);\r\n        }\r\n        if (recordGR) {\r\n            request.saveResponseBodyAsAttachment(recordGR.getValue('sys_class_name'), recordGR.getUniqueValue(), 'thumbnail.jpg');\r\n        }\r\n        let response = request.execute();\r\n        let statusCode = response.getStatusCode();\r\n        if (response.haveError() || statusCode.toString().indexOf('2') != 0) {\r\n            throw new Error(response.getErrorMessage());\r\n        }\r\n        if (!recordGR) {\r\n            let requestBody = JSON.parse(response.getBody());\r\n            return requestBody;\r\n        }else{\r\n\t\t\treturn statusCode;\r\n\t\t}\r\n    }\r\n\r\n    return Object.freeze({\r\n        \"token\": token,\r\n        \"getThumbnail\": getThumbnail\r\n    });\r\n};",
    "formatted_script": {
      "line_count": 78,
      "char_count": 3018,
      "preview": "const ContentTemplateUtilsMS = function(contentType) {\r\n\r\n    const baseUrl = 'https://api.getbee.io/';\r\n    const token = _getToken();\r\n\r\n    function _getToken() {\r\n        let provider = new sn_cc....",
      "full_script": "const ContentTemplateUtilsMS = function(contentType) {\r\n\r\n    const baseUrl = 'https://api.getbee.io/';\r\n    const token = _getToken();\r\n\r\n    function _getToken() {\r\n        let provider = new sn_cc.StandardCredentialsProvider();\r\n        let credential, clientID, clientSecret;\r\n\r\n        if (contentType === 'email_builder') {\r\n            credential = provider.getCredentialByID('6545472c87620a50369f33373cbb355f');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else if (contentType === 'page_builder') {\r\n            credential = provider.getCredentialByID('1149fbec87660a50369f33373cbb357e');\r\n            clientID = credential.getAttribute('user_name');\r\n            clientSecret = credential.getAttribute('password');\r\n        } else {\r\n            throw new Error('Unrecognized content type: ' + contentType);\r\n        }\r\n        let requestBody = JSON.stringify({\r\n            client_id: clientID,\r\n            client_secret: clientSecret,\r\n            uid: \"test1-clientside\"\r\n        });\r\n        let headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n        let tokenResponse = _callContentService('POST', 'loginV2', requestBody, headers);\r\n        let newToken = tokenResponse.access_token;\r\n        return newToken;\r\n    }\r\n\r\n    function getThumbnail(body, recordToAttachTo) {\r\n        if (!body) {\r\n            throw new Error(\"must include body\");\r\n        };\r\n        return _callContentService('POST', 'v1/page/image', JSON.stringify(body), null, recordToAttachTo);\r\n    }\r\n\r\n    function _callContentService(method, resource, body, headers, recordGR) {\r\n        let request = new sn_ws.RESTMessageV2();\r\n        request.setHttpMethod(method);\r\n        let endpoint = resource == 'loginV2' ? 'https://auth.getbee.io/loginV2' : baseUrl + resource;\r\n        request.setEndpoint(endpoint);\r\n        if (body) {\r\n            request.setRequestBody(body);\r\n        }\r\n        if (headers) {\r\n            for (var key in headers) {\r\n                request.setRequestHeader(key, headers[key]);\r\n            }\r\n        }\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        if (token) {\r\n            request.setRequestHeader('Authorization', 'Bearer ' + token);\r\n        }\r\n        if (recordGR) {\r\n            request.saveResponseBodyAsAttachment(recordGR.getValue('sys_class_name'), recordGR.getUniqueValue(), 'thumbnail.jpg');\r\n        }\r\n        let response = request.execute();\r\n        let statusCode = response.getStatusCode();\r\n        if (response.haveError() || statusCode.toString().indexOf('2') != 0) {\r\n            throw new Error(response.getErrorMessage());\r\n        }\r\n        if (!recordGR) {\r\n            let requestBody = JSON.parse(response.getBody());\r\n            return requestBody;\r\n        }else{\r\n\t\t\treturn statusCode;\r\n\t\t}\r\n    }\r\n\r\n    return Object.freeze({\r\n        \"token\": token,\r\n        \"getThumbnail\": getThumbnail\r\n    });\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_11fe02b2c3fec21085b196c4e4013101",
    "display_value": "sys_script_include_11fe02b2c3fec21085b196c4e4013101"
  },
  "sys_updated_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "api_name": {
    "value": "x_cadso_automate.ContentTemplateUtilsMS",
    "display_value": "x_cadso_automate.ContentTemplateUtilsMS"
  },
  "sys_created_on": {
    "value": "2024-06-18 21:02:35",
    "display_value": "2024-06-18 02:02:35 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "ContentTemplateUtilsMS",
    "display_value": "ContentTemplateUtilsMS"
  },
  "sys_name": {
    "value": "ContentTemplateUtilsMS",
    "display_value": "ContentTemplateUtilsMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
