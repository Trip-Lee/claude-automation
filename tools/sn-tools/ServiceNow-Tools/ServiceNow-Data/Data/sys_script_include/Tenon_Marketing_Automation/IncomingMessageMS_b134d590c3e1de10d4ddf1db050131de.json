{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "b134d590c3e1de10d4ddf1db050131de",
    "extracted_at": "2025-09-19T21:48:29.175Z",
    "display_value": "IncomingMessageMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "89",
    "display_value": "89"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-16 20:50:25",
    "display_value": "2025-07-16 01:50:25 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const IncomingMessageMS = Class.create();\r\nIncomingMessageMS.prototype = {\r\n    initialize: function() {\r\n        this.local = false;\r\n        this.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n        // The order of tables is important for the creation logic of contact details.\r\n        // The first table that matches the phone number will be used to create the contact detail.\r\n        // This order should reflect the priority of the tables in your application.\r\n        // For example, if you want to prioritize user contacts over leads, user should be first\r\n        // in the list.\r\n        this.tables = [\r\n            \"sys_user\",\r\n            \"sn_lead_mgmt_core_lead\",\r\n            \"customer_contact\",\r\n            \"csm_consumer\",\r\n            \"customer_account\",\r\n            \"core_company\",\r\n        ];\r\n        this.fields = {\r\n            sys_user: {\r\n                detail: \"user\",\r\n                phones: [\"mobile_phone\", \"phone\"],\r\n            },\r\n            sn_lead_mgmt_core_lead: {\r\n                detail: \"lead\",\r\n                phones: [\"business_phone\", \"mobile_phone\"],\r\n            },\r\n            customer_contact: {\r\n                detail: \"contact\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n            },\r\n            core_company: {\r\n                detail: \"company\",\r\n                phones: [\"phone\"],\r\n            },\r\n            csm_consumer: {\r\n                detail: \"consumer\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n            customer_account: {\r\n                detail: \"customer_account\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n        };\r\n    },\r\n\r\n    getMessages: function(request, response) {\r\n        const requestBody = request.body.data;\r\n        const message = requestBody.message || {};\r\n        const text =\r\n            (message.contact_message &&\r\n                message.contact_message.text_message &&\r\n                message.contact_message.text_message.text) ||\r\n            \"\";\r\n        const fromNumber = message.sender_id || \"\";\r\n        const toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n        if (!text || !fromNumber || !toNumber) {\r\n            response.setStatus(400);\r\n            response.setBody({\r\n                message: \"Invalid payload. Required fields are missing.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const lowerCaseMessage = text.toLowerCase().trim();\r\n        let messageType = \"\";\r\n\r\n        const optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n        const optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n        const helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n        const welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n        const otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n        const allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n        if (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n            this.updateWaitingJourneyInstances(lowerCaseMessage);\r\n            this.executeMatchingJourneys(lowerCaseMessage);\r\n        }\r\n\r\n        if (welcomeKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Welcome\";\r\n        } else if (helpKeyword.includes(lowerCaseMessage)) {\r\n            messageType = \"Help\";\r\n        } else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-Out\";\r\n        } else if (optInKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-In\";\r\n        }\r\n        gs.info('DC13 - messageType', messageType);\r\n\r\n        if (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n            const messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n            const contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n            const optConsentGR = new GlideRecordSecure(\"x_cadso_automate_contact_consent\");\r\n            optConsentGR.initialize();\r\n            optConsentGR.setValue(\"message_number\", messageNumSysId);\r\n            optConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n            optConsentGR.setValue(\"status\", messageType);\r\n            optConsentGR.setValue(\"date\", new GlideDateTime());\r\n            optConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n            const sysId = optConsentGR.insert();\r\n\r\n            if (sysId) {\r\n                try {\r\n                    const inputs = {\r\n                        from_number: fromNumber,\r\n                        to_number: toNumber,\r\n                        confirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n                    };\r\n\r\n                    const result = sn_fd.FlowAPI.getRunner()\r\n                        .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                        .inForeground()\r\n                        .withInputs(inputs)\r\n                        .run();\r\n                    const outputs = result.getOutputs();\r\n                } catch (ex) {\r\n                    const err = ex.getMessage();\r\n                    gs.error(err);\r\n                }\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n                });\r\n            } else {\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to create contact consent record.\",\r\n                });\r\n            }\r\n        } else if (messageType === \"Welcome\") {\r\n            gs.info('DC13 - Welcome', fromNumber, toNumber);\r\n            const helpInputs = {\r\n                from_number: fromNumber,\r\n                to_number: toNumber,\r\n                confirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n            };\r\n            const helpResult = sn_fd.FlowAPI.getRunner()\r\n                .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                .inForeground()\r\n                .withInputs(helpInputs)\r\n                .run();\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"Welcome message received. A welcome message has been sent.\",\r\n            });\r\n        } else if (messageType === \"Help\") {\r\n            try {\r\n                const helpInputs = {\r\n                    from_number: fromNumber,\r\n                    to_number: toNumber,\r\n                    confirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n                };\r\n\r\n                const helpResult = sn_fd.FlowAPI.getRunner()\r\n                    .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                    .inForeground()\r\n                    .withInputs(helpInputs)\r\n                    .run();\r\n                const helpOutputs = helpResult.getOutputs();\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: \"Help message received. A support message has been sent.\",\r\n                });\r\n            } catch (ex) {\r\n                gs.error(\"Help subflow error: \" + ex.getMessage());\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to process help keyword.\",\r\n                });\r\n            }\r\n        } else {\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"No opt-in/out or additional keywords matched\",\r\n            });\r\n        }\r\n    },\r\n\r\n    getKeywords: function(fieldName, phoneNumber) {\r\n        let keywords = [];\r\n        const messageNumGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n        let column = \"\";\r\n        if (fieldName === \"opt_in_keywords\") {\r\n            column = \"opt_in_keywords\";\r\n        } else if (fieldName === \"opt_out_keywords\") {\r\n            column = \"opt_out_keywords\";\r\n        } else if (fieldName === \"help_keywords\") {\r\n            column = \"help_keywords\";\r\n        } else if (fieldName === \"other_keywords\") {\r\n            column = \"other_keywords\";\r\n        } else if (fieldName === \"welcome_keywords\") {\r\n            column = \"welcome_keywords\";\r\n        }\r\n\r\n        if (column) {\r\n            messageNumGR.query();\r\n\r\n            if (messageNumGR.next()) {\r\n                const keywordList = messageNumGR.getValue(column) + \"\";\r\n                if (keywordList) {\r\n                    keywords = keywordList.split(\",\").map(function(keyword) {\r\n                        return keyword.trim().toLowerCase();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return keywords;\r\n    },\r\n\r\n    getMessageNumSysId: function(phoneNumber) {\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", phoneNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            return messageGR.getUniqueValue();\r\n        }\r\n    },\r\n\r\n    findContactDetailSysId: function(phoneNumber) {\r\n        const contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        contactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n        contactDetailGR.query();\r\n\r\n        if (contactDetailGR.next()) {\r\n            return contactDetailGR.getUniqueValue();\r\n        }\r\n\r\n        const phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n        const matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n        const formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n        const types = this.types || [];\r\n        const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        for (let x = 0; x < types.length; x++) {\r\n            const type = types[x];\r\n            contactDetailGr.initialize();\r\n            this.getQueryForContactDetail({\r\n                phoneNumber: formatedPhoneNumber,\r\n                type,\r\n                contactDetailGr,\r\n            });\r\n            contactDetailGr.query();\r\n            if (contactDetailGr.hasNext()) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (contactDetailGr.next()) {\r\n            contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n            contactDetailGr.update();\r\n            gs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n            return contactDetailGr.getUniqueValue();\r\n        }\r\n        const tables = this.tables || [];\r\n        for (let y = 0; y < tables.length; y++) {\r\n            const table = tables[y];\r\n            const tableGr = new GlideRecord(table);\r\n            const fields = this.fields[table] || {};\r\n            const {\r\n                phones = []\r\n            } = fields;\r\n            phones.forEach((phoneField) => {\r\n                tableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n            });\r\n            tableGr.query();\r\n\r\n            if (tableGr.next()) {\r\n                const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n                contactDetailGr.initialize();\r\n                contactDetailGr.newRecord();\r\n                contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n                contactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n                const insertResponse = contactDetailGr.insert();\r\n                gs.info(\r\n                    `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n                );\r\n                const contactDetailSysId = contactDetailGr.getUniqueValue();\r\n                if (contactDetailSysId) {\r\n                    gs.info(\r\n                        `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n                    );\r\n                    return contactDetailSysId;\r\n                }\r\n            }\r\n        }\r\n        gs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n        return null;\r\n    },\r\n\r\n    getConfirmationText: function(messageType, fromNumber) {\r\n        let confirmationText = \"\";\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", fromNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            if (messageType === \"Opted-In\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n            } else if (messageType === \"Opted-Out\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n            } else if (messageType === \"Help\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n            } else if (messageType === \"Welcome\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n            }\r\n        }\r\n\r\n        return confirmationText;\r\n    },\r\n\r\n    executeMatchingJourneys: function(message) {\r\n        const journeyVersionIDs = [];\r\n        const versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n            .where(\"published\", true)\r\n            .where(\"active\", true)\r\n            .where(\"type\", \"event\")\r\n            .where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n            .whereNotNull(\"trigger.fields_values\")\r\n            .select(\"journey\")\r\n            .forEach((version) => {\r\n                const versionKeywords = version.fields_values.keywords?.split();\r\n                if (!versionKeywords) {\r\n                    return;\r\n                }\r\n                if (versionKeywords.includes(message)) {\r\n                    const journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n                        version: version.sys_id,\r\n                        journey: version.journey,\r\n                    });\r\n                }\r\n            });\r\n    },\r\n\r\n    updateWaitingJourneyInstances: function(message) {\r\n        const instanceStepIDs = [];\r\n        const actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n            .sys_id;\r\n        let instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"status\", \"Waiting\")\r\n            .where(\"action\", actionID)\r\n            .whereNotNull(\"version_step.fields_values\")\r\n            .select(\"version_step.fields_values\")\r\n            .forEach((instanceStep) => {\r\n                const instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n                if (!instanceStepKeywords) {\r\n                    return;\r\n                }\r\n                if (instanceStepKeywords.includes(message)) {\r\n                    instanceStepIDs.push(instanceStep.sys_id);\r\n                }\r\n            });\r\n        instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"sys_id\", \"IN\", instanceStepIDs)\r\n            .updateMultiple({\r\n                status: \"Processing\",\r\n            });\r\n    },\r\n\r\n    getQueryForContactDetail: function({\r\n        phoneNumber,\r\n        type,\r\n        contactDetailGr\r\n    }) {\r\n        let orCondition = \"\";\r\n        switch (type) {\r\n            case \"user\":\r\n                orCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"contact\":\r\n                orCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"lead\":\r\n                orCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"company\":\r\n                contactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            case \"consumer\":\r\n                orCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"account\":\r\n                contactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    getPhoneNumberFormat: function(phoneNumber) {\r\n        const local = this.local || false;\r\n        if (local) {\r\n            return phoneNumber;\r\n        } else {\r\n            return \"+\" + phoneNumber;\r\n        }\r\n    },\r\n\r\n    type: \"IncomingMessageMS\",\r\n};",
    "display_value": "const IncomingMessageMS = Class.create();\r\nIncomingMessageMS.prototype = {\r\n    initialize: function() {\r\n        this.local = false;\r\n        this.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n        // The order of tables is important for the creation logic of contact details.\r\n        // The first table that matches the phone number will be used to create the contact detail.\r\n        // This order should reflect the priority of the tables in your application.\r\n        // For example, if you want to prioritize user contacts over leads, user should be first\r\n        // in the list.\r\n        this.tables = [\r\n            \"sys_user\",\r\n            \"sn_lead_mgmt_core_lead\",\r\n            \"customer_contact\",\r\n            \"csm_consumer\",\r\n            \"customer_account\",\r\n            \"core_company\",\r\n        ];\r\n        this.fields = {\r\n            sys_user: {\r\n                detail: \"user\",\r\n                phones: [\"mobile_phone\", \"phone\"],\r\n            },\r\n            sn_lead_mgmt_core_lead: {\r\n                detail: \"lead\",\r\n                phones: [\"business_phone\", \"mobile_phone\"],\r\n            },\r\n            customer_contact: {\r\n                detail: \"contact\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n            },\r\n            core_company: {\r\n                detail: \"company\",\r\n                phones: [\"phone\"],\r\n            },\r\n            csm_consumer: {\r\n                detail: \"consumer\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n            customer_account: {\r\n                detail: \"customer_account\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n        };\r\n    },\r\n\r\n    getMessages: function(request, response) {\r\n        const requestBody = request.body.data;\r\n        const message = requestBody.message || {};\r\n        const text =\r\n            (message.contact_message &&\r\n                message.contact_message.text_message &&\r\n                message.contact_message.text_message.text) ||\r\n            \"\";\r\n        const fromNumber = message.sender_id || \"\";\r\n        const toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n        if (!text || !fromNumber || !toNumber) {\r\n            response.setStatus(400);\r\n            response.setBody({\r\n                message: \"Invalid payload. Required fields are missing.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const lowerCaseMessage = text.toLowerCase().trim();\r\n        let messageType = \"\";\r\n\r\n        const optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n        const optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n        const helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n        const welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n        const otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n        const allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n        if (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n            this.updateWaitingJourneyInstances(lowerCaseMessage);\r\n            this.executeMatchingJourneys(lowerCaseMessage);\r\n        }\r\n\r\n        if (welcomeKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Welcome\";\r\n        } else if (helpKeyword.includes(lowerCaseMessage)) {\r\n            messageType = \"Help\";\r\n        } else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-Out\";\r\n        } else if (optInKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-In\";\r\n        }\r\n        gs.info('DC13 - messageType', messageType);\r\n\r\n        if (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n            const messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n            const contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n            const optConsentGR = new GlideRecordSecure(\"x_cadso_automate_contact_consent\");\r\n            optConsentGR.initialize();\r\n            optConsentGR.setValue(\"message_number\", messageNumSysId);\r\n            optConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n            optConsentGR.setValue(\"status\", messageType);\r\n            optConsentGR.setValue(\"date\", new GlideDateTime());\r\n            optConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n            const sysId = optConsentGR.insert();\r\n\r\n            if (sysId) {\r\n                try {\r\n                    const inputs = {\r\n                        from_number: fromNumber,\r\n                        to_number: toNumber,\r\n                        confirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n                    };\r\n\r\n                    const result = sn_fd.FlowAPI.getRunner()\r\n                        .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                        .inForeground()\r\n                        .withInputs(inputs)\r\n                        .run();\r\n                    const outputs = result.getOutputs();\r\n                } catch (ex) {\r\n                    const err = ex.getMessage();\r\n                    gs.error(err);\r\n                }\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n                });\r\n            } else {\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to create contact consent record.\",\r\n                });\r\n            }\r\n        } else if (messageType === \"Welcome\") {\r\n            gs.info('DC13 - Welcome', fromNumber, toNumber);\r\n            const helpInputs = {\r\n                from_number: fromNumber,\r\n                to_number: toNumber,\r\n                confirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n            };\r\n            const helpResult = sn_fd.FlowAPI.getRunner()\r\n                .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                .inForeground()\r\n                .withInputs(helpInputs)\r\n                .run();\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"Welcome message received. A welcome message has been sent.\",\r\n            });\r\n        } else if (messageType === \"Help\") {\r\n            try {\r\n                const helpInputs = {\r\n                    from_number: fromNumber,\r\n                    to_number: toNumber,\r\n                    confirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n                };\r\n\r\n                const helpResult = sn_fd.FlowAPI.getRunner()\r\n                    .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                    .inForeground()\r\n                    .withInputs(helpInputs)\r\n                    .run();\r\n                const helpOutputs = helpResult.getOutputs();\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: \"Help message received. A support message has been sent.\",\r\n                });\r\n            } catch (ex) {\r\n                gs.error(\"Help subflow error: \" + ex.getMessage());\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to process help keyword.\",\r\n                });\r\n            }\r\n        } else {\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"No opt-in/out or additional keywords matched\",\r\n            });\r\n        }\r\n    },\r\n\r\n    getKeywords: function(fieldName, phoneNumber) {\r\n        let keywords = [];\r\n        const messageNumGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n        let column = \"\";\r\n        if (fieldName === \"opt_in_keywords\") {\r\n            column = \"opt_in_keywords\";\r\n        } else if (fieldName === \"opt_out_keywords\") {\r\n            column = \"opt_out_keywords\";\r\n        } else if (fieldName === \"help_keywords\") {\r\n            column = \"help_keywords\";\r\n        } else if (fieldName === \"other_keywords\") {\r\n            column = \"other_keywords\";\r\n        } else if (fieldName === \"welcome_keywords\") {\r\n            column = \"welcome_keywords\";\r\n        }\r\n\r\n        if (column) {\r\n            messageNumGR.query();\r\n\r\n            if (messageNumGR.next()) {\r\n                const keywordList = messageNumGR.getValue(column) + \"\";\r\n                if (keywordList) {\r\n                    keywords = keywordList.split(\",\").map(function(keyword) {\r\n                        return keyword.trim().toLowerCase();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return keywords;\r\n    },\r\n\r\n    getMessageNumSysId: function(phoneNumber) {\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", phoneNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            return messageGR.getUniqueValue();\r\n        }\r\n    },\r\n\r\n    findContactDetailSysId: function(phoneNumber) {\r\n        const contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        contactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n        contactDetailGR.query();\r\n\r\n        if (contactDetailGR.next()) {\r\n            return contactDetailGR.getUniqueValue();\r\n        }\r\n\r\n        const phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n        const matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n        const formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n        const types = this.types || [];\r\n        const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        for (let x = 0; x < types.length; x++) {\r\n            const type = types[x];\r\n            contactDetailGr.initialize();\r\n            this.getQueryForContactDetail({\r\n                phoneNumber: formatedPhoneNumber,\r\n                type,\r\n                contactDetailGr,\r\n            });\r\n            contactDetailGr.query();\r\n            if (contactDetailGr.hasNext()) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (contactDetailGr.next()) {\r\n            contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n            contactDetailGr.update();\r\n            gs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n            return contactDetailGr.getUniqueValue();\r\n        }\r\n        const tables = this.tables || [];\r\n        for (let y = 0; y < tables.length; y++) {\r\n            const table = tables[y];\r\n            const tableGr = new GlideRecord(table);\r\n            const fields = this.fields[table] || {};\r\n            const {\r\n                phones = []\r\n            } = fields;\r\n            phones.forEach((phoneField) => {\r\n                tableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n            });\r\n            tableGr.query();\r\n\r\n            if (tableGr.next()) {\r\n                const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n                contactDetailGr.initialize();\r\n                contactDetailGr.newRecord();\r\n                contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n                contactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n                const insertResponse = contactDetailGr.insert();\r\n                gs.info(\r\n                    `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n                );\r\n                const contactDetailSysId = contactDetailGr.getUniqueValue();\r\n                if (contactDetailSysId) {\r\n                    gs.info(\r\n                        `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n                    );\r\n                    return contactDetailSysId;\r\n                }\r\n            }\r\n        }\r\n        gs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n        return null;\r\n    },\r\n\r\n    getConfirmationText: function(messageType, fromNumber) {\r\n        let confirmationText = \"\";\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", fromNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            if (messageType === \"Opted-In\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n            } else if (messageType === \"Opted-Out\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n            } else if (messageType === \"Help\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n            } else if (messageType === \"Welcome\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n            }\r\n        }\r\n\r\n        return confirmationText;\r\n    },\r\n\r\n    executeMatchingJourneys: function(message) {\r\n        const journeyVersionIDs = [];\r\n        const versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n            .where(\"published\", true)\r\n            .where(\"active\", true)\r\n            .where(\"type\", \"event\")\r\n            .where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n            .whereNotNull(\"trigger.fields_values\")\r\n            .select(\"journey\")\r\n            .forEach((version) => {\r\n                const versionKeywords = version.fields_values.keywords?.split();\r\n                if (!versionKeywords) {\r\n                    return;\r\n                }\r\n                if (versionKeywords.includes(message)) {\r\n                    const journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n                        version: version.sys_id,\r\n                        journey: version.journey,\r\n                    });\r\n                }\r\n            });\r\n    },\r\n\r\n    updateWaitingJourneyInstances: function(message) {\r\n        const instanceStepIDs = [];\r\n        const actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n            .sys_id;\r\n        let instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"status\", \"Waiting\")\r\n            .where(\"action\", actionID)\r\n            .whereNotNull(\"version_step.fields_values\")\r\n            .select(\"version_step.fields_values\")\r\n            .forEach((instanceStep) => {\r\n                const instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n                if (!instanceStepKeywords) {\r\n                    return;\r\n                }\r\n                if (instanceStepKeywords.includes(message)) {\r\n                    instanceStepIDs.push(instanceStep.sys_id);\r\n                }\r\n            });\r\n        instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"sys_id\", \"IN\", instanceStepIDs)\r\n            .updateMultiple({\r\n                status: \"Processing\",\r\n            });\r\n    },\r\n\r\n    getQueryForContactDetail: function({\r\n        phoneNumber,\r\n        type,\r\n        contactDetailGr\r\n    }) {\r\n        let orCondition = \"\";\r\n        switch (type) {\r\n            case \"user\":\r\n                orCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"contact\":\r\n                orCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"lead\":\r\n                orCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"company\":\r\n                contactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            case \"consumer\":\r\n                orCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"account\":\r\n                contactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    getPhoneNumberFormat: function(phoneNumber) {\r\n        const local = this.local || false;\r\n        if (local) {\r\n            return phoneNumber;\r\n        } else {\r\n            return \"+\" + phoneNumber;\r\n        }\r\n    },\r\n\r\n    type: \"IncomingMessageMS\",\r\n};",
    "formatted_script": {
      "line_count": 420,
      "char_count": 17818,
      "preview": "const IncomingMessageMS = Class.create();\r\nIncomingMessageMS.prototype = {\r\n    initialize: function() {\r\n        this.local = false;\r\n        this.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"acc...",
      "full_script": "const IncomingMessageMS = Class.create();\r\nIncomingMessageMS.prototype = {\r\n    initialize: function() {\r\n        this.local = false;\r\n        this.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n        // The order of tables is important for the creation logic of contact details.\r\n        // The first table that matches the phone number will be used to create the contact detail.\r\n        // This order should reflect the priority of the tables in your application.\r\n        // For example, if you want to prioritize user contacts over leads, user should be first\r\n        // in the list.\r\n        this.tables = [\r\n            \"sys_user\",\r\n            \"sn_lead_mgmt_core_lead\",\r\n            \"customer_contact\",\r\n            \"csm_consumer\",\r\n            \"customer_account\",\r\n            \"core_company\",\r\n        ];\r\n        this.fields = {\r\n            sys_user: {\r\n                detail: \"user\",\r\n                phones: [\"mobile_phone\", \"phone\"],\r\n            },\r\n            sn_lead_mgmt_core_lead: {\r\n                detail: \"lead\",\r\n                phones: [\"business_phone\", \"mobile_phone\"],\r\n            },\r\n            customer_contact: {\r\n                detail: \"contact\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n            },\r\n            core_company: {\r\n                detail: \"company\",\r\n                phones: [\"phone\"],\r\n            },\r\n            csm_consumer: {\r\n                detail: \"consumer\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n            customer_account: {\r\n                detail: \"customer_account\",\r\n                phones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n            },\r\n        };\r\n    },\r\n\r\n    getMessages: function(request, response) {\r\n        const requestBody = request.body.data;\r\n        const message = requestBody.message || {};\r\n        const text =\r\n            (message.contact_message &&\r\n                message.contact_message.text_message &&\r\n                message.contact_message.text_message.text) ||\r\n            \"\";\r\n        const fromNumber = message.sender_id || \"\";\r\n        const toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n        if (!text || !fromNumber || !toNumber) {\r\n            response.setStatus(400);\r\n            response.setBody({\r\n                message: \"Invalid payload. Required fields are missing.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const lowerCaseMessage = text.toLowerCase().trim();\r\n        let messageType = \"\";\r\n\r\n        const optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n        const optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n        const helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n        const welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n        const otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n        const allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n        if (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n            this.updateWaitingJourneyInstances(lowerCaseMessage);\r\n            this.executeMatchingJourneys(lowerCaseMessage);\r\n        }\r\n\r\n        if (welcomeKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Welcome\";\r\n        } else if (helpKeyword.includes(lowerCaseMessage)) {\r\n            messageType = \"Help\";\r\n        } else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-Out\";\r\n        } else if (optInKeywords.includes(lowerCaseMessage)) {\r\n            messageType = \"Opted-In\";\r\n        }\r\n        gs.info('DC13 - messageType', messageType);\r\n\r\n        if (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n            const messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n            const contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n            const optConsentGR = new GlideRecordSecure(\"x_cadso_automate_contact_consent\");\r\n            optConsentGR.initialize();\r\n            optConsentGR.setValue(\"message_number\", messageNumSysId);\r\n            optConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n            optConsentGR.setValue(\"status\", messageType);\r\n            optConsentGR.setValue(\"date\", new GlideDateTime());\r\n            optConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n            const sysId = optConsentGR.insert();\r\n\r\n            if (sysId) {\r\n                try {\r\n                    const inputs = {\r\n                        from_number: fromNumber,\r\n                        to_number: toNumber,\r\n                        confirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n                    };\r\n\r\n                    const result = sn_fd.FlowAPI.getRunner()\r\n                        .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                        .inForeground()\r\n                        .withInputs(inputs)\r\n                        .run();\r\n                    const outputs = result.getOutputs();\r\n                } catch (ex) {\r\n                    const err = ex.getMessage();\r\n                    gs.error(err);\r\n                }\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n                });\r\n            } else {\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to create contact consent record.\",\r\n                });\r\n            }\r\n        } else if (messageType === \"Welcome\") {\r\n            gs.info('DC13 - Welcome', fromNumber, toNumber);\r\n            const helpInputs = {\r\n                from_number: fromNumber,\r\n                to_number: toNumber,\r\n                confirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n            };\r\n            const helpResult = sn_fd.FlowAPI.getRunner()\r\n                .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                .inForeground()\r\n                .withInputs(helpInputs)\r\n                .run();\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"Welcome message received. A welcome message has been sent.\",\r\n            });\r\n        } else if (messageType === \"Help\") {\r\n            try {\r\n                const helpInputs = {\r\n                    from_number: fromNumber,\r\n                    to_number: toNumber,\r\n                    confirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n                };\r\n\r\n                const helpResult = sn_fd.FlowAPI.getRunner()\r\n                    .subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n                    .inForeground()\r\n                    .withInputs(helpInputs)\r\n                    .run();\r\n                const helpOutputs = helpResult.getOutputs();\r\n\r\n                response.setStatus(200);\r\n                response.setBody({\r\n                    from: fromNumber,\r\n                    message: \"Help message received. A support message has been sent.\",\r\n                });\r\n            } catch (ex) {\r\n                gs.error(\"Help subflow error: \" + ex.getMessage());\r\n                response.setStatus(500);\r\n                response.setBody({\r\n                    message: \"Failed to process help keyword.\",\r\n                });\r\n            }\r\n        } else {\r\n            response.setStatus(200);\r\n            response.setBody({\r\n                from: fromNumber,\r\n                message: \"No opt-in/out or additional keywords matched\",\r\n            });\r\n        }\r\n    },\r\n\r\n    getKeywords: function(fieldName, phoneNumber) {\r\n        let keywords = [];\r\n        const messageNumGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n        let column = \"\";\r\n        if (fieldName === \"opt_in_keywords\") {\r\n            column = \"opt_in_keywords\";\r\n        } else if (fieldName === \"opt_out_keywords\") {\r\n            column = \"opt_out_keywords\";\r\n        } else if (fieldName === \"help_keywords\") {\r\n            column = \"help_keywords\";\r\n        } else if (fieldName === \"other_keywords\") {\r\n            column = \"other_keywords\";\r\n        } else if (fieldName === \"welcome_keywords\") {\r\n            column = \"welcome_keywords\";\r\n        }\r\n\r\n        if (column) {\r\n            messageNumGR.query();\r\n\r\n            if (messageNumGR.next()) {\r\n                const keywordList = messageNumGR.getValue(column) + \"\";\r\n                if (keywordList) {\r\n                    keywords = keywordList.split(\",\").map(function(keyword) {\r\n                        return keyword.trim().toLowerCase();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return keywords;\r\n    },\r\n\r\n    getMessageNumSysId: function(phoneNumber) {\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", phoneNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            return messageGR.getUniqueValue();\r\n        }\r\n    },\r\n\r\n    findContactDetailSysId: function(phoneNumber) {\r\n        const contactDetailGR = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        contactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n        contactDetailGR.query();\r\n\r\n        if (contactDetailGR.next()) {\r\n            return contactDetailGR.getUniqueValue();\r\n        }\r\n\r\n        const phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n        const matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n        const formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n        const types = this.types || [];\r\n        const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n        for (let x = 0; x < types.length; x++) {\r\n            const type = types[x];\r\n            contactDetailGr.initialize();\r\n            this.getQueryForContactDetail({\r\n                phoneNumber: formatedPhoneNumber,\r\n                type,\r\n                contactDetailGr,\r\n            });\r\n            contactDetailGr.query();\r\n            if (contactDetailGr.hasNext()) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (contactDetailGr.next()) {\r\n            contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n            contactDetailGr.update();\r\n            gs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n            return contactDetailGr.getUniqueValue();\r\n        }\r\n        const tables = this.tables || [];\r\n        for (let y = 0; y < tables.length; y++) {\r\n            const table = tables[y];\r\n            const tableGr = new GlideRecord(table);\r\n            const fields = this.fields[table] || {};\r\n            const {\r\n                phones = []\r\n            } = fields;\r\n            phones.forEach((phoneField) => {\r\n                tableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n            });\r\n            tableGr.query();\r\n\r\n            if (tableGr.next()) {\r\n                const contactDetailGr = new GlideRecordSecure(\"x_cadso_automate_contact_detail\");\r\n                contactDetailGr.initialize();\r\n                contactDetailGr.newRecord();\r\n                contactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n                contactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n                const insertResponse = contactDetailGr.insert();\r\n                gs.info(\r\n                    `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n                );\r\n                const contactDetailSysId = contactDetailGr.getUniqueValue();\r\n                if (contactDetailSysId) {\r\n                    gs.info(\r\n                        `Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n                    );\r\n                    return contactDetailSysId;\r\n                }\r\n            }\r\n        }\r\n        gs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n        return null;\r\n    },\r\n\r\n    getConfirmationText: function(messageType, fromNumber) {\r\n        let confirmationText = \"\";\r\n        const messageGR = new GlideRecordSecure(\"x_cadso_automate_message_number\");\r\n        messageGR.addQuery(\"number\", fromNumber);\r\n        messageGR.query();\r\n\r\n        if (messageGR.next()) {\r\n            if (messageType === \"Opted-In\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n            } else if (messageType === \"Opted-Out\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n            } else if (messageType === \"Help\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n            } else if (messageType === \"Welcome\") {\r\n                confirmationText =\r\n                    messageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n            }\r\n        }\r\n\r\n        return confirmationText;\r\n    },\r\n\r\n    executeMatchingJourneys: function(message) {\r\n        const journeyVersionIDs = [];\r\n        const versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n            .where(\"published\", true)\r\n            .where(\"active\", true)\r\n            .where(\"type\", \"event\")\r\n            .where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n            .whereNotNull(\"trigger.fields_values\")\r\n            .select(\"journey\")\r\n            .forEach((version) => {\r\n                const versionKeywords = version.fields_values.keywords?.split();\r\n                if (!versionKeywords) {\r\n                    return;\r\n                }\r\n                if (versionKeywords.includes(message)) {\r\n                    const journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n                        version: version.sys_id,\r\n                        journey: version.journey,\r\n                    });\r\n                }\r\n            });\r\n    },\r\n\r\n    updateWaitingJourneyInstances: function(message) {\r\n        const instanceStepIDs = [];\r\n        const actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n            .sys_id;\r\n        let instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"status\", \"Waiting\")\r\n            .where(\"action\", actionID)\r\n            .whereNotNull(\"version_step.fields_values\")\r\n            .select(\"version_step.fields_values\")\r\n            .forEach((instanceStep) => {\r\n                const instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n                if (!instanceStepKeywords) {\r\n                    return;\r\n                }\r\n                if (instanceStepKeywords.includes(message)) {\r\n                    instanceStepIDs.push(instanceStep.sys_id);\r\n                }\r\n            });\r\n        instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n            .where(\"sys_id\", \"IN\", instanceStepIDs)\r\n            .updateMultiple({\r\n                status: \"Processing\",\r\n            });\r\n    },\r\n\r\n    getQueryForContactDetail: function({\r\n        phoneNumber,\r\n        type,\r\n        contactDetailGr\r\n    }) {\r\n        let orCondition = \"\";\r\n        switch (type) {\r\n            case \"user\":\r\n                orCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"contact\":\r\n                orCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"lead\":\r\n                orCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"company\":\r\n                contactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            case \"consumer\":\r\n                orCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n                orCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n                break;\r\n            case \"account\":\r\n                contactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    getPhoneNumberFormat: function(phoneNumber) {\r\n        const local = this.local || false;\r\n        if (local) {\r\n            return phoneNumber;\r\n        } else {\r\n            return \"+\" + phoneNumber;\r\n        }\r\n    },\r\n\r\n    type: \"IncomingMessageMS\",\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_b134d590c3e1de10d4ddf1db050131de",
    "display_value": "sys_script_include_b134d590c3e1de10d4ddf1db050131de"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_automate.IncomingMessageMS",
    "display_value": "x_cadso_automate.IncomingMessageMS"
  },
  "sys_created_on": {
    "value": "2024-10-25 15:11:59",
    "display_value": "2024-10-25 08:11:59 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "IncomingMessageMS",
    "display_value": "IncomingMessageMS"
  },
  "sys_name": {
    "value": "IncomingMessageMS",
    "display_value": "IncomingMessageMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "desiree.morehouse",
    "display_value": "desiree.morehouse"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
