{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "bb89c9a4331a1e107b18bc534d5c7bff",
    "extracted_at": "2025-09-19T21:48:29.102Z",
    "display_value": "getSmsImageMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "3",
    "display_value": "3"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "Grab image files for SMS sending and convert to Base64",
    "display_value": "Grab image files for SMS sending and convert to Base64"
  },
  "sys_updated_on": {
    "value": "2024-12-02 19:35:50",
    "display_value": "2024-12-02 11:35:50 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var getSmsImageMS = Class.create();\r\ngetSmsImageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getImage: function(table, record) {\r\n\t\tlet returnArr = [];\r\n        if (table && record) {\r\n\t\t\tlet index = 0;\r\n            const attachment = new GlideSysAttachment();\r\n            const agr = attachment.getAttachments(table, record);\r\n\r\n            while (agr.next()) {\r\n                const contentType = agr.getValue('content_type');\r\n                if (contentType.startsWith('image')) {\r\n                    const imageData = attachment.getContentBase64(agr);\r\n                    const label = agr.getValue('file_name');\r\n\t\t\t\t\tconst value = \"data:\" + contentType + ';base64,' + imageData;\r\n                    returnArr.push( {\r\n                        label,\r\n                        value,\r\n\t\t\t\t\t\tindex,\r\n                        type: \"attachment\"\r\n                    });\r\n                }\r\n\t\t\t\tindex++;\r\n            }\r\n        }\r\n\r\n\r\n        return returnArr;\r\n    },\r\n\r\n    type: 'getSmsImageMS'\r\n};",
    "display_value": "var getSmsImageMS = Class.create();\r\ngetSmsImageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getImage: function(table, record) {\r\n\t\tlet returnArr = [];\r\n        if (table && record) {\r\n\t\t\tlet index = 0;\r\n            const attachment = new GlideSysAttachment();\r\n            const agr = attachment.getAttachments(table, record);\r\n\r\n            while (agr.next()) {\r\n                const contentType = agr.getValue('content_type');\r\n                if (contentType.startsWith('image')) {\r\n                    const imageData = attachment.getContentBase64(agr);\r\n                    const label = agr.getValue('file_name');\r\n\t\t\t\t\tconst value = \"data:\" + contentType + ';base64,' + imageData;\r\n                    returnArr.push( {\r\n                        label,\r\n                        value,\r\n\t\t\t\t\t\tindex,\r\n                        type: \"attachment\"\r\n                    });\r\n                }\r\n\t\t\t\tindex++;\r\n            }\r\n        }\r\n\r\n\r\n        return returnArr;\r\n    },\r\n\r\n    type: 'getSmsImageMS'\r\n};",
    "formatted_script": {
      "line_count": 36,
      "char_count": 1025,
      "preview": "var getSmsImageMS = Class.create();\r\ngetSmsImageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getImage: function(table, record) {\r\n\t\tlet returnArr = [];\r\n        if (table && record)...",
      "full_script": "var getSmsImageMS = Class.create();\r\ngetSmsImageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    getImage: function(table, record) {\r\n\t\tlet returnArr = [];\r\n        if (table && record) {\r\n\t\t\tlet index = 0;\r\n            const attachment = new GlideSysAttachment();\r\n            const agr = attachment.getAttachments(table, record);\r\n\r\n            while (agr.next()) {\r\n                const contentType = agr.getValue('content_type');\r\n                if (contentType.startsWith('image')) {\r\n                    const imageData = attachment.getContentBase64(agr);\r\n                    const label = agr.getValue('file_name');\r\n\t\t\t\t\tconst value = \"data:\" + contentType + ';base64,' + imageData;\r\n                    returnArr.push( {\r\n                        label,\r\n                        value,\r\n\t\t\t\t\t\tindex,\r\n                        type: \"attachment\"\r\n                    });\r\n                }\r\n\t\t\t\tindex++;\r\n            }\r\n        }\r\n\r\n\r\n        return returnArr;\r\n    },\r\n\r\n    type: 'getSmsImageMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_bb89c9a4331a1e107b18bc534d5c7bff",
    "display_value": "sys_script_include_bb89c9a4331a1e107b18bc534d5c7bff"
  },
  "sys_updated_by": {
    "value": "will.mcgill",
    "display_value": "will.mcgill"
  },
  "api_name": {
    "value": "x_cadso_automate.getSmsImageMS",
    "display_value": "x_cadso_automate.getSmsImageMS"
  },
  "sys_created_on": {
    "value": "2024-12-02 15:38:26",
    "display_value": "2024-12-02 07:38:26 AM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "getSmsImageMS",
    "display_value": "getSmsImageMS"
  },
  "sys_name": {
    "value": "getSmsImageMS",
    "display_value": "getSmsImageMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "will.mcgill",
    "display_value": "will.mcgill"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
