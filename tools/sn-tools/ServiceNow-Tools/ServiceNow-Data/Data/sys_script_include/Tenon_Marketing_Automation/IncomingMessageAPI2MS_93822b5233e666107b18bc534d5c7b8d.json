{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "93822b5233e666107b18bc534d5c7b8d",
    "extracted_at": "2025-09-19T21:48:28.732Z",
    "display_value": "IncomingMessageAPI2MS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "0",
    "display_value": "0"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-07 19:43:06",
    "display_value": "2025-07-07 12:43:06 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "const IncomingMessageAPI2MS = Class.create();\r\nIncomingMessageAPI2MS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.local = false;\r\n\t\tthis.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n\t\t// The order of tables is important for the creation logic of contact details.\r\n\t\t// The first table that matches the phone number will be used to create the contact detail.\r\n\t\t// This order should reflect the priority of the tables in your application.\r\n\t\t// For example, if you want to prioritize user contacts over leads, user should be first\r\n\t\t// in the list.\r\n\t\tthis.tables = [\r\n\t\t\t\"sys_user\",\r\n\t\t\t\"sn_lead_mgmt_core_lead\",\r\n\t\t\t\"customer_contact\",\r\n\t\t\t\"csm_consumer\",\r\n\t\t\t\"customer_account\",\r\n\t\t\t\"core_company\",\r\n\t\t];\r\n\t\tthis.fields = {\r\n\t\t\tsys_user: {\r\n\t\t\t\tdetail: \"user\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tsn_lead_mgmt_core_lead: {\r\n\t\t\t\tdetail: \"lead\",\r\n\t\t\t\tphones: [\"business_phone\", \"mobile_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_contact: {\r\n\t\t\t\tdetail: \"contact\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tcore_company: {\r\n\t\t\t\tdetail: \"company\",\r\n\t\t\t\tphones: [\"phone\"],\r\n\t\t\t},\r\n\t\t\tcsm_consumer: {\r\n\t\t\t\tdetail: \"consumer\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_account: {\r\n\t\t\t\tdetail: \"customer_account\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n\r\n\tgetMessages: function (request, response) {\r\n\t\tconst requestBody = request.body.data;\r\n\r\n\t\tconst message = requestBody.message || {};\r\n\t\tconst text =\r\n\t\t\t(message.contact_message &&\r\n\t\t\t\tmessage.contact_message.text_message &&\r\n\t\t\t\tmessage.contact_message.text_message.text) ||\r\n\t\t\t\"\";\r\n\t\tconst fromNumber = message.sender_id || \"\";\r\n\t\tconst toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n\t\tif (!text || !fromNumber || !toNumber) {\r\n\t\t\tresponse.setStatus(400);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tmessage: \"Invalid payload. Required fields are missing.\",\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lowerCaseMessage = text.toLowerCase().trim();\r\n\t\tlet messageType = \"\";\r\n\r\n\t\tconst optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n\t\tconst optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n\t\tconst helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n\t\tconst welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n\t\tconst otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n\t\tconst allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n\t\tif (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tthis.updateWaitingJourneyInstances(lowerCaseMessage);\r\n\t\t\tthis.executeMatchingJourneys(lowerCaseMessage);\r\n\t\t}\r\n\r\n\t\tif (welcomeKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Welcome\";\r\n\t\t} else if (helpKeyword.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Help\";\r\n\t\t} else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-Out\";\r\n\t\t} else if (optInKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-In\";\r\n\t\t}\r\n\r\n\t\tif (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n\t\t\tconst messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n\t\t\tconst contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n\t\t\tconst optConsentGR = new GlideRecord(\"x_cadso_automate_contact_consent\");\r\n\t\t\toptConsentGR.initialize();\r\n\t\t\toptConsentGR.setValue(\"message_number\", messageNumSysId);\r\n\t\t\toptConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n\t\t\toptConsentGR.setValue(\"status\", messageType);\r\n\t\t\toptConsentGR.setValue(\"date\", new GlideDateTime());\r\n\t\t\toptConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n\t\t\tconst sysId = optConsentGR.insert();\r\n\r\n\t\t\tif (sysId) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst inputs = {\r\n\t\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\t\tconfirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst result = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t\t.withInputs(inputs)\r\n\t\t\t\t\t\t.run();\r\n\t\t\t\t\tconst outputs = result.getOutputs();\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconst err = ex.getMessage();\r\n\t\t\t\t\tgs.error(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to create contact consent record.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n\t\t\t\t};\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Welcome message received. A welcome message has been sent.\",\r\n\t\t\t\t});\r\n\t\t} else if (messageType === \"Help\") {\r\n\t\t\ttry {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tconst helpOutputs = helpResult.getOutputs();\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Help message received. A support message has been sent.\",\r\n\t\t\t\t});\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tgs.error(\"Help subflow error: \" + ex.getMessage());\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to process help keyword.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresponse.setStatus(200);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tfrom: fromNumber,\r\n\t\t\t\tmessage: \"No opt-in/out or additional keywords matched\",\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tgetKeywords: function (fieldName, phoneNumber) {\r\n\t\tlet keywords = [];\r\n\t\tconst messageNumGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n\t\tlet column = \"\";\r\n\t\tif (fieldName === \"opt_in_keywords\") {\r\n\t\t\tcolumn = \"opt_in_keywords\";\r\n\t\t} else if (fieldName === \"opt_out_keywords\") {\r\n\t\t\tcolumn = \"opt_out_keywords\";\r\n\t\t} else if (fieldName === \"help_keywords\") {\r\n\t\t\tcolumn = \"help_keywords\";\r\n\t\t} else if (fieldName === \"other_keywords\") {\r\n\t\t\tcolumn = \"other_keywords\";\r\n\t\t} else if (fieldName === \"welcome_keywords\") {\r\n\t\t\tcolumn = \"welcome_keywords\";\r\n\t\t}\r\n\r\n\t\tif (column) {\r\n\t\t\tmessageNumGR.query();\r\n\r\n\t\t\tif (messageNumGR.next()) {\r\n\t\t\t\tconst keywordList = messageNumGR.getValue(column) + \"\";\r\n\t\t\t\tif (keywordList) {\r\n\t\t\t\t\tkeywords = keywordList.split(\",\").map(function (keyword) {\r\n\t\t\t\t\t\treturn keyword.trim().toLowerCase();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keywords;\r\n\t},\r\n\r\n\tgetMessageNumSysId: function (phoneNumber) {\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", phoneNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\treturn messageGR.getUniqueValue();\r\n\t\t}\r\n\t},\r\n\r\n\tfindContactDetailSysId: function (phoneNumber) {\r\n\t\tconst contactDetailGR = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tcontactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n\t\tcontactDetailGR.query();\r\n\r\n\t\tif (contactDetailGR.next()) {\r\n\t\t\treturn contactDetailGR.getUniqueValue();\r\n\t\t}\r\n\r\n\t\tconst phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n\t\tconst matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n\t\tconst formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n\t\tconst types = this.types || [];\r\n\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tfor (let x = 0; x < types.length; x++) {\r\n\t\t\tconst type = types[x];\r\n\t\t\tcontactDetailGr.initialize();\r\n\t\t\tthis.getQueryForContactDetail({\r\n\t\t\t\tphoneNumber: formatedPhoneNumber,\r\n\t\t\t\ttype,\r\n\t\t\t\tcontactDetailGr,\r\n\t\t\t});\r\n\t\t\tcontactDetailGr.query();\r\n\t\t\tif (contactDetailGr.hasNext()) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (contactDetailGr.next()) {\r\n\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\tcontactDetailGr.update();\r\n\t\t\tgs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n\t\t\treturn contactDetailGr.getUniqueValue();\r\n\t\t}\r\n\t\tconst tables = this.tables || [];\r\n\t\tfor (let y = 0; y < tables.length; y++) {\r\n\t\t\tconst table = tables[y];\r\n\t\t\tconst tableGr = new GlideRecord(table);\r\n\t\t\tconst fields = this.fields[table] || {};\r\n\t\t\tconst { phones = [] } = fields;\r\n\t\t\tphones.forEach((phoneField) => {\r\n\t\t\t\ttableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n\t\t\t});\r\n\t\t\ttableGr.query();\r\n\r\n\t\t\tif (tableGr.next()) {\r\n\t\t\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\t\t\tcontactDetailGr.initialize();\r\n\t\t\t\tcontactDetailGr.newRecord();\r\n\t\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\t\tcontactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n\t\t\t\tconst insertResponse = contactDetailGr.insert();\r\n\t\t\t\tgs.info(\r\n\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n\t\t\t\t);\r\n\t\t\t\tconst contactDetailSysId = contactDetailGr.getUniqueValue();\r\n\t\t\t\tif (contactDetailSysId) {\r\n\t\t\t\t\tgs.info(\r\n\t\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn contactDetailSysId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tgs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n\t\treturn null;\r\n\t},\r\n\r\n\tgetConfirmationText: function (messageType, fromNumber) {\r\n\t\tlet confirmationText = \"\";\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", fromNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\tif (messageType === \"Opted-In\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n\t\t\t} else if (messageType === \"Opted-Out\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n\t\t\t} else if (messageType === \"Help\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n\t\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn confirmationText;\r\n\t},\r\n\r\n\texecuteMatchingJourneys: function (message) {\r\n\t\tconst journeyVersionIDs = [];\r\n\t\tconst versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n\t\t\t.where(\"published\", true)\r\n\t\t\t.where(\"active\", true)\r\n\t\t\t.where(\"type\", \"event\")\r\n\t\t\t.where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n\t\t\t.whereNotNull(\"trigger.fields_values\")\r\n\t\t\t.select(\"journey\")\r\n\t\t\t.forEach((version) => {\r\n\t\t\t\tconst versionKeywords = version.fields_values.keywords?.split();\r\n\t\t\t\tif (!versionKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (versionKeywords.includes(message)) {\r\n\t\t\t\t\tconst journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n\t\t\t\t\t\tversion: version.sys_id,\r\n\t\t\t\t\t\tjourney: version.journey,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t},\r\n\r\n\tupdateWaitingJourneyInstances: function (message) {\r\n\t\tconst instanceStepIDs = [];\r\n\t\tconst actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n\t\t\t.sys_id;\r\n\t\t// let instanceGQ = new GlideQuery('x_cadso_journey_step_instance')\r\n\t\tlet instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"status\", \"Waiting\")\r\n\t\t\t.where(\"action\", actionID)\r\n\t\t\t.whereNotNull(\"version_step.fields_values\")\r\n\t\t\t.select(\"version_step.fields_values\")\r\n\t\t\t.forEach((instanceStep) => {\r\n\t\t\t\tconst instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n\t\t\t\tif (!instanceStepKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (instanceStepKeywords.includes(message)) {\r\n\t\t\t\t\tinstanceStepIDs.push(instanceStep.sys_id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tinstanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"sys_id\", \"IN\", instanceStepIDs)\r\n\t\t\t.updateMultiple({\r\n\t\t\t\tstatus: \"Processing\",\r\n\t\t\t});\r\n\t},\r\n\r\n\tgetQueryForContactDetail: function ({ phoneNumber, type, contactDetailGr }) {\r\n\t\tlet orCondition = \"\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"user\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"contact\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"lead\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"company\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"consumer\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"account\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\r\n\tgetPhoneNumberFormat: function (phoneNumber) {\r\n\t\tconst local = this.local || false;\r\n\t\tif (local) {\r\n\t\t\treturn phoneNumber;\r\n\t\t} else {\r\n\t\t\treturn \"+\" + phoneNumber;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"IncomingMessageAPI2MS\",\r\n};\r\n",
    "display_value": "const IncomingMessageAPI2MS = Class.create();\r\nIncomingMessageAPI2MS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.local = false;\r\n\t\tthis.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n\t\t// The order of tables is important for the creation logic of contact details.\r\n\t\t// The first table that matches the phone number will be used to create the contact detail.\r\n\t\t// This order should reflect the priority of the tables in your application.\r\n\t\t// For example, if you want to prioritize user contacts over leads, user should be first\r\n\t\t// in the list.\r\n\t\tthis.tables = [\r\n\t\t\t\"sys_user\",\r\n\t\t\t\"sn_lead_mgmt_core_lead\",\r\n\t\t\t\"customer_contact\",\r\n\t\t\t\"csm_consumer\",\r\n\t\t\t\"customer_account\",\r\n\t\t\t\"core_company\",\r\n\t\t];\r\n\t\tthis.fields = {\r\n\t\t\tsys_user: {\r\n\t\t\t\tdetail: \"user\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tsn_lead_mgmt_core_lead: {\r\n\t\t\t\tdetail: \"lead\",\r\n\t\t\t\tphones: [\"business_phone\", \"mobile_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_contact: {\r\n\t\t\t\tdetail: \"contact\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tcore_company: {\r\n\t\t\t\tdetail: \"company\",\r\n\t\t\t\tphones: [\"phone\"],\r\n\t\t\t},\r\n\t\t\tcsm_consumer: {\r\n\t\t\t\tdetail: \"consumer\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_account: {\r\n\t\t\t\tdetail: \"customer_account\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n\r\n\tgetMessages: function (request, response) {\r\n\t\tconst requestBody = request.body.data;\r\n\r\n\t\tconst message = requestBody.message || {};\r\n\t\tconst text =\r\n\t\t\t(message.contact_message &&\r\n\t\t\t\tmessage.contact_message.text_message &&\r\n\t\t\t\tmessage.contact_message.text_message.text) ||\r\n\t\t\t\"\";\r\n\t\tconst fromNumber = message.sender_id || \"\";\r\n\t\tconst toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n\t\tif (!text || !fromNumber || !toNumber) {\r\n\t\t\tresponse.setStatus(400);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tmessage: \"Invalid payload. Required fields are missing.\",\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lowerCaseMessage = text.toLowerCase().trim();\r\n\t\tlet messageType = \"\";\r\n\r\n\t\tconst optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n\t\tconst optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n\t\tconst helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n\t\tconst welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n\t\tconst otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n\t\tconst allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n\t\tif (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tthis.updateWaitingJourneyInstances(lowerCaseMessage);\r\n\t\t\tthis.executeMatchingJourneys(lowerCaseMessage);\r\n\t\t}\r\n\r\n\t\tif (welcomeKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Welcome\";\r\n\t\t} else if (helpKeyword.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Help\";\r\n\t\t} else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-Out\";\r\n\t\t} else if (optInKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-In\";\r\n\t\t}\r\n\r\n\t\tif (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n\t\t\tconst messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n\t\t\tconst contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n\t\t\tconst optConsentGR = new GlideRecord(\"x_cadso_automate_contact_consent\");\r\n\t\t\toptConsentGR.initialize();\r\n\t\t\toptConsentGR.setValue(\"message_number\", messageNumSysId);\r\n\t\t\toptConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n\t\t\toptConsentGR.setValue(\"status\", messageType);\r\n\t\t\toptConsentGR.setValue(\"date\", new GlideDateTime());\r\n\t\t\toptConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n\t\t\tconst sysId = optConsentGR.insert();\r\n\r\n\t\t\tif (sysId) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst inputs = {\r\n\t\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\t\tconfirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst result = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t\t.withInputs(inputs)\r\n\t\t\t\t\t\t.run();\r\n\t\t\t\t\tconst outputs = result.getOutputs();\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconst err = ex.getMessage();\r\n\t\t\t\t\tgs.error(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to create contact consent record.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n\t\t\t\t};\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Welcome message received. A welcome message has been sent.\",\r\n\t\t\t\t});\r\n\t\t} else if (messageType === \"Help\") {\r\n\t\t\ttry {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tconst helpOutputs = helpResult.getOutputs();\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Help message received. A support message has been sent.\",\r\n\t\t\t\t});\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tgs.error(\"Help subflow error: \" + ex.getMessage());\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to process help keyword.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresponse.setStatus(200);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tfrom: fromNumber,\r\n\t\t\t\tmessage: \"No opt-in/out or additional keywords matched\",\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tgetKeywords: function (fieldName, phoneNumber) {\r\n\t\tlet keywords = [];\r\n\t\tconst messageNumGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n\t\tlet column = \"\";\r\n\t\tif (fieldName === \"opt_in_keywords\") {\r\n\t\t\tcolumn = \"opt_in_keywords\";\r\n\t\t} else if (fieldName === \"opt_out_keywords\") {\r\n\t\t\tcolumn = \"opt_out_keywords\";\r\n\t\t} else if (fieldName === \"help_keywords\") {\r\n\t\t\tcolumn = \"help_keywords\";\r\n\t\t} else if (fieldName === \"other_keywords\") {\r\n\t\t\tcolumn = \"other_keywords\";\r\n\t\t} else if (fieldName === \"welcome_keywords\") {\r\n\t\t\tcolumn = \"welcome_keywords\";\r\n\t\t}\r\n\r\n\t\tif (column) {\r\n\t\t\tmessageNumGR.query();\r\n\r\n\t\t\tif (messageNumGR.next()) {\r\n\t\t\t\tconst keywordList = messageNumGR.getValue(column) + \"\";\r\n\t\t\t\tif (keywordList) {\r\n\t\t\t\t\tkeywords = keywordList.split(\",\").map(function (keyword) {\r\n\t\t\t\t\t\treturn keyword.trim().toLowerCase();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keywords;\r\n\t},\r\n\r\n\tgetMessageNumSysId: function (phoneNumber) {\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", phoneNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\treturn messageGR.getUniqueValue();\r\n\t\t}\r\n\t},\r\n\r\n\tfindContactDetailSysId: function (phoneNumber) {\r\n\t\tconst contactDetailGR = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tcontactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n\t\tcontactDetailGR.query();\r\n\r\n\t\tif (contactDetailGR.next()) {\r\n\t\t\treturn contactDetailGR.getUniqueValue();\r\n\t\t}\r\n\r\n\t\tconst phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n\t\tconst matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n\t\tconst formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n\t\tconst types = this.types || [];\r\n\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tfor (let x = 0; x < types.length; x++) {\r\n\t\t\tconst type = types[x];\r\n\t\t\tcontactDetailGr.initialize();\r\n\t\t\tthis.getQueryForContactDetail({\r\n\t\t\t\tphoneNumber: formatedPhoneNumber,\r\n\t\t\t\ttype,\r\n\t\t\t\tcontactDetailGr,\r\n\t\t\t});\r\n\t\t\tcontactDetailGr.query();\r\n\t\t\tif (contactDetailGr.hasNext()) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (contactDetailGr.next()) {\r\n\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\tcontactDetailGr.update();\r\n\t\t\tgs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n\t\t\treturn contactDetailGr.getUniqueValue();\r\n\t\t}\r\n\t\tconst tables = this.tables || [];\r\n\t\tfor (let y = 0; y < tables.length; y++) {\r\n\t\t\tconst table = tables[y];\r\n\t\t\tconst tableGr = new GlideRecord(table);\r\n\t\t\tconst fields = this.fields[table] || {};\r\n\t\t\tconst { phones = [] } = fields;\r\n\t\t\tphones.forEach((phoneField) => {\r\n\t\t\t\ttableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n\t\t\t});\r\n\t\t\ttableGr.query();\r\n\r\n\t\t\tif (tableGr.next()) {\r\n\t\t\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\t\t\tcontactDetailGr.initialize();\r\n\t\t\t\tcontactDetailGr.newRecord();\r\n\t\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\t\tcontactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n\t\t\t\tconst insertResponse = contactDetailGr.insert();\r\n\t\t\t\tgs.info(\r\n\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n\t\t\t\t);\r\n\t\t\t\tconst contactDetailSysId = contactDetailGr.getUniqueValue();\r\n\t\t\t\tif (contactDetailSysId) {\r\n\t\t\t\t\tgs.info(\r\n\t\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn contactDetailSysId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tgs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n\t\treturn null;\r\n\t},\r\n\r\n\tgetConfirmationText: function (messageType, fromNumber) {\r\n\t\tlet confirmationText = \"\";\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", fromNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\tif (messageType === \"Opted-In\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n\t\t\t} else if (messageType === \"Opted-Out\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n\t\t\t} else if (messageType === \"Help\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n\t\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn confirmationText;\r\n\t},\r\n\r\n\texecuteMatchingJourneys: function (message) {\r\n\t\tconst journeyVersionIDs = [];\r\n\t\tconst versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n\t\t\t.where(\"published\", true)\r\n\t\t\t.where(\"active\", true)\r\n\t\t\t.where(\"type\", \"event\")\r\n\t\t\t.where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n\t\t\t.whereNotNull(\"trigger.fields_values\")\r\n\t\t\t.select(\"journey\")\r\n\t\t\t.forEach((version) => {\r\n\t\t\t\tconst versionKeywords = version.fields_values.keywords?.split();\r\n\t\t\t\tif (!versionKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (versionKeywords.includes(message)) {\r\n\t\t\t\t\tconst journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n\t\t\t\t\t\tversion: version.sys_id,\r\n\t\t\t\t\t\tjourney: version.journey,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t},\r\n\r\n\tupdateWaitingJourneyInstances: function (message) {\r\n\t\tconst instanceStepIDs = [];\r\n\t\tconst actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n\t\t\t.sys_id;\r\n\t\t// let instanceGQ = new GlideQuery('x_cadso_journey_step_instance')\r\n\t\tlet instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"status\", \"Waiting\")\r\n\t\t\t.where(\"action\", actionID)\r\n\t\t\t.whereNotNull(\"version_step.fields_values\")\r\n\t\t\t.select(\"version_step.fields_values\")\r\n\t\t\t.forEach((instanceStep) => {\r\n\t\t\t\tconst instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n\t\t\t\tif (!instanceStepKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (instanceStepKeywords.includes(message)) {\r\n\t\t\t\t\tinstanceStepIDs.push(instanceStep.sys_id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tinstanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"sys_id\", \"IN\", instanceStepIDs)\r\n\t\t\t.updateMultiple({\r\n\t\t\t\tstatus: \"Processing\",\r\n\t\t\t});\r\n\t},\r\n\r\n\tgetQueryForContactDetail: function ({ phoneNumber, type, contactDetailGr }) {\r\n\t\tlet orCondition = \"\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"user\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"contact\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"lead\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"company\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"consumer\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"account\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\r\n\tgetPhoneNumberFormat: function (phoneNumber) {\r\n\t\tconst local = this.local || false;\r\n\t\tif (local) {\r\n\t\t\treturn phoneNumber;\r\n\t\t} else {\r\n\t\t\treturn \"+\" + phoneNumber;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"IncomingMessageAPI2MS\",\r\n};\r\n",
    "formatted_script": {
      "line_count": 415,
      "char_count": 14130,
      "preview": "const IncomingMessageAPI2MS = Class.create();\r\nIncomingMessageAPI2MS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.local = false;\r\n\t\tthis.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\",...",
      "full_script": "const IncomingMessageAPI2MS = Class.create();\r\nIncomingMessageAPI2MS.prototype = {\r\n\tinitialize: function () {\r\n\t\tthis.local = false;\r\n\t\tthis.types = [\"user\", \"lead\", \"contact\", \"consumer\", \"account\", \"company\"];\r\n\t\t// The order of tables is important for the creation logic of contact details.\r\n\t\t// The first table that matches the phone number will be used to create the contact detail.\r\n\t\t// This order should reflect the priority of the tables in your application.\r\n\t\t// For example, if you want to prioritize user contacts over leads, user should be first\r\n\t\t// in the list.\r\n\t\tthis.tables = [\r\n\t\t\t\"sys_user\",\r\n\t\t\t\"sn_lead_mgmt_core_lead\",\r\n\t\t\t\"customer_contact\",\r\n\t\t\t\"csm_consumer\",\r\n\t\t\t\"customer_account\",\r\n\t\t\t\"core_company\",\r\n\t\t];\r\n\t\tthis.fields = {\r\n\t\t\tsys_user: {\r\n\t\t\t\tdetail: \"user\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tsn_lead_mgmt_core_lead: {\r\n\t\t\t\tdetail: \"lead\",\r\n\t\t\t\tphones: [\"business_phone\", \"mobile_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_contact: {\r\n\t\t\t\tdetail: \"contact\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"phone\"],\r\n\t\t\t},\r\n\t\t\tcore_company: {\r\n\t\t\t\tdetail: \"company\",\r\n\t\t\t\tphones: [\"phone\"],\r\n\t\t\t},\r\n\t\t\tcsm_consumer: {\r\n\t\t\t\tdetail: \"consumer\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t\tcustomer_account: {\r\n\t\t\t\tdetail: \"customer_account\",\r\n\t\t\t\tphones: [\"mobile_phone\", \"home_phone\", \"business_phone\"],\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n\r\n\tgetMessages: function (request, response) {\r\n\t\tconst requestBody = request.body.data;\r\n\r\n\t\tconst message = requestBody.message || {};\r\n\t\tconst text =\r\n\t\t\t(message.contact_message &&\r\n\t\t\t\tmessage.contact_message.text_message &&\r\n\t\t\t\tmessage.contact_message.text_message.text) ||\r\n\t\t\t\"\";\r\n\t\tconst fromNumber = message.sender_id || \"\";\r\n\t\tconst toNumber = (message.channel_identity && message.channel_identity.identity) || \"\";\r\n\r\n\t\tif (!text || !fromNumber || !toNumber) {\r\n\t\t\tresponse.setStatus(400);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tmessage: \"Invalid payload. Required fields are missing.\",\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lowerCaseMessage = text.toLowerCase().trim();\r\n\t\tlet messageType = \"\";\r\n\r\n\t\tconst optInKeywords = this.getKeywords(\"opt_in_keywords\", fromNumber);\r\n\t\tconst optOutKeywords = this.getKeywords(\"opt_out_keywords\", fromNumber);\r\n\t\tconst helpKeyword = this.getKeywords(\"help_keywords\", fromNumber);\r\n\t\tconst welcomeKeywords = this.getKeywords(\"welcome_keywords\", fromNumber);\r\n\t\tconst otherKeywords = this.getKeywords(\"other_keywords\", fromNumber);\r\n\t\tconst allKeywords = [...optInKeywords, ...optOutKeywords, ...otherKeywords, ...welcomeKeywords];\r\n\r\n\t\tif (allKeywords && allKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tthis.updateWaitingJourneyInstances(lowerCaseMessage);\r\n\t\t\tthis.executeMatchingJourneys(lowerCaseMessage);\r\n\t\t}\r\n\r\n\t\tif (welcomeKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Welcome\";\r\n\t\t} else if (helpKeyword.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Help\";\r\n\t\t} else if (optOutKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-Out\";\r\n\t\t} else if (optInKeywords.includes(lowerCaseMessage)) {\r\n\t\t\tmessageType = \"Opted-In\";\r\n\t\t}\r\n\r\n\t\tif (messageType === \"Opted-In\" || messageType === \"Opted-Out\") {\r\n\t\t\tconst messageNumSysId = this.getMessageNumSysId(fromNumber);\r\n\t\t\tconst contactDetailSysId = this.findContactDetailSysId(toNumber);\r\n\r\n\t\t\tconst optConsentGR = new GlideRecord(\"x_cadso_automate_contact_consent\");\r\n\t\t\toptConsentGR.initialize();\r\n\t\t\toptConsentGR.setValue(\"message_number\", messageNumSysId);\r\n\t\t\toptConsentGR.setValue(\"contact_detail\", contactDetailSysId);\r\n\t\t\toptConsentGR.setValue(\"status\", messageType);\r\n\t\t\toptConsentGR.setValue(\"date\", new GlideDateTime());\r\n\t\t\toptConsentGR.setValue(\"recipient_type\", \"sms_mms\");\r\n\t\t\tconst sysId = optConsentGR.insert();\r\n\r\n\t\t\tif (sysId) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst inputs = {\r\n\t\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\t\tconfirmation_text: this.getConfirmationText(messageType, fromNumber),\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst result = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t\t.withInputs(inputs)\r\n\t\t\t\t\t\t.run();\r\n\t\t\t\t\tconst outputs = result.getOutputs();\r\n\t\t\t\t} catch (ex) {\r\n\t\t\t\t\tconst err = ex.getMessage();\r\n\t\t\t\t\tgs.error(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: `User successfully ${messageType === \"Opted-In\" ? \"opted in\" : \"opted out\"}.`,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to create contact consent record.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Welcome\", fromNumber),\r\n\t\t\t\t};\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Welcome message received. A welcome message has been sent.\",\r\n\t\t\t\t});\r\n\t\t} else if (messageType === \"Help\") {\r\n\t\t\ttry {\r\n\t\t\t\tconst helpInputs = {\r\n\t\t\t\t\tfrom_number: fromNumber,\r\n\t\t\t\t\tto_number: toNumber,\r\n\t\t\t\t\tconfirmation_text: this.getConfirmationText(\"Help\", fromNumber),\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst helpResult = sn_fd.FlowAPI.getRunner()\r\n\t\t\t\t\t.subflow(\"x_cadso_text_spoke.send_confirmation_sms\")\r\n\t\t\t\t\t.inForeground()\r\n\t\t\t\t\t.withInputs(helpInputs)\r\n\t\t\t\t\t.run();\r\n\t\t\t\tconst helpOutputs = helpResult.getOutputs();\r\n\r\n\t\t\t\tresponse.setStatus(200);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tfrom: fromNumber,\r\n\t\t\t\t\tmessage: \"Help message received. A support message has been sent.\",\r\n\t\t\t\t});\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tgs.error(\"Help subflow error: \" + ex.getMessage());\r\n\t\t\t\tresponse.setStatus(500);\r\n\t\t\t\tresponse.setBody({\r\n\t\t\t\t\tmessage: \"Failed to process help keyword.\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresponse.setStatus(200);\r\n\t\t\tresponse.setBody({\r\n\t\t\t\tfrom: fromNumber,\r\n\t\t\t\tmessage: \"No opt-in/out or additional keywords matched\",\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tgetKeywords: function (fieldName, phoneNumber) {\r\n\t\tlet keywords = [];\r\n\t\tconst messageNumGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageNumGR.addQuery(\"number\", phoneNumber);\r\n\r\n\t\tlet column = \"\";\r\n\t\tif (fieldName === \"opt_in_keywords\") {\r\n\t\t\tcolumn = \"opt_in_keywords\";\r\n\t\t} else if (fieldName === \"opt_out_keywords\") {\r\n\t\t\tcolumn = \"opt_out_keywords\";\r\n\t\t} else if (fieldName === \"help_keywords\") {\r\n\t\t\tcolumn = \"help_keywords\";\r\n\t\t} else if (fieldName === \"other_keywords\") {\r\n\t\t\tcolumn = \"other_keywords\";\r\n\t\t} else if (fieldName === \"welcome_keywords\") {\r\n\t\t\tcolumn = \"welcome_keywords\";\r\n\t\t}\r\n\r\n\t\tif (column) {\r\n\t\t\tmessageNumGR.query();\r\n\r\n\t\t\tif (messageNumGR.next()) {\r\n\t\t\t\tconst keywordList = messageNumGR.getValue(column) + \"\";\r\n\t\t\t\tif (keywordList) {\r\n\t\t\t\t\tkeywords = keywordList.split(\",\").map(function (keyword) {\r\n\t\t\t\t\t\treturn keyword.trim().toLowerCase();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keywords;\r\n\t},\r\n\r\n\tgetMessageNumSysId: function (phoneNumber) {\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", phoneNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\treturn messageGR.getUniqueValue();\r\n\t\t}\r\n\t},\r\n\r\n\tfindContactDetailSysId: function (phoneNumber) {\r\n\t\tconst contactDetailGR = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tcontactDetailGR.addQuery(\"phone_number\", \"CONTAINS\", phoneNumber);\r\n\t\tcontactDetailGR.query();\r\n\r\n\t\tif (contactDetailGR.next()) {\r\n\t\t\treturn contactDetailGR.getUniqueValue();\r\n\t\t}\r\n\r\n\t\tconst phoneRegex = /(^[01]{0,2})([0-9]{3})([0-9]{3})([0-9]{4})$/g;\r\n\t\tconst matches = phoneRegex.exec(phoneNumber) || phoneNumber.match(phoneRegex);\r\n\t\tconst formatedPhoneNumber = \"(\" + matches[2] + \")\" + \" \" + matches[3] + \"-\" + matches[4];\r\n\t\tconst types = this.types || [];\r\n\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\tfor (let x = 0; x < types.length; x++) {\r\n\t\t\tconst type = types[x];\r\n\t\t\tcontactDetailGr.initialize();\r\n\t\t\tthis.getQueryForContactDetail({\r\n\t\t\t\tphoneNumber: formatedPhoneNumber,\r\n\t\t\t\ttype,\r\n\t\t\t\tcontactDetailGr,\r\n\t\t\t});\r\n\t\t\tcontactDetailGr.query();\r\n\t\t\tif (contactDetailGr.hasNext()) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (contactDetailGr.next()) {\r\n\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\tcontactDetailGr.update();\r\n\t\t\tgs.info(`Tenon: Incoming Message - Contact detail updated for phone number: ${phoneNumber}`);\r\n\t\t\treturn contactDetailGr.getUniqueValue();\r\n\t\t}\r\n\t\tconst tables = this.tables || [];\r\n\t\tfor (let y = 0; y < tables.length; y++) {\r\n\t\t\tconst table = tables[y];\r\n\t\t\tconst tableGr = new GlideRecord(table);\r\n\t\t\tconst fields = this.fields[table] || {};\r\n\t\t\tconst { phones = [] } = fields;\r\n\t\t\tphones.forEach((phoneField) => {\r\n\t\t\t\ttableGr.addEncodedQuery(phoneField + \"LIKE\" + formatedPhoneNumber);\r\n\t\t\t});\r\n\t\t\ttableGr.query();\r\n\r\n\t\t\tif (tableGr.next()) {\r\n\t\t\t\tconst contactDetailGr = new GlideRecord(\"x_cadso_automate_contact_detail\");\r\n\t\t\t\tcontactDetailGr.initialize();\r\n\t\t\t\tcontactDetailGr.newRecord();\r\n\t\t\t\tcontactDetailGr.setValue(\"phone_number\", this.getPhoneNumberFormat(phoneNumber));\r\n\t\t\t\tcontactDetailGr.setValue(fields.detail, tableGr.getUniqueValue());\r\n\t\t\t\tconst insertResponse = contactDetailGr.insert();\r\n\t\t\t\tgs.info(\r\n\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, table: ${table}, sys_id: ${insertResponse}`\r\n\t\t\t\t);\r\n\t\t\t\tconst contactDetailSysId = contactDetailGr.getUniqueValue();\r\n\t\t\t\tif (contactDetailSysId) {\r\n\t\t\t\t\tgs.info(\r\n\t\t\t\t\t\t`Tenon: Incoming Message - Contact detail created for phone number: ${phoneNumber}, sys_id: ${contactDetailSysId}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn contactDetailSysId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tgs.error(`Tenon: Incoming Message - No contact detail found for phone number: ${phoneNumber}`);\r\n\t\treturn null;\r\n\t},\r\n\r\n\tgetConfirmationText: function (messageType, fromNumber) {\r\n\t\tlet confirmationText = \"\";\r\n\t\tconst messageGR = new GlideRecord(\"x_cadso_automate_message_number\");\r\n\t\tmessageGR.addQuery(\"number\", fromNumber);\r\n\t\tmessageGR.query();\r\n\r\n\t\tif (messageGR.next()) {\r\n\t\t\tif (messageType === \"Opted-In\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_in_confirmation_text\") || \"You have successfully opted in.\";\r\n\t\t\t} else if (messageType === \"Opted-Out\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"opt_out_confirmation_text\") || \"You have successfully opted out.\";\r\n\t\t\t} else if (messageType === \"Help\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"help_confirmation_text\") || \"This is the help response message.\";\r\n\t\t\t} else if (messageType === \"Welcome\") {\r\n\t\t\t\tconfirmationText =\r\n\t\t\t\t\tmessageGR.getValue(\"welcome_confirmation_text\") || \"Reply 'Yes' to confirm your subscription. Msgs & data rates may apply.\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn confirmationText;\r\n\t},\r\n\r\n\texecuteMatchingJourneys: function (message) {\r\n\t\tconst journeyVersionIDs = [];\r\n\t\tconst versionGQ = new global.GlideQuery(\"x_cadso_journey_version\")\r\n\t\t\t.where(\"published\", true)\r\n\t\t\t.where(\"active\", true)\r\n\t\t\t.where(\"type\", \"event\")\r\n\t\t\t.where(\"trigger.action\", \"380eaeb5c39a5290d4ddf1db05013142\")\r\n\t\t\t.whereNotNull(\"trigger.fields_values\")\r\n\t\t\t.select(\"journey\")\r\n\t\t\t.forEach((version) => {\r\n\t\t\t\tconst versionKeywords = version.fields_values.keywords?.split();\r\n\t\t\t\tif (!versionKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (versionKeywords.includes(message)) {\r\n\t\t\t\t\tconst journeyInstance = new global.GlideQuery(\"x_cadso_journey_instance\").insert({\r\n\t\t\t\t\t\tversion: version.sys_id,\r\n\t\t\t\t\t\tjourney: version.journey,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t},\r\n\r\n\tupdateWaitingJourneyInstances: function (message) {\r\n\t\tconst instanceStepIDs = [];\r\n\t\tconst actionID = new x_cadso_journey.JourneyBuilderUtils().EVENT_WAIT_ACTION_MAP.keywordReceived\r\n\t\t\t.sys_id;\r\n\t\t// let instanceGQ = new GlideQuery('x_cadso_journey_step_instance')\r\n\t\tlet instanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"status\", \"Waiting\")\r\n\t\t\t.where(\"action\", actionID)\r\n\t\t\t.whereNotNull(\"version_step.fields_values\")\r\n\t\t\t.select(\"version_step.fields_values\")\r\n\t\t\t.forEach((instanceStep) => {\r\n\t\t\t\tconst instanceStepKeywords = instanceStep.version_step.fields_values.keywords?.split();\r\n\t\t\t\tif (!instanceStepKeywords) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (instanceStepKeywords.includes(message)) {\r\n\t\t\t\t\tinstanceStepIDs.push(instanceStep.sys_id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tinstanceStepGQ = new global.GlideQuery(\"x_cadso_journey_instance_step\")\r\n\t\t\t.where(\"sys_id\", \"IN\", instanceStepIDs)\r\n\t\t\t.updateMultiple({\r\n\t\t\t\tstatus: \"Processing\",\r\n\t\t\t});\r\n\t},\r\n\r\n\tgetQueryForContactDetail: function ({ phoneNumber, type, contactDetailGr }) {\r\n\t\tlet orCondition = \"\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"user\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"user.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"user.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"contact\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"contact.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"contact.phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"lead\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"lead.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"lead.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"company\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"company.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"consumer\":\r\n\t\t\t\torCondition = contactDetailGr.addQuery(\"consumer.mobile_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.home_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\torCondition.addOrCondition(\"consumer.business_phone\", \"LIKE\", phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"account\":\r\n\t\t\t\tcontactDetailGr.addEncodedQuery(\"account.phoneLIKE\" + phoneNumber);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\r\n\tgetPhoneNumberFormat: function (phoneNumber) {\r\n\t\tconst local = this.local || false;\r\n\t\tif (local) {\r\n\t\t\treturn phoneNumber;\r\n\t\t} else {\r\n\t\t\treturn \"+\" + phoneNumber;\r\n\t\t}\r\n\t},\r\n\r\n\ttype: \"IncomingMessageAPI2MS\",\r\n};\r\n"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_93822b5233e666107b18bc534d5c7b8d",
    "display_value": "sys_script_include_93822b5233e666107b18bc534d5c7b8d"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_automate.IncomingMessageAPI2MS",
    "display_value": "x_cadso_automate.IncomingMessageAPI2MS"
  },
  "sys_created_on": {
    "value": "2025-07-07 19:43:06",
    "display_value": "2025-07-07 12:43:06 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "IncomingMessageAPI2MS",
    "display_value": "IncomingMessageAPI2MS"
  },
  "sys_name": {
    "value": "IncomingMessageAPI2MS",
    "display_value": "IncomingMessageAPI2MS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
