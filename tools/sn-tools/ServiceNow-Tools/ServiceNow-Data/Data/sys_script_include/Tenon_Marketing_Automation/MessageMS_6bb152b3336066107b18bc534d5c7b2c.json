{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "6bb152b3336066107b18bc534d5c7b2c",
    "extracted_at": "2025-09-19T21:48:29.023Z",
    "display_value": "MessageMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "48",
    "display_value": "48"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-07-22 16:51:37",
    "display_value": "2025-07-22 09:51:37 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var MessageMS = Class.create();\r\nMessageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    delivery_report: function({\r\n        sysID,\r\n        messageTable,\r\n        status\r\n    }) {\r\n        let recipientCount = this._getTotalRecipients({\r\n            messageTable,\r\n            sysID\r\n        });\r\n        let results = {\r\n            sent: recipientCount\r\n        };\r\n        const contactDetails = [];\r\n        let query = `${messageTable}=${sysID}`;\r\n        let table = 'x_cadso_automate_message_event';\r\n        const eventGQ = new global.GlideQuery(table)\r\n            .where(messageTable, sysID)\r\n            .whereNotNull('contact_detail')\r\n            .where('status', 'IN', ['Delivered', 'Rejected', 'Failed'])\r\n            .groupBy(['status'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n                results[events['group']['status'].toLowerCase()] = {\r\n                    count: events.count,\r\n                    percent: ((events.count / recipientCount) * 100).toFixed(0)\r\n                };\r\n            });\r\n        return results;\r\n    },\r\n\r\n    active_in_journeys: function({\r\n        sysID\r\n    }) {\r\n        let versions = [];\r\n        let stepGQ = new global.GlideQuery('x_cadso_journey_version_step')\r\n            .where('version.published', true)\r\n            .where('document_id', sysID)\r\n            .select(['version', 'version$DISPLAY', 'journey'])\r\n            .forEach(step => {\r\n                let version = {\r\n                    short_description: step.version$DISPLAY,\r\n                    link: `https://${gs.getProperty('instance_name')}.service-now.com/x/cadso/automate/journey-builder/${step.journey}/${step.version}/${new GlideDateTime().getNumericValue()}`\r\n                };\r\n                versions.push(version);\r\n            });\r\n        return versions;\r\n    },\r\n\r\n\r\n\r\n    getContactSourceRecord: function({\r\n        sysID,\r\n        contactGQ\r\n    }) {\r\n        if (sysID) {\r\n            contactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n                .orElse(null);\r\n        }\r\n        if (!contactGQ) {\r\n            return null;\r\n        }\r\n        const contactSources = [{\r\n                table: 'sn_lead_mgmt_core_lead',\r\n                sys_id: contactGQ.lead\r\n            },\r\n            {\r\n                table: 'csm_consumer',\r\n                sys_id: contactGQ.consumer\r\n            },\r\n            {\r\n                table: 'sys_user',\r\n                sys_id: contactGQ.user\r\n            },\r\n            {\r\n                table: 'customer_contact',\r\n                sys_id: contactGQ.contact\r\n            }\r\n        ];\r\n        const contactSource = contactSources.find(source => source.sys_id);\r\n        if (!contactSource) {\r\n            return null;\r\n        }\r\n        let schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n        let recordGQ = new global.GlideQuery(contactSource.table)\r\n            .get(contactSource.sys_id, schema)\r\n            .orElse(null);\r\n        return recordGQ;\r\n    },\r\n\r\n    _getTotalRecipients: function({\r\n        messageTable,\r\n        sysID\r\n    }) {\r\n        let field = 'message_batch.message_send';\r\n        if (messageTable == 'message') {\r\n            field += '.message';\r\n        }\r\n        let countGQ = new global.GlideQuery('x_cadso_automate_message_batch_recipient')\r\n            .where(field, sysID)\r\n            .count()\r\n        return countGQ;\r\n    },\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n        let link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n            // No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'MessageMS'\r\n};",
    "display_value": "var MessageMS = Class.create();\r\nMessageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    delivery_report: function({\r\n        sysID,\r\n        messageTable,\r\n        status\r\n    }) {\r\n        let recipientCount = this._getTotalRecipients({\r\n            messageTable,\r\n            sysID\r\n        });\r\n        let results = {\r\n            sent: recipientCount\r\n        };\r\n        const contactDetails = [];\r\n        let query = `${messageTable}=${sysID}`;\r\n        let table = 'x_cadso_automate_message_event';\r\n        const eventGQ = new global.GlideQuery(table)\r\n            .where(messageTable, sysID)\r\n            .whereNotNull('contact_detail')\r\n            .where('status', 'IN', ['Delivered', 'Rejected', 'Failed'])\r\n            .groupBy(['status'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n                results[events['group']['status'].toLowerCase()] = {\r\n                    count: events.count,\r\n                    percent: ((events.count / recipientCount) * 100).toFixed(0)\r\n                };\r\n            });\r\n        return results;\r\n    },\r\n\r\n    active_in_journeys: function({\r\n        sysID\r\n    }) {\r\n        let versions = [];\r\n        let stepGQ = new global.GlideQuery('x_cadso_journey_version_step')\r\n            .where('version.published', true)\r\n            .where('document_id', sysID)\r\n            .select(['version', 'version$DISPLAY', 'journey'])\r\n            .forEach(step => {\r\n                let version = {\r\n                    short_description: step.version$DISPLAY,\r\n                    link: `https://${gs.getProperty('instance_name')}.service-now.com/x/cadso/automate/journey-builder/${step.journey}/${step.version}/${new GlideDateTime().getNumericValue()}`\r\n                };\r\n                versions.push(version);\r\n            });\r\n        return versions;\r\n    },\r\n\r\n\r\n\r\n    getContactSourceRecord: function({\r\n        sysID,\r\n        contactGQ\r\n    }) {\r\n        if (sysID) {\r\n            contactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n                .orElse(null);\r\n        }\r\n        if (!contactGQ) {\r\n            return null;\r\n        }\r\n        const contactSources = [{\r\n                table: 'sn_lead_mgmt_core_lead',\r\n                sys_id: contactGQ.lead\r\n            },\r\n            {\r\n                table: 'csm_consumer',\r\n                sys_id: contactGQ.consumer\r\n            },\r\n            {\r\n                table: 'sys_user',\r\n                sys_id: contactGQ.user\r\n            },\r\n            {\r\n                table: 'customer_contact',\r\n                sys_id: contactGQ.contact\r\n            }\r\n        ];\r\n        const contactSource = contactSources.find(source => source.sys_id);\r\n        if (!contactSource) {\r\n            return null;\r\n        }\r\n        let schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n        let recordGQ = new global.GlideQuery(contactSource.table)\r\n            .get(contactSource.sys_id, schema)\r\n            .orElse(null);\r\n        return recordGQ;\r\n    },\r\n\r\n    _getTotalRecipients: function({\r\n        messageTable,\r\n        sysID\r\n    }) {\r\n        let field = 'message_batch.message_send';\r\n        if (messageTable == 'message') {\r\n            field += '.message';\r\n        }\r\n        let countGQ = new global.GlideQuery('x_cadso_automate_message_batch_recipient')\r\n            .where(field, sysID)\r\n            .count()\r\n        return countGQ;\r\n    },\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n        let link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n            // No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'MessageMS'\r\n};",
    "formatted_script": {
      "line_count": 136,
      "char_count": 4814,
      "preview": "var MessageMS = Class.create();\r\nMessageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    delivery_report: function({\r\n        sysID,\r\n        messageTable,\r\n        status\r\n    }) {\r\n  ...",
      "full_script": "var MessageMS = Class.create();\r\nMessageMS.prototype = {\r\n    initialize: function() {\r\n\r\n    },\r\n\r\n    delivery_report: function({\r\n        sysID,\r\n        messageTable,\r\n        status\r\n    }) {\r\n        let recipientCount = this._getTotalRecipients({\r\n            messageTable,\r\n            sysID\r\n        });\r\n        let results = {\r\n            sent: recipientCount\r\n        };\r\n        const contactDetails = [];\r\n        let query = `${messageTable}=${sysID}`;\r\n        let table = 'x_cadso_automate_message_event';\r\n        const eventGQ = new global.GlideQuery(table)\r\n            .where(messageTable, sysID)\r\n            .whereNotNull('contact_detail')\r\n            .where('status', 'IN', ['Delivered', 'Rejected', 'Failed'])\r\n            .groupBy(['status'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n                results[events['group']['status'].toLowerCase()] = {\r\n                    count: events.count,\r\n                    percent: ((events.count / recipientCount) * 100).toFixed(0)\r\n                };\r\n            });\r\n        return results;\r\n    },\r\n\r\n    active_in_journeys: function({\r\n        sysID\r\n    }) {\r\n        let versions = [];\r\n        let stepGQ = new global.GlideQuery('x_cadso_journey_version_step')\r\n            .where('version.published', true)\r\n            .where('document_id', sysID)\r\n            .select(['version', 'version$DISPLAY', 'journey'])\r\n            .forEach(step => {\r\n                let version = {\r\n                    short_description: step.version$DISPLAY,\r\n                    link: `https://${gs.getProperty('instance_name')}.service-now.com/x/cadso/automate/journey-builder/${step.journey}/${step.version}/${new GlideDateTime().getNumericValue()}`\r\n                };\r\n                versions.push(version);\r\n            });\r\n        return versions;\r\n    },\r\n\r\n\r\n\r\n    getContactSourceRecord: function({\r\n        sysID,\r\n        contactGQ\r\n    }) {\r\n        if (sysID) {\r\n            contactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n                .get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n                .orElse(null);\r\n        }\r\n        if (!contactGQ) {\r\n            return null;\r\n        }\r\n        const contactSources = [{\r\n                table: 'sn_lead_mgmt_core_lead',\r\n                sys_id: contactGQ.lead\r\n            },\r\n            {\r\n                table: 'csm_consumer',\r\n                sys_id: contactGQ.consumer\r\n            },\r\n            {\r\n                table: 'sys_user',\r\n                sys_id: contactGQ.user\r\n            },\r\n            {\r\n                table: 'customer_contact',\r\n                sys_id: contactGQ.contact\r\n            }\r\n        ];\r\n        const contactSource = contactSources.find(source => source.sys_id);\r\n        if (!contactSource) {\r\n            return null;\r\n        }\r\n        let schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n        let recordGQ = new global.GlideQuery(contactSource.table)\r\n            .get(contactSource.sys_id, schema)\r\n            .orElse(null);\r\n        return recordGQ;\r\n    },\r\n\r\n    _getTotalRecipients: function({\r\n        messageTable,\r\n        sysID\r\n    }) {\r\n        let field = 'message_batch.message_send';\r\n        if (messageTable == 'message') {\r\n            field += '.message';\r\n        }\r\n        let countGQ = new global.GlideQuery('x_cadso_automate_message_batch_recipient')\r\n            .where(field, sysID)\r\n            .count()\r\n        return countGQ;\r\n    },\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n        let link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n            // No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n            link = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'MessageMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_6bb152b3336066107b18bc534d5c7b2c",
    "display_value": "sys_script_include_6bb152b3336066107b18bc534d5c7b2c"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "api_name": {
    "value": "x_cadso_automate.MessageMS",
    "display_value": "x_cadso_automate.MessageMS"
  },
  "sys_created_on": {
    "value": "2025-04-03 19:35:22",
    "display_value": "2025-04-03 12:35:22 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "MessageMS",
    "display_value": "MessageMS"
  },
  "sys_name": {
    "value": "MessageMS",
    "display_value": "MessageMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
