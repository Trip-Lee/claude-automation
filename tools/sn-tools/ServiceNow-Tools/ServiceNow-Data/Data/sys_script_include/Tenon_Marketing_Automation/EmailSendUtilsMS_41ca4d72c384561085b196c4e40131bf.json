{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "41ca4d72c384561085b196c4e40131bf",
    "extracted_at": "2025-09-19T21:48:29.309Z",
    "display_value": "EmailSendUtilsMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "53",
    "display_value": "53"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-08-22 14:55:16",
    "display_value": "2025-08-22 07:55:16 AM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var EmailSendUtilsMS = Class.create();\r\nEmailSendUtilsMS.prototype = {\r\n    initialize: function() {\r\n        this.memberFields = {\r\n            \"csm_consumer\": \"consumer\",\r\n            \"customer_contact\": \"contact\",\r\n            \"customer_account\": \"account\",\r\n            \"sys_user\": \"user\",\r\n            \"sn_lead_mgmt_core_lead\": \"lead\",\r\n            \"core_company\": \"company\"\r\n        };\r\n        this.sendStatus = 'processing';\r\n    },\r\n\r\n    processEmail: function(emailSendGR) {\r\n        // Update status to processing and begin processing audiences.\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n\r\n        this.sendStatus = 'send-ready';\r\n        // this._processAudiences(emailSendGR, 'audiences');\r\n        // this._processAudiences(emailSendGR, 'excluded_audiences');\r\n\t\tlet includedAuciences = emailSendGR.getValue('audiences');\r\n\t\tlet excludedAudiences = emailSendGR.getValue('excluded_audiences');\r\n\t\tlet emailSendID = emailSendGR.getUniqueValue();\r\n\t\tlet domain = emailSendGR.from_address.domain.domain_name.toString();\r\n\t\t// let mailingListAudienceID = this._processDynamicAudiences({ includedAudiences, excludedAudiences, emailSendID, domain });\r\n\t\t// emailSendGR.setValue('mailing_list_audience', mailingListAudienceID);\r\n\t\temailSendGR.update();\r\n\r\n        // Update status to send ready upon completion\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n    },\r\n\r\n\t// _processDynamicAudiences: function({ includedAudiences, excludedAudiences, emailSendID, domain }){\r\n\t// \tlet audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n\t// \taudienceGR.setWorkflow(false);\r\n\t// \taudienceGR.setValue('mailgun_address', `${emailSendID}@${domain}`);\r\n\t// \taudienceGR.setValue('name', `Email Send: ${emailSendID}`);\r\n\t// \taudienceGR.setValue('state', 'generating');\r\n\t// \tlet audienceID = audienceGR.insert();\r\n\r\n\t// \tlet allIncludedMembers = new Map();\r\n\t// \tlet allExcludedMembers = new Map();\r\n\r\n\t// \tlet excludedMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', excludedAudiences)\r\n\t// \t.select(['member_hash'])\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tallExcludedMembers.set(key, value);\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet includeMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', includedAudiences)\r\n\t// \t.select('member_hash')\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tif(!allExcludedMembers.has(key)){\r\n\t// \t\t\t\tallIncludedMembers.set(key, value);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet members = [...members.entries()];\r\n\t// \tlet batchSize = 1000;\r\n\t// \tlet memberBatches = [];\r\n\r\n\t// \tfor(let i = 0; i < members.length; i + batchSize){\r\n\t// \t\tlet batch = members.slice(i, i + batchSize);\r\n\t// \t\tmemberBatches.push(batch);\r\n\t// \t}\r\n\r\n\t// \tfor(let i = 0; i < memberBatches.length; i++){\r\n\t// \t\tlet audienceMemberGR = new GlideRecord('x_cadso_automate_audience_member');\r\n\t// \t\taudienceMemberGR.setValue('member_hash', JSON.stringify([...memberBatches[i]]));\r\n\t// \t\taudienceMemberGR.setValue('audience', audienceID);\r\n\t// \t\taudienceMemberGR.insert();\r\n\t// \t}\r\n\r\n\t// \treturn audienceID;\r\n\t\t\r\n\t// },\r\n\r\n    // _processAudiences: function(emailSendGR, audienceField) {\r\n    //     let audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n    //     audienceGR.addQuery('sys_id', 'IN', emailSendGR.getValue(audienceField));\r\n    //     audienceGR.query();\r\n    //     while (audienceGR.next()) {\r\n    //         let audienceType = audienceGR.getValue('type');\r\n    //         if (audienceType === 'static') {\r\n    //             this._processStaticMembers(audienceGR);\r\n    //         } else if (audienceType === 'dynamic') {\r\n    //             this._processDynamicMembers(audienceGR);\r\n    //         } else {\r\n    //             this.sendStatus = 'error';\r\n    //             gs.error('A problem occured processing email send: ' + emailSendGR.getUniqueValue() + ' No valid audience type');\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    // _processStaticMembers: function(audienceID) {\r\n    //     // For static members, the audience relationships already exist in audience_member table. \r\n    //     // Ignore conditions.  Get list.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         return;\r\n    //     }\r\n    //     let audienceMembers = new GlideRecord('x_cadso_automate_audience_member');\r\n    //     audienceMembers.addQuery('audience', audienceID);\r\n    //     audienceMembers.query();\r\n    //     while (audienceMembers.next()) {\r\n    //         let actualMember;\r\n    //         if (audienceMembers.company) {\r\n    //             actualMember = audienceMember.company.getRefRecord();\r\n    //         } else if (audienceMembers.employee) {\r\n    //             actualMember = audienceMembers.employee.getRefRecord();\r\n    //         } else if (audienceMembers.contact) {\r\n    //             actualMember = audienceMembers.contact.getRefRecord();\r\n    //         } else if (audienceMembers.lead) {\r\n    //             actualmember = audiencemembers.lead.getRefRecord();\r\n    //         }\r\n    //         if (!actualMember.isValidRecord()) {\r\n    //             gs.warn('No match found in Audience with id: ' + audienceID + 'for static audience member id: ' + audienceMembers.sys_id);\r\n    //         }\r\n    //         if (actualMember.isValidRecord()) {\r\n    //             let emailDetailID = this._reconcileEmailDetail(actualMember);\r\n    //             if (emailDetailID) {\r\n    //                 this._createAudienceEmailDetailM2M(emailDetailID, audienceID);\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    // },\r\n\r\n\r\n    // _processDynamicMembers(audienceGR) {\r\n    //     // For dynamic members, the audience_member table relationships are unused. \r\n    //     // Ignore list, get conditions.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         let audienceID = audienceGR.getUniqueValue();\r\n    //         let audience = new x_cadso_automate.Audience();\r\n    //         audience.refresh({\r\n    //             sysId: audienceID,\r\n    //             conditions: null,\r\n    //             update: false\r\n    //         });\r\n    //         return;\r\n    //     }\r\n    //     let audienceTableGR = new GlideRecordSecure(audienceGR.table);\r\n    //     audienceTableGR.addEncodedQuery(audienceGR.conditions, true);\r\n    //     audienceTableGR.query();\r\n    //     while (audienceTableGR.next()) {\r\n    //         let emailDetailID = this._reconcileEmailDetail(audienceTableGR);\r\n    //         if (emailDetailID) {\r\n    //             this._createAudienceEmailDetailM2M(emailDetailID, audienceGR.getUniqueValue());\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    _reconcileEmailDetail: function(record) {\r\n        // Get, update, or create email detail records for all matching records.\r\n        let recordClass = record.sys_class_name.toString();\r\n        let memberField = this.memberFields[recordClass];\r\n        if (!memberField) {\r\n            gs.warn('Cannot update Email Detail for: ' + record.sys_id + ' Unknown record type: ' + recordClass);\r\n        }\r\n        let fieldValues = {};\r\n        fieldValues[memberField] = record.sys_id.toString();\r\n        fieldValues.email_address = record.email.toString();\r\n        let emailDetail = new global.GlideQuery('x_cadso_automate_email_detail')\r\n            .getBy(fieldValues, memberField)\r\n            .orElse(fieldValues);\r\n        if (!emailDetail.sys_id) {\r\n            let emailDetailGQ = new global.GlideQuery('x_cadso_automate_email_detail')\r\n                .insertOrUpdate(emailDetail)\r\n                .orElse(null);\r\n        }\r\n        return emailDetail.sys_id || emailDetailGQ.sys_id;\r\n    },\r\n\r\n    _createAudienceEmailDetailM2M(emailDetailID, audienceID) {\r\n        // create new relationships between audience and email detail if they don't already exist.\r\n        let grAudEmailDtl = new GlideRecord('x_cadso_automate_m2m_audience_email_detail');\r\n        grAudEmailDtl.addQuery('x_cadso_automate_audience', audienceID);\r\n        grAudEmailDtl.addQuery('x_cadso_automate_email_detail', emailDetailID);\r\n        grAudEmailDtl.query();\r\n\r\n        if (!grAudEmailDtl.hasNext()) {\r\n            grAudEmailDtl.newRecord();\r\n            grAudEmailDtl.x_cadso_automate_audience = audienceID;\r\n            grAudEmailDtl.x_cadso_automate_email_detail = emailDetailID;\r\n            grAudEmailDtl.insert();\r\n        }\r\n    },\r\n\r\n    type: 'EmailSendUtilsMS'\r\n};",
    "display_value": "var EmailSendUtilsMS = Class.create();\r\nEmailSendUtilsMS.prototype = {\r\n    initialize: function() {\r\n        this.memberFields = {\r\n            \"csm_consumer\": \"consumer\",\r\n            \"customer_contact\": \"contact\",\r\n            \"customer_account\": \"account\",\r\n            \"sys_user\": \"user\",\r\n            \"sn_lead_mgmt_core_lead\": \"lead\",\r\n            \"core_company\": \"company\"\r\n        };\r\n        this.sendStatus = 'processing';\r\n    },\r\n\r\n    processEmail: function(emailSendGR) {\r\n        // Update status to processing and begin processing audiences.\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n\r\n        this.sendStatus = 'send-ready';\r\n        // this._processAudiences(emailSendGR, 'audiences');\r\n        // this._processAudiences(emailSendGR, 'excluded_audiences');\r\n\t\tlet includedAuciences = emailSendGR.getValue('audiences');\r\n\t\tlet excludedAudiences = emailSendGR.getValue('excluded_audiences');\r\n\t\tlet emailSendID = emailSendGR.getUniqueValue();\r\n\t\tlet domain = emailSendGR.from_address.domain.domain_name.toString();\r\n\t\t// let mailingListAudienceID = this._processDynamicAudiences({ includedAudiences, excludedAudiences, emailSendID, domain });\r\n\t\t// emailSendGR.setValue('mailing_list_audience', mailingListAudienceID);\r\n\t\temailSendGR.update();\r\n\r\n        // Update status to send ready upon completion\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n    },\r\n\r\n\t// _processDynamicAudiences: function({ includedAudiences, excludedAudiences, emailSendID, domain }){\r\n\t// \tlet audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n\t// \taudienceGR.setWorkflow(false);\r\n\t// \taudienceGR.setValue('mailgun_address', `${emailSendID}@${domain}`);\r\n\t// \taudienceGR.setValue('name', `Email Send: ${emailSendID}`);\r\n\t// \taudienceGR.setValue('state', 'generating');\r\n\t// \tlet audienceID = audienceGR.insert();\r\n\r\n\t// \tlet allIncludedMembers = new Map();\r\n\t// \tlet allExcludedMembers = new Map();\r\n\r\n\t// \tlet excludedMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', excludedAudiences)\r\n\t// \t.select(['member_hash'])\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tallExcludedMembers.set(key, value);\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet includeMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', includedAudiences)\r\n\t// \t.select('member_hash')\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tif(!allExcludedMembers.has(key)){\r\n\t// \t\t\t\tallIncludedMembers.set(key, value);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet members = [...members.entries()];\r\n\t// \tlet batchSize = 1000;\r\n\t// \tlet memberBatches = [];\r\n\r\n\t// \tfor(let i = 0; i < members.length; i + batchSize){\r\n\t// \t\tlet batch = members.slice(i, i + batchSize);\r\n\t// \t\tmemberBatches.push(batch);\r\n\t// \t}\r\n\r\n\t// \tfor(let i = 0; i < memberBatches.length; i++){\r\n\t// \t\tlet audienceMemberGR = new GlideRecord('x_cadso_automate_audience_member');\r\n\t// \t\taudienceMemberGR.setValue('member_hash', JSON.stringify([...memberBatches[i]]));\r\n\t// \t\taudienceMemberGR.setValue('audience', audienceID);\r\n\t// \t\taudienceMemberGR.insert();\r\n\t// \t}\r\n\r\n\t// \treturn audienceID;\r\n\t\t\r\n\t// },\r\n\r\n    // _processAudiences: function(emailSendGR, audienceField) {\r\n    //     let audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n    //     audienceGR.addQuery('sys_id', 'IN', emailSendGR.getValue(audienceField));\r\n    //     audienceGR.query();\r\n    //     while (audienceGR.next()) {\r\n    //         let audienceType = audienceGR.getValue('type');\r\n    //         if (audienceType === 'static') {\r\n    //             this._processStaticMembers(audienceGR);\r\n    //         } else if (audienceType === 'dynamic') {\r\n    //             this._processDynamicMembers(audienceGR);\r\n    //         } else {\r\n    //             this.sendStatus = 'error';\r\n    //             gs.error('A problem occured processing email send: ' + emailSendGR.getUniqueValue() + ' No valid audience type');\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    // _processStaticMembers: function(audienceID) {\r\n    //     // For static members, the audience relationships already exist in audience_member table. \r\n    //     // Ignore conditions.  Get list.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         return;\r\n    //     }\r\n    //     let audienceMembers = new GlideRecord('x_cadso_automate_audience_member');\r\n    //     audienceMembers.addQuery('audience', audienceID);\r\n    //     audienceMembers.query();\r\n    //     while (audienceMembers.next()) {\r\n    //         let actualMember;\r\n    //         if (audienceMembers.company) {\r\n    //             actualMember = audienceMember.company.getRefRecord();\r\n    //         } else if (audienceMembers.employee) {\r\n    //             actualMember = audienceMembers.employee.getRefRecord();\r\n    //         } else if (audienceMembers.contact) {\r\n    //             actualMember = audienceMembers.contact.getRefRecord();\r\n    //         } else if (audienceMembers.lead) {\r\n    //             actualmember = audiencemembers.lead.getRefRecord();\r\n    //         }\r\n    //         if (!actualMember.isValidRecord()) {\r\n    //             gs.warn('No match found in Audience with id: ' + audienceID + 'for static audience member id: ' + audienceMembers.sys_id);\r\n    //         }\r\n    //         if (actualMember.isValidRecord()) {\r\n    //             let emailDetailID = this._reconcileEmailDetail(actualMember);\r\n    //             if (emailDetailID) {\r\n    //                 this._createAudienceEmailDetailM2M(emailDetailID, audienceID);\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    // },\r\n\r\n\r\n    // _processDynamicMembers(audienceGR) {\r\n    //     // For dynamic members, the audience_member table relationships are unused. \r\n    //     // Ignore list, get conditions.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         let audienceID = audienceGR.getUniqueValue();\r\n    //         let audience = new x_cadso_automate.Audience();\r\n    //         audience.refresh({\r\n    //             sysId: audienceID,\r\n    //             conditions: null,\r\n    //             update: false\r\n    //         });\r\n    //         return;\r\n    //     }\r\n    //     let audienceTableGR = new GlideRecordSecure(audienceGR.table);\r\n    //     audienceTableGR.addEncodedQuery(audienceGR.conditions, true);\r\n    //     audienceTableGR.query();\r\n    //     while (audienceTableGR.next()) {\r\n    //         let emailDetailID = this._reconcileEmailDetail(audienceTableGR);\r\n    //         if (emailDetailID) {\r\n    //             this._createAudienceEmailDetailM2M(emailDetailID, audienceGR.getUniqueValue());\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    _reconcileEmailDetail: function(record) {\r\n        // Get, update, or create email detail records for all matching records.\r\n        let recordClass = record.sys_class_name.toString();\r\n        let memberField = this.memberFields[recordClass];\r\n        if (!memberField) {\r\n            gs.warn('Cannot update Email Detail for: ' + record.sys_id + ' Unknown record type: ' + recordClass);\r\n        }\r\n        let fieldValues = {};\r\n        fieldValues[memberField] = record.sys_id.toString();\r\n        fieldValues.email_address = record.email.toString();\r\n        let emailDetail = new global.GlideQuery('x_cadso_automate_email_detail')\r\n            .getBy(fieldValues, memberField)\r\n            .orElse(fieldValues);\r\n        if (!emailDetail.sys_id) {\r\n            let emailDetailGQ = new global.GlideQuery('x_cadso_automate_email_detail')\r\n                .insertOrUpdate(emailDetail)\r\n                .orElse(null);\r\n        }\r\n        return emailDetail.sys_id || emailDetailGQ.sys_id;\r\n    },\r\n\r\n    _createAudienceEmailDetailM2M(emailDetailID, audienceID) {\r\n        // create new relationships between audience and email detail if they don't already exist.\r\n        let grAudEmailDtl = new GlideRecord('x_cadso_automate_m2m_audience_email_detail');\r\n        grAudEmailDtl.addQuery('x_cadso_automate_audience', audienceID);\r\n        grAudEmailDtl.addQuery('x_cadso_automate_email_detail', emailDetailID);\r\n        grAudEmailDtl.query();\r\n\r\n        if (!grAudEmailDtl.hasNext()) {\r\n            grAudEmailDtl.newRecord();\r\n            grAudEmailDtl.x_cadso_automate_audience = audienceID;\r\n            grAudEmailDtl.x_cadso_automate_email_detail = emailDetailID;\r\n            grAudEmailDtl.insert();\r\n        }\r\n    },\r\n\r\n    type: 'EmailSendUtilsMS'\r\n};",
    "formatted_script": {
      "line_count": 201,
      "char_count": 8726,
      "preview": "var EmailSendUtilsMS = Class.create();\r\nEmailSendUtilsMS.prototype = {\r\n    initialize: function() {\r\n        this.memberFields = {\r\n            \"csm_consumer\": \"consumer\",\r\n            \"customer_cont...",
      "full_script": "var EmailSendUtilsMS = Class.create();\r\nEmailSendUtilsMS.prototype = {\r\n    initialize: function() {\r\n        this.memberFields = {\r\n            \"csm_consumer\": \"consumer\",\r\n            \"customer_contact\": \"contact\",\r\n            \"customer_account\": \"account\",\r\n            \"sys_user\": \"user\",\r\n            \"sn_lead_mgmt_core_lead\": \"lead\",\r\n            \"core_company\": \"company\"\r\n        };\r\n        this.sendStatus = 'processing';\r\n    },\r\n\r\n    processEmail: function(emailSendGR) {\r\n        // Update status to processing and begin processing audiences.\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n\r\n        this.sendStatus = 'send-ready';\r\n        // this._processAudiences(emailSendGR, 'audiences');\r\n        // this._processAudiences(emailSendGR, 'excluded_audiences');\r\n\t\tlet includedAuciences = emailSendGR.getValue('audiences');\r\n\t\tlet excludedAudiences = emailSendGR.getValue('excluded_audiences');\r\n\t\tlet emailSendID = emailSendGR.getUniqueValue();\r\n\t\tlet domain = emailSendGR.from_address.domain.domain_name.toString();\r\n\t\t// let mailingListAudienceID = this._processDynamicAudiences({ includedAudiences, excludedAudiences, emailSendID, domain });\r\n\t\t// emailSendGR.setValue('mailing_list_audience', mailingListAudienceID);\r\n\t\temailSendGR.update();\r\n\r\n        // Update status to send ready upon completion\r\n        emailSendGR.setValue('status', this.sendStatus);\r\n        emailSendGR.update();\r\n    },\r\n\r\n\t// _processDynamicAudiences: function({ includedAudiences, excludedAudiences, emailSendID, domain }){\r\n\t// \tlet audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n\t// \taudienceGR.setWorkflow(false);\r\n\t// \taudienceGR.setValue('mailgun_address', `${emailSendID}@${domain}`);\r\n\t// \taudienceGR.setValue('name', `Email Send: ${emailSendID}`);\r\n\t// \taudienceGR.setValue('state', 'generating');\r\n\t// \tlet audienceID = audienceGR.insert();\r\n\r\n\t// \tlet allIncludedMembers = new Map();\r\n\t// \tlet allExcludedMembers = new Map();\r\n\r\n\t// \tlet excludedMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', excludedAudiences)\r\n\t// \t.select(['member_hash'])\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tallExcludedMembers.set(key, value);\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet includeMembersGQ = new global.GlideQuery('x_cadso_automate_audience_member')\r\n\t// \t.where('audience', 'IN', includedAudiences)\r\n\t// \t.select('member_hash')\r\n\t// \t.forEach(member => {\r\n\t// \t\tlet members = new Map(JSON.parse(member.member_hash));\r\n\t// \t\tmembers.forEach((value, key) => {\r\n\t// \t\t\tif(!allExcludedMembers.has(key)){\r\n\t// \t\t\t\tallIncludedMembers.set(key, value);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \tlet members = [...members.entries()];\r\n\t// \tlet batchSize = 1000;\r\n\t// \tlet memberBatches = [];\r\n\r\n\t// \tfor(let i = 0; i < members.length; i + batchSize){\r\n\t// \t\tlet batch = members.slice(i, i + batchSize);\r\n\t// \t\tmemberBatches.push(batch);\r\n\t// \t}\r\n\r\n\t// \tfor(let i = 0; i < memberBatches.length; i++){\r\n\t// \t\tlet audienceMemberGR = new GlideRecord('x_cadso_automate_audience_member');\r\n\t// \t\taudienceMemberGR.setValue('member_hash', JSON.stringify([...memberBatches[i]]));\r\n\t// \t\taudienceMemberGR.setValue('audience', audienceID);\r\n\t// \t\taudienceMemberGR.insert();\r\n\t// \t}\r\n\r\n\t// \treturn audienceID;\r\n\t\t\r\n\t// },\r\n\r\n    // _processAudiences: function(emailSendGR, audienceField) {\r\n    //     let audienceGR = new GlideRecord('x_cadso_automate_audience');\r\n    //     audienceGR.addQuery('sys_id', 'IN', emailSendGR.getValue(audienceField));\r\n    //     audienceGR.query();\r\n    //     while (audienceGR.next()) {\r\n    //         let audienceType = audienceGR.getValue('type');\r\n    //         if (audienceType === 'static') {\r\n    //             this._processStaticMembers(audienceGR);\r\n    //         } else if (audienceType === 'dynamic') {\r\n    //             this._processDynamicMembers(audienceGR);\r\n    //         } else {\r\n    //             this.sendStatus = 'error';\r\n    //             gs.error('A problem occured processing email send: ' + emailSendGR.getUniqueValue() + ' No valid audience type');\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    // _processStaticMembers: function(audienceID) {\r\n    //     // For static members, the audience relationships already exist in audience_member table. \r\n    //     // Ignore conditions.  Get list.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         return;\r\n    //     }\r\n    //     let audienceMembers = new GlideRecord('x_cadso_automate_audience_member');\r\n    //     audienceMembers.addQuery('audience', audienceID);\r\n    //     audienceMembers.query();\r\n    //     while (audienceMembers.next()) {\r\n    //         let actualMember;\r\n    //         if (audienceMembers.company) {\r\n    //             actualMember = audienceMember.company.getRefRecord();\r\n    //         } else if (audienceMembers.employee) {\r\n    //             actualMember = audienceMembers.employee.getRefRecord();\r\n    //         } else if (audienceMembers.contact) {\r\n    //             actualMember = audienceMembers.contact.getRefRecord();\r\n    //         } else if (audienceMembers.lead) {\r\n    //             actualmember = audiencemembers.lead.getRefRecord();\r\n    //         }\r\n    //         if (!actualMember.isValidRecord()) {\r\n    //             gs.warn('No match found in Audience with id: ' + audienceID + 'for static audience member id: ' + audienceMembers.sys_id);\r\n    //         }\r\n    //         if (actualMember.isValidRecord()) {\r\n    //             let emailDetailID = this._reconcileEmailDetail(actualMember);\r\n    //             if (emailDetailID) {\r\n    //                 this._createAudienceEmailDetailM2M(emailDetailID, audienceID);\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    // },\r\n\r\n\r\n    // _processDynamicMembers(audienceGR) {\r\n    //     // For dynamic members, the audience_member table relationships are unused. \r\n    //     // Ignore list, get conditions.\r\n    //     if (gs.getProperty('x_cadso_automate.use_contact_detail')) {\r\n    //         let audienceID = audienceGR.getUniqueValue();\r\n    //         let audience = new x_cadso_automate.Audience();\r\n    //         audience.refresh({\r\n    //             sysId: audienceID,\r\n    //             conditions: null,\r\n    //             update: false\r\n    //         });\r\n    //         return;\r\n    //     }\r\n    //     let audienceTableGR = new GlideRecordSecure(audienceGR.table);\r\n    //     audienceTableGR.addEncodedQuery(audienceGR.conditions, true);\r\n    //     audienceTableGR.query();\r\n    //     while (audienceTableGR.next()) {\r\n    //         let emailDetailID = this._reconcileEmailDetail(audienceTableGR);\r\n    //         if (emailDetailID) {\r\n    //             this._createAudienceEmailDetailM2M(emailDetailID, audienceGR.getUniqueValue());\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    _reconcileEmailDetail: function(record) {\r\n        // Get, update, or create email detail records for all matching records.\r\n        let recordClass = record.sys_class_name.toString();\r\n        let memberField = this.memberFields[recordClass];\r\n        if (!memberField) {\r\n            gs.warn('Cannot update Email Detail for: ' + record.sys_id + ' Unknown record type: ' + recordClass);\r\n        }\r\n        let fieldValues = {};\r\n        fieldValues[memberField] = record.sys_id.toString();\r\n        fieldValues.email_address = record.email.toString();\r\n        let emailDetail = new global.GlideQuery('x_cadso_automate_email_detail')\r\n            .getBy(fieldValues, memberField)\r\n            .orElse(fieldValues);\r\n        if (!emailDetail.sys_id) {\r\n            let emailDetailGQ = new global.GlideQuery('x_cadso_automate_email_detail')\r\n                .insertOrUpdate(emailDetail)\r\n                .orElse(null);\r\n        }\r\n        return emailDetail.sys_id || emailDetailGQ.sys_id;\r\n    },\r\n\r\n    _createAudienceEmailDetailM2M(emailDetailID, audienceID) {\r\n        // create new relationships between audience and email detail if they don't already exist.\r\n        let grAudEmailDtl = new GlideRecord('x_cadso_automate_m2m_audience_email_detail');\r\n        grAudEmailDtl.addQuery('x_cadso_automate_audience', audienceID);\r\n        grAudEmailDtl.addQuery('x_cadso_automate_email_detail', emailDetailID);\r\n        grAudEmailDtl.query();\r\n\r\n        if (!grAudEmailDtl.hasNext()) {\r\n            grAudEmailDtl.newRecord();\r\n            grAudEmailDtl.x_cadso_automate_audience = audienceID;\r\n            grAudEmailDtl.x_cadso_automate_email_detail = emailDetailID;\r\n            grAudEmailDtl.insert();\r\n        }\r\n    },\r\n\r\n    type: 'EmailSendUtilsMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_41ca4d72c384561085b196c4e40131bf",
    "display_value": "sys_script_include_41ca4d72c384561085b196c4e40131bf"
  },
  "sys_updated_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "api_name": {
    "value": "x_cadso_automate.EmailSendUtilsMS",
    "display_value": "x_cadso_automate.EmailSendUtilsMS"
  },
  "sys_created_on": {
    "value": "2024-08-19 19:09:00",
    "display_value": "2024-08-19 12:09:00 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "EmailSendUtilsMS",
    "display_value": "EmailSendUtilsMS"
  },
  "sys_name": {
    "value": "EmailSendUtilsMS",
    "display_value": "EmailSendUtilsMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
