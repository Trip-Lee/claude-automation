{
  "_metadata": {
    "table": "sys_script_include",
    "sys_id": "743eb920c3755a10d4ddf1db050131de",
    "extracted_at": "2025-09-19T21:48:29.138Z",
    "display_value": "EmailMS",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "access": {
    "value": "public",
    "display_value": "All application scopes"
  },
  "mobile_callable": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "34",
    "display_value": "34"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_on": {
    "value": "2025-03-07 23:09:02",
    "display_value": "2025-03-07 03:09:02 PM"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sandbox_callable": {
    "value": "false",
    "display_value": "false"
  },
  "script": {
    "value": "var EmailMS = Class.create();\r\nEmailMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    top_engaged_contacts: function({ emailSendID, emailID, event }){\r\n        let results = [];\r\n        const contactDetails = [];\r\n\t\tlet query = emailSendID ? 'email_send=' + emailSendID : 'email_send.email=' + emailID;\r\n        query += '^event=' + event;\r\n        let table = 'x_cadso_automate_email_event';\r\n        const eventGQ = new global.GlideQuery.parse(table, query)\r\n            .whereNotNull('contact_detail')\r\n            .groupBy(['event', 'contact_detail'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n\t\t\t\tconst contact = {};\r\n\t\t\t\tcontact[event] = events.count;\r\n                contact.contactDetail = events.group.contact_detail;\r\n\t\t\t\tresults.push(contact);\r\n            });\r\n\t\tresults = results.sort((a, b) => b[event] - a[event]).slice(0, 20);\r\n\t\tconst contactDetailIDs = results.map(result => result.contactDetail);\r\n\r\n        table = 'x_cadso_automate_contact_detail';\r\n        query = 'sys_idIN' + contactDetailIDs;\r\n        let contactGQ = new global.GlideQuery.parse(table, query)\r\n            .select(['name', 'email_address', 'lead', 'consumer', 'user', 'contact'])\r\n            .forEach(contact => {\r\n\t\t\t\tlet result = results.find(obj => obj.contactDetail === contact.sys_id);\r\n\t\t\t\tif(result){\r\n\t\t\t\t\tresult.emailAddress = contact.email_address;\r\n\t\t\t\t\tresult.name = contact.name;\r\n\t\t\t\t\tresult.link = this._getContactLink(contact);\r\n\t\t\t\t}\r\n            });\r\n\t\treturn results;\r\n    },\r\n\r\n\tgetContactSourceRecord: function({ sysID, contactGQ }){\r\n\t\tif(sysID){\r\n\t\t\tcontactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n\t\t\t.get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n\t\t\t.orElse(null);\r\n\t\t}\r\n\t\tif(!contactGQ){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst contactSources = [\r\n\t\t\t{ table: 'sn_lead_mgmt_core_lead', sys_id: contactGQ.lead },\r\n\t\t\t{ table: 'csm_consumer', sys_id: contactGQ.consumer },\r\n\t\t\t{ table: 'sys_user', sys_id: contactGQ.user },\r\n\t\t\t{ table: 'customer_contact', sys_id: contactGQ.contact }\r\n\t\t];\r\n\t\tconst contactSource = contactSources.find(source => source.sys_id);\r\n\t\tif(!contactSource){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n\t\tlet recordGQ = new global.GlideQuery(contactSource.table)\r\n\t\t.get(contactSource.sys_id, schema)\r\n\t\t.orElse(null);\r\n\t\treturn recordGQ;\r\n\t},\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n\t\tlet link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n\t\t\t// No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'EmailMS'\r\n};",
    "display_value": "var EmailMS = Class.create();\r\nEmailMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    top_engaged_contacts: function({ emailSendID, emailID, event }){\r\n        let results = [];\r\n        const contactDetails = [];\r\n\t\tlet query = emailSendID ? 'email_send=' + emailSendID : 'email_send.email=' + emailID;\r\n        query += '^event=' + event;\r\n        let table = 'x_cadso_automate_email_event';\r\n        const eventGQ = new global.GlideQuery.parse(table, query)\r\n            .whereNotNull('contact_detail')\r\n            .groupBy(['event', 'contact_detail'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n\t\t\t\tconst contact = {};\r\n\t\t\t\tcontact[event] = events.count;\r\n                contact.contactDetail = events.group.contact_detail;\r\n\t\t\t\tresults.push(contact);\r\n            });\r\n\t\tresults = results.sort((a, b) => b[event] - a[event]).slice(0, 20);\r\n\t\tconst contactDetailIDs = results.map(result => result.contactDetail);\r\n\r\n        table = 'x_cadso_automate_contact_detail';\r\n        query = 'sys_idIN' + contactDetailIDs;\r\n        let contactGQ = new global.GlideQuery.parse(table, query)\r\n            .select(['name', 'email_address', 'lead', 'consumer', 'user', 'contact'])\r\n            .forEach(contact => {\r\n\t\t\t\tlet result = results.find(obj => obj.contactDetail === contact.sys_id);\r\n\t\t\t\tif(result){\r\n\t\t\t\t\tresult.emailAddress = contact.email_address;\r\n\t\t\t\t\tresult.name = contact.name;\r\n\t\t\t\t\tresult.link = this._getContactLink(contact);\r\n\t\t\t\t}\r\n            });\r\n\t\treturn results;\r\n    },\r\n\r\n\tgetContactSourceRecord: function({ sysID, contactGQ }){\r\n\t\tif(sysID){\r\n\t\t\tcontactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n\t\t\t.get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n\t\t\t.orElse(null);\r\n\t\t}\r\n\t\tif(!contactGQ){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst contactSources = [\r\n\t\t\t{ table: 'sn_lead_mgmt_core_lead', sys_id: contactGQ.lead },\r\n\t\t\t{ table: 'csm_consumer', sys_id: contactGQ.consumer },\r\n\t\t\t{ table: 'sys_user', sys_id: contactGQ.user },\r\n\t\t\t{ table: 'customer_contact', sys_id: contactGQ.contact }\r\n\t\t];\r\n\t\tconst contactSource = contactSources.find(source => source.sys_id);\r\n\t\tif(!contactSource){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n\t\tlet recordGQ = new global.GlideQuery(contactSource.table)\r\n\t\t.get(contactSource.sys_id, schema)\r\n\t\t.orElse(null);\r\n\t\treturn recordGQ;\r\n\t},\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n\t\tlet link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n\t\t\t// No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'EmailMS'\r\n};",
    "formatted_script": {
      "line_count": 90,
      "char_count": 3640,
      "preview": "var EmailMS = Class.create();\r\nEmailMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    top_engaged_contacts: function({ emailSendID, emailID, event }){\r\n        let results = [];\r\n        const c...",
      "full_script": "var EmailMS = Class.create();\r\nEmailMS.prototype = {\r\n    initialize: function() {},\r\n\r\n    top_engaged_contacts: function({ emailSendID, emailID, event }){\r\n        let results = [];\r\n        const contactDetails = [];\r\n\t\tlet query = emailSendID ? 'email_send=' + emailSendID : 'email_send.email=' + emailID;\r\n        query += '^event=' + event;\r\n        let table = 'x_cadso_automate_email_event';\r\n        const eventGQ = new global.GlideQuery.parse(table, query)\r\n            .whereNotNull('contact_detail')\r\n            .groupBy(['event', 'contact_detail'])\r\n            .aggregate('COUNT')\r\n            .select()\r\n            .forEach(events => {\r\n\t\t\t\tconst contact = {};\r\n\t\t\t\tcontact[event] = events.count;\r\n                contact.contactDetail = events.group.contact_detail;\r\n\t\t\t\tresults.push(contact);\r\n            });\r\n\t\tresults = results.sort((a, b) => b[event] - a[event]).slice(0, 20);\r\n\t\tconst contactDetailIDs = results.map(result => result.contactDetail);\r\n\r\n        table = 'x_cadso_automate_contact_detail';\r\n        query = 'sys_idIN' + contactDetailIDs;\r\n        let contactGQ = new global.GlideQuery.parse(table, query)\r\n            .select(['name', 'email_address', 'lead', 'consumer', 'user', 'contact'])\r\n            .forEach(contact => {\r\n\t\t\t\tlet result = results.find(obj => obj.contactDetail === contact.sys_id);\r\n\t\t\t\tif(result){\r\n\t\t\t\t\tresult.emailAddress = contact.email_address;\r\n\t\t\t\t\tresult.name = contact.name;\r\n\t\t\t\t\tresult.link = this._getContactLink(contact);\r\n\t\t\t\t}\r\n            });\r\n\t\treturn results;\r\n    },\r\n\r\n\tgetContactSourceRecord: function({ sysID, contactGQ }){\r\n\t\tif(sysID){\r\n\t\t\tcontactGQ = new global.GlideQuery('x_cadso_automate_contact_detail')\r\n\t\t\t.get(sysID, ['lead', 'consumer', 'user', 'contact'])\r\n\t\t\t.orElse(null);\r\n\t\t}\r\n\t\tif(!contactGQ){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst contactSources = [\r\n\t\t\t{ table: 'sn_lead_mgmt_core_lead', sys_id: contactGQ.lead },\r\n\t\t\t{ table: 'csm_consumer', sys_id: contactGQ.consumer },\r\n\t\t\t{ table: 'sys_user', sys_id: contactGQ.user },\r\n\t\t\t{ table: 'customer_contact', sys_id: contactGQ.contact }\r\n\t\t];\r\n\t\tconst contactSource = contactSources.find(source => source.sys_id);\r\n\t\tif(!contactSource){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet schema = new x_cadso_automate.APIUtils()._getTableSchema(contactSource.table);\r\n\t\tlet recordGQ = new global.GlideQuery(contactSource.table)\r\n\t\t.get(contactSource.sys_id, schema)\r\n\t\t.orElse(null);\r\n\t\treturn recordGQ;\r\n\t},\r\n\r\n    _getContactLink: function(contactGQ) {\r\n        let table, sys_id, page;\r\n\t\tlet link = '';\r\n        if (contactGQ.lead) {\r\n            table = 'sn_lead_mgmt_core_lead';\r\n            page = 'lead';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + new GlideDateTime().getNumericValue() + '/' + table + '/' + contactGQ.sys_id;\r\n        } else if (contactGQ.consumer) {\r\n            table = 'csm_consumer';\r\n            page = 'consumer';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        } else if (contactGQ.user) {\r\n            table = 'sys_user';\r\n            page = 'employee';\r\n\t\t\t// No page currently exists for employee/base sys_user details.  No link.\r\n        } else if (contactGQ.contact) {\r\n            table = 'customer_contact';\r\n            page = 'contact';\r\n\t\t\tlink = 'https://' + gs.getProperty('instance_name') + '.service-now.com/x/cadso/automate/' + page + '/' + contactGQ.sys_id + '/' + new GlideDateTime().getNumericValue();\r\n        }\r\n        return link;\r\n    },\r\n\r\n    type: 'EmailMS'\r\n};"
    }
  },
  "sys_class_name": {
    "value": "sys_script_include",
    "display_value": "Script Include"
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_script_include_743eb920c3755a10d4ddf1db050131de",
    "display_value": "sys_script_include_743eb920c3755a10d4ddf1db050131de"
  },
  "sys_updated_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "api_name": {
    "value": "x_cadso_automate.EmailMS",
    "display_value": "x_cadso_automate.EmailMS"
  },
  "sys_created_on": {
    "value": "2024-11-07 23:14:06",
    "display_value": "2024-11-07 03:14:06 PM"
  },
  "caller_access": {
    "value": "",
    "display_value": null
  },
  "name": {
    "value": "EmailMS",
    "display_value": "EmailMS"
  },
  "sys_name": {
    "value": "EmailMS",
    "display_value": "EmailMS"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "sys_policy": {
    "value": "read",
    "display_value": "Read-only"
  }
}
