{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "4e104c81331b12107b18bc534d5c7b91",
    "extracted_at": "2025-09-19T21:48:39.657Z",
    "display_value": "Set UTM Parameters",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2025-09-18 22:01:35",
    "display_value": "2025-09-18 03:01:35 PM"
  },
  "when": {
    "value": "before",
    "display_value": "before"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2025-01-22 17:24:53",
    "display_value": "2025-01-22 09:24:53 AM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "Set UTM Parameters",
    "display_value": "Set UTM Parameters"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "order": {
    "value": "100",
    "display_value": "100"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "8",
    "display_value": "8"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "x_cadso_automate_email_send",
    "display_value": "x_cadso_automate_email_send"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/) {\r\n\t// grab UTM parameters from the UTM Mapping table\r\n\tconst utmMappingGr = new GlideRecord(\"x_cadso_core_utm_mapping\");\r\n\tutmMappingGr.addQuery(\"record\", current.getUniqueValue());\r\n\tutmMappingGr.setLimit(1);\r\n\tutmMappingGr.query();\r\n\r\n\tlet dbParameters = \"\";\r\n\twhile (utmMappingGr.next()) {\r\n\t\tdbParameters = utmMappingGr.getValue(\"parameters\") || \"\";\r\n\t}\r\n\r\n\tlet utmString = dbParameters || \"utm_medium=email&utm_source=email&utm_campaign=email\";\r\n\r\n\t// Regex to find all anchor tags and their href attributes\r\n\tconst regex = /<a\\s+([^>]*href=\"[^\"]*\"[^>]*)>(.*?)<\\/a>/g;\r\n\r\n\tlet html = current.getValue(\"email_html\");\r\n\tlet utmHTML = html.replace(regex, (match, attributes, innerText) => {\r\n\t\tconst hrefMatch = attributes.match(/href=\"([^\"]*)\"/);\r\n\t\tconst titleMatch = attributes.match(/title=\"([^\"]*)\"/);\r\n\r\n\t\tif (hrefMatch) {\r\n\t\t\tlet url = hrefMatch[1];\r\n\t\t\tlet allUtmParams = utmString;\r\n\r\n\t\t\t// Use title attribute if it exists, otherwise use inner text as utm_content\r\n\t\t\tlet titleValue = \"\";\r\n\t\t\tif (titleMatch && titleMatch[1]) {\r\n\t\t\t\ttitleValue = titleMatch[1];\r\n\t\t\t} else if (innerText && innerText.trim()) {\r\n\t\t\t\t// Strip HTML tags from inner text and use as title\r\n\t\t\t\ttitleValue = innerText.replace(/<[^>]*>/g, \"\").trim();\r\n\t\t\t}\r\n\r\n\t\t\tif (titleValue) {\r\n\t\t\t\tconst encodedTitle = encodeURIComponent(titleValue);\r\n\t\t\t\tallUtmParams += `&utm_content=${encodedTitle}`;\r\n\t\t\t}\r\n\r\n\t\t\tif (allUtmParams) {\r\n\t\t\t\tlet params = dbParameters;\r\n\t\t\t\t// Remove leading ? if URL already has query parameters\r\n\t\t\t\tif (url.includes(\"?\") && params.startsWith(\"?\")) {\r\n\t\t\t\t\tparams = params.substring(1);\r\n\t\t\t\t}\r\n\t\t\t\t// Add separator if needed\r\n\t\t\t\tif (params && !params.startsWith(\"?\") && !params.startsWith(\"&\")) {\r\n\t\t\t\t\tparams = url.includes(\"?\") ? `&${params}` : `?${params}`;\r\n\t\t\t\t}\r\n\t\t\t\tallUtmParams += params.startsWith(\"?\") || params.startsWith(\"&\") ? params : `&${params}`;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine separator for main UTM parameters\r\n\t\t\tconst separator = url.includes(\"?\") ? \"&\" : \"?\";\r\n\t\t\turl += `${separator}${allUtmParams}`;\r\n\r\n\t\t\treturn match.replace(hrefMatch[0], `href=\"${url}\"`);\r\n\t\t}\r\n\t\treturn match;\r\n\t});\r\n\tcurrent.setValue(\"email_html\", utmHTML);\r\n})(current, previous);\r\n",
    "display_value": "(function executeRule(current, previous /*null when async*/) {\r\n\t// grab UTM parameters from the UTM Mapping table\r\n\tconst utmMappingGr = new GlideRecord(\"x_cadso_core_utm_mapping\");\r\n\tutmMappingGr.addQuery(\"record\", current.getUniqueValue());\r\n\tutmMappingGr.setLimit(1);\r\n\tutmMappingGr.query();\r\n\r\n\tlet dbParameters = \"\";\r\n\twhile (utmMappingGr.next()) {\r\n\t\tdbParameters = utmMappingGr.getValue(\"parameters\") || \"\";\r\n\t}\r\n\r\n\tlet utmString = dbParameters || \"utm_medium=email&utm_source=email&utm_campaign=email\";\r\n\r\n\t// Regex to find all anchor tags and their href attributes\r\n\tconst regex = /<a\\s+([^>]*href=\"[^\"]*\"[^>]*)>(.*?)<\\/a>/g;\r\n\r\n\tlet html = current.getValue(\"email_html\");\r\n\tlet utmHTML = html.replace(regex, (match, attributes, innerText) => {\r\n\t\tconst hrefMatch = attributes.match(/href=\"([^\"]*)\"/);\r\n\t\tconst titleMatch = attributes.match(/title=\"([^\"]*)\"/);\r\n\r\n\t\tif (hrefMatch) {\r\n\t\t\tlet url = hrefMatch[1];\r\n\t\t\tlet allUtmParams = utmString;\r\n\r\n\t\t\t// Use title attribute if it exists, otherwise use inner text as utm_content\r\n\t\t\tlet titleValue = \"\";\r\n\t\t\tif (titleMatch && titleMatch[1]) {\r\n\t\t\t\ttitleValue = titleMatch[1];\r\n\t\t\t} else if (innerText && innerText.trim()) {\r\n\t\t\t\t// Strip HTML tags from inner text and use as title\r\n\t\t\t\ttitleValue = innerText.replace(/<[^>]*>/g, \"\").trim();\r\n\t\t\t}\r\n\r\n\t\t\tif (titleValue) {\r\n\t\t\t\tconst encodedTitle = encodeURIComponent(titleValue);\r\n\t\t\t\tallUtmParams += `&utm_content=${encodedTitle}`;\r\n\t\t\t}\r\n\r\n\t\t\tif (allUtmParams) {\r\n\t\t\t\tlet params = dbParameters;\r\n\t\t\t\t// Remove leading ? if URL already has query parameters\r\n\t\t\t\tif (url.includes(\"?\") && params.startsWith(\"?\")) {\r\n\t\t\t\t\tparams = params.substring(1);\r\n\t\t\t\t}\r\n\t\t\t\t// Add separator if needed\r\n\t\t\t\tif (params && !params.startsWith(\"?\") && !params.startsWith(\"&\")) {\r\n\t\t\t\t\tparams = url.includes(\"?\") ? `&${params}` : `?${params}`;\r\n\t\t\t\t}\r\n\t\t\t\tallUtmParams += params.startsWith(\"?\") || params.startsWith(\"&\") ? params : `&${params}`;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine separator for main UTM parameters\r\n\t\t\tconst separator = url.includes(\"?\") ? \"&\" : \"?\";\r\n\t\t\turl += `${separator}${allUtmParams}`;\r\n\r\n\t\t\treturn match.replace(hrefMatch[0], `href=\"${url}\"`);\r\n\t\t}\r\n\t\treturn match;\r\n\t});\r\n\tcurrent.setValue(\"email_html\", utmHTML);\r\n})(current, previous);\r\n",
    "formatted_script": {
      "line_count": 64,
      "char_count": 2245,
      "preview": "(function executeRule(current, previous /*null when async*/) {\r\n\t// grab UTM parameters from the UTM Mapping table\r\n\tconst utmMappingGr = new GlideRecord(\"x_cadso_core_utm_mapping\");\r\n\tutmMappingGr.ad...",
      "full_script": "(function executeRule(current, previous /*null when async*/) {\r\n\t// grab UTM parameters from the UTM Mapping table\r\n\tconst utmMappingGr = new GlideRecord(\"x_cadso_core_utm_mapping\");\r\n\tutmMappingGr.addQuery(\"record\", current.getUniqueValue());\r\n\tutmMappingGr.setLimit(1);\r\n\tutmMappingGr.query();\r\n\r\n\tlet dbParameters = \"\";\r\n\twhile (utmMappingGr.next()) {\r\n\t\tdbParameters = utmMappingGr.getValue(\"parameters\") || \"\";\r\n\t}\r\n\r\n\tlet utmString = dbParameters || \"utm_medium=email&utm_source=email&utm_campaign=email\";\r\n\r\n\t// Regex to find all anchor tags and their href attributes\r\n\tconst regex = /<a\\s+([^>]*href=\"[^\"]*\"[^>]*)>(.*?)<\\/a>/g;\r\n\r\n\tlet html = current.getValue(\"email_html\");\r\n\tlet utmHTML = html.replace(regex, (match, attributes, innerText) => {\r\n\t\tconst hrefMatch = attributes.match(/href=\"([^\"]*)\"/);\r\n\t\tconst titleMatch = attributes.match(/title=\"([^\"]*)\"/);\r\n\r\n\t\tif (hrefMatch) {\r\n\t\t\tlet url = hrefMatch[1];\r\n\t\t\tlet allUtmParams = utmString;\r\n\r\n\t\t\t// Use title attribute if it exists, otherwise use inner text as utm_content\r\n\t\t\tlet titleValue = \"\";\r\n\t\t\tif (titleMatch && titleMatch[1]) {\r\n\t\t\t\ttitleValue = titleMatch[1];\r\n\t\t\t} else if (innerText && innerText.trim()) {\r\n\t\t\t\t// Strip HTML tags from inner text and use as title\r\n\t\t\t\ttitleValue = innerText.replace(/<[^>]*>/g, \"\").trim();\r\n\t\t\t}\r\n\r\n\t\t\tif (titleValue) {\r\n\t\t\t\tconst encodedTitle = encodeURIComponent(titleValue);\r\n\t\t\t\tallUtmParams += `&utm_content=${encodedTitle}`;\r\n\t\t\t}\r\n\r\n\t\t\tif (allUtmParams) {\r\n\t\t\t\tlet params = dbParameters;\r\n\t\t\t\t// Remove leading ? if URL already has query parameters\r\n\t\t\t\tif (url.includes(\"?\") && params.startsWith(\"?\")) {\r\n\t\t\t\t\tparams = params.substring(1);\r\n\t\t\t\t}\r\n\t\t\t\t// Add separator if needed\r\n\t\t\t\tif (params && !params.startsWith(\"?\") && !params.startsWith(\"&\")) {\r\n\t\t\t\t\tparams = url.includes(\"?\") ? `&${params}` : `?${params}`;\r\n\t\t\t\t}\r\n\t\t\t\tallUtmParams += params.startsWith(\"?\") || params.startsWith(\"&\") ? params : `&${params}`;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine separator for main UTM parameters\r\n\t\t\tconst separator = url.includes(\"?\") ? \"&\" : \"?\";\r\n\t\t\turl += `${separator}${allUtmParams}`;\r\n\r\n\t\t\treturn match.replace(hrefMatch[0], `href=\"${url}\"`);\r\n\t\t}\r\n\t\treturn match;\r\n\t});\r\n\tcurrent.setValue(\"email_html\", utmHTML);\r\n})(current, previous);\r\n"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "utm_stringVALCHANGES^ORemail_htmlVALCHANGES^EQ",
    "display_value": "utm_stringVALCHANGES^ORemail_htmlVALCHANGES^EQ"
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_4e104c81331b12107b18bc534d5c7b91",
    "display_value": "sys_script_4e104c81331b12107b18bc534d5c7b91"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "Set UTM Parameters",
    "display_value": "Set UTM Parameters"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
