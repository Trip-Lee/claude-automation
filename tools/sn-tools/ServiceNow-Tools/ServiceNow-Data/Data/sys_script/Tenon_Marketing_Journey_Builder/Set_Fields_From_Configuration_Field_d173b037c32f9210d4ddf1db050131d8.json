{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "d173b037c32f9210d4ddf1db050131d8",
    "extracted_at": "2025-09-19T21:48:39.636Z",
    "display_value": "Set Fields From Configuration Field",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2025-04-01 07:30:41",
    "display_value": "2025-04-01 12:30:41 AM"
  },
  "when": {
    "value": "before",
    "display_value": "before"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2025-02-12 19:48:12",
    "display_value": "2025-02-12 11:48:12 AM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "Set Fields From Configuration Field",
    "display_value": "Set Fields From Configuration Field"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "order": {
    "value": "100",
    "display_value": "100"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "36",
    "display_value": "36"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "x_cadso_journey_version_step",
    "display_value": "x_cadso_journey_version_step"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    let {\r\n        fields = [], doNotUseConfigFields = false, table = {}\r\n    } = JSON.parse(current.configurations);\r\n\r\n    if (table) {\r\n        current.setValue('table', table.value);\r\n    }\r\n\r\n    if (!fields || !fields.length || doNotUseConfigFields) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < fields.length; i++) {\r\n        if (current.isValidField(fields[i].element)) {\r\n            const {\r\n                value,\r\n                element,\r\n                type\r\n            } = fields[i];\r\n            if ((element == 'duration' || type == 'glide_duration' || type === 'duration') && value) {\r\n                current[element].setDateNumericValue(value);\r\n            } else if ((type === 'glide_date_time' || type === 'date_time') && value) {\r\n                let time = value.split(' ')[1];\r\n                if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = Number(time[0]);\r\n                    time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                    time[0] = time[0] < 10 ? \"0\" + time[0] : time[0];\r\n                    time = time.join(\":\");\r\n                } else if (value.indexOf(\"AM\") > 0 && time.indexOf(\"12\") === 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = '00';\r\n                    time = time.join(\":\");\r\n                }\r\n\r\n                if (time.indexOf(\" \") > 0) {\r\n                    time = time.split(\" \")[0];\r\n                }\r\n\r\n                const date = value.split(' ')[0];\r\n                const gdt = new GlideDateTime();\r\n                gdt.setDisplayValue(date + ' ' + time);\r\n                current.setValue('datetime', gdt);\r\n            } else if ((type === 'glide_date' || type === 'date' || element === 'date') && value) {\r\n                current[element] = value;\r\n            } else if ((type === 'glide_time' || type === 'time' || element === 'time') && value) {\r\n                try {\r\n                    let time = value.split(' ')[0];\r\n                    if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                        time = time.split(\":\");\r\n                        time[0] = Number(time[0]);\r\n                        time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                        time = time.join(\":\");\r\n                    }\r\n\r\n                    if (time.indexOf(\" \") > 0) {\r\n                        time = time.split(\" \")[0];\r\n                    }\r\n                    var gt = new GlideTime();\r\n                    gt.setDisplayValue(value);\r\n                    current.setValue(element, gt);\r\n                } catch (e) {\r\n                    current[element] = value;\r\n                }\r\n            } else {\r\n                current[element] = value;\r\n            }\r\n\r\n            if (element === table) {\r\n                current.setValue('table', value);\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, previous);",
    "display_value": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    let {\r\n        fields = [], doNotUseConfigFields = false, table = {}\r\n    } = JSON.parse(current.configurations);\r\n\r\n    if (table) {\r\n        current.setValue('table', table.value);\r\n    }\r\n\r\n    if (!fields || !fields.length || doNotUseConfigFields) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < fields.length; i++) {\r\n        if (current.isValidField(fields[i].element)) {\r\n            const {\r\n                value,\r\n                element,\r\n                type\r\n            } = fields[i];\r\n            if ((element == 'duration' || type == 'glide_duration' || type === 'duration') && value) {\r\n                current[element].setDateNumericValue(value);\r\n            } else if ((type === 'glide_date_time' || type === 'date_time') && value) {\r\n                let time = value.split(' ')[1];\r\n                if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = Number(time[0]);\r\n                    time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                    time[0] = time[0] < 10 ? \"0\" + time[0] : time[0];\r\n                    time = time.join(\":\");\r\n                } else if (value.indexOf(\"AM\") > 0 && time.indexOf(\"12\") === 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = '00';\r\n                    time = time.join(\":\");\r\n                }\r\n\r\n                if (time.indexOf(\" \") > 0) {\r\n                    time = time.split(\" \")[0];\r\n                }\r\n\r\n                const date = value.split(' ')[0];\r\n                const gdt = new GlideDateTime();\r\n                gdt.setDisplayValue(date + ' ' + time);\r\n                current.setValue('datetime', gdt);\r\n            } else if ((type === 'glide_date' || type === 'date' || element === 'date') && value) {\r\n                current[element] = value;\r\n            } else if ((type === 'glide_time' || type === 'time' || element === 'time') && value) {\r\n                try {\r\n                    let time = value.split(' ')[0];\r\n                    if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                        time = time.split(\":\");\r\n                        time[0] = Number(time[0]);\r\n                        time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                        time = time.join(\":\");\r\n                    }\r\n\r\n                    if (time.indexOf(\" \") > 0) {\r\n                        time = time.split(\" \")[0];\r\n                    }\r\n                    var gt = new GlideTime();\r\n                    gt.setDisplayValue(value);\r\n                    current.setValue(element, gt);\r\n                } catch (e) {\r\n                    current[element] = value;\r\n                }\r\n            } else {\r\n                current[element] = value;\r\n            }\r\n\r\n            if (element === table) {\r\n                current.setValue('table', value);\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, previous);",
    "formatted_script": {
      "line_count": 77,
      "char_count": 3033,
      "preview": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    let {\r\n        fields = [], doNotUseConfigFields = false, table = {}\r\n    } = JSON.parse(current.configurations);\r\n\r\n    if (tabl...",
      "full_script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    let {\r\n        fields = [], doNotUseConfigFields = false, table = {}\r\n    } = JSON.parse(current.configurations);\r\n\r\n    if (table) {\r\n        current.setValue('table', table.value);\r\n    }\r\n\r\n    if (!fields || !fields.length || doNotUseConfigFields) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < fields.length; i++) {\r\n        if (current.isValidField(fields[i].element)) {\r\n            const {\r\n                value,\r\n                element,\r\n                type\r\n            } = fields[i];\r\n            if ((element == 'duration' || type == 'glide_duration' || type === 'duration') && value) {\r\n                current[element].setDateNumericValue(value);\r\n            } else if ((type === 'glide_date_time' || type === 'date_time') && value) {\r\n                let time = value.split(' ')[1];\r\n                if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = Number(time[0]);\r\n                    time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                    time[0] = time[0] < 10 ? \"0\" + time[0] : time[0];\r\n                    time = time.join(\":\");\r\n                } else if (value.indexOf(\"AM\") > 0 && time.indexOf(\"12\") === 0) {\r\n                    time = time.split(\":\");\r\n                    time[0] = '00';\r\n                    time = time.join(\":\");\r\n                }\r\n\r\n                if (time.indexOf(\" \") > 0) {\r\n                    time = time.split(\" \")[0];\r\n                }\r\n\r\n                const date = value.split(' ')[0];\r\n                const gdt = new GlideDateTime();\r\n                gdt.setDisplayValue(date + ' ' + time);\r\n                current.setValue('datetime', gdt);\r\n            } else if ((type === 'glide_date' || type === 'date' || element === 'date') && value) {\r\n                current[element] = value;\r\n            } else if ((type === 'glide_time' || type === 'time' || element === 'time') && value) {\r\n                try {\r\n                    let time = value.split(' ')[0];\r\n                    if (value.indexOf(\"PM\") > 0 || value.indexOf(\"pm\") > 0) {\r\n                        time = time.split(\":\");\r\n                        time[0] = Number(time[0]);\r\n                        time[0] = time[0] < 12 ? time[0] + 12 : time[0];\r\n                        time = time.join(\":\");\r\n                    }\r\n\r\n                    if (time.indexOf(\" \") > 0) {\r\n                        time = time.split(\" \")[0];\r\n                    }\r\n                    var gt = new GlideTime();\r\n                    gt.setDisplayValue(value);\r\n                    current.setValue(element, gt);\r\n                } catch (e) {\r\n                    current[element] = value;\r\n                }\r\n            } else {\r\n                current[element] = value;\r\n            }\r\n\r\n            if (element === table) {\r\n                current.setValue('table', value);\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, previous);"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "configurationsVALCHANGES^configurationsISNOTEMPTY^EQ",
    "display_value": "configurationsVALCHANGES^configurationsISNOTEMPTY^EQ"
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_d173b037c32f9210d4ddf1db050131d8",
    "display_value": "sys_script_d173b037c32f9210d4ddf1db050131d8"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "Set Fields From Configuration Field",
    "display_value": "Set Fields From Configuration Field"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
