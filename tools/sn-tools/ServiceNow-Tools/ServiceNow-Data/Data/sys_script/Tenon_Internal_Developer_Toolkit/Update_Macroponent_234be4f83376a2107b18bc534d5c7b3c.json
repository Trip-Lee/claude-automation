{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "234be4f83376a2107b18bc534d5c7b3c",
    "extracted_at": "2025-09-19T21:48:36.969Z",
    "display_value": "Update Macroponent",
    "application": "Tenon_Internal_Developer_Toolkit",
    "scope": {
      "display_value": "Tenon Internal Developer Toolkit",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/dfe2b587872f4650369f33373cbb3540",
      "value": "dfe2b587872f4650369f33373cbb3540"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2025-07-29 22:36:13",
    "display_value": "2025-07-29 03:36:13 PM"
  },
  "when": {
    "value": "after",
    "display_value": "after"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2025-07-15 00:48:25",
    "display_value": "2025-07-14 05:48:25 PM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "Update Macroponent",
    "display_value": "Update Macroponent"
  },
  "sys_scope": {
    "value": "dfe2b587872f4650369f33373cbb3540",
    "display_value": "Tenon Internal Developer Toolkit"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "order": {
    "value": "100",
    "display_value": "100"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "5",
    "display_value": "5"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "x_cadso_ti_devkit_additional_translation",
    "display_value": "x_cadso_ti_devkit_additional_translation"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/ ) {\r\n    const macroGr = current.component.getRefRecord();\r\n    if (macroGr.isValidRecord()) {\r\n        updateMacroponent({\r\n            macroGr\r\n        });\r\n    }\r\n\r\n    function updateMacroponent({\r\n        macroGr\r\n    }) {\r\n        var composition = [];\r\n        var page_presets = [];\r\n\r\n        try {\r\n            composition = current.composition ? JSON.parse(current.composition) : [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to parse JSON as part of UXF macroponent translation extraction\", e);\r\n        }\r\n\r\n        let translations = [];\r\n        try {\r\n            const input = JSON.stringify([composition]);\r\n            translations = JSON.parse(UxFrameworkScriptables.extractTranslations(input)) || [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to extract translations. {0}\", e);\r\n        }\r\n\r\n        const uniqueTranslations = {};\r\n        for (let x = 0; x < translations.length; x++) {\r\n            const translation = translations[x];\r\n            uniqueTranslations[translation.message] = true;\r\n        }\r\n\r\n        const translationGr = new GlideRecord(\"x_cadso_ti_devkit_additional_translation\");\r\n        translationGr.addQuery(\"component\", current.getUniqueValue());\r\n        translationGr.query();\r\n        while (translationGr.next()) {\r\n            let message = translationGr.getValue(\"message\") || \"\";\r\n            const comment = translationGr.getValue(\"comment\") || \"\";\r\n            if (message && !uniqueTranslations[message]) {\r\n                message += \"\";\r\n                translations.push({\r\n                    message,\r\n                    comment,\r\n                });\r\n                uniqueTranslations[message] = true;\r\n            }\r\n        }\r\n\r\n        const hasRootComponent = !current.root_component.nil();\r\n        if (hasRootComponent) {\r\n            const rootComponent = current.root_component.getRefRecord();\r\n            if (rootComponent.isValidRecord()) {\r\n                const rootComponentTranslations = (\r\n                    rootComponent.getValue(\"required_translation_keys\") + \"\"\r\n                ).split(\"\\n\");\r\n                for (let i = 0; i < rootComponentTranslations.length; i++) {\r\n                    const translationKey = rootComponentTranslations[i].trim();\r\n                    if (translationKey && !uniqueTranslations[translationKey]) {\r\n                        translations.push({\r\n                            message: translationKey,\r\n                            comment: \"\",\r\n                        });\r\n                        uniqueTranslations[translationKey] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        current.required_translations = JSON.stringify(translations, null, 2);\r\n        macroGr.update();\r\n    }\r\n})(current, previous);",
    "display_value": "(function executeRule(current, previous /*null when async*/ ) {\r\n    const macroGr = current.component.getRefRecord();\r\n    if (macroGr.isValidRecord()) {\r\n        updateMacroponent({\r\n            macroGr\r\n        });\r\n    }\r\n\r\n    function updateMacroponent({\r\n        macroGr\r\n    }) {\r\n        var composition = [];\r\n        var page_presets = [];\r\n\r\n        try {\r\n            composition = current.composition ? JSON.parse(current.composition) : [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to parse JSON as part of UXF macroponent translation extraction\", e);\r\n        }\r\n\r\n        let translations = [];\r\n        try {\r\n            const input = JSON.stringify([composition]);\r\n            translations = JSON.parse(UxFrameworkScriptables.extractTranslations(input)) || [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to extract translations. {0}\", e);\r\n        }\r\n\r\n        const uniqueTranslations = {};\r\n        for (let x = 0; x < translations.length; x++) {\r\n            const translation = translations[x];\r\n            uniqueTranslations[translation.message] = true;\r\n        }\r\n\r\n        const translationGr = new GlideRecord(\"x_cadso_ti_devkit_additional_translation\");\r\n        translationGr.addQuery(\"component\", current.getUniqueValue());\r\n        translationGr.query();\r\n        while (translationGr.next()) {\r\n            let message = translationGr.getValue(\"message\") || \"\";\r\n            const comment = translationGr.getValue(\"comment\") || \"\";\r\n            if (message && !uniqueTranslations[message]) {\r\n                message += \"\";\r\n                translations.push({\r\n                    message,\r\n                    comment,\r\n                });\r\n                uniqueTranslations[message] = true;\r\n            }\r\n        }\r\n\r\n        const hasRootComponent = !current.root_component.nil();\r\n        if (hasRootComponent) {\r\n            const rootComponent = current.root_component.getRefRecord();\r\n            if (rootComponent.isValidRecord()) {\r\n                const rootComponentTranslations = (\r\n                    rootComponent.getValue(\"required_translation_keys\") + \"\"\r\n                ).split(\"\\n\");\r\n                for (let i = 0; i < rootComponentTranslations.length; i++) {\r\n                    const translationKey = rootComponentTranslations[i].trim();\r\n                    if (translationKey && !uniqueTranslations[translationKey]) {\r\n                        translations.push({\r\n                            message: translationKey,\r\n                            comment: \"\",\r\n                        });\r\n                        uniqueTranslations[translationKey] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        current.required_translations = JSON.stringify(translations, null, 2);\r\n        macroGr.update();\r\n    }\r\n})(current, previous);",
    "formatted_script": {
      "line_count": 73,
      "char_count": 2849,
      "preview": "(function executeRule(current, previous /*null when async*/ ) {\r\n    const macroGr = current.component.getRefRecord();\r\n    if (macroGr.isValidRecord()) {\r\n        updateMacroponent({\r\n            mac...",
      "full_script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    const macroGr = current.component.getRefRecord();\r\n    if (macroGr.isValidRecord()) {\r\n        updateMacroponent({\r\n            macroGr\r\n        });\r\n    }\r\n\r\n    function updateMacroponent({\r\n        macroGr\r\n    }) {\r\n        var composition = [];\r\n        var page_presets = [];\r\n\r\n        try {\r\n            composition = current.composition ? JSON.parse(current.composition) : [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to parse JSON as part of UXF macroponent translation extraction\", e);\r\n        }\r\n\r\n        let translations = [];\r\n        try {\r\n            const input = JSON.stringify([composition]);\r\n            translations = JSON.parse(UxFrameworkScriptables.extractTranslations(input)) || [];\r\n        } catch (e) {\r\n            gs.error(\"Unable to extract translations. {0}\", e);\r\n        }\r\n\r\n        const uniqueTranslations = {};\r\n        for (let x = 0; x < translations.length; x++) {\r\n            const translation = translations[x];\r\n            uniqueTranslations[translation.message] = true;\r\n        }\r\n\r\n        const translationGr = new GlideRecord(\"x_cadso_ti_devkit_additional_translation\");\r\n        translationGr.addQuery(\"component\", current.getUniqueValue());\r\n        translationGr.query();\r\n        while (translationGr.next()) {\r\n            let message = translationGr.getValue(\"message\") || \"\";\r\n            const comment = translationGr.getValue(\"comment\") || \"\";\r\n            if (message && !uniqueTranslations[message]) {\r\n                message += \"\";\r\n                translations.push({\r\n                    message,\r\n                    comment,\r\n                });\r\n                uniqueTranslations[message] = true;\r\n            }\r\n        }\r\n\r\n        const hasRootComponent = !current.root_component.nil();\r\n        if (hasRootComponent) {\r\n            const rootComponent = current.root_component.getRefRecord();\r\n            if (rootComponent.isValidRecord()) {\r\n                const rootComponentTranslations = (\r\n                    rootComponent.getValue(\"required_translation_keys\") + \"\"\r\n                ).split(\"\\n\");\r\n                for (let i = 0; i < rootComponentTranslations.length; i++) {\r\n                    const translationKey = rootComponentTranslations[i].trim();\r\n                    if (translationKey && !uniqueTranslations[translationKey]) {\r\n                        translations.push({\r\n                            message: translationKey,\r\n                            comment: \"\",\r\n                        });\r\n                        uniqueTranslations[translationKey] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        current.required_translations = JSON.stringify(translations, null, 2);\r\n        macroGr.update();\r\n    }\r\n})(current, previous);"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "messageVALCHANGES^ORcommentVALCHANGES^ORcomponentVALCHANGES^EQ",
    "display_value": "messageVALCHANGES^ORcommentVALCHANGES^ORcomponentVALCHANGES^EQ"
  },
  "sys_package": {
    "value": "dfe2b587872f4650369f33373cbb3540",
    "display_value": "Tenon Internal Developer Toolkit"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_234be4f83376a2107b18bc534d5c7b3c",
    "display_value": "sys_script_234be4f83376a2107b18bc534d5c7b3c"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "Update Macroponent",
    "display_value": "Update Macroponent"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
