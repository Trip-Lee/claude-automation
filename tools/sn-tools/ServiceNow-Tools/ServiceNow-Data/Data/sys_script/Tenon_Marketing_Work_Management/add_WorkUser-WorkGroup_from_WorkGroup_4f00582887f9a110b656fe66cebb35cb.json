{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "4f00582887f9a110b656fe66cebb35cb",
    "extracted_at": "2025-09-19T21:48:44.097Z",
    "display_value": "add WorkUser-WorkGroup from WorkGroup",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2025-07-16 19:59:14",
    "display_value": "2025-07-16 12:59:14 PM"
  },
  "when": {
    "value": "after",
    "display_value": "after"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2023-03-22 03:25:05",
    "display_value": "2023-03-21 08:25:05 PM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "add WorkUser-WorkGroup from WorkGroup",
    "display_value": "add WorkUser-WorkGroup from WorkGroup"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "trevor.offen",
    "display_value": "trevor.offen"
  },
  "order": {
    "value": "100",
    "display_value": "100"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "5",
    "display_value": "5"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "x_cadso_work_group_sys_user_m2m",
    "display_value": "x_cadso_work_group_sys_user_m2m"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t// Intentionally using GlideRecord vs GlideRecordSecure here because...\r\n\t// We want the update made regardless of the current users permissions.\r\n\t// Classified: Business Logic\r\n\r\n    GetUniqueArray = function(arr) {\r\n        var uniqueArr = [...new Set(arr)];\r\n        return uniqueArr;\r\n    };\r\n\r\n    //------------------------------------------ Check to see if there are Work Users tied to the Current User.-----------------------------------------------------------------------------------------\r\n\r\n    var hasWorkUserRecord = false;\r\n    var workUser = \"\";\r\n    var workUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n\tworkUserGR.addQuery('user', current.getValue('user'));\r\n    workUserGR.query();\r\n    while (workUserGR.next()) {\r\n        hasWorkUserRecord = true;\r\n        workUser = workUserGR.getUniqueValue();\r\n    }\r\n\r\n    //------------------------------------------ If there are no Work User tied to the user, Create the work user.--------------------------------------------------------------------------------------\r\n\r\n    if (!hasWorkUserRecord) {\r\n        var createWorkUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n        createWorkUserGR.initialize();\r\n        createWorkUserGR.setValue('user', current.getValue('user'));\r\n        workUser = createWorkUserGR.getUniqueValue();\r\n        createWorkUserGR.insert();\r\n    }\r\n\r\n    //------------------------------------------ If there is already a work user OR we just created one, create a Work User to Work Group m2m record --------------------------------------------------\r\n\r\n    var createWorkUsertoWorkGroupGR = new GlideRecord(\"x_cadso_work_user_group_m2m\");\r\n    createWorkUsertoWorkGroupGR.initialize();\r\n    createWorkUsertoWorkGroupGR.setValue('work_user', workUser);\r\n    createWorkUsertoWorkGroupGR.setValue('work_group', current.getValue('work_group'));\r\n    createWorkUsertoWorkGroupGR.setValue('inherit', true);\r\n    createWorkUsertoWorkGroupGR.setValue('granted_by', current.getValue('sys_id'));\r\n    createWorkUsertoWorkGroupGR.insert();\r\n\r\n})(current, previous);",
    "display_value": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t// Intentionally using GlideRecord vs GlideRecordSecure here because...\r\n\t// We want the update made regardless of the current users permissions.\r\n\t// Classified: Business Logic\r\n\r\n    GetUniqueArray = function(arr) {\r\n        var uniqueArr = [...new Set(arr)];\r\n        return uniqueArr;\r\n    };\r\n\r\n    //------------------------------------------ Check to see if there are Work Users tied to the Current User.-----------------------------------------------------------------------------------------\r\n\r\n    var hasWorkUserRecord = false;\r\n    var workUser = \"\";\r\n    var workUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n\tworkUserGR.addQuery('user', current.getValue('user'));\r\n    workUserGR.query();\r\n    while (workUserGR.next()) {\r\n        hasWorkUserRecord = true;\r\n        workUser = workUserGR.getUniqueValue();\r\n    }\r\n\r\n    //------------------------------------------ If there are no Work User tied to the user, Create the work user.--------------------------------------------------------------------------------------\r\n\r\n    if (!hasWorkUserRecord) {\r\n        var createWorkUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n        createWorkUserGR.initialize();\r\n        createWorkUserGR.setValue('user', current.getValue('user'));\r\n        workUser = createWorkUserGR.getUniqueValue();\r\n        createWorkUserGR.insert();\r\n    }\r\n\r\n    //------------------------------------------ If there is already a work user OR we just created one, create a Work User to Work Group m2m record --------------------------------------------------\r\n\r\n    var createWorkUsertoWorkGroupGR = new GlideRecord(\"x_cadso_work_user_group_m2m\");\r\n    createWorkUsertoWorkGroupGR.initialize();\r\n    createWorkUsertoWorkGroupGR.setValue('work_user', workUser);\r\n    createWorkUsertoWorkGroupGR.setValue('work_group', current.getValue('work_group'));\r\n    createWorkUsertoWorkGroupGR.setValue('inherit', true);\r\n    createWorkUsertoWorkGroupGR.setValue('granted_by', current.getValue('sys_id'));\r\n    createWorkUsertoWorkGroupGR.insert();\r\n\r\n})(current, previous);",
    "formatted_script": {
      "line_count": 43,
      "char_count": 2117,
      "preview": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t// Intentionally using GlideRecord vs GlideRecordSecure here because...\r\n\t// We want the update made regardless of the current users p...",
      "full_script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t// Intentionally using GlideRecord vs GlideRecordSecure here because...\r\n\t// We want the update made regardless of the current users permissions.\r\n\t// Classified: Business Logic\r\n\r\n    GetUniqueArray = function(arr) {\r\n        var uniqueArr = [...new Set(arr)];\r\n        return uniqueArr;\r\n    };\r\n\r\n    //------------------------------------------ Check to see if there are Work Users tied to the Current User.-----------------------------------------------------------------------------------------\r\n\r\n    var hasWorkUserRecord = false;\r\n    var workUser = \"\";\r\n    var workUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n\tworkUserGR.addQuery('user', current.getValue('user'));\r\n    workUserGR.query();\r\n    while (workUserGR.next()) {\r\n        hasWorkUserRecord = true;\r\n        workUser = workUserGR.getUniqueValue();\r\n    }\r\n\r\n    //------------------------------------------ If there are no Work User tied to the user, Create the work user.--------------------------------------------------------------------------------------\r\n\r\n    if (!hasWorkUserRecord) {\r\n        var createWorkUserGR = new GlideRecord(\"x_cadso_work_user\");\r\n        createWorkUserGR.initialize();\r\n        createWorkUserGR.setValue('user', current.getValue('user'));\r\n        workUser = createWorkUserGR.getUniqueValue();\r\n        createWorkUserGR.insert();\r\n    }\r\n\r\n    //------------------------------------------ If there is already a work user OR we just created one, create a Work User to Work Group m2m record --------------------------------------------------\r\n\r\n    var createWorkUsertoWorkGroupGR = new GlideRecord(\"x_cadso_work_user_group_m2m\");\r\n    createWorkUsertoWorkGroupGR.initialize();\r\n    createWorkUsertoWorkGroupGR.setValue('work_user', workUser);\r\n    createWorkUsertoWorkGroupGR.setValue('work_group', current.getValue('work_group'));\r\n    createWorkUsertoWorkGroupGR.setValue('inherit', true);\r\n    createWorkUsertoWorkGroupGR.setValue('granted_by', current.getValue('sys_id'));\r\n    createWorkUsertoWorkGroupGR.insert();\r\n\r\n})(current, previous);"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_4f00582887f9a110b656fe66cebb35cb",
    "display_value": "sys_script_4f00582887f9a110b656fe66cebb35cb"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "add WorkUser-WorkGroup from WorkGroup",
    "display_value": "add WorkUser-WorkGroup from WorkGroup"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
