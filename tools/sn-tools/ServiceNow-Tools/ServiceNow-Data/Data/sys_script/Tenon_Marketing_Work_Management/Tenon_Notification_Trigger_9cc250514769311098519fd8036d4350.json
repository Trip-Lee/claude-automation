{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "9cc250514769311098519fd8036d4350",
    "extracted_at": "2025-09-19T21:48:42.155Z",
    "display_value": "Tenon Notification Trigger",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "",
    "display_value": ""
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2023-11-23 01:44:17",
    "display_value": "2023-11-22 05:44:17 PM"
  },
  "when": {
    "value": "after",
    "display_value": "after"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2023-09-26 20:26:32",
    "display_value": "2023-09-26 01:26:32 PM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "Tenon Notification Trigger",
    "display_value": "Tenon Notification Trigger"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "order": {
    "value": "99999",
    "display_value": "99,999"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "22",
    "display_value": "22"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "task",
    "display_value": "task"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/) {\n\tvar tableName = current.getValue('sys_class_name');\n\tvar taskTableGr = new GlideRecord(tableName);\n\tif (!taskTableGr.get(current.getUniqueValue())) return;\n\tvar _table = tableName.replace('x_cadso_work_', '');\n\tif (_table.indexOf('project') > -1) {\n\t\tvar sendNotifications = taskTableGr.getValue('send_notifications');\n\t\tsendNotifications = sendNotifications === true || sendNotifications === 'true' || sendNotifications === 1 || sendNotifications === '1';\n\t\tif (!sendNotifications) {\n\t\t\treturn;\n\t\t}\n\t} else if (_table.indexOf('task') > -1) {\n\t\tvar projectGr = taskTableGr.project.getRefRecord();\n\t\tif (projectGr.isValidRecord()) {\n\t\t\tvar sendNotifications2 = projectGr.getValue('send_notifications');\n\t\t\tsendNotifications2 = sendNotifications2 === true || sendNotifications2 === 'true' || sendNotifications2 === 1 || sendNotifications2 === '1';\n\t\t\tif (!sendNotifications2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (current.work_notes.changes() || current.comments.changes()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'comment');\n\t\t// gs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t} else {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t}\n\n\tif (tableName === 'x_cadso_work_task') {\n\t\tif (current.status.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t} else {\n\t\tif (current.state.changes() && tableName === 'x_cadso_work_project' && current.getValue('state') == '0') {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'request');\n\t\t} else if (current.state.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t}\n\n\tif (current.assigned_to.changes() && !current.assigned_to.nil()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'assigned');\n\t}\n\n})(current, previous);",
    "display_value": "(function executeRule(current, previous /*null when async*/) {\n\tvar tableName = current.getValue('sys_class_name');\n\tvar taskTableGr = new GlideRecord(tableName);\n\tif (!taskTableGr.get(current.getUniqueValue())) return;\n\tvar _table = tableName.replace('x_cadso_work_', '');\n\tif (_table.indexOf('project') > -1) {\n\t\tvar sendNotifications = taskTableGr.getValue('send_notifications');\n\t\tsendNotifications = sendNotifications === true || sendNotifications === 'true' || sendNotifications === 1 || sendNotifications === '1';\n\t\tif (!sendNotifications) {\n\t\t\treturn;\n\t\t}\n\t} else if (_table.indexOf('task') > -1) {\n\t\tvar projectGr = taskTableGr.project.getRefRecord();\n\t\tif (projectGr.isValidRecord()) {\n\t\t\tvar sendNotifications2 = projectGr.getValue('send_notifications');\n\t\t\tsendNotifications2 = sendNotifications2 === true || sendNotifications2 === 'true' || sendNotifications2 === 1 || sendNotifications2 === '1';\n\t\t\tif (!sendNotifications2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (current.work_notes.changes() || current.comments.changes()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'comment');\n\t\t// gs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t} else {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t}\n\n\tif (tableName === 'x_cadso_work_task') {\n\t\tif (current.status.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t} else {\n\t\tif (current.state.changes() && tableName === 'x_cadso_work_project' && current.getValue('state') == '0') {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'request');\n\t\t} else if (current.state.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t}\n\n\tif (current.assigned_to.changes() && !current.assigned_to.nil()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'assigned');\n\t}\n\n})(current, previous);",
    "formatted_script": {
      "line_count": 46,
      "char_count": 2001,
      "preview": "(function executeRule(current, previous /*null when async*/) {\n\tvar tableName = current.getValue('sys_class_name');\n\tvar taskTableGr = new GlideRecord(tableName);\n\tif (!taskTableGr.get(current.getUniq...",
      "full_script": "(function executeRule(current, previous /*null when async*/) {\n\tvar tableName = current.getValue('sys_class_name');\n\tvar taskTableGr = new GlideRecord(tableName);\n\tif (!taskTableGr.get(current.getUniqueValue())) return;\n\tvar _table = tableName.replace('x_cadso_work_', '');\n\tif (_table.indexOf('project') > -1) {\n\t\tvar sendNotifications = taskTableGr.getValue('send_notifications');\n\t\tsendNotifications = sendNotifications === true || sendNotifications === 'true' || sendNotifications === 1 || sendNotifications === '1';\n\t\tif (!sendNotifications) {\n\t\t\treturn;\n\t\t}\n\t} else if (_table.indexOf('task') > -1) {\n\t\tvar projectGr = taskTableGr.project.getRefRecord();\n\t\tif (projectGr.isValidRecord()) {\n\t\t\tvar sendNotifications2 = projectGr.getValue('send_notifications');\n\t\t\tsendNotifications2 = sendNotifications2 === true || sendNotifications2 === 'true' || sendNotifications2 === 1 || sendNotifications2 === '1';\n\t\t\tif (!sendNotifications2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (current.work_notes.changes() || current.comments.changes()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'comment');\n\t\t// gs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t} else {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'updated');\n\t}\n\n\tif (tableName === 'x_cadso_work_task') {\n\t\tif (current.status.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t} else {\n\t\tif (current.state.changes() && tableName === 'x_cadso_work_project' && current.getValue('state') == '0') {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'request');\n\t\t} else if (current.state.changes()) {\n\t\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'status');\n\t\t}\n\t}\n\n\tif (current.assigned_to.changes() && !current.assigned_to.nil()) {\n\t\tgs.eventQueue('x_cadso_work.notification_init', current, gs.getUserID(), 'assigned');\n\t}\n\n})(current, previous);"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "sys_class_name=x_cadso_work_task^ORsys_class_name=x_cadso_work_project^ORsys_class_name=x_cadso_work_campaign^ORsys_class_name=x_cadso_work_sprint^EQ",
    "display_value": "sys_class_name=x_cadso_work_task^ORsys_class_name=x_cadso_work_project^ORsys_class_name=x_cadso_work_campaign^ORsys_class_name=x_cadso_work_sprint^EQ"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_9cc250514769311098519fd8036d4350",
    "display_value": "sys_script_9cc250514769311098519fd8036d4350"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "Tenon Notification Trigger",
    "display_value": "Tenon Notification Trigger"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
