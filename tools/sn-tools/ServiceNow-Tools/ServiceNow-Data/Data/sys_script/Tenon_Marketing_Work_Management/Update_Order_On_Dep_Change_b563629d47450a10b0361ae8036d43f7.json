{
  "_metadata": {
    "table": "sys_script",
    "sys_id": "b563629d47450a10b0361ae8036d43f7",
    "extracted_at": "2025-09-19T21:48:41.920Z",
    "display_value": "Update Order On Dep Change",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "client_callable": {
    "value": "false",
    "display_value": "false"
  },
  "template": {
    "value": "",
    "display_value": ""
  },
  "access": {
    "value": "package_private",
    "display_value": "This application scope only"
  },
  "action_insert": {
    "value": "true",
    "display_value": "true"
  },
  "action_update": {
    "value": "true",
    "display_value": "true"
  },
  "advanced": {
    "value": "true",
    "display_value": "true"
  },
  "action_delete": {
    "value": "false",
    "display_value": "false"
  },
  "change_fields": {
    "value": "false",
    "display_value": "false"
  },
  "description": {
    "value": "Add an order to items not from a template.",
    "display_value": "Add an order to items not from a template."
  },
  "action_query": {
    "value": "false",
    "display_value": "false"
  },
  "sys_updated_on": {
    "value": "2024-04-08 04:53:08",
    "display_value": "2024-04-07 09:53:08 PM"
  },
  "when": {
    "value": "after",
    "display_value": "after"
  },
  "sys_class_name": {
    "value": "sys_script",
    "display_value": "Business Rule"
  },
  "is_rest": {
    "value": "false",
    "display_value": "false"
  },
  "rest_method_text": {
    "value": "",
    "display_value": ""
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "rest_service_text": {
    "value": "",
    "display_value": ""
  },
  "sys_created_on": {
    "value": "2024-03-19 06:39:00",
    "display_value": "2024-03-18 11:39:00 PM"
  },
  "sys_domain": {
    "value": "global",
    "display_value": "global"
  },
  "sys_name": {
    "value": "Update Order On Dep Change",
    "display_value": "Update Order On Dep Change"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "order": {
    "value": "777",
    "display_value": "777"
  },
  "rest_method": {
    "value": "",
    "display_value": ""
  },
  "rest_service": {
    "value": "",
    "display_value": ""
  },
  "add_message": {
    "value": "false",
    "display_value": "false"
  },
  "sys_mod_count": {
    "value": "9",
    "display_value": "9"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "sys_overrides": {
    "value": "",
    "display_value": ""
  },
  "collection": {
    "value": "x_cadso_work_task",
    "display_value": "x_cadso_work_task"
  },
  "message": {
    "value": "",
    "display_value": null
  },
  "priority": {
    "value": "100",
    "display_value": "100"
  },
  "sys_domain_path": {
    "value": "/",
    "display_value": "/"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "script": {
    "value": "(function executeRule(current, previous /*null when async*/) {\n\tlet dateFormat = gs.getProperty('glide.sys.date_format');\n\tlet timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\n\tvar format = (dateFormat && timeFormat) ? dateFormat + ' ' + timeFormat : \"yyyy-MM-dd HH:mm:ss\";\n\n\tconst records = {};\n\tlet taskGr = new GlideRecord('x_cadso_work_task');\n\ttaskGr.addQuery('project', current.getValue('project'));\n\ttaskGr.orderBy('expected_start');\n\ttaskGr.orderBy('expected_end');\n\ttaskGr.query();\n\tlet masterSchedule = '';\n\tlet projectStartDate = '';\n\tlet projectStartDateNumeric = '';\n\tlet type = '';\n\n\twhile (taskGr.next()) {\n\t\tlet duration = '';\n\t\tlet durationMilliseconds = '';\n\n\t\tif (taskGr.getValue('duration') && taskGr.getValue('duration') !== '1970-01-01 00:00:00') {\n\t\t\tduration = new GlideDuration();\n\t\t\tduration.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t} else {\n\t\t\tduration = new GlideDuration('00:01:00');\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(duration.getValue());\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t}\n\n\t\tconst start = new GlideDateTime('1970-01-01 00:00:00');\n\t\tconst startNumeric = start.getNumericValue();\n\n\t\tlet end = taskGr.getValue('expected_end') ? new GlideDateTime(taskGr.getValue('expected_end')) : '';\n\t\tlet endNumeric = end ? end.getNumericValue() : '';\n\t\tif (!taskGr.getValue('expected_end')) {\n\t\t\tend = taskGr.getValue('due_date') ? new GlideDateTime(taskGr.getValue('due_date')) : '';\n\t\t\tendNumeric = end ? end.getNumericValue() : '';\n\t\t}\n\n\t\tlet schedule = taskGr.getValue('schedule');\n\t\tconst inheritedSchedule = taskGr.getValue('inherited_schedule') === 'yes';\n\t\tif (!masterSchedule && (!schedule || inheritedSchedule)) {\n\t\t\tvar projectGr = taskGr.project.getRefRecord();\n\t\t\tif (projectGr.isValidRecord()) {\n\t\t\t\tmasterSchedule = projectGr.getValue('schedule');\n\t\t\t}\n\t\t}\n\n\t\tschedule = masterSchedule || schedule;\n\n\t\tif (!projectStartDate || !projectStartDateNumeric || !type) {\n\t\t\tvar projectGr2 = taskGr.project.getRefRecord();\n\t\t\tif (projectGr2.isValidRecord()) {\n\t\t\t\tprojectStartDate = taskGr.getValue('expected_start') ? new GlideDateTime(taskGr.getValue('expected_start')) : '';\n\t\t\t\tprojectStartDateNumeric = projectStartDate ? projectStartDate.getNumericValue() : '';\n\t\t\t\ttype = taskGr.getValue('calculate_dates');\n\t\t\t}\n\t\t}\n\n\t\trecords[taskGr.getUniqueValue()] = {\n\t\t\tstart,\n\t\t\tstartNumeric,\n\t\t\tend: '',\n\t\t\tendNumeric: 0,\n\t\t\tduration,\n\t\t\tdurationMilliseconds,\n\t\t\tdependencies: taskGr.getValue('dependencies'),\n\t\t\tschedule,\n\t\t\tprojectStartDate,\n\t\t\tprojectStartDateNumeric,\n\t\t\tsysId: taskGr.getUniqueValue(),\n\t\t\ttype,\n\t\t\tname: taskGr.getDisplayValue()\n\t\t};\n\t}\n\n\tconst recordsArray = Object.keys(records);\n\t// No Dependencies\n\trecordsArray.filter((sysId) => !records[sysId].dependencies).forEach(function(sysId) {\n\t\trecords[sysId].start = records[sysId].projectStartDate;\n\t\trecords[sysId].startNumeric = records[sysId].projectStartDateNumeric;\n\n\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[sysId];\n\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: start, duration, schedule });\n\n\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\tstartDate = newStartDateGDT;\n\t\tif (startNumeric && startDate) {\n\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\t\t} else if (!startDate && startNumeric) {\n\t\t\tstartDate = start;\n\t\t}\n\n\t\trecords[sysId].start = startDate;\n\t\trecords[sysId].startNumeric = startDate.getNumericValue();\n\n\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\tendDate = newEndDateGDT;\n\t\tif (endNumeric && endDate) {\n\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\t\t} else if (!endDate && endNumeric) {\n\t\t\tendDate = end;\n\t\t}\n\n\t\trecords[sysId].end = endDate;\n\t\trecords[sysId].endNumeric = endDate.getNumericValue();\n\n\t\tconst children = recordsArray.filter(function(depSysId) { return (records[depSysId] && !!records[depSysId].dependencies && records[depSysId].dependencies.indexOf(sysId) > -1); });\n\n\t\tupdateStartDates(records[sysId], children, records);\n\t});\n\n\tconst sortedValues = recordsArray.map((sysId) => records[sysId]).sort(function(a, b) {\n\t\tif ( a.startNumeric < b.startNumeric ){\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.startNumeric > b.startNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\tif ( a.endNumeric < b.endNumeric) {\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.endNumeric > b.endNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\tsortedValues.forEach((record, index) => {\n\t\tlet taskGr2 = new GlideRecord('x_cadso_work_task');\n\t\tif (taskGr2.get(record.sysId)) {\n\t\t\ttaskGr2.setValue('order', index);\n\t\t\ttaskGr2.setWorkflow(false);\n\t\t\ttaskGr2.update();\n\t\t}\n\t});\n\n\tfunction updateStartDates(parent, children, records) {\n\t\tchildren.forEach(function(depSysId) {\n\t\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[depSysId];\n\n\n\t\t\tlet taskStartDate = start;\n\t\t\tconst parentEndDateGDT = parent.end;\n\t\t\tif (startNumeric && parent.endNumeric) {\n\t\t\t\tif (parentEndDateGDT.compareTo(start) === 1) {\n\t\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t\t}\n\t\t\t} else if (!startNumeric && parent.endNumeric) {\n\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t}\n\n\t\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: taskStartDate, duration, schedule });\n\n\t\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\t\tstartDate = newStartDateGDT;\n\t\t\tif (startNumeric && startDate) {\n\t\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\t\tstartDate = start;\n\t\t\t\t}\n\t\t\t} else if (!startDate && startNumeric) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\n\t\t\trecords[depSysId].start = startDate;\n\t\t\trecords[depSysId].startNumeric = startDate.getNumericValue();\n\n\t\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\t\tendDate = newEndDateGDT;\n\t\t\tif (endNumeric && endDate) {\n\t\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\t\tendDate = end;\n\t\t\t\t}\n\t\t\t} else if (!endDate && endNumeric) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\n\t\t\trecords[depSysId].end = endDate;\n\t\t\trecords[depSysId].endNumeric = endDate.getNumericValue();\n\n\n\t\t\tconst recordsArray = Object.keys(records);\n\t\t\tconst children = recordsArray.filter(function(childrenDepSysId) { return (records[childrenDepSysId] && !!records[childrenDepSysId].dependencies && records[childrenDepSysId].dependencies.indexOf(depSysId) > -1); });\n\n\t\t\tupdateStartDates(records[depSysId], children, records);\n\t\t});\n\n\t}\n\n\tfunction getDates({ type, taskstartdate, duration, schedule }) {\n\t\tlet endDate = '';\n\t\tlet dur = '';\n\t\tlet startDate = '';\n\n\t\tif (type == 'start' || type == 'Start Date') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleApi = new x_cadso_work.Schedule({});\n\t\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\n\t\t\tendDate = answer.date.getValue();\n\t\t\tdur = answer.duration;\n\t\t\tstartDate = taskstartdate.getValue();\n\t\t} else if (type == 'startSchedule' || type == 'Start Date (Dates Within Schedule)') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleSysId = schedule.sys_id + '';\n\t\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\n\t\t\tconst preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format: format });\n\t\t\tconst dates = scheduleApi2.generateDates({\n\t\t\t\tduration: duration,\n\t\t\t\tstart: taskstartdate.getDisplayValueInternal(),\n\t\t\t\tend: preAnswer.date.getDisplayValueInternal(),\n\t\t\t\tstartDirection: \"forwards\",\n\t\t\t\tendDirection: \"forwards\",\n\t\t\t\tmove: \"endDate\",\n\t\t\t\tmoveDirection: \"forwards\",\n\t\t\t\tformat: format\n\t\t\t});\n\t\t\tstartDate = dates.startDate.getValue();\n\t\t\tendDate = dates.endDate.getValue();\n\t\t\tdur = preAnswer.duration;\n\t\t}\n\n\t\treturn { startDate, endDate, dur };\n\t}\n\n})(current, previous);",
    "display_value": "(function executeRule(current, previous /*null when async*/) {\n\tlet dateFormat = gs.getProperty('glide.sys.date_format');\n\tlet timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\n\tvar format = (dateFormat && timeFormat) ? dateFormat + ' ' + timeFormat : \"yyyy-MM-dd HH:mm:ss\";\n\n\tconst records = {};\n\tlet taskGr = new GlideRecord('x_cadso_work_task');\n\ttaskGr.addQuery('project', current.getValue('project'));\n\ttaskGr.orderBy('expected_start');\n\ttaskGr.orderBy('expected_end');\n\ttaskGr.query();\n\tlet masterSchedule = '';\n\tlet projectStartDate = '';\n\tlet projectStartDateNumeric = '';\n\tlet type = '';\n\n\twhile (taskGr.next()) {\n\t\tlet duration = '';\n\t\tlet durationMilliseconds = '';\n\n\t\tif (taskGr.getValue('duration') && taskGr.getValue('duration') !== '1970-01-01 00:00:00') {\n\t\t\tduration = new GlideDuration();\n\t\t\tduration.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t} else {\n\t\t\tduration = new GlideDuration('00:01:00');\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(duration.getValue());\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t}\n\n\t\tconst start = new GlideDateTime('1970-01-01 00:00:00');\n\t\tconst startNumeric = start.getNumericValue();\n\n\t\tlet end = taskGr.getValue('expected_end') ? new GlideDateTime(taskGr.getValue('expected_end')) : '';\n\t\tlet endNumeric = end ? end.getNumericValue() : '';\n\t\tif (!taskGr.getValue('expected_end')) {\n\t\t\tend = taskGr.getValue('due_date') ? new GlideDateTime(taskGr.getValue('due_date')) : '';\n\t\t\tendNumeric = end ? end.getNumericValue() : '';\n\t\t}\n\n\t\tlet schedule = taskGr.getValue('schedule');\n\t\tconst inheritedSchedule = taskGr.getValue('inherited_schedule') === 'yes';\n\t\tif (!masterSchedule && (!schedule || inheritedSchedule)) {\n\t\t\tvar projectGr = taskGr.project.getRefRecord();\n\t\t\tif (projectGr.isValidRecord()) {\n\t\t\t\tmasterSchedule = projectGr.getValue('schedule');\n\t\t\t}\n\t\t}\n\n\t\tschedule = masterSchedule || schedule;\n\n\t\tif (!projectStartDate || !projectStartDateNumeric || !type) {\n\t\t\tvar projectGr2 = taskGr.project.getRefRecord();\n\t\t\tif (projectGr2.isValidRecord()) {\n\t\t\t\tprojectStartDate = taskGr.getValue('expected_start') ? new GlideDateTime(taskGr.getValue('expected_start')) : '';\n\t\t\t\tprojectStartDateNumeric = projectStartDate ? projectStartDate.getNumericValue() : '';\n\t\t\t\ttype = taskGr.getValue('calculate_dates');\n\t\t\t}\n\t\t}\n\n\t\trecords[taskGr.getUniqueValue()] = {\n\t\t\tstart,\n\t\t\tstartNumeric,\n\t\t\tend: '',\n\t\t\tendNumeric: 0,\n\t\t\tduration,\n\t\t\tdurationMilliseconds,\n\t\t\tdependencies: taskGr.getValue('dependencies'),\n\t\t\tschedule,\n\t\t\tprojectStartDate,\n\t\t\tprojectStartDateNumeric,\n\t\t\tsysId: taskGr.getUniqueValue(),\n\t\t\ttype,\n\t\t\tname: taskGr.getDisplayValue()\n\t\t};\n\t}\n\n\tconst recordsArray = Object.keys(records);\n\t// No Dependencies\n\trecordsArray.filter((sysId) => !records[sysId].dependencies).forEach(function(sysId) {\n\t\trecords[sysId].start = records[sysId].projectStartDate;\n\t\trecords[sysId].startNumeric = records[sysId].projectStartDateNumeric;\n\n\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[sysId];\n\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: start, duration, schedule });\n\n\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\tstartDate = newStartDateGDT;\n\t\tif (startNumeric && startDate) {\n\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\t\t} else if (!startDate && startNumeric) {\n\t\t\tstartDate = start;\n\t\t}\n\n\t\trecords[sysId].start = startDate;\n\t\trecords[sysId].startNumeric = startDate.getNumericValue();\n\n\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\tendDate = newEndDateGDT;\n\t\tif (endNumeric && endDate) {\n\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\t\t} else if (!endDate && endNumeric) {\n\t\t\tendDate = end;\n\t\t}\n\n\t\trecords[sysId].end = endDate;\n\t\trecords[sysId].endNumeric = endDate.getNumericValue();\n\n\t\tconst children = recordsArray.filter(function(depSysId) { return (records[depSysId] && !!records[depSysId].dependencies && records[depSysId].dependencies.indexOf(sysId) > -1); });\n\n\t\tupdateStartDates(records[sysId], children, records);\n\t});\n\n\tconst sortedValues = recordsArray.map((sysId) => records[sysId]).sort(function(a, b) {\n\t\tif ( a.startNumeric < b.startNumeric ){\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.startNumeric > b.startNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\tif ( a.endNumeric < b.endNumeric) {\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.endNumeric > b.endNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\tsortedValues.forEach((record, index) => {\n\t\tlet taskGr2 = new GlideRecord('x_cadso_work_task');\n\t\tif (taskGr2.get(record.sysId)) {\n\t\t\ttaskGr2.setValue('order', index);\n\t\t\ttaskGr2.setWorkflow(false);\n\t\t\ttaskGr2.update();\n\t\t}\n\t});\n\n\tfunction updateStartDates(parent, children, records) {\n\t\tchildren.forEach(function(depSysId) {\n\t\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[depSysId];\n\n\n\t\t\tlet taskStartDate = start;\n\t\t\tconst parentEndDateGDT = parent.end;\n\t\t\tif (startNumeric && parent.endNumeric) {\n\t\t\t\tif (parentEndDateGDT.compareTo(start) === 1) {\n\t\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t\t}\n\t\t\t} else if (!startNumeric && parent.endNumeric) {\n\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t}\n\n\t\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: taskStartDate, duration, schedule });\n\n\t\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\t\tstartDate = newStartDateGDT;\n\t\t\tif (startNumeric && startDate) {\n\t\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\t\tstartDate = start;\n\t\t\t\t}\n\t\t\t} else if (!startDate && startNumeric) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\n\t\t\trecords[depSysId].start = startDate;\n\t\t\trecords[depSysId].startNumeric = startDate.getNumericValue();\n\n\t\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\t\tendDate = newEndDateGDT;\n\t\t\tif (endNumeric && endDate) {\n\t\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\t\tendDate = end;\n\t\t\t\t}\n\t\t\t} else if (!endDate && endNumeric) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\n\t\t\trecords[depSysId].end = endDate;\n\t\t\trecords[depSysId].endNumeric = endDate.getNumericValue();\n\n\n\t\t\tconst recordsArray = Object.keys(records);\n\t\t\tconst children = recordsArray.filter(function(childrenDepSysId) { return (records[childrenDepSysId] && !!records[childrenDepSysId].dependencies && records[childrenDepSysId].dependencies.indexOf(depSysId) > -1); });\n\n\t\t\tupdateStartDates(records[depSysId], children, records);\n\t\t});\n\n\t}\n\n\tfunction getDates({ type, taskstartdate, duration, schedule }) {\n\t\tlet endDate = '';\n\t\tlet dur = '';\n\t\tlet startDate = '';\n\n\t\tif (type == 'start' || type == 'Start Date') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleApi = new x_cadso_work.Schedule({});\n\t\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\n\t\t\tendDate = answer.date.getValue();\n\t\t\tdur = answer.duration;\n\t\t\tstartDate = taskstartdate.getValue();\n\t\t} else if (type == 'startSchedule' || type == 'Start Date (Dates Within Schedule)') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleSysId = schedule.sys_id + '';\n\t\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\n\t\t\tconst preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format: format });\n\t\t\tconst dates = scheduleApi2.generateDates({\n\t\t\t\tduration: duration,\n\t\t\t\tstart: taskstartdate.getDisplayValueInternal(),\n\t\t\t\tend: preAnswer.date.getDisplayValueInternal(),\n\t\t\t\tstartDirection: \"forwards\",\n\t\t\t\tendDirection: \"forwards\",\n\t\t\t\tmove: \"endDate\",\n\t\t\t\tmoveDirection: \"forwards\",\n\t\t\t\tformat: format\n\t\t\t});\n\t\t\tstartDate = dates.startDate.getValue();\n\t\t\tendDate = dates.endDate.getValue();\n\t\t\tdur = preAnswer.duration;\n\t\t}\n\n\t\treturn { startDate, endDate, dur };\n\t}\n\n})(current, previous);",
    "formatted_script": {
      "line_count": 233,
      "char_count": 7956,
      "preview": "(function executeRule(current, previous /*null when async*/) {\n\tlet dateFormat = gs.getProperty('glide.sys.date_format');\n\tlet timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a',...",
      "full_script": "(function executeRule(current, previous /*null when async*/) {\n\tlet dateFormat = gs.getProperty('glide.sys.date_format');\n\tlet timeFormat = (gs.getProperty('glide.sys.time_format') + '').replace(' a', '');\n\tvar format = (dateFormat && timeFormat) ? dateFormat + ' ' + timeFormat : \"yyyy-MM-dd HH:mm:ss\";\n\n\tconst records = {};\n\tlet taskGr = new GlideRecord('x_cadso_work_task');\n\ttaskGr.addQuery('project', current.getValue('project'));\n\ttaskGr.orderBy('expected_start');\n\ttaskGr.orderBy('expected_end');\n\ttaskGr.query();\n\tlet masterSchedule = '';\n\tlet projectStartDate = '';\n\tlet projectStartDateNumeric = '';\n\tlet type = '';\n\n\twhile (taskGr.next()) {\n\t\tlet duration = '';\n\t\tlet durationMilliseconds = '';\n\n\t\tif (taskGr.getValue('duration') && taskGr.getValue('duration') !== '1970-01-01 00:00:00') {\n\t\t\tduration = new GlideDuration();\n\t\t\tduration.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(taskGr.getValue('duration'));\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t} else {\n\t\t\tduration = new GlideDuration('00:01:00');\n\t\t\tdurationMilliseconds = new GlideDateTime();\n\t\t\tdurationMilliseconds.setValue(duration.getValue());\n\t\t\tdurationMilliseconds = durationMilliseconds.getNumericValue();\n\t\t}\n\n\t\tconst start = new GlideDateTime('1970-01-01 00:00:00');\n\t\tconst startNumeric = start.getNumericValue();\n\n\t\tlet end = taskGr.getValue('expected_end') ? new GlideDateTime(taskGr.getValue('expected_end')) : '';\n\t\tlet endNumeric = end ? end.getNumericValue() : '';\n\t\tif (!taskGr.getValue('expected_end')) {\n\t\t\tend = taskGr.getValue('due_date') ? new GlideDateTime(taskGr.getValue('due_date')) : '';\n\t\t\tendNumeric = end ? end.getNumericValue() : '';\n\t\t}\n\n\t\tlet schedule = taskGr.getValue('schedule');\n\t\tconst inheritedSchedule = taskGr.getValue('inherited_schedule') === 'yes';\n\t\tif (!masterSchedule && (!schedule || inheritedSchedule)) {\n\t\t\tvar projectGr = taskGr.project.getRefRecord();\n\t\t\tif (projectGr.isValidRecord()) {\n\t\t\t\tmasterSchedule = projectGr.getValue('schedule');\n\t\t\t}\n\t\t}\n\n\t\tschedule = masterSchedule || schedule;\n\n\t\tif (!projectStartDate || !projectStartDateNumeric || !type) {\n\t\t\tvar projectGr2 = taskGr.project.getRefRecord();\n\t\t\tif (projectGr2.isValidRecord()) {\n\t\t\t\tprojectStartDate = taskGr.getValue('expected_start') ? new GlideDateTime(taskGr.getValue('expected_start')) : '';\n\t\t\t\tprojectStartDateNumeric = projectStartDate ? projectStartDate.getNumericValue() : '';\n\t\t\t\ttype = taskGr.getValue('calculate_dates');\n\t\t\t}\n\t\t}\n\n\t\trecords[taskGr.getUniqueValue()] = {\n\t\t\tstart,\n\t\t\tstartNumeric,\n\t\t\tend: '',\n\t\t\tendNumeric: 0,\n\t\t\tduration,\n\t\t\tdurationMilliseconds,\n\t\t\tdependencies: taskGr.getValue('dependencies'),\n\t\t\tschedule,\n\t\t\tprojectStartDate,\n\t\t\tprojectStartDateNumeric,\n\t\t\tsysId: taskGr.getUniqueValue(),\n\t\t\ttype,\n\t\t\tname: taskGr.getDisplayValue()\n\t\t};\n\t}\n\n\tconst recordsArray = Object.keys(records);\n\t// No Dependencies\n\trecordsArray.filter((sysId) => !records[sysId].dependencies).forEach(function(sysId) {\n\t\trecords[sysId].start = records[sysId].projectStartDate;\n\t\trecords[sysId].startNumeric = records[sysId].projectStartDateNumeric;\n\n\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[sysId];\n\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: start, duration, schedule });\n\n\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\tstartDate = newStartDateGDT;\n\t\tif (startNumeric && startDate) {\n\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\t\t} else if (!startDate && startNumeric) {\n\t\t\tstartDate = start;\n\t\t}\n\n\t\trecords[sysId].start = startDate;\n\t\trecords[sysId].startNumeric = startDate.getNumericValue();\n\n\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\tendDate = newEndDateGDT;\n\t\tif (endNumeric && endDate) {\n\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\t\t} else if (!endDate && endNumeric) {\n\t\t\tendDate = end;\n\t\t}\n\n\t\trecords[sysId].end = endDate;\n\t\trecords[sysId].endNumeric = endDate.getNumericValue();\n\n\t\tconst children = recordsArray.filter(function(depSysId) { return (records[depSysId] && !!records[depSysId].dependencies && records[depSysId].dependencies.indexOf(sysId) > -1); });\n\n\t\tupdateStartDates(records[sysId], children, records);\n\t});\n\n\tconst sortedValues = recordsArray.map((sysId) => records[sysId]).sort(function(a, b) {\n\t\tif ( a.startNumeric < b.startNumeric ){\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.startNumeric > b.startNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\tif ( a.endNumeric < b.endNumeric) {\n\t\t\treturn -1;\n\t\t}\n\t\tif ( a.endNumeric > b.endNumeric ){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\tsortedValues.forEach((record, index) => {\n\t\tlet taskGr2 = new GlideRecord('x_cadso_work_task');\n\t\tif (taskGr2.get(record.sysId)) {\n\t\t\ttaskGr2.setValue('order', index);\n\t\t\ttaskGr2.setWorkflow(false);\n\t\t\ttaskGr2.update();\n\t\t}\n\t});\n\n\tfunction updateStartDates(parent, children, records) {\n\t\tchildren.forEach(function(depSysId) {\n\t\t\tconst { type, durationMilliseconds: duration, schedule, start, startNumeric, end, endNumeric, name } = records[depSysId];\n\n\n\t\t\tlet taskStartDate = start;\n\t\t\tconst parentEndDateGDT = parent.end;\n\t\t\tif (startNumeric && parent.endNumeric) {\n\t\t\t\tif (parentEndDateGDT.compareTo(start) === 1) {\n\t\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t\t}\n\t\t\t} else if (!startNumeric && parent.endNumeric) {\n\t\t\t\ttaskStartDate = parentEndDateGDT;\n\t\t\t}\n\n\t\t\tlet { startDate, endDate } = getDates({ type, taskstartdate: taskStartDate, duration, schedule });\n\n\t\t\tconst newStartDateGDT = new GlideDateTime(startDate);\n\t\t\tstartDate = newStartDateGDT;\n\t\t\tif (startNumeric && startDate) {\n\t\t\t\tif (newStartDateGDT.compareTo(start) === -1) {\n\t\t\t\t\tstartDate = start;\n\t\t\t\t}\n\t\t\t} else if (!startDate && startNumeric) {\n\t\t\t\tstartDate = start;\n\t\t\t}\n\n\t\t\trecords[depSysId].start = startDate;\n\t\t\trecords[depSysId].startNumeric = startDate.getNumericValue();\n\n\t\t\tconst newEndDateGDT = new GlideDateTime(endDate);\n\t\t\tendDate = newEndDateGDT;\n\t\t\tif (endNumeric && endDate) {\n\t\t\t\tif (newEndDateGDT.compareTo(end) === -1) {\n\t\t\t\t\tendDate = end;\n\t\t\t\t}\n\t\t\t} else if (!endDate && endNumeric) {\n\t\t\t\tendDate = end;\n\t\t\t}\n\n\t\t\trecords[depSysId].end = endDate;\n\t\t\trecords[depSysId].endNumeric = endDate.getNumericValue();\n\n\n\t\t\tconst recordsArray = Object.keys(records);\n\t\t\tconst children = recordsArray.filter(function(childrenDepSysId) { return (records[childrenDepSysId] && !!records[childrenDepSysId].dependencies && records[childrenDepSysId].dependencies.indexOf(depSysId) > -1); });\n\n\t\t\tupdateStartDates(records[depSysId], children, records);\n\t\t});\n\n\t}\n\n\tfunction getDates({ type, taskstartdate, duration, schedule }) {\n\t\tlet endDate = '';\n\t\tlet dur = '';\n\t\tlet startDate = '';\n\n\t\tif (type == 'start' || type == 'Start Date') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleApi = new x_cadso_work.Schedule({});\n\t\t\tvar answer = scheduleApi.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format });\n\t\t\tendDate = answer.date.getValue();\n\t\t\tdur = answer.duration;\n\t\t\tstartDate = taskstartdate.getValue();\n\t\t} else if (type == 'startSchedule' || type == 'Start Date (Dates Within Schedule)') {\n\t\t\ttaskstartdate = new GlideDateTime(taskstartdate);\n\t\t\tconst scheduleSysId = schedule.sys_id + '';\n\t\t\tconst scheduleApi2 = new x_cadso_work.Schedule({ scheduleSysId });\n\t\t\tconst preAnswer = scheduleApi2.calculateDateFromDuration({ startDate: taskstartdate, duration: duration, format: format });\n\t\t\tconst dates = scheduleApi2.generateDates({\n\t\t\t\tduration: duration,\n\t\t\t\tstart: taskstartdate.getDisplayValueInternal(),\n\t\t\t\tend: preAnswer.date.getDisplayValueInternal(),\n\t\t\t\tstartDirection: \"forwards\",\n\t\t\t\tendDirection: \"forwards\",\n\t\t\t\tmove: \"endDate\",\n\t\t\t\tmoveDirection: \"forwards\",\n\t\t\t\tformat: format\n\t\t\t});\n\t\t\tstartDate = dates.startDate.getValue();\n\t\t\tendDate = dates.endDate.getValue();\n\t\t\tdur = preAnswer.duration;\n\t\t}\n\n\t\treturn { startDate, endDate, dur };\n\t}\n\n})(current, previous);"
    }
  },
  "abort_action": {
    "value": "false",
    "display_value": "false"
  },
  "execute_function": {
    "value": "false",
    "display_value": "false"
  },
  "filter_condition": {
    "value": "dependenciesVALCHANGES^projectISNOTEMPTY^project_template_stepISEMPTY^NQprojectISNOTEMPTY^project_template_stepISEMPTY^project.generated=no^ORproject.generated=completed^ORproject.generated=wrikeCompleted^orderISEMPTY^EQ",
    "display_value": "dependenciesVALCHANGES^projectISNOTEMPTY^project_template_stepISEMPTY^NQprojectISNOTEMPTY^project_template_stepISEMPTY^project.generated=no^ORproject.generated=completed^ORproject.generated=wrikeCompleted^orderISEMPTY^EQ"
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "condition": {
    "value": "",
    "display_value": ""
  },
  "sys_update_name": {
    "value": "sys_script_b563629d47450a10b0361ae8036d43f7",
    "display_value": "sys_script_b563629d47450a10b0361ae8036d43f7"
  },
  "rest_variables": {
    "value": "",
    "display_value": ""
  },
  "name": {
    "value": "Update Order On Dep Change",
    "display_value": "Update Order On Dep Change"
  },
  "role_conditions": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
