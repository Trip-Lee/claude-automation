{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "210fb1d833e516507b18bc534d5c7b3f",
    "extracted_at": "2025-09-19T21:48:33.074Z",
    "display_value": "Clone Journey Version",
    "application": "Tenon_Marketing_Journey_Builder",
    "scope": {
      "display_value": "Tenon Marketing Journey Builder",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/cd61acbbc3c85a1085b196c4e40131bd",
      "value": "cd61acbbc3c85a1085b196c4e40131bd"
    }
  },
  "short_description": {
    "value": "Clone a Journey Version",
    "display_value": "Clone a Journey Version"
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    try {\r\n        const {\r\n            description = '', name = '', getLatest = false\r\n        } = request.body.data;\r\n\t\tconst { journeySysID } = request.pathParams;\r\n        const apiUtil = new x_cadso_automate.APIUtils();\r\n\r\n        const parentJourneyGQ = apiUtil.get({\r\n            table: 'x_cadso_journey_flow',\r\n            sysID: request.pathParams.journeySysID\r\n        });\r\n\r\n        if (!parentJourneyGQ) {\r\n            return new sn_ws_err.BadRequestError('Could not find Journey');\r\n        }\r\n\r\n        const parentVersionGQ = getLatest ? apiUtil.queryFirstOrLast({\r\n            table: 'x_cadso_journey_version',\r\n            query: `journey=${journeySysID}^latest=true`,\r\n\t\t\torderBy: 'sys_updated_on',\r\n\t\t\torder: 'orderByDesc'\r\n        }) : apiUtil.get({\r\n            table: 'x_cadso_journey_version',\r\n            sysID: request.pathParams.versionSysID\r\n        });\r\n\r\n        if (!parentVersionGQ) {\r\n            return new sn_ws_err.BadRequestError('Could not find Journey Version');\r\n        }\r\n\r\n\t\tconst useInfoPassed = !!name;\r\n\r\n        parentJourneyGQ.name = name || `Copy of ${parentJourneyGQ.name}`;\r\n        parentJourneyGQ.description = useInfoPassed ? description : parentJourneyGQ.description;\r\n        parentJourneyGQ.cloned_from = parentJourneyGQ.sys_id;\r\n        parentJourneyGQ.active = false;\r\n        parentJourneyGQ.published = false;\r\n        parentJourneyGQ.state = '-10';\r\n        delete parentJourneyGQ.first_published_date;\r\n        delete parentJourneyGQ.sys_id;\r\n\r\n        const clonedJourneyGQ = apiUtil.insert({\r\n            table: 'x_cadso_journey_flow',\r\n            data: parentJourneyGQ\r\n        });\r\n\r\n        parentVersionGQ.active = false;\r\n        parentVersionGQ.published = false;\r\n        parentVersionGQ.version = 1;\r\n        parentVersionGQ.published_date = null;\r\n        parentVersionGQ.outdated_action = 'continue';\r\n        parentVersionGQ.journey = clonedJourneyGQ.sys_id;\r\n        parentVersionGQ.short_description = name || 'Copy of ' + parentVersionGQ.short_description;\r\n        parentVersionGQ.description = description || parentVersionGQ.description;\r\n        parentVersionGQ.state = '-10';\r\n\t\tparentVersionGQ.trigger = null;\r\n\r\n        const clonedVersionGQ = apiUtil.insert({\r\n            table: 'x_cadso_journey_version',\r\n            data: parentVersionGQ\r\n        });\r\n\r\n        const clonedParentsKey = {};\r\n        const clonedSteps = [];\r\n        const missedParentsConvert = {};\r\n        let fields = apiUtil._getTableSchema('x_cadso_journey_version_step');\r\n        let parentStepGQ = new global.GlideQuery('x_cadso_journey_version_step')\r\n            .where('version', parentVersionGQ.sys_id)\r\n            .orderBy('order')\r\n            .select(fields)\r\n            .forEach(step => {\r\n                step.version = clonedVersionGQ.sys_id;\r\n                step.journey = clonedJourneyGQ.sys_id;\r\n\r\n                if (step.parents) {\r\n                    let parents = step.parents.split();\r\n                    for (var x = 0; x < parents.length; x++) {\r\n                        if (clonedParentsKey[parents[x]]) {\r\n                            parents[x] = clonedParentsKey[parents[x]];\r\n                        } else {\r\n                            if (!missedParentsConvert[step.sys_id]) {\r\n                                missedParentsConvert[step.sys_id] = {};\r\n                            }\r\n                            missedParentsConvert[step.sys_id][parents[x]] = x;\r\n                        }\r\n                    }\r\n                    step.parents = parents;\r\n                }\r\n\r\n                let clonedStepGQ = apiUtil.insert({\r\n                    table: 'x_cadso_journey_version_step',\r\n                    data: step\r\n                });\r\n\r\n                clonedSteps.push(clonedStepGQ);\r\n                clonedParentsKey[step.sys_id] = clonedStepGQ.sys_id;\r\n                if (missedParentsConvert[step.sys_id]) {\r\n                    missedParentsConvert[step.sys_id].newSysId = clonedStepGQ.sys_id;\r\n                }\r\n            });\r\n\r\n        return {\r\n            journey: clonedJourneyGQ,\r\n            version: clonedVersionGQ,\r\n            versionSteps: clonedSteps\r\n        };\r\n\r\n    } catch (error) {\r\n        return new sn_ws_err.BadRequestError(error.message);\r\n    }\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    try {\r\n        const {\r\n            description = '', name = '', getLatest = false\r\n        } = request.body.data;\r\n\t\tconst { journeySysID } = request.pathParams;\r\n        const apiUtil = new x_cadso_automate.APIUtils();\r\n\r\n        const parentJourneyGQ = apiUtil.get({\r\n            table: 'x_cadso_journey_flow',\r\n            sysID: request.pathParams.journeySysID\r\n        });\r\n\r\n        if (!parentJourneyGQ) {\r\n            return new sn_ws_err.BadRequestError('Could not find Journey');\r\n        }\r\n\r\n        const parentVersionGQ = getLatest ? apiUtil.queryFirstOrLast({\r\n            table: 'x_cadso_journey_version',\r\n            query: `journey=${journeySysID}^latest=true`,\r\n\t\t\torderBy: 'sys_updated_on',\r\n\t\t\torder: 'orderByDesc'\r\n        }) : apiUtil.get({\r\n            table: 'x_cadso_journey_version',\r\n            sysID: request.pathParams.versionSysID\r\n        });\r\n\r\n        if (!parentVersionGQ) {\r\n            return new sn_ws_err.BadRequestError('Could not find Journey Version');\r\n        }\r\n\r\n\t\tconst useInfoPassed = !!name;\r\n\r\n        parentJourneyGQ.name = name || `Copy of ${parentJourneyGQ.name}`;\r\n        parentJourneyGQ.description = useInfoPassed ? description : parentJourneyGQ.description;\r\n        parentJourneyGQ.cloned_from = parentJourneyGQ.sys_id;\r\n        parentJourneyGQ.active = false;\r\n        parentJourneyGQ.published = false;\r\n        parentJourneyGQ.state = '-10';\r\n        delete parentJourneyGQ.first_published_date;\r\n        delete parentJourneyGQ.sys_id;\r\n\r\n        const clonedJourneyGQ = apiUtil.insert({\r\n            table: 'x_cadso_journey_flow',\r\n            data: parentJourneyGQ\r\n        });\r\n\r\n        parentVersionGQ.active = false;\r\n        parentVersionGQ.published = false;\r\n        parentVersionGQ.version = 1;\r\n        parentVersionGQ.published_date = null;\r\n        parentVersionGQ.outdated_action = 'continue';\r\n        parentVersionGQ.journey = clonedJourneyGQ.sys_id;\r\n        parentVersionGQ.short_description = name || 'Copy of ' + parentVersionGQ.short_description;\r\n        parentVersionGQ.description = description || parentVersionGQ.description;\r\n        parentVersionGQ.state = '-10';\r\n\t\tparentVersionGQ.trigger = null;\r\n\r\n        const clonedVersionGQ = apiUtil.insert({\r\n            table: 'x_cadso_journey_version',\r\n            data: parentVersionGQ\r\n        });\r\n\r\n        const clonedParentsKey = {};\r\n        const clonedSteps = [];\r\n        const missedParentsConvert = {};\r\n        let fields = apiUtil._getTableSchema('x_cadso_journey_version_step');\r\n        let parentStepGQ = new global.GlideQuery('x_cadso_journey_version_step')\r\n            .where('version', parentVersionGQ.sys_id)\r\n            .orderBy('order')\r\n            .select(fields)\r\n            .forEach(step => {\r\n                step.version = clonedVersionGQ.sys_id;\r\n                step.journey = clonedJourneyGQ.sys_id;\r\n\r\n                if (step.parents) {\r\n                    let parents = step.parents.split();\r\n                    for (var x = 0; x < parents.length; x++) {\r\n                        if (clonedParentsKey[parents[x]]) {\r\n                            parents[x] = clonedParentsKey[parents[x]];\r\n                        } else {\r\n                            if (!missedParentsConvert[step.sys_id]) {\r\n                                missedParentsConvert[step.sys_id] = {};\r\n                            }\r\n                            missedParentsConvert[step.sys_id][parents[x]] = x;\r\n                        }\r\n                    }\r\n                    step.parents = parents;\r\n                }\r\n\r\n                let clonedStepGQ = apiUtil.insert({\r\n                    table: 'x_cadso_journey_version_step',\r\n                    data: step\r\n                });\r\n\r\n                clonedSteps.push(clonedStepGQ);\r\n                clonedParentsKey[step.sys_id] = clonedStepGQ.sys_id;\r\n                if (missedParentsConvert[step.sys_id]) {\r\n                    missedParentsConvert[step.sys_id].newSysId = clonedStepGQ.sys_id;\r\n                }\r\n            });\r\n\r\n        return {\r\n            journey: clonedJourneyGQ,\r\n            version: clonedVersionGQ,\r\n            versionSteps: clonedSteps\r\n        };\r\n\r\n    } catch (error) {\r\n        return new sn_ws_err.BadRequestError(error.message);\r\n    }\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-04-29 16:57:03",
    "display_value": "2025-04-29 09:57:03 AM"
  },
  "enforce_acl": {
    "value": "95371672c3582210d4ddf1db050131eb",
    "display_value": "Journey Builder REST"
  },
  "web_service_version": {
    "value": "235d87f387a4d654369f33373cbb3539",
    "display_value": "v1"
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "operation_uri": {
    "value": "/api/x_cadso_journey/v1/ui/journeys/{journeySysID}/versions/{versionSysID}/clones",
    "display_value": "/api/x_cadso_journey/v1/ui/journeys/{journeySysID}/versions/{versionSysID}/clones"
  },
  "sys_created_on": {
    "value": "2024-10-25 20:36:46",
    "display_value": "2024-10-25 01:36:46 PM"
  },
  "sys_name": {
    "value": "Clone Journey Version",
    "display_value": "Clone Journey Version"
  },
  "sys_scope": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_created_by": {
    "value": "rob.medved",
    "display_value": "rob.medved"
  },
  "web_service_definition": {
    "value": "d11dc3f387a4d654369f33373cbb3506",
    "display_value": "Tenon Journey Builder UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "false",
    "display_value": "false"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "34",
    "display_value": "34"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "Journey Versions",
    "display_value": "Journey Versions"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "cd61acbbc3c85a1085b196c4e40131bd",
    "display_value": "Tenon Marketing Journey Builder"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_210fb1d833e516507b18bc534d5c7b3f",
    "display_value": "sys_ws_operation_210fb1d833e516507b18bc534d5c7b3f"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Clone Journey Version",
    "display_value": "Clone Journey Version"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/journeys/{journeySysID}/versions/{versionSysID}/clones",
    "display_value": "/journeys/{journeySysID}/versions/{versionSysID}/clones"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "/api/x_cadso_journey/ui/journeys/{journeySysID}/versions/{versionSysID}/clones",
    "display_value": "/api/x_cadso_journey/ui/journeys/{journeySysID}/versions/{versionSysID}/clones"
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
