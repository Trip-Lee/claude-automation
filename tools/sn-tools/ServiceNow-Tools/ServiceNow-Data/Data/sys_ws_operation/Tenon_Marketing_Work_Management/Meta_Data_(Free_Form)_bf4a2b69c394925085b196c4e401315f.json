{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "bf4a2b69c394925085b196c4e401315f",
    "extracted_at": "2025-09-19T21:48:33.301Z",
    "display_value": "Meta Data (Free Form)",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '', table = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n\r\n    var newBody = {\r\n        sysId,\r\n        table,\r\n        fields,\r\n    };\r\n\r\n    if (!table || !sysId || !fields) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecord(table);\r\n    const canCreate = tableGr.canCreate();\r\n    const canWrite = tableGr.canWrite();\r\n    if (sysId === -1 || sysId === \"-1\") {\r\n        fields.map(function(field) {\r\n            field.disabled = !canCreate || !tableGr[field.element].canCreate();\r\n            return field;\r\n        });\r\n    } else if (tableGr.get(sysId)) {\r\n        fields.map(function(field) {\r\n            try {\r\n                field.disabled = !canWrite || !tableGr[field.element].canWrite();\r\n                field.value = tableGr.getValue(field.element);\r\n                field.displayValue = tableGr.getDisplayValue(field.element);\r\n                try {\r\n                    const elementObj = tableGr.getElement(field.element);\r\n                    const elementED = elementObj.getED();\r\n                    const internalType = elementED.getInternalType();\r\n                    const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n                    if (isBool) {\r\n                        field.value = field.value === 'true' || field.value === '1';\r\n                    }\r\n                } catch (e2) {\r\n                    field.error = 'Field is incorrect';\r\n                }\r\n            } catch (e) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else {\r\n        newBody.message = \"Not a valid sysId on this table.\";\r\n    }\r\n\r\n    newBody.fields = fields;\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '', table = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n\r\n    var newBody = {\r\n        sysId,\r\n        table,\r\n        fields,\r\n    };\r\n\r\n    if (!table || !sysId || !fields) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecord(table);\r\n    const canCreate = tableGr.canCreate();\r\n    const canWrite = tableGr.canWrite();\r\n    if (sysId === -1 || sysId === \"-1\") {\r\n        fields.map(function(field) {\r\n            field.disabled = !canCreate || !tableGr[field.element].canCreate();\r\n            return field;\r\n        });\r\n    } else if (tableGr.get(sysId)) {\r\n        fields.map(function(field) {\r\n            try {\r\n                field.disabled = !canWrite || !tableGr[field.element].canWrite();\r\n                field.value = tableGr.getValue(field.element);\r\n                field.displayValue = tableGr.getDisplayValue(field.element);\r\n                try {\r\n                    const elementObj = tableGr.getElement(field.element);\r\n                    const elementED = elementObj.getED();\r\n                    const internalType = elementED.getInternalType();\r\n                    const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n                    if (isBool) {\r\n                        field.value = field.value === 'true' || field.value === '1';\r\n                    }\r\n                } catch (e2) {\r\n                    field.error = 'Field is incorrect';\r\n                }\r\n            } catch (e) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else {\r\n        newBody.message = \"Not a valid sysId on this table.\";\r\n    }\r\n\r\n    newBody.fields = fields;\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2024-09-30 17:11:48",
    "display_value": "2024-09-30 10:11:48 AM"
  },
  "enforce_acl": {
    "value": "85a45d5247b1ed10fc4c1ae8036d439e",
    "display_value": "Tenon Work Baseline Access"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "operation_uri": {
    "value": "/api/x_cadso_work/ui/freeform/meta",
    "display_value": "/api/x_cadso_work/ui/freeform/meta"
  },
  "sys_created_on": {
    "value": "2024-08-28 19:49:08",
    "display_value": "2024-08-28 12:49:08 PM"
  },
  "sys_name": {
    "value": "Meta Data (Free Form)",
    "display_value": "Meta Data (Free Form)"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "3a4228b84728e950a1052a02e26d43b0",
    "display_value": "Tenon Work UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "true",
    "display_value": "true"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "11",
    "display_value": "11"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_bf4a2b69c394925085b196c4e401315f",
    "display_value": "sys_ws_operation_bf4a2b69c394925085b196c4e401315f"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Meta Data (Free Form)",
    "display_value": "Meta Data (Free Form)"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/freeform/meta",
    "display_value": "/freeform/meta"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
