{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "413e57a9c354925085b196c4e4013166",
    "extracted_at": "2025-09-19T21:48:33.312Z",
    "display_value": "Update (Free Form)",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '-1', table = '', formAction = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n    var newBody = {\r\n        valid: false,\r\n        sysId,\r\n        table,\r\n        fields,\r\n        success: false\r\n    };\r\n\r\n    if (!table || !fields || !fields.length) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecordSecure(table);\r\n    const newRecord = (!sysId || sysId === -1 || sysId === \"-1\");\r\n    if (!formAction) {\r\n        if (newRecord && tableGr.canCreate()) {\r\n            tableGr.initialize();\r\n            tableGr.newRecord();\r\n\r\n            fields.forEach(function({\r\n                element,\r\n                value,\r\n                type\r\n            }) {\r\n                tableGr.setValue(element, value);\r\n            });\r\n\r\n            newBody.sysId = tableGr.insert();\r\n            newBody.valid = !!newBody.sysId;\r\n            newBody.success = !!newBody.sysId;\r\n        } else if (!newRecord && tableGr.get(sysId) && tableGr.canWrite()) {\r\n            fields.forEach(function({\r\n                element,\r\n                value,\r\n                type,\r\n                internalType,\r\n            }) {\r\n                if (internalType && internalType === 'journal_input') {\r\n                    tableGr[element].setDisplayValue(value);\r\n                } else {\r\n                    tableGr.setValue(element, value);\r\n                }\r\n            });\r\n\r\n            newBody.sysId = tableGr.update();\r\n            newBody.valid = !!newBody.sysId;\r\n            newBody.success = !!newBody.sysId;\r\n        } else if (newRecord && !tableGr.canCreate()) {\r\n            newBody.message = \"Unable to create a record on this table due to permissions.\";\r\n        } else if (!newRecord && !tableGr.canWrite()) {\r\n            newBody.message = \"Unable to update a record on this table due to permissions.\";\r\n        } else {\r\n            newBody.message = \"Not a valid sysId on this table.\";\r\n        }\r\n    } else if (formAction) {\r\n        switch (formAction) {\r\n            case \"duplicate\":\r\n                if (!tableGr.get(sysId)) {\r\n                    newBody.message = \"Record not found\";\r\n                    return;\r\n                }\r\n\r\n                if (!tableGr.canCreate()) {\r\n                    newBody.message =\r\n                        \"Unable to create a record on this table due to permissions.\";\r\n                    return;\r\n                } else if (!tableGr.canWrite()) {\r\n                    newBody.message =\r\n                        \"Unable to update a record on this table due to permissions.\";\r\n                    return;\r\n                }\r\n\r\n                var newTableGr = new GlideRecordSecure(table);\r\n                newTableGr.initialize();\r\n\r\n                // Fields to skip during duplication\r\n                var skipFields = [\r\n                    'sys_id',\r\n                    'sys_created_on',\r\n                    'sys_updated_on',\r\n                    'sys_created_by',\r\n                    'sys_updated_by',\r\n                    'sys_mod_count',\r\n                    'sys_tags'\r\n                ];\r\n\r\n                // Explicitly copy fields from the original record\r\n                var fieldsToCopy = Object.keys(tableGr); // Dynamically get field names\r\n                fieldsToCopy.forEach(function(fieldName) {\r\n                    if (!skipFields.includes(fieldName)) {\r\n                        newTableGr.setValue(fieldName, tableGr.getValue(fieldName));\r\n                    }\r\n                });\r\n\r\n                // Overwrite fields with user-provided values\r\n                fields.forEach(function({\r\n                    element,\r\n                    value\r\n                }) {\r\n                    newTableGr.setValue(element, value);\r\n                });\r\n\r\n                // Insert the new record\r\n                newBody.sysId = newTableGr.insert();\r\n                newBody.valid = !!newBody.sysId;\r\n                newBody.success = !!newBody.sysId;\r\n\r\n                break;\r\n\r\n            default:\r\n                newBody.success = false;\r\n                newBody.valid = false;\r\n                newBody.message = \"Invalid formAction specified.\";\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '-1', table = '', formAction = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n    var newBody = {\r\n        valid: false,\r\n        sysId,\r\n        table,\r\n        fields,\r\n        success: false\r\n    };\r\n\r\n    if (!table || !fields || !fields.length) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecordSecure(table);\r\n    const newRecord = (!sysId || sysId === -1 || sysId === \"-1\");\r\n    if (!formAction) {\r\n        if (newRecord && tableGr.canCreate()) {\r\n            tableGr.initialize();\r\n            tableGr.newRecord();\r\n\r\n            fields.forEach(function({\r\n                element,\r\n                value,\r\n                type\r\n            }) {\r\n                tableGr.setValue(element, value);\r\n            });\r\n\r\n            newBody.sysId = tableGr.insert();\r\n            newBody.valid = !!newBody.sysId;\r\n            newBody.success = !!newBody.sysId;\r\n        } else if (!newRecord && tableGr.get(sysId) && tableGr.canWrite()) {\r\n            fields.forEach(function({\r\n                element,\r\n                value,\r\n                type,\r\n                internalType,\r\n            }) {\r\n                if (internalType && internalType === 'journal_input') {\r\n                    tableGr[element].setDisplayValue(value);\r\n                } else {\r\n                    tableGr.setValue(element, value);\r\n                }\r\n            });\r\n\r\n            newBody.sysId = tableGr.update();\r\n            newBody.valid = !!newBody.sysId;\r\n            newBody.success = !!newBody.sysId;\r\n        } else if (newRecord && !tableGr.canCreate()) {\r\n            newBody.message = \"Unable to create a record on this table due to permissions.\";\r\n        } else if (!newRecord && !tableGr.canWrite()) {\r\n            newBody.message = \"Unable to update a record on this table due to permissions.\";\r\n        } else {\r\n            newBody.message = \"Not a valid sysId on this table.\";\r\n        }\r\n    } else if (formAction) {\r\n        switch (formAction) {\r\n            case \"duplicate\":\r\n                if (!tableGr.get(sysId)) {\r\n                    newBody.message = \"Record not found\";\r\n                    return;\r\n                }\r\n\r\n                if (!tableGr.canCreate()) {\r\n                    newBody.message =\r\n                        \"Unable to create a record on this table due to permissions.\";\r\n                    return;\r\n                } else if (!tableGr.canWrite()) {\r\n                    newBody.message =\r\n                        \"Unable to update a record on this table due to permissions.\";\r\n                    return;\r\n                }\r\n\r\n                var newTableGr = new GlideRecordSecure(table);\r\n                newTableGr.initialize();\r\n\r\n                // Fields to skip during duplication\r\n                var skipFields = [\r\n                    'sys_id',\r\n                    'sys_created_on',\r\n                    'sys_updated_on',\r\n                    'sys_created_by',\r\n                    'sys_updated_by',\r\n                    'sys_mod_count',\r\n                    'sys_tags'\r\n                ];\r\n\r\n                // Explicitly copy fields from the original record\r\n                var fieldsToCopy = Object.keys(tableGr); // Dynamically get field names\r\n                fieldsToCopy.forEach(function(fieldName) {\r\n                    if (!skipFields.includes(fieldName)) {\r\n                        newTableGr.setValue(fieldName, tableGr.getValue(fieldName));\r\n                    }\r\n                });\r\n\r\n                // Overwrite fields with user-provided values\r\n                fields.forEach(function({\r\n                    element,\r\n                    value\r\n                }) {\r\n                    newTableGr.setValue(element, value);\r\n                });\r\n\r\n                // Insert the new record\r\n                newBody.sysId = newTableGr.insert();\r\n                newBody.valid = !!newBody.sysId;\r\n                newBody.success = !!newBody.sysId;\r\n\r\n                break;\r\n\r\n            default:\r\n                newBody.success = false;\r\n                newBody.valid = false;\r\n                newBody.message = \"Invalid formAction specified.\";\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-07-21 14:06:44",
    "display_value": "2025-07-21 07:06:44 AM"
  },
  "enforce_acl": {
    "value": "85a45d5247b1ed10fc4c1ae8036d439e",
    "display_value": "Tenon Work Baseline Access"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "desiree.morehouse",
    "display_value": "desiree.morehouse"
  },
  "operation_uri": {
    "value": "/api/x_cadso_work/ui/freeform/update",
    "display_value": "/api/x_cadso_work/ui/freeform/update"
  },
  "sys_created_on": {
    "value": "2024-08-28 19:17:10",
    "display_value": "2024-08-28 12:17:10 PM"
  },
  "sys_name": {
    "value": "Update (Free Form)",
    "display_value": "Update (Free Form)"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "3a4228b84728e950a1052a02e26d43b0",
    "display_value": "Tenon Work UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "true",
    "display_value": "true"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "14",
    "display_value": "14"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_413e57a9c354925085b196c4e4013166",
    "display_value": "sys_ws_operation_413e57a9c354925085b196c4e4013166"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Update (Free Form)",
    "display_value": "Update (Free Form)"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/freeform/update",
    "display_value": "/freeform/update"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
