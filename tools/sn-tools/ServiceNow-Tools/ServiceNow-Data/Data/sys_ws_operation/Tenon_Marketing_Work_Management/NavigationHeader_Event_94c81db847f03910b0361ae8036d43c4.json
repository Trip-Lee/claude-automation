{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "94c81db847f03910b0361ae8036d43c4",
    "extracted_at": "2025-09-19T21:48:35.246Z",
    "display_value": "NavigationHeader Event",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\t/**\r\n\t * Form API Handler - Simple Object Pattern\r\n\t * Handles various CRUD and business operations on ServiceNow records\r\n\t */\r\n\r\n\t// ==================== CONSTANTS ====================\r\n\tvar WORK_TABLES = [\r\n\t\t\"x_cadso_work_project\",\r\n\t\t\"x_cadso_work_task\",\r\n\t\t\"x_cadso_work_campaign\",\r\n\t\t\"x_cadso_work_sprint\",\r\n\t\t\"x_cadso_work_sprint_retro\",\r\n\t];\r\n\r\n\tvar STATE_VALUES = {\r\n\t\tARCHIVED: \"333\",\r\n\t\tON_HOLD: \"22\",\r\n\t};\r\n\tgs.info(\"dh nav header request.body {0}\", JSON.stringify(request.body));\r\n\tgs.info(\"dh table {0}\", table);\r\n\r\n\t// ==================== INPUT PROCESSING ====================\r\n\tvar data = request.body.data || {};\r\n\tvar sysId = data.sysId || \"\";\r\n\tvar table = data.table || \"\";\r\n\tvar isWatching = data.isWatching || \"\";\r\n\tvar type = data.type || \"\";\r\n\tvar value = data.value || \"\";\r\n\tvar oldValue = data.oldValue || \"\";\r\n\tvar action = data.action || \"\";\r\n\tvar options = data.options || {};\r\n\r\n\t\r\n\r\n\t// ==================== RESPONSE OBJECT ====================\r\n\tvar responseBody = {\r\n\t\taction: action,\r\n\t\tisWatching: isWatching,\r\n\t\ttype: type,\r\n\t\tsuccess: false,\r\n\t\toldValue: oldValue,\r\n\t\tvalue: value,\r\n\t\tmessage: \"\",\r\n\t\tverb: \"\",\r\n\t};\r\n\r\n\tvar shouldGetStatusDetails = false;\r\n\r\n\t// ==================== UTILITY FUNCTIONS ====================\r\n\tfunction getSecureRecord() {\r\n\t\tvar gr = new GlideRecordSecure(table);\r\n\r\n\t\tif (options.initialize) {\r\n\t\t\treturn gr;\r\n\t\t}\r\n\r\n\t\treturn gr.get(sysId) ? gr : null;\r\n\t}\r\n\r\n\tfunction addStatusDetails(gr) {\r\n\t\tif (!WORK_TABLES.includes(table)) return;\r\n\r\n\t\tvar isTaskTable = table === \"x_cadso_work_task\";\r\n\t\tvar stateField = isTaskTable ? \"status\" : \"state\";\r\n\r\n\t\tresponseBody.reloadColors = true;\r\n\t\tresponseBody.state = {\r\n\t\t\tdisplayValue: gr.getDisplayValue(stateField),\r\n\t\t\tvalue: gr.getValue(stateField),\r\n\t\t};\r\n\r\n\t\tvar colorApi = new GetColorsForFields();\r\n\t\tresponseBody.colors = colorApi.fetchV2({\r\n\t\t\ttable: table,\r\n\t\t\tfield: stateField,\r\n\t\t\tgetChoices: true,\r\n\t\t});\r\n\t}\r\n\r\n\tfunction getTableSchema(tableName) {\r\n\t\tvar schema = global.Schema.of(tableName, [\"*\"]);\r\n\t\tvar fields = Object.keys(schema[tableName]);\r\n\t\tfields = fields.filter(function (field) {\r\n\t\t\treturn !field.includes(\"sys_\") || field === \"sys_id\" || field === \"sys_class_name\";\r\n\t\t});\r\n\t\treturn fields.sort();\r\n\t}\r\n\r\n\tfunction setObjectKeysToTable(tableRecord, fields) {\r\n\t\tObject.keys(fields).forEach(function (field) {\r\n\t\t\tif (fields[field] !== undefined) {\r\n\t\t\t\ttableRecord.setValue(field, fields[field]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction handleStateChange(gr, newState, verb) {\r\n\t\tvar isTaskTable = table === \"x_cadso_work_task\";\r\n\r\n\t\tif (isTaskTable) {\r\n\t\t\tvar workStatusApi = new x_cadso_work.WorkStatus({\r\n\t\t\t\ttable: \"x_cadso_work_task\",\r\n\t\t\t\tstatus: parseInt(newState),\r\n\t\t\t});\r\n\t\t\tgr.setValue(\"state\", newState);\r\n\t\t\tgr.setValue(\"status\", workStatusApi.fetchStatus());\r\n\t\t} else {\r\n\t\t\tgr.setValue(\"state\", newState);\r\n\t\t}\r\n\r\n\t\tresponseBody.success = !!gr.update();\r\n\t\tresponseBody.verb = verb;\r\n\t\tshouldGetStatusDetails = true;\r\n\t}\r\n\r\n\t// ==================== OPERATION HANDLERS ====================\r\n\tvar operationHandlers = {\r\n\t\tcreate: function (gr) {\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Create New Entry\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tgr.initialize();\r\n\r\n\t\t\tsetObjectKeysToTable(gr, options.fields);\r\n\r\n\t\t\tconst newSysId = gr.insert();\r\n\r\n\t\t\tif (newSysId) {\r\n\t\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\t\tresponseBody.fields = options.fields;\r\n\t\t\t\tresponseBody.view = gr.getValue(\"view\") || \"\";\r\n\t\t\t\tresponseBody.success = true;\r\n\t\t\t\tresponseBody.verb = options.action || \"createNewEntry\";\r\n\t\t\t\tresponseBody.message = options.message || \"Successfully created new entry\";\r\n\t\t\t\tresponseBody.valid = !!newSysId;\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Failed to create new entry\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateTitle: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Update Title\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar displayField = gr.getDisplayName();\r\n\t\t\tif (!gr[displayField].canWrite()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Update Title\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar finalValue = value || oldValue;\r\n\t\t\tgr.setValue(displayField, finalValue);\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = responseBody.success ? \"Title Updated\" : \"Failed to Update Title\";\r\n\t\t},\r\n\r\n\t\tduplicateToAnotherTable: function (gr) {\r\n\t\t\tvar targetTable = options.targetTable;\r\n\t\t\tvar sourceFieldsToCopy = options.sourceFieldsToCopy;\r\n\t\t\tvar targetTableFields = options.targetTableFields;\r\n\r\n\t\t\tvar targetGr = new GlideRecordSecure(targetTable);\r\n\r\n\t\t\tif (!targetGr.canCreate()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to create on the table: \" + targetTable;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttargetGr.initialize();\r\n\t\t\ttargetGr.newRecord();\r\n\r\n\t\t\t// Copy fields from source to target\r\n\t\t\tvar copiedData = {};\r\n\t\t\tObject.keys(sourceFieldsToCopy).forEach(function (field) {\r\n\t\t\t\tcopiedData[sourceFieldsToCopy[field]] = gr.getValue(field);\r\n\t\t\t});\r\n\r\n\t\t\tsetObjectKeysToTable(targetGr, copiedData);\r\n\t\t\tsetObjectKeysToTable(targetGr, targetTableFields);\r\n\r\n\t\t\tvar newSysId = targetGr.insert();\r\n\t\t\tif (newSysId) {\r\n\t\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\t\tresponseBody.success = true;\r\n\t\t\t\tresponseBody.verb = \"duplicateToAnotherTable\";\r\n\t\t\t\tresponseBody.message = \"Successfully saved on table \" + targetTable;\r\n\t\t\t\tresponse.setStatus(201);\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Failed to save on table \" + targetTable;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdelete: function (gr) {\r\n\t\t\tif (!gr.canDelete()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Delete\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar displayValue = gr.getDisplayValue();\r\n\t\t\tresponseBody.success = !!gr.deleteRecord();\r\n\r\n\t\t\tif (responseBody.success) {\r\n\t\t\t\tresponseBody.verb = \"Deleted\";\r\n\t\t\t\tresponseBody.message = displayValue + \" Was Deleted Successfully\";\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = displayValue + \" Was Not Deleted\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfollow: function (gr) {\r\n\t\t\tif (!gr.canRead()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to read record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar userId = gs.getUserID();\r\n\t\t\tvar watchList = gr.getValue(\"watch_list\");\r\n\t\t\twatchList = watchList === null || watchList === \"null\" ? \"\" : watchList;\r\n\r\n\t\t\tvar watchers = watchList.split(\",\").filter(function (id) {\r\n\t\t\t\treturn id.length > 0;\r\n\t\t\t});\r\n\r\n\t\t\tvar userIndex = watchers.indexOf(userId);\r\n\t\t\tif (userIndex > -1) {\r\n\t\t\t\twatchers.splice(userIndex, 1);\r\n\t\t\t\tresponseBody.isWatching = false;\r\n\t\t\t\tresponseBody.verb = \"Unfollowed\";\r\n\t\t\t} else {\r\n\t\t\t\twatchers.push(userId);\r\n\t\t\t\tresponseBody.isWatching = true;\r\n\t\t\t\tresponseBody.verb = \"Following\";\r\n\t\t\t}\r\n\r\n\t\t\tgr.setValue(\"watch_list\", watchers.join(\",\"));\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\t\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.verb = \"Follow Error\";\r\n\t\t\t\tresponseBody.message = \"Failed to update watch list\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tarchive: function (gr) {\r\n\t\t\thandleStateChange(gr, STATE_VALUES.ARCHIVED, \"Archived\");\r\n\t\t},\r\n\r\n\t\trestore: function (gr) {\r\n\t\t\tvar previousState = {};\r\n\t\t\tvar archiveState = {};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tvar stateValue = gr.getValue(\"previous_state\");\r\n\t\t\t\tpreviousState = JSON.parse(stateValue || \"{}\");\r\n\t\t\t\tarchiveState = previousState.archive || {};\r\n\t\t\t} catch (error) {\r\n\t\t\t\tgs.warn(\"Failed to parse previous_state during restore: \" + error.message);\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Restore Error\";\r\n\t\t\t\tresponseBody.message = \"Cannot restore: invalid previous state data\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (table === \"x_cadso_work_task\") {\r\n\t\t\t\tgr.setValue(\"status\", archiveState.status);\r\n\t\t\t} else {\r\n\t\t\t\tgr.setValue(\"state\", archiveState.state);\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = \"Restored\";\r\n\t\t\tshouldGetStatusDetails = true;\r\n\t\t},\r\n\r\n\t\thold: function (gr) {\r\n\t\t\thandleStateChange(gr, STATE_VALUES.ON_HOLD, \"On Hold\");\r\n\t\t},\r\n\r\n\t\treactivate: function (gr) {\r\n\t\t\tvar previousState = {};\r\n\t\t\tvar holdState = {};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tvar stateValue = gr.getValue(\"previous_state\");\r\n\t\t\t\tpreviousState = JSON.parse(stateValue || \"{}\");\r\n\t\t\t\tholdState = previousState.onHold || {};\r\n\t\t\t} catch (error) {\r\n\t\t\t\tgs.warn(\"Failed to parse previous_state during reactivate: \" + error.message);\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Reactivate Error\";\r\n\t\t\t\tresponseBody.message = \"Cannot reactivate: invalid previous state data\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (table === \"x_cadso_work_task\") {\r\n\t\t\t\tgr.setValue(\"status\", holdState.status);\r\n\t\t\t} else {\r\n\t\t\t\tgr.setValue(\"state\", holdState.state);\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = \"Reactivated\";\r\n\t\t\tshouldGetStatusDetails = true;\r\n\t\t},\r\n\r\n\t\tupdateState: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to update state\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar field = table === \"x_cadso_work_task\" ? \"status\" : \"state\";\r\n\t\t\tgr.setValue(field, value);\r\n\t\t\tresponseBody.oldValue = oldValue;\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = responseBody.success ? \"State Updated\" : \"State Update Failed\";\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.message = \"Failed to update state\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tverifyDomain: function () {\r\n\t\t\tif (!sysId) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Domain ID required for verification\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tvar VerifyDNSSettingsApi = new x_cadso_automate.VerifyDNSSettings();\r\n\t\t\t\tvar success = VerifyDNSSettingsApi.triggerVerification({\r\n\t\t\t\t\tdomain: sysId,\r\n\t\t\t\t});\r\n\t\t\t\tresponseBody.success = !!success;\r\n\t\t\t\tresponseBody.verb = success ? \"Domain Verified\" : \"Domain Verification Failed\";\r\n\t\t\t\tif (!success) {\r\n\t\t\t\t\tresponseBody.message = \"Domain verification returned false\";\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Domain Verification Error\";\r\n\t\t\t\tresponseBody.message = \"Failed to verify domain: \" + error.message;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdeactivate: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to deactivate record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tgr.setValue(\"active\", false);\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.oldValue = false;\r\n\t\t\tresponseBody.verb = responseBody.success ? \"Deactivated\" : \"Deactivation Failed\";\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.message = \"Failed to deactivate record\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateFields: function (gr) {\r\n\t\t\tif (!gr.canRead()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to read record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tshouldGetStatusDetails = true;\r\n\r\n\t\t\t// Handle string input\r\n\t\t\tvar parsedValue = value;\r\n\t\t\tif (typeof parsedValue === \"string\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tparsedValue = JSON.parse(parsedValue);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tresponseBody.success = false;\r\n\t\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\t\tresponseBody.message = \"Invalid JSON in value parameter\";\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!parsedValue || typeof parsedValue !== \"object\") {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Value must be an object with field names\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar fields = {};\r\n\t\t\tvar keys = Object.keys(parsedValue);\r\n\r\n\t\t\tfor (var x = 0; x < keys.length; x++) {\r\n\t\t\t\tvar key = keys[x];\r\n\t\t\t\tfields[key] = {\r\n\t\t\t\t\tdisplayValue: gr.getDisplayValue(key),\r\n\t\t\t\t\tvalue: gr.getValue(key),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = true;\r\n\t\t\tresponseBody.oldValue = value;\r\n\t\t\tresponseBody.fields = fields;\r\n\t\t\tresponseBody.verb = \"Fields have been updated\";\r\n\t\t},\r\n\r\n\t\tduplicate: function (gr) {\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Duplicate\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar fields = getTableSchema(table);\r\n\t\t\tvar dupeGr = new GlideRecordSecure(table);\r\n\t\t\tdupeGr.newRecord();\r\n\r\n\t\t\tfields.forEach(function (field) {\r\n\t\t\t\tdupeGr.setValue(field, gr.getValue(field));\r\n\t\t\t});\r\n\r\n\t\t\tvar displayValue = \"Copy of \" + dupeGr.getDisplayValue();\r\n\t\t\tdupeGr.setValue(dupeGr.getDisplayName(), displayValue);\r\n\r\n\t\t\tvar newSysId = dupeGr.insert();\r\n\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\tresponseBody.success = !!newSysId; // Fixed: was checking data.sysId instead of newSysId\r\n\t\t\tresponseBody.verb = \"Duplicated\";\r\n\t\t\tresponseBody.message = gr.getDisplayValue() + \" Duplicated Successfully\";\r\n\t\t},\r\n\r\n\t\tduplicateWithFields: function (gr) {\r\n\t\t\tvar fields = options.fields;\r\n\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Duplicate\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar currentFields = getTableSchema(table);\r\n\t\t\tvar dupeGr = new GlideRecordSecure(table);\r\n\t\t\tdupeGr.newRecord();\r\n\r\n\t\t\t// Copy existing fields\r\n\t\t\tcurrentFields.forEach(function (field) {\r\n\t\t\t\tdupeGr.setValue(field, gr.getValue(field));\r\n\t\t\t});\r\n\r\n\t\t\t// Set custom fields\r\n\t\t\tvar fieldsObject = {};\r\n\t\t\tfields.forEach(function (fieldObj) {\r\n\t\t\t\tdupeGr.setValue(fieldObj.element, fieldObj.value);\r\n\t\t\t\tfieldsObject[fieldObj.element] = fieldObj.value;\r\n\t\t\t});\r\n\r\n\t\t\tvar newSysId = dupeGr.insert();\r\n\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\tresponseBody.success = !!newSysId; // Fixed: was checking data.sysId instead of newSysId\r\n\t\t\tresponseBody.verb = \"DuplicatedWithFields\";\r\n\t\t\tresponseBody.message = gr.getDisplayValue() + \" Duplicated Successfully\";\r\n\t\t\tresponseBody.fields = fieldsObject;\r\n\t\t},\r\n\r\n\t\tupdateTableFields: function (gr) {\r\n\t\t\tvar fields = options.fields;\r\n\r\n\t\t\tif (!fields || !Array.isArray(fields) || fields.length === 0) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"No fields provided to update\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to update record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfields.forEach(function (field) {\r\n\t\t\t\tif (field && field.element) {\r\n\t\t\t\t\tgr.setValue(field.element, field.value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.sysId = sysId;\r\n\t\t\tresponseBody.options = options;\r\n\t\t\tresponseBody.verb = responseBody.success ? \"UpdateTableFields\" : \"Update Failed\";\r\n\r\n\t\t\tif (responseBody.success) {\r\n\t\t\t\tvar fieldNames = fields\r\n\t\t\t\t\t.filter(function (field) { return field && field.element; })\r\n\t\t\t\t\t.map(function (field) { return field.element; })\r\n\t\t\t\t\t.join(\", \");\r\n\t\t\t\tresponseBody.message = \"Successfully updated fields \" + fieldNames + \" on table \" + table;\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.message = \"Failed to update record\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcopyHTML: function () {\r\n\t\t\t// Purely for toast message, logic is done in UIB\r\n\t\t\tresponseBody.success = true;\r\n\t\t\tresponseBody.verb = \"CopyHTML\";\r\n\t\t\tresponseBody.message = \"HTML Copied to Clipboard\";\r\n\t\t},\r\n\t};\r\n\r\n\t// ==================== MAIN EXECUTION ====================\r\n\r\n\t// Early exit if missing required parameters\r\n\tif (!table || !sysId) {\r\n\t\tresponse.setBody(responseBody);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar tableGr = getSecureRecord();\r\n\tif (!tableGr) {\r\n\t\tresponse.setBody(responseBody);\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Execute operation if handler exists\r\n\tvar handler = operationHandlers[type];\r\n\tif (handler) {\r\n\t\thandler(tableGr);\r\n\t}\r\n\r\n\t// Add status details for work management tables if needed\r\n\tif (shouldGetStatusDetails) {\r\n\t\taddStatusDetails(tableGr);\r\n\t}\r\n\r\n\t// Set final response\r\n\tresponse.setBody(responseBody);\r\n})(request, response);\r\n",
    "display_value": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\t/**\r\n\t * Form API Handler - Simple Object Pattern\r\n\t * Handles various CRUD and business operations on ServiceNow records\r\n\t */\r\n\r\n\t// ==================== CONSTANTS ====================\r\n\tvar WORK_TABLES = [\r\n\t\t\"x_cadso_work_project\",\r\n\t\t\"x_cadso_work_task\",\r\n\t\t\"x_cadso_work_campaign\",\r\n\t\t\"x_cadso_work_sprint\",\r\n\t\t\"x_cadso_work_sprint_retro\",\r\n\t];\r\n\r\n\tvar STATE_VALUES = {\r\n\t\tARCHIVED: \"333\",\r\n\t\tON_HOLD: \"22\",\r\n\t};\r\n\tgs.info(\"dh nav header request.body {0}\", JSON.stringify(request.body));\r\n\tgs.info(\"dh table {0}\", table);\r\n\r\n\t// ==================== INPUT PROCESSING ====================\r\n\tvar data = request.body.data || {};\r\n\tvar sysId = data.sysId || \"\";\r\n\tvar table = data.table || \"\";\r\n\tvar isWatching = data.isWatching || \"\";\r\n\tvar type = data.type || \"\";\r\n\tvar value = data.value || \"\";\r\n\tvar oldValue = data.oldValue || \"\";\r\n\tvar action = data.action || \"\";\r\n\tvar options = data.options || {};\r\n\r\n\t\r\n\r\n\t// ==================== RESPONSE OBJECT ====================\r\n\tvar responseBody = {\r\n\t\taction: action,\r\n\t\tisWatching: isWatching,\r\n\t\ttype: type,\r\n\t\tsuccess: false,\r\n\t\toldValue: oldValue,\r\n\t\tvalue: value,\r\n\t\tmessage: \"\",\r\n\t\tverb: \"\",\r\n\t};\r\n\r\n\tvar shouldGetStatusDetails = false;\r\n\r\n\t// ==================== UTILITY FUNCTIONS ====================\r\n\tfunction getSecureRecord() {\r\n\t\tvar gr = new GlideRecordSecure(table);\r\n\r\n\t\tif (options.initialize) {\r\n\t\t\treturn gr;\r\n\t\t}\r\n\r\n\t\treturn gr.get(sysId) ? gr : null;\r\n\t}\r\n\r\n\tfunction addStatusDetails(gr) {\r\n\t\tif (!WORK_TABLES.includes(table)) return;\r\n\r\n\t\tvar isTaskTable = table === \"x_cadso_work_task\";\r\n\t\tvar stateField = isTaskTable ? \"status\" : \"state\";\r\n\r\n\t\tresponseBody.reloadColors = true;\r\n\t\tresponseBody.state = {\r\n\t\t\tdisplayValue: gr.getDisplayValue(stateField),\r\n\t\t\tvalue: gr.getValue(stateField),\r\n\t\t};\r\n\r\n\t\tvar colorApi = new GetColorsForFields();\r\n\t\tresponseBody.colors = colorApi.fetchV2({\r\n\t\t\ttable: table,\r\n\t\t\tfield: stateField,\r\n\t\t\tgetChoices: true,\r\n\t\t});\r\n\t}\r\n\r\n\tfunction getTableSchema(tableName) {\r\n\t\tvar schema = global.Schema.of(tableName, [\"*\"]);\r\n\t\tvar fields = Object.keys(schema[tableName]);\r\n\t\tfields = fields.filter(function (field) {\r\n\t\t\treturn !field.includes(\"sys_\") || field === \"sys_id\" || field === \"sys_class_name\";\r\n\t\t});\r\n\t\treturn fields.sort();\r\n\t}\r\n\r\n\tfunction setObjectKeysToTable(tableRecord, fields) {\r\n\t\tObject.keys(fields).forEach(function (field) {\r\n\t\t\tif (fields[field] !== undefined) {\r\n\t\t\t\ttableRecord.setValue(field, fields[field]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction handleStateChange(gr, newState, verb) {\r\n\t\tvar isTaskTable = table === \"x_cadso_work_task\";\r\n\r\n\t\tif (isTaskTable) {\r\n\t\t\tvar workStatusApi = new x_cadso_work.WorkStatus({\r\n\t\t\t\ttable: \"x_cadso_work_task\",\r\n\t\t\t\tstatus: parseInt(newState),\r\n\t\t\t});\r\n\t\t\tgr.setValue(\"state\", newState);\r\n\t\t\tgr.setValue(\"status\", workStatusApi.fetchStatus());\r\n\t\t} else {\r\n\t\t\tgr.setValue(\"state\", newState);\r\n\t\t}\r\n\r\n\t\tresponseBody.success = !!gr.update();\r\n\t\tresponseBody.verb = verb;\r\n\t\tshouldGetStatusDetails = true;\r\n\t}\r\n\r\n\t// ==================== OPERATION HANDLERS ====================\r\n\tvar operationHandlers = {\r\n\t\tcreate: function (gr) {\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Create New Entry\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tgr.initialize();\r\n\r\n\t\t\tsetObjectKeysToTable(gr, options.fields);\r\n\r\n\t\t\tconst newSysId = gr.insert();\r\n\r\n\t\t\tif (newSysId) {\r\n\t\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\t\tresponseBody.fields = options.fields;\r\n\t\t\t\tresponseBody.view = gr.getValue(\"view\") || \"\";\r\n\t\t\t\tresponseBody.success = true;\r\n\t\t\t\tresponseBody.verb = options.action || \"createNewEntry\";\r\n\t\t\t\tresponseBody.message = options.message || \"Successfully created new entry\";\r\n\t\t\t\tresponseBody.valid = !!newSysId;\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Failed to create new entry\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateTitle: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Update Title\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar displayField = gr.getDisplayName();\r\n\t\t\tif (!gr[displayField].canWrite()) {\r\n\t\t\t\tresponseBody.verb = \"Failed to Update Title\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar finalValue = value || oldValue;\r\n\t\t\tgr.setValue(displayField, finalValue);\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = responseBody.success ? \"Title Updated\" : \"Failed to Update Title\";\r\n\t\t},\r\n\r\n\t\tduplicateToAnotherTable: function (gr) {\r\n\t\t\tvar targetTable = options.targetTable;\r\n\t\t\tvar sourceFieldsToCopy = options.sourceFieldsToCopy;\r\n\t\t\tvar targetTableFields = options.targetTableFields;\r\n\r\n\t\t\tvar targetGr = new GlideRecordSecure(targetTable);\r\n\r\n\t\t\tif (!targetGr.canCreate()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to create on the table: \" + targetTable;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttargetGr.initialize();\r\n\t\t\ttargetGr.newRecord();\r\n\r\n\t\t\t// Copy fields from source to target\r\n\t\t\tvar copiedData = {};\r\n\t\t\tObject.keys(sourceFieldsToCopy).forEach(function (field) {\r\n\t\t\t\tcopiedData[sourceFieldsToCopy[field]] = gr.getValue(field);\r\n\t\t\t});\r\n\r\n\t\t\tsetObjectKeysToTable(targetGr, copiedData);\r\n\t\t\tsetObjectKeysToTable(targetGr, targetTableFields);\r\n\r\n\t\t\tvar newSysId = targetGr.insert();\r\n\t\t\tif (newSysId) {\r\n\t\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\t\tresponseBody.success = true;\r\n\t\t\t\tresponseBody.verb = \"duplicateToAnotherTable\";\r\n\t\t\t\tresponseBody.message = \"Successfully saved on table \" + targetTable;\r\n\t\t\t\tresponse.setStatus(201);\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.message = \"Failed to save on table \" + targetTable;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdelete: function (gr) {\r\n\t\t\tif (!gr.canDelete()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Delete\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar displayValue = gr.getDisplayValue();\r\n\t\t\tresponseBody.success = !!gr.deleteRecord();\r\n\r\n\t\t\tif (responseBody.success) {\r\n\t\t\t\tresponseBody.verb = \"Deleted\";\r\n\t\t\t\tresponseBody.message = displayValue + \" Was Deleted Successfully\";\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = displayValue + \" Was Not Deleted\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfollow: function (gr) {\r\n\t\t\tif (!gr.canRead()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to read record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar userId = gs.getUserID();\r\n\t\t\tvar watchList = gr.getValue(\"watch_list\");\r\n\t\t\twatchList = watchList === null || watchList === \"null\" ? \"\" : watchList;\r\n\r\n\t\t\tvar watchers = watchList.split(\",\").filter(function (id) {\r\n\t\t\t\treturn id.length > 0;\r\n\t\t\t});\r\n\r\n\t\t\tvar userIndex = watchers.indexOf(userId);\r\n\t\t\tif (userIndex > -1) {\r\n\t\t\t\twatchers.splice(userIndex, 1);\r\n\t\t\t\tresponseBody.isWatching = false;\r\n\t\t\t\tresponseBody.verb = \"Unfollowed\";\r\n\t\t\t} else {\r\n\t\t\t\twatchers.push(userId);\r\n\t\t\t\tresponseBody.isWatching = true;\r\n\t\t\t\tresponseBody.verb = \"Following\";\r\n\t\t\t}\r\n\r\n\t\t\tgr.setValue(\"watch_list\", watchers.join(\",\"));\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\t\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.verb = \"Follow Error\";\r\n\t\t\t\tresponseBody.message = \"Failed to update watch list\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tarchive: function (gr) {\r\n\t\t\thandleStateChange(gr, STATE_VALUES.ARCHIVED, \"Archived\");\r\n\t\t},\r\n\r\n\t\trestore: function (gr) {\r\n\t\t\tvar previousState = {};\r\n\t\t\tvar archiveState = {};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tvar stateValue = gr.getValue(\"previous_state\");\r\n\t\t\t\tpreviousState = JSON.parse(stateValue || \"{}\");\r\n\t\t\t\tarchiveState = previousState.archive || {};\r\n\t\t\t} catch (error) {\r\n\t\t\t\tgs.warn(\"Failed to parse previous_state during restore: \" + error.message);\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Restore Error\";\r\n\t\t\t\tresponseBody.message = \"Cannot restore: invalid previous state data\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (table === \"x_cadso_work_task\") {\r\n\t\t\t\tgr.setValue(\"status\", archiveState.status);\r\n\t\t\t} else {\r\n\t\t\t\tgr.setValue(\"state\", archiveState.state);\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = \"Restored\";\r\n\t\t\tshouldGetStatusDetails = true;\r\n\t\t},\r\n\r\n\t\thold: function (gr) {\r\n\t\t\thandleStateChange(gr, STATE_VALUES.ON_HOLD, \"On Hold\");\r\n\t\t},\r\n\r\n\t\treactivate: function (gr) {\r\n\t\t\tvar previousState = {};\r\n\t\t\tvar holdState = {};\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tvar stateValue = gr.getValue(\"previous_state\");\r\n\t\t\t\tpreviousState = JSON.parse(stateValue || \"{}\");\r\n\t\t\t\tholdState = previousState.onHold || {};\r\n\t\t\t} catch (error) {\r\n\t\t\t\tgs.warn(\"Failed to parse previous_state during reactivate: \" + error.message);\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Reactivate Error\";\r\n\t\t\t\tresponseBody.message = \"Cannot reactivate: invalid previous state data\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (table === \"x_cadso_work_task\") {\r\n\t\t\t\tgr.setValue(\"status\", holdState.status);\r\n\t\t\t} else {\r\n\t\t\t\tgr.setValue(\"state\", holdState.state);\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = \"Reactivated\";\r\n\t\t\tshouldGetStatusDetails = true;\r\n\t\t},\r\n\r\n\t\tupdateState: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to update state\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar field = table === \"x_cadso_work_task\" ? \"status\" : \"state\";\r\n\t\t\tgr.setValue(field, value);\r\n\t\t\tresponseBody.oldValue = oldValue;\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.verb = responseBody.success ? \"State Updated\" : \"State Update Failed\";\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.message = \"Failed to update state\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tverifyDomain: function () {\r\n\t\t\tif (!sysId) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Domain ID required for verification\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tvar VerifyDNSSettingsApi = new x_cadso_automate.VerifyDNSSettings();\r\n\t\t\t\tvar success = VerifyDNSSettingsApi.triggerVerification({\r\n\t\t\t\t\tdomain: sysId,\r\n\t\t\t\t});\r\n\t\t\t\tresponseBody.success = !!success;\r\n\t\t\t\tresponseBody.verb = success ? \"Domain Verified\" : \"Domain Verification Failed\";\r\n\t\t\t\tif (!success) {\r\n\t\t\t\t\tresponseBody.message = \"Domain verification returned false\";\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Domain Verification Error\";\r\n\t\t\t\tresponseBody.message = \"Failed to verify domain: \" + error.message;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdeactivate: function (gr) {\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to deactivate record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tgr.setValue(\"active\", false);\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.oldValue = false;\r\n\t\t\tresponseBody.verb = responseBody.success ? \"Deactivated\" : \"Deactivation Failed\";\r\n\t\t\tif (!responseBody.success) {\r\n\t\t\t\tresponseBody.message = \"Failed to deactivate record\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateFields: function (gr) {\r\n\t\t\tif (!gr.canRead()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to read record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tshouldGetStatusDetails = true;\r\n\r\n\t\t\t// Handle string input\r\n\t\t\tvar parsedValue = value;\r\n\t\t\tif (typeof parsedValue === \"string\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tparsedValue = JSON.parse(parsedValue);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tresponseBody.success = false;\r\n\t\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\t\tresponseBody.message = \"Invalid JSON in value parameter\";\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!parsedValue || typeof parsedValue !== \"object\") {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Value must be an object with field names\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar fields = {};\r\n\t\t\tvar keys = Object.keys(parsedValue);\r\n\r\n\t\t\tfor (var x = 0; x < keys.length; x++) {\r\n\t\t\t\tvar key = keys[x];\r\n\t\t\t\tfields[key] = {\r\n\t\t\t\t\tdisplayValue: gr.getDisplayValue(key),\r\n\t\t\t\t\tvalue: gr.getValue(key),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tresponseBody.success = true;\r\n\t\t\tresponseBody.oldValue = value;\r\n\t\t\tresponseBody.fields = fields;\r\n\t\t\tresponseBody.verb = \"Fields have been updated\";\r\n\t\t},\r\n\r\n\t\tduplicate: function (gr) {\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Duplicate\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar fields = getTableSchema(table);\r\n\t\t\tvar dupeGr = new GlideRecordSecure(table);\r\n\t\t\tdupeGr.newRecord();\r\n\r\n\t\t\tfields.forEach(function (field) {\r\n\t\t\t\tdupeGr.setValue(field, gr.getValue(field));\r\n\t\t\t});\r\n\r\n\t\t\tvar displayValue = \"Copy of \" + dupeGr.getDisplayValue();\r\n\t\t\tdupeGr.setValue(dupeGr.getDisplayName(), displayValue);\r\n\r\n\t\t\tvar newSysId = dupeGr.insert();\r\n\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\tresponseBody.success = !!newSysId; // Fixed: was checking data.sysId instead of newSysId\r\n\t\t\tresponseBody.verb = \"Duplicated\";\r\n\t\t\tresponseBody.message = gr.getDisplayValue() + \" Duplicated Successfully\";\r\n\t\t},\r\n\r\n\t\tduplicateWithFields: function (gr) {\r\n\t\t\tvar fields = options.fields;\r\n\r\n\t\t\tif (!gr.canCreate()) {\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient Permissions To Duplicate\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar currentFields = getTableSchema(table);\r\n\t\t\tvar dupeGr = new GlideRecordSecure(table);\r\n\t\t\tdupeGr.newRecord();\r\n\r\n\t\t\t// Copy existing fields\r\n\t\t\tcurrentFields.forEach(function (field) {\r\n\t\t\t\tdupeGr.setValue(field, gr.getValue(field));\r\n\t\t\t});\r\n\r\n\t\t\t// Set custom fields\r\n\t\t\tvar fieldsObject = {};\r\n\t\t\tfields.forEach(function (fieldObj) {\r\n\t\t\t\tdupeGr.setValue(fieldObj.element, fieldObj.value);\r\n\t\t\t\tfieldsObject[fieldObj.element] = fieldObj.value;\r\n\t\t\t});\r\n\r\n\t\t\tvar newSysId = dupeGr.insert();\r\n\t\t\tresponseBody.sysId = newSysId;\r\n\t\t\tresponseBody.oldValue = sysId;\r\n\t\t\tresponseBody.success = !!newSysId; // Fixed: was checking data.sysId instead of newSysId\r\n\t\t\tresponseBody.verb = \"DuplicatedWithFields\";\r\n\t\t\tresponseBody.message = gr.getDisplayValue() + \" Duplicated Successfully\";\r\n\t\t\tresponseBody.fields = fieldsObject;\r\n\t\t},\r\n\r\n\t\tupdateTableFields: function (gr) {\r\n\t\t\tvar fields = options.fields;\r\n\r\n\t\t\tif (!fields || !Array.isArray(fields) || fields.length === 0) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"No fields provided to update\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!gr.canWrite()) {\r\n\t\t\t\tresponseBody.success = false;\r\n\t\t\t\tresponseBody.verb = \"Error\";\r\n\t\t\t\tresponseBody.message = \"Insufficient permissions to update record\";\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfields.forEach(function (field) {\r\n\t\t\t\tif (field && field.element) {\r\n\t\t\t\t\tgr.setValue(field.element, field.value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tresponseBody.success = !!gr.update();\r\n\t\t\tresponseBody.sysId = sysId;\r\n\t\t\tresponseBody.options = options;\r\n\t\t\tresponseBody.verb = responseBody.success ? \"UpdateTableFields\" : \"Update Failed\";\r\n\r\n\t\t\tif (responseBody.success) {\r\n\t\t\t\tvar fieldNames = fields\r\n\t\t\t\t\t.filter(function (field) { return field && field.element; })\r\n\t\t\t\t\t.map(function (field) { return field.element; })\r\n\t\t\t\t\t.join(\", \");\r\n\t\t\t\tresponseBody.message = \"Successfully updated fields \" + fieldNames + \" on table \" + table;\r\n\t\t\t} else {\r\n\t\t\t\tresponseBody.message = \"Failed to update record\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcopyHTML: function () {\r\n\t\t\t// Purely for toast message, logic is done in UIB\r\n\t\t\tresponseBody.success = true;\r\n\t\t\tresponseBody.verb = \"CopyHTML\";\r\n\t\t\tresponseBody.message = \"HTML Copied to Clipboard\";\r\n\t\t},\r\n\t};\r\n\r\n\t// ==================== MAIN EXECUTION ====================\r\n\r\n\t// Early exit if missing required parameters\r\n\tif (!table || !sysId) {\r\n\t\tresponse.setBody(responseBody);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar tableGr = getSecureRecord();\r\n\tif (!tableGr) {\r\n\t\tresponse.setBody(responseBody);\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Execute operation if handler exists\r\n\tvar handler = operationHandlers[type];\r\n\tif (handler) {\r\n\t\thandler(tableGr);\r\n\t}\r\n\r\n\t// Add status details for work management tables if needed\r\n\tif (shouldGetStatusDetails) {\r\n\t\taddStatusDetails(tableGr);\r\n\t}\r\n\r\n\t// Set final response\r\n\tresponse.setBody(responseBody);\r\n})(request, response);\r\n"
  },
  "sys_updated_on": {
    "value": "2025-08-26 18:39:50",
    "display_value": "2025-08-26 11:39:50 AM"
  },
  "enforce_acl": {
    "value": "85a45d5247b1ed10fc4c1ae8036d439e",
    "display_value": "Tenon Work Baseline Access"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "dennis.huh",
    "display_value": "dennis.huh"
  },
  "operation_uri": {
    "value": "/api/x_cadso_work/ui/navheader/event",
    "display_value": "/api/x_cadso_work/ui/navheader/event"
  },
  "sys_created_on": {
    "value": "2023-08-19 05:26:50",
    "display_value": "2023-08-18 10:26:50 PM"
  },
  "sys_name": {
    "value": "NavigationHeader Event",
    "display_value": "NavigationHeader Event"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "web_service_definition": {
    "value": "3a4228b84728e950a1052a02e26d43b0",
    "display_value": "Tenon Work UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "false",
    "display_value": "false"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "186",
    "display_value": "186"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_94c81db847f03910b0361ae8036d43c4",
    "display_value": "sys_ws_operation_94c81db847f03910b0361ae8036d43c4"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "NavigationHeader Event",
    "display_value": "NavigationHeader Event"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/navheader/event",
    "display_value": "/navheader/event"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
