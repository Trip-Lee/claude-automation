{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "e9612a62c3334a9085b196c4e40131cf",
    "extracted_at": "2025-09-19T21:48:33.391Z",
    "display_value": "Choice Component - Fetch",
    "application": "Tenon_Marketing_Work_Management",
    "scope": {
      "display_value": "Tenon Marketing Work Management",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/4e4449a5475c255085d19fd8036d43a0",
      "value": "4e4449a5475c255085d19fd8036d43a0"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        table,\r\n        query,\r\n        searchValue,\r\n        limit,\r\n        element,\r\n\t\tisChoice\r\n    } = request.body.data;\r\n\r\n    let choices = [];\r\n\r\n        let tableBeingSearched = '';\r\n    if (table === 'sys_dictionary' && query) {\r\n\t\t// We will return all fields for a table regardless if the table is extended\r\n        const regex = /name=([a-zA-Z]*)/gm;\r\n        const matches = query.match(regex);\r\n        if (matches && matches.length > 0) {\r\n            tableBeingSearched = (matches[0] + '').replace('name=', '');\r\n            const list = getExtendedTablesList({\r\n                table: tableBeingSearched,\r\n                list: []\r\n            });\r\n            query = getColectionsEncodedQuery({\r\n                list,\r\n                query,\r\n                matches\r\n            });\r\n        }\r\n    } else if (isChoice) {\r\n\t\t// If no table is provided; We must be looking for choices\r\n        const list = getExtendedTablesList({\r\n            table,\r\n            list: []\r\n        });\r\n        if (list && list.length) {\r\n            const tableWithChoicesForField = list.find(function(_table) {\r\n                return isChoiceFn({\r\n                    table,\r\n                    element\r\n                });\r\n            });\r\n\r\n            if (tableWithChoicesForField) {\r\n\t\t\t\tchoices = getChoices({ table: tableWithChoicesForField, element, searchValue });\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n    if (!table || choices.length) {\r\n\t\t// We will return if table is blank to prevent errors or if we are looking for choices.\r\n        response.setBody({\r\n            choices,\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n\t// Contine to regular logic\r\n    const tableGr = new GlideRecordSecure(table);\r\n    if (query) {\r\n        tableGr.addEncodedQuery(query);\r\n    }\r\n\t\r\n    if (searchValue) {\r\n\t\tlet queryItem = 'CONTAINS';\r\n\t\tconst displayField = tableGr.getDisplayName();\r\n\t\tif (displayField) {\r\n\t\t\tconst isReference = isReferenceField({ table, element: displayField });\r\n\t\t\tif (isReference) {\r\n\t\t\t\tqueryItem = 'LIKE';\r\n\t\t\t}\r\n\t\t}\r\n        tableGr.addEncodedQuery(tableGr.getDisplayName() + queryItem + searchValue);\r\n    }\r\n\r\n    tableGr.orderBy(tableGr.getDisplayName());\r\n    tableGr.setLimit(limit || 7);\r\n    tableGr.query();\r\n\r\n    while (tableGr.next()) {\r\n        const choice = {\r\n            displayValue: tableGr.getDisplayValue() || '(Empty Display Value)',\r\n            value: tableGr.getUniqueValue()\r\n        };\r\n\r\n        if (table === 'sys_dictionary') {\r\n\t\t\tconst isChoice = isChoiceFn({ table: tableGr.getValue(\"name\"), element: tableGr.getValue(\"element\") });\r\n            choice.field = {\r\n                table: tableGr.getValue(\"name\"),\r\n                element: tableGr.getValue(\"element\"),\r\n                type: isChoice ? 'choice' : tableGr.getValue(\"internal_type\"),\r\n                required: tableGr.getValue(\"mandatory\"),\r\n                length: tableGr.getValue(\"max_length\"),\r\n                mandatory: tableGr.getValue(\"mandatory\"),\r\n                reference: tableGr.getValue(\"reference\"),\r\n                query: tableGr.getValue(\"reference_qual_condition\"),\r\n                dynamicRefQual: tableGr.getValue(\"dynamic_ref_qual\"),\r\n                referenceQual: tableGr.getValue(\"reference_qual\"),\r\n                useReferenceQualifier: tableGr.getValue(\"use_reference_qualifier\"),\r\n                queryField: choice.useReferenceQualifier === \"simple\" ?\r\n                    \"query\" : choice.useReferenceQualifier === \"advanced\" ?\r\n                    \"referenceQual\" : \"dynamicRefQual\",\r\n\t\t\t\tisChoice\r\n            };\r\n        }\r\n\r\n        choices.push(choice);\r\n    }\r\n\r\n    response.setBody({\r\n        choices\r\n    });\r\n\r\n    return response;\r\n\r\n\t// Functions below here\r\n    function getExtendedTablesList({\r\n        table,\r\n        list = []\r\n    }) {\r\n        list.push(table);\r\n\r\n        var sysDbObjGr = new GlideRecord('sys_db_object');\r\n        sysDbObjGr.addQuery('name', table);\r\n        sysDbObjGr.addEncodedQuery('super_classISNOTEMPTY');\r\n        sysDbObjGr.addEncodedQuery('super_class.nameISNOTEMPTY');\r\n        sysDbObjGr.setLimit(1);\r\n        sysDbObjGr.query();\r\n\r\n        if (sysDbObjGr.next()) {\r\n            const refRecordGr = sysDbObjGr.super_class.getRefRecord();\r\n            if (refRecordGr.isValidRecord()) {\r\n                getExtendedTablesList({\r\n                    table: refRecordGr.getValue('name'),\r\n                    list\r\n                });\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function getColectionsEncodedQuery({\r\n        list,\r\n        query,\r\n        matches\r\n    }) {\r\n        let newQuery = query;\r\n        let replaceValue = 'elementNOT LIKEsys_^read_only=false^internal_type!=collection^name=' + list.join('^ORname=');\r\n        newQuery = newQuery.replace(matches[0], replaceValue);\r\n        return newQuery;\r\n    }\r\n\r\n    function getChoices({\r\n        table,\r\n        element,\r\n\t\tsearchValue\r\n    }) {\r\n        var choiceGr = new GlideRecord(\"sys_choice\");\r\n        choiceGr.addQuery('name', table);\r\n        choiceGr.addQuery('element', element);\r\n\t\r\n\t\tif (searchValue) {\r\n\t\t\tchoiceGr.addQuery('label', 'CONTAINS', searchValue);\r\n\t\t}\r\n\t\t\r\n        choiceGr.addQuery('language', 'en');\r\n        choiceGr.orderBy('sequence');\r\n        choiceGr.query();\r\n\r\n        const options = [];\r\n\r\n        while (choiceGr.next()) {\r\n            options.push({\r\n                displayValue: choiceGr.getDisplayValue(),\r\n                value: choiceGr.getValue('value')\r\n            });\r\n        }\r\n        return options;\r\n    }\r\n\r\n    function isChoiceFn({\r\n        table,\r\n        element\r\n    }) {\r\n        var agg = new GlideAggregate(\"sys_choice\");\r\n        agg.addAggregate('COUNT');\r\n        agg.addQuery('element', element);\r\n        agg.addQuery('name', table);\r\n        agg.addQuery('language', 'en');\r\n        agg.query();\r\n        let count = 0;\r\n        while (agg.next()) {\r\n            count = parseInt(agg.getAggregate('COUNT'));\r\n        }\r\n        return count > 0;\r\n    }\r\n\r\n    function isReferenceField({\r\n        table,\r\n        element\r\n    }) {\r\n        var agg = new GlideAggregate(\"sys_dictionary\");\r\n        agg.addAggregate('COUNT');\r\n        agg.addQuery('element', element);\r\n        agg.addQuery('name', table);\r\n        agg.addQuery('internal_type', 'reference');\r\n        agg.query();\r\n        let count = 0;\r\n        while (agg.next()) {\r\n            count = parseInt(agg.getAggregate('COUNT'));\r\n        }\r\n        return count > 0;\r\n    }\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        table,\r\n        query,\r\n        searchValue,\r\n        limit,\r\n        element,\r\n\t\tisChoice\r\n    } = request.body.data;\r\n\r\n    let choices = [];\r\n\r\n        let tableBeingSearched = '';\r\n    if (table === 'sys_dictionary' && query) {\r\n\t\t// We will return all fields for a table regardless if the table is extended\r\n        const regex = /name=([a-zA-Z]*)/gm;\r\n        const matches = query.match(regex);\r\n        if (matches && matches.length > 0) {\r\n            tableBeingSearched = (matches[0] + '').replace('name=', '');\r\n            const list = getExtendedTablesList({\r\n                table: tableBeingSearched,\r\n                list: []\r\n            });\r\n            query = getColectionsEncodedQuery({\r\n                list,\r\n                query,\r\n                matches\r\n            });\r\n        }\r\n    } else if (isChoice) {\r\n\t\t// If no table is provided; We must be looking for choices\r\n        const list = getExtendedTablesList({\r\n            table,\r\n            list: []\r\n        });\r\n        if (list && list.length) {\r\n            const tableWithChoicesForField = list.find(function(_table) {\r\n                return isChoiceFn({\r\n                    table,\r\n                    element\r\n                });\r\n            });\r\n\r\n            if (tableWithChoicesForField) {\r\n\t\t\t\tchoices = getChoices({ table: tableWithChoicesForField, element, searchValue });\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n    if (!table || choices.length) {\r\n\t\t// We will return if table is blank to prevent errors or if we are looking for choices.\r\n        response.setBody({\r\n            choices,\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n\t// Contine to regular logic\r\n    const tableGr = new GlideRecordSecure(table);\r\n    if (query) {\r\n        tableGr.addEncodedQuery(query);\r\n    }\r\n\t\r\n    if (searchValue) {\r\n\t\tlet queryItem = 'CONTAINS';\r\n\t\tconst displayField = tableGr.getDisplayName();\r\n\t\tif (displayField) {\r\n\t\t\tconst isReference = isReferenceField({ table, element: displayField });\r\n\t\t\tif (isReference) {\r\n\t\t\t\tqueryItem = 'LIKE';\r\n\t\t\t}\r\n\t\t}\r\n        tableGr.addEncodedQuery(tableGr.getDisplayName() + queryItem + searchValue);\r\n    }\r\n\r\n    tableGr.orderBy(tableGr.getDisplayName());\r\n    tableGr.setLimit(limit || 7);\r\n    tableGr.query();\r\n\r\n    while (tableGr.next()) {\r\n        const choice = {\r\n            displayValue: tableGr.getDisplayValue() || '(Empty Display Value)',\r\n            value: tableGr.getUniqueValue()\r\n        };\r\n\r\n        if (table === 'sys_dictionary') {\r\n\t\t\tconst isChoice = isChoiceFn({ table: tableGr.getValue(\"name\"), element: tableGr.getValue(\"element\") });\r\n            choice.field = {\r\n                table: tableGr.getValue(\"name\"),\r\n                element: tableGr.getValue(\"element\"),\r\n                type: isChoice ? 'choice' : tableGr.getValue(\"internal_type\"),\r\n                required: tableGr.getValue(\"mandatory\"),\r\n                length: tableGr.getValue(\"max_length\"),\r\n                mandatory: tableGr.getValue(\"mandatory\"),\r\n                reference: tableGr.getValue(\"reference\"),\r\n                query: tableGr.getValue(\"reference_qual_condition\"),\r\n                dynamicRefQual: tableGr.getValue(\"dynamic_ref_qual\"),\r\n                referenceQual: tableGr.getValue(\"reference_qual\"),\r\n                useReferenceQualifier: tableGr.getValue(\"use_reference_qualifier\"),\r\n                queryField: choice.useReferenceQualifier === \"simple\" ?\r\n                    \"query\" : choice.useReferenceQualifier === \"advanced\" ?\r\n                    \"referenceQual\" : \"dynamicRefQual\",\r\n\t\t\t\tisChoice\r\n            };\r\n        }\r\n\r\n        choices.push(choice);\r\n    }\r\n\r\n    response.setBody({\r\n        choices\r\n    });\r\n\r\n    return response;\r\n\r\n\t// Functions below here\r\n    function getExtendedTablesList({\r\n        table,\r\n        list = []\r\n    }) {\r\n        list.push(table);\r\n\r\n        var sysDbObjGr = new GlideRecord('sys_db_object');\r\n        sysDbObjGr.addQuery('name', table);\r\n        sysDbObjGr.addEncodedQuery('super_classISNOTEMPTY');\r\n        sysDbObjGr.addEncodedQuery('super_class.nameISNOTEMPTY');\r\n        sysDbObjGr.setLimit(1);\r\n        sysDbObjGr.query();\r\n\r\n        if (sysDbObjGr.next()) {\r\n            const refRecordGr = sysDbObjGr.super_class.getRefRecord();\r\n            if (refRecordGr.isValidRecord()) {\r\n                getExtendedTablesList({\r\n                    table: refRecordGr.getValue('name'),\r\n                    list\r\n                });\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function getColectionsEncodedQuery({\r\n        list,\r\n        query,\r\n        matches\r\n    }) {\r\n        let newQuery = query;\r\n        let replaceValue = 'elementNOT LIKEsys_^read_only=false^internal_type!=collection^name=' + list.join('^ORname=');\r\n        newQuery = newQuery.replace(matches[0], replaceValue);\r\n        return newQuery;\r\n    }\r\n\r\n    function getChoices({\r\n        table,\r\n        element,\r\n\t\tsearchValue\r\n    }) {\r\n        var choiceGr = new GlideRecord(\"sys_choice\");\r\n        choiceGr.addQuery('name', table);\r\n        choiceGr.addQuery('element', element);\r\n\t\r\n\t\tif (searchValue) {\r\n\t\t\tchoiceGr.addQuery('label', 'CONTAINS', searchValue);\r\n\t\t}\r\n\t\t\r\n        choiceGr.addQuery('language', 'en');\r\n        choiceGr.orderBy('sequence');\r\n        choiceGr.query();\r\n\r\n        const options = [];\r\n\r\n        while (choiceGr.next()) {\r\n            options.push({\r\n                displayValue: choiceGr.getDisplayValue(),\r\n                value: choiceGr.getValue('value')\r\n            });\r\n        }\r\n        return options;\r\n    }\r\n\r\n    function isChoiceFn({\r\n        table,\r\n        element\r\n    }) {\r\n        var agg = new GlideAggregate(\"sys_choice\");\r\n        agg.addAggregate('COUNT');\r\n        agg.addQuery('element', element);\r\n        agg.addQuery('name', table);\r\n        agg.addQuery('language', 'en');\r\n        agg.query();\r\n        let count = 0;\r\n        while (agg.next()) {\r\n            count = parseInt(agg.getAggregate('COUNT'));\r\n        }\r\n        return count > 0;\r\n    }\r\n\r\n    function isReferenceField({\r\n        table,\r\n        element\r\n    }) {\r\n        var agg = new GlideAggregate(\"sys_dictionary\");\r\n        agg.addAggregate('COUNT');\r\n        agg.addQuery('element', element);\r\n        agg.addQuery('name', table);\r\n        agg.addQuery('internal_type', 'reference');\r\n        agg.query();\r\n        let count = 0;\r\n        while (agg.next()) {\r\n            count = parseInt(agg.getAggregate('COUNT'));\r\n        }\r\n        return count > 0;\r\n    }\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-02-25 13:38:45",
    "display_value": "2025-02-25 05:38:45 AM"
  },
  "enforce_acl": {
    "value": "85a45d5247b1ed10fc4c1ae8036d439e",
    "display_value": "Tenon Work Baseline Access"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "operation_uri": {
    "value": "/api/x_cadso_work/ui/choice/fetch",
    "display_value": "/api/x_cadso_work/ui/choice/fetch"
  },
  "sys_created_on": {
    "value": "2024-08-06 20:38:48",
    "display_value": "2024-08-06 01:38:48 PM"
  },
  "sys_name": {
    "value": "Choice Component - Fetch",
    "display_value": "Choice Component - Fetch"
  },
  "sys_scope": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "3a4228b84728e950a1052a02e26d43b0",
    "display_value": "Tenon Work UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "true",
    "display_value": "true"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "28",
    "display_value": "28"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "4e4449a5475c255085d19fd8036d43a0",
    "display_value": "Tenon Marketing Work Management"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_e9612a62c3334a9085b196c4e40131cf",
    "display_value": "sys_ws_operation_e9612a62c3334a9085b196c4e40131cf"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Choice Component - Fetch",
    "display_value": "Choice Component - Fetch"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/choice/fetch",
    "display_value": "/choice/fetch"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
