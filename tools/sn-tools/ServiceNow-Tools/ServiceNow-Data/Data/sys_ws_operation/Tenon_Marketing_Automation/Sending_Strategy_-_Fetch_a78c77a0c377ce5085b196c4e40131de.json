{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "a78c77a0c377ce5085b196c4e40131de",
    "extracted_at": "2025-09-19T21:48:33.416Z",
    "display_value": "Sending Strategy - Fetch",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        sysId,      // should this be the email OR email_send\r\n        messageType\r\n    } = request.body.data;\r\n\r\n    if (messageType === 'sms') {\r\n        const smsSendGr = new GlideRecord('x_cadso_automate_message_send');\r\n        smsSendGr.addQuery('sys_id', sysId);\r\n        smsSendGr.query();\r\n\r\n        if (smsSendGr.next()) {\r\n            sysId = smsSendGr.getValue('message');\r\n        }\r\n\r\n    }\r\n\r\n\t//TODO: THis needs to be reworked for SMS. alot doers not work\r\n\t// - line 26 because we are already looking at the SMS record, not the Send record\r\n\r\n    const apiUtil = new x_cadso_automate.APIUtils();\r\n    const imgGetter = new x_cadso_automate.getSmsImage().getImage;\r\n    let totalSends = 0;\r\n    const table = messageType === 'sms' ? 'x_cadso_automate_message_send' : 'x_cadso_automate_email_send';\r\n    const tableGR = new GlideRecord(table);\r\n    tableGR.addQuery(messageType === 'email' ? 'email' : 'message', sysId);\r\n    tableGR.orderBy('sys_created_on');\r\n    tableGR.query();\r\n    let found = tableGR.hasNext();\r\n    const strats = [];\r\n    let sendingStrategy = 'now';\r\n\r\n    while (tableGR.next()) {\r\n        /***** get totalSends ******/\r\n        // let status = tableGR.getValue('status');\r\n\r\n        // if (status != 'scheduled' && status != 'draft') {\r\n        //     count = apiUtil.count({\r\n        //         table: 'x_cadso_automate_email_batch_recipient',\r\n        //         query: `email_batch.email_send.sys_id=${tableGR.getUniqueValue()}`\r\n        //     });\r\n        //     totalSends += count;\r\n        // } else {\r\n        //     let includedMembers = apiUtil.query({\r\n        //         table: 'x_cadso_automate_audience_member',\r\n        //         query: `audienceIN${tableGR.getValue('audiences')}`,\r\n        //         returnFields: 'contact_detail'\r\n        //     });\r\n\r\n        //     let excludedMembers = apiUtil.query({\r\n        //         table: 'x_cadso_automate_audience_member',\r\n        //         query: `audienceIN${tableGR.getValue('excluded_audiences')}`,\r\n        //         returnFields: 'contact_detail'\r\n        //     });\r\n\r\n        //     let netIncludedMembers = includedMembers.filter(includedMember =>\r\n        //         !excludedMembers.some(excludedMember =>\r\n        //             excludedMember.contact_detail === includedMember.contact_detail)\r\n        //     );\r\n        //     totalSends += netIncludedMembers.length;\r\n        // }\r\n        /***** end totalSends ******/\r\n        let optimizedBy = getOpt(); // None\r\n        if (checkBool({\r\n                tableGR,\r\n                field: \"send_time_optimization\"\r\n            })) {\r\n            optimizedBy = getOpt('sendTime');\r\n        } else if (checkBool({\r\n                tableGR,\r\n                field: \"time_zone_optimization\"\r\n            })) {\r\n            optimizedBy = getOpt('timeZone');\r\n        }\r\n        const sendOn = tableGR.getDisplayValue('delivery_time');\r\n\t\tconst completedOn = tableGR.getDisplayValue('completed_on');\r\n        const audiences = tableGR.getDisplayValue('audiences');\r\n        const audiencesSysIds = tableGR.getValue('audiences');\r\n        const dynamicSubject = tableGR.getDisplayValue('dynamic_subject_line');\r\n        const profile = {\r\n            label: messageType === 'sms' ? 'Text Sender Profile' : 'Email Sender Profile',\r\n            displayValue: tableGR.getDisplayValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            value: tableGR.getValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            element: \"profile\",\r\n            required: true,\r\n            disabled: false,\r\n            hasValue: !!tableGR.getValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            field: {\r\n                reference: messageType === 'sms' ? 'x_cadso_automate_message_number' : 'x_cadso_automate_sender_email',\r\n                referenceQuery: 'active=true'\r\n            }\r\n        };\r\n\r\n        let includes = tableGR.getValue('includes');\r\n        includes = JSON.parse(includes) || {\r\n            displayValue: [],\r\n            value: \"\",\r\n            selected: {},\r\n            editValue: {\r\n                displayValue: \"\",\r\n                value: \"\"\r\n            },\r\n            open: false,\r\n            searchValue: \"\",\r\n            tables: [{\r\n                table: \"x_cadso_automate_audience\",\r\n                limit: 7,\r\n                icon: \"user\",\r\n                searchValue: \"\"\r\n            }],\r\n        };\r\n\r\n        let excludes = tableGR.getValue('excludes');\r\n        excludes = JSON.parse(excludes) || {\r\n            displayValue: [],\r\n            value: \"\",\r\n            selected: {},\r\n            editValue: {\r\n                displayValue: \"\",\r\n                value: \"\"\r\n            },\r\n            open: false,\r\n            searchValue: \"\",\r\n            tables: [{\r\n                table: \"x_cadso_automate_audience\",\r\n                limit: 7,\r\n                icon: \"user\",\r\n                searchValue: \"\"\r\n            }],\r\n        };\r\n\t\t\r\n        sendingStrategy = checkBool({\r\n            tableGR,\r\n            field: \"send_now\"\r\n        }) ? 'now' : 'schedule';\r\n\r\n        let strat;\r\n        if (messageType === 'email') {\r\n\t\t\tlet type = 'standard';\r\n\t\t\tconst emailGr = tableGR.email.getRefRecord();\r\n\t\t\tif (emailGr.isValidRecord()) {\r\n\t\t\t\ttype = emailGr.getValue('type');\r\n\t\t\t}\r\n            strat = {\r\n                optimized: checkBool({\r\n                    tableGR,\r\n                    field: \"send_time_optimization\"\r\n                }),\r\n                sendingStrategy,\r\n                optimizedBy: {\r\n                    ...optimizedBy,\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                },\r\n                sendOn: {\r\n                    displayValue: sendOn,\r\n                    value: sendOn,\r\n                    editValue: {\r\n                        displayValue: sendOn,\r\n                        value: sendOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n\t\t\t\tcompletedOn: {\r\n                    displayValue: completedOn,\r\n                    value: completedOn,\r\n                    editValue: {\r\n                        displayValue: completedOn,\r\n                        value: completedOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n                audience: includes,\r\n                excludesAudience: excludes,\r\n\t\t\t\texcludedAudience: excludes, // NL - Test\r\n                subject: dynamicSubject,\r\n\t\t\t\ttype,\r\n                defaultSubject: tableGR.getDisplayValue('static_subject_line'),\r\n                previewText: tableGR.getDisplayValue('preview_text'),\r\n                showDefaultOption: dynamicSubject.indexOf(\"{\") > -1 && dynamicSubject.indexOf(\"}\") > dynamicSubject.indexOf(\"{\"),\r\n                emailId: sysId,\r\n                sysId: tableGR.getUniqueValue(),\r\n                profile,\r\n\t\t\t\temailHtml: tableGR.getValue('email_html'),\r\n                canSend: tableGR.getValue('can_send'),\r\n\t\t\t\tstatus: tableGR.getValue('status'),\r\n\t\t\t\tassociatedRecord: {\r\n                    displayValue: [],\r\n                    value: \"\",\r\n                    selected: {},\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    tables: [{\r\n                        table: \"x_cadso_work_campaign\",\r\n                        limit: 7,\r\n                        icon: \"user\",\r\n                        searchValue: \"\"\r\n                    }],\r\n                }\r\n            };\r\n        } else if (messageType === 'sms') {\r\n            strat = {\r\n                optimized: checkBool({\r\n                    tableGR,\r\n                    field: \"send_time_optimization\"\r\n                }),\r\n                sendingStrategy,\r\n                optimizedBy: {\r\n                    ...optimizedBy,\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                },\r\n                sendOn: {\r\n                    displayValue: sendOn,\r\n                    value: sendOn,\r\n                    editValue: {\r\n                        displayValue: sendOn,\r\n                        value: sendOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n                audience: includes,\r\n                excludedAudience: excludes,\r\n                text: tableGR.getDisplayValue('body_text'),\r\n                image: imgGetter('ZZ_YY' + table, tableGR.getUniqueValue()),\r\n                unsubscribeText: tableGR.getDisplayValue('unsubscribe_text'),\r\n                messageId: sysId,\r\n                sysId: tableGR.getUniqueValue(),\r\n                profile,\r\n                canSend: tableGR.getValue('can_send'),\r\n\t\t\t\trichText: tableGR.getDisplayValue('rich_text_object'),\r\n\t\t\t\toptOut: checkBool({\r\n                    tableGR,\r\n                    field: \"include_opt_out_text\"\r\n                }),\r\n\r\n            };\r\n        }\r\n\r\n        strats.push(strat);\r\n    }\r\n\r\n\r\n\r\n    response.setBody({\r\n        totalSends,\r\n        strats,\r\n        hasRecords: strats.length > 0,\r\n        canSend: strats.filter(({\r\n            canSend\r\n        }) => canSend === true).length === strats.length,\r\n        sendingStrategy\r\n    });\r\n\r\n    function checkBool({\r\n        tableGR,\r\n        field\r\n    }) {\r\n        return ((tableGR.getDisplayValue(field) + '').toLowerCase() === \"true\");\r\n    }\r\n\r\n    function getOpt(value) {\r\n        const choices = [{\r\n                displayValue: \"Time Zone\",\r\n                value: \"timeZone\",\r\n                description: \"Send at the same time for all recipients regardless of time zone.\",\r\n            },\r\n            {\r\n                displayValue: \"Send Time\",\r\n                value: \"sendTime\",\r\n                description: \"Send at the most optimal time for each recipient.\",\r\n            },\r\n            {\r\n                displayValue: \"No Optimization\",\r\n                value: \"none\"\r\n            },\r\n        ];\r\n        if (value === 'timeZone') {\r\n            return choices[0];\r\n        } else if (value === 'sendTime') {\r\n            return choices[1];\r\n        } else {\r\n            return choices[2];\r\n        }\r\n    }\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        sysId,      // should this be the email OR email_send\r\n        messageType\r\n    } = request.body.data;\r\n\r\n    if (messageType === 'sms') {\r\n        const smsSendGr = new GlideRecord('x_cadso_automate_message_send');\r\n        smsSendGr.addQuery('sys_id', sysId);\r\n        smsSendGr.query();\r\n\r\n        if (smsSendGr.next()) {\r\n            sysId = smsSendGr.getValue('message');\r\n        }\r\n\r\n    }\r\n\r\n\t//TODO: THis needs to be reworked for SMS. alot doers not work\r\n\t// - line 26 because we are already looking at the SMS record, not the Send record\r\n\r\n    const apiUtil = new x_cadso_automate.APIUtils();\r\n    const imgGetter = new x_cadso_automate.getSmsImage().getImage;\r\n    let totalSends = 0;\r\n    const table = messageType === 'sms' ? 'x_cadso_automate_message_send' : 'x_cadso_automate_email_send';\r\n    const tableGR = new GlideRecord(table);\r\n    tableGR.addQuery(messageType === 'email' ? 'email' : 'message', sysId);\r\n    tableGR.orderBy('sys_created_on');\r\n    tableGR.query();\r\n    let found = tableGR.hasNext();\r\n    const strats = [];\r\n    let sendingStrategy = 'now';\r\n\r\n    while (tableGR.next()) {\r\n        /***** get totalSends ******/\r\n        // let status = tableGR.getValue('status');\r\n\r\n        // if (status != 'scheduled' && status != 'draft') {\r\n        //     count = apiUtil.count({\r\n        //         table: 'x_cadso_automate_email_batch_recipient',\r\n        //         query: `email_batch.email_send.sys_id=${tableGR.getUniqueValue()}`\r\n        //     });\r\n        //     totalSends += count;\r\n        // } else {\r\n        //     let includedMembers = apiUtil.query({\r\n        //         table: 'x_cadso_automate_audience_member',\r\n        //         query: `audienceIN${tableGR.getValue('audiences')}`,\r\n        //         returnFields: 'contact_detail'\r\n        //     });\r\n\r\n        //     let excludedMembers = apiUtil.query({\r\n        //         table: 'x_cadso_automate_audience_member',\r\n        //         query: `audienceIN${tableGR.getValue('excluded_audiences')}`,\r\n        //         returnFields: 'contact_detail'\r\n        //     });\r\n\r\n        //     let netIncludedMembers = includedMembers.filter(includedMember =>\r\n        //         !excludedMembers.some(excludedMember =>\r\n        //             excludedMember.contact_detail === includedMember.contact_detail)\r\n        //     );\r\n        //     totalSends += netIncludedMembers.length;\r\n        // }\r\n        /***** end totalSends ******/\r\n        let optimizedBy = getOpt(); // None\r\n        if (checkBool({\r\n                tableGR,\r\n                field: \"send_time_optimization\"\r\n            })) {\r\n            optimizedBy = getOpt('sendTime');\r\n        } else if (checkBool({\r\n                tableGR,\r\n                field: \"time_zone_optimization\"\r\n            })) {\r\n            optimizedBy = getOpt('timeZone');\r\n        }\r\n        const sendOn = tableGR.getDisplayValue('delivery_time');\r\n\t\tconst completedOn = tableGR.getDisplayValue('completed_on');\r\n        const audiences = tableGR.getDisplayValue('audiences');\r\n        const audiencesSysIds = tableGR.getValue('audiences');\r\n        const dynamicSubject = tableGR.getDisplayValue('dynamic_subject_line');\r\n        const profile = {\r\n            label: messageType === 'sms' ? 'Text Sender Profile' : 'Email Sender Profile',\r\n            displayValue: tableGR.getDisplayValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            value: tableGR.getValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            element: \"profile\",\r\n            required: true,\r\n            disabled: false,\r\n            hasValue: !!tableGR.getValue(messageType === 'sms' ? 'message_number' : 'from_address'),\r\n            field: {\r\n                reference: messageType === 'sms' ? 'x_cadso_automate_message_number' : 'x_cadso_automate_sender_email',\r\n                referenceQuery: 'active=true'\r\n            }\r\n        };\r\n\r\n        let includes = tableGR.getValue('includes');\r\n        includes = JSON.parse(includes) || {\r\n            displayValue: [],\r\n            value: \"\",\r\n            selected: {},\r\n            editValue: {\r\n                displayValue: \"\",\r\n                value: \"\"\r\n            },\r\n            open: false,\r\n            searchValue: \"\",\r\n            tables: [{\r\n                table: \"x_cadso_automate_audience\",\r\n                limit: 7,\r\n                icon: \"user\",\r\n                searchValue: \"\"\r\n            }],\r\n        };\r\n\r\n        let excludes = tableGR.getValue('excludes');\r\n        excludes = JSON.parse(excludes) || {\r\n            displayValue: [],\r\n            value: \"\",\r\n            selected: {},\r\n            editValue: {\r\n                displayValue: \"\",\r\n                value: \"\"\r\n            },\r\n            open: false,\r\n            searchValue: \"\",\r\n            tables: [{\r\n                table: \"x_cadso_automate_audience\",\r\n                limit: 7,\r\n                icon: \"user\",\r\n                searchValue: \"\"\r\n            }],\r\n        };\r\n\t\t\r\n        sendingStrategy = checkBool({\r\n            tableGR,\r\n            field: \"send_now\"\r\n        }) ? 'now' : 'schedule';\r\n\r\n        let strat;\r\n        if (messageType === 'email') {\r\n\t\t\tlet type = 'standard';\r\n\t\t\tconst emailGr = tableGR.email.getRefRecord();\r\n\t\t\tif (emailGr.isValidRecord()) {\r\n\t\t\t\ttype = emailGr.getValue('type');\r\n\t\t\t}\r\n            strat = {\r\n                optimized: checkBool({\r\n                    tableGR,\r\n                    field: \"send_time_optimization\"\r\n                }),\r\n                sendingStrategy,\r\n                optimizedBy: {\r\n                    ...optimizedBy,\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                },\r\n                sendOn: {\r\n                    displayValue: sendOn,\r\n                    value: sendOn,\r\n                    editValue: {\r\n                        displayValue: sendOn,\r\n                        value: sendOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n\t\t\t\tcompletedOn: {\r\n                    displayValue: completedOn,\r\n                    value: completedOn,\r\n                    editValue: {\r\n                        displayValue: completedOn,\r\n                        value: completedOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n                audience: includes,\r\n                excludesAudience: excludes,\r\n\t\t\t\texcludedAudience: excludes, // NL - Test\r\n                subject: dynamicSubject,\r\n\t\t\t\ttype,\r\n                defaultSubject: tableGR.getDisplayValue('static_subject_line'),\r\n                previewText: tableGR.getDisplayValue('preview_text'),\r\n                showDefaultOption: dynamicSubject.indexOf(\"{\") > -1 && dynamicSubject.indexOf(\"}\") > dynamicSubject.indexOf(\"{\"),\r\n                emailId: sysId,\r\n                sysId: tableGR.getUniqueValue(),\r\n                profile,\r\n\t\t\t\temailHtml: tableGR.getValue('email_html'),\r\n                canSend: tableGR.getValue('can_send'),\r\n\t\t\t\tstatus: tableGR.getValue('status'),\r\n\t\t\t\tassociatedRecord: {\r\n                    displayValue: [],\r\n                    value: \"\",\r\n                    selected: {},\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    tables: [{\r\n                        table: \"x_cadso_work_campaign\",\r\n                        limit: 7,\r\n                        icon: \"user\",\r\n                        searchValue: \"\"\r\n                    }],\r\n                }\r\n            };\r\n        } else if (messageType === 'sms') {\r\n            strat = {\r\n                optimized: checkBool({\r\n                    tableGR,\r\n                    field: \"send_time_optimization\"\r\n                }),\r\n                sendingStrategy,\r\n                optimizedBy: {\r\n                    ...optimizedBy,\r\n                    editValue: {\r\n                        displayValue: \"\",\r\n                        value: \"\"\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                },\r\n                sendOn: {\r\n                    displayValue: sendOn,\r\n                    value: sendOn,\r\n                    editValue: {\r\n                        displayValue: sendOn,\r\n                        value: sendOn\r\n                    },\r\n                    open: false,\r\n                    searchValue: \"\",\r\n                    time: \"\",\r\n                    date: \"\",\r\n                },\r\n                audience: includes,\r\n                excludedAudience: excludes,\r\n                text: tableGR.getDisplayValue('body_text'),\r\n                image: imgGetter('ZZ_YY' + table, tableGR.getUniqueValue()),\r\n                unsubscribeText: tableGR.getDisplayValue('unsubscribe_text'),\r\n                messageId: sysId,\r\n                sysId: tableGR.getUniqueValue(),\r\n                profile,\r\n                canSend: tableGR.getValue('can_send'),\r\n\t\t\t\trichText: tableGR.getDisplayValue('rich_text_object'),\r\n\t\t\t\toptOut: checkBool({\r\n                    tableGR,\r\n                    field: \"include_opt_out_text\"\r\n                }),\r\n\r\n            };\r\n        }\r\n\r\n        strats.push(strat);\r\n    }\r\n\r\n\r\n\r\n    response.setBody({\r\n        totalSends,\r\n        strats,\r\n        hasRecords: strats.length > 0,\r\n        canSend: strats.filter(({\r\n            canSend\r\n        }) => canSend === true).length === strats.length,\r\n        sendingStrategy\r\n    });\r\n\r\n    function checkBool({\r\n        tableGR,\r\n        field\r\n    }) {\r\n        return ((tableGR.getDisplayValue(field) + '').toLowerCase() === \"true\");\r\n    }\r\n\r\n    function getOpt(value) {\r\n        const choices = [{\r\n                displayValue: \"Time Zone\",\r\n                value: \"timeZone\",\r\n                description: \"Send at the same time for all recipients regardless of time zone.\",\r\n            },\r\n            {\r\n                displayValue: \"Send Time\",\r\n                value: \"sendTime\",\r\n                description: \"Send at the most optimal time for each recipient.\",\r\n            },\r\n            {\r\n                displayValue: \"No Optimization\",\r\n                value: \"none\"\r\n            },\r\n        ];\r\n        if (value === 'timeZone') {\r\n            return choices[0];\r\n        } else if (value === 'sendTime') {\r\n            return choices[1];\r\n        } else {\r\n            return choices[2];\r\n        }\r\n    }\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-08-15 19:01:44",
    "display_value": "2025-08-15 12:01:44 PM"
  },
  "enforce_acl": {
    "value": "003a5109c3ee021085b196c4e40131ab",
    "display_value": "Tenon Automate UI API Access"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "{\r\n\"sys_id\": \"\",\r\n\"message_type\": \"\"\r\n}",
    "display_value": "{\r\n\"sys_id\": \"\",\r\n\"message_type\": \"\"\r\n}"
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "dennis.huh",
    "display_value": "dennis.huh"
  },
  "operation_uri": {
    "value": "/api/x_cadso_automate/ui/sendingStrategy/fetch",
    "display_value": "/api/x_cadso_automate/ui/sendingStrategy/fetch"
  },
  "sys_created_on": {
    "value": "2024-07-31 22:36:02",
    "display_value": "2024-07-31 03:36:02 PM"
  },
  "sys_name": {
    "value": "Sending Strategy - Fetch",
    "display_value": "Sending Strategy - Fetch"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "4a222358c3aa425085b196c4e401318e",
    "display_value": "Tenon Automate UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "true",
    "display_value": "true"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "120",
    "display_value": "120"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "Sending Strategies",
    "display_value": "Sending Strategies"
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_a78c77a0c377ce5085b196c4e40131de",
    "display_value": "sys_ws_operation_a78c77a0c377ce5085b196c4e40131de"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Sending Strategy - Fetch",
    "display_value": "Sending Strategy - Fetch"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/sendingStrategy/fetch",
    "display_value": "/sendingStrategy/fetch"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
