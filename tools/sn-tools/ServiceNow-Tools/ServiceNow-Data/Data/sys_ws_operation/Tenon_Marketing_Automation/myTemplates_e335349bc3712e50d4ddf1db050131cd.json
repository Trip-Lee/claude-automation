{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "e335349bc3712e50d4ddf1db050131cd",
    "extracted_at": "2025-09-19T21:48:32.656Z",
    "display_value": "myTemplates",
    "application": "Tenon_Marketing_Automation",
    "scope": {
      "display_value": "Tenon Marketing Automation",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/5e9f5f8b87420250369f33373cbb3559",
      "value": "5e9f5f8b87420250369f33373cbb3559"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        pageSize = 50,\r\n            type,\r\n            page = 1,\r\n            search = '',\r\n            sysId\r\n    } = request.queryParams;\r\n    if (!type) {\r\n        response.setStatus(400);\r\n        return response;\r\n    }\r\n\tif (typeof pageSize === 'object'){\r\n\t\tpageSize = pageSize.toString();\r\n\t}\r\n\tif (typeof type === 'object'){\r\n\t\ttype = type.toString();\r\n\t}\r\n\tif (typeof page === 'object'){\r\n\t\tpage = page.toString();\r\n\t}\r\n\tif (typeof search === 'object'){\r\n\t\tsearch = search.toString();\r\n\t}\r\n\tif (typeof sysId === 'object'){\r\n\t\tsysId = sysId.toString();\r\n\t}\r\n\r\n    let sourcesQuery = [];\r\n    if (sysId) {\r\n\t\tconst recordTable = type === 'email' ? 'x_cadso_automate_email' : 'x_cadso_cloud_page'\r\n        const tableGr = new GlideRecordSecure(recordTable);\r\n        if (tableGr.get(sysId)) {\r\n            const sources = tableGr.getValue('sources') ? (tableGr.getValue('sources') + '').split(',') : [];\r\n            if (sources.length) {\r\n                for (var x = 0; x < sources.length; x++) {\r\n                    sourcesQuery.push({\r\n                        field: 'sources',\r\n                        operation: 'CONTAINS',\r\n                        value: sources[x]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    tactic_type = type;\r\n\r\n    const table = 'x_cadso_automate_content_template';\r\n    let total = 0;\r\n    const templates = [];\r\n    const windowStart = Number(pageSize) * (Number(page) - 1);\r\n    const windowEnd = Number(pageSize) * (Number(page));\r\n\r\n    const queries = [{\r\n            field: 'state',\r\n            value: 'published'\r\n        },\r\n        {\r\n            field: 'tactic_type',\r\n            value: type\r\n        },\r\n    ];\r\n\r\n    const templateAgg = new GlideAggregate(table);\r\n    templateAgg.addAggregate('COUNT');\r\n    if (sourcesQuery.length) {\r\n        let orQuery = templateAgg.addNullQuery('sources');\r\n        sourcesQuery.forEach(({\r\n            field,\r\n            operation,\r\n            value\r\n        }, index) => {\r\n\t\t\torQuery.addOrCondition(field, operation, value);\r\n        });\r\n    }\r\n    if (search) {\r\n        templateAgg.addQuery('name', 'CONTAINS', search)\r\n            .addOrCondition('json_content', 'CONTAINS', search)\r\n            .addOrCondition('html_content', 'CONTAINS', search);\r\n    }\r\n    queries.forEach(({\r\n        field,\r\n        value\r\n    }) => {\r\n        templateAgg.addQuery(field, value);\r\n    });\r\n    templateAgg.query();\r\n\r\n    while (templateAgg.next()) {\r\n        total = Number(templateAgg.getAggregate('COUNT'));\r\n    }\r\n\r\n    const templateGr = new GlideRecordSecure(table);\r\n    queries.forEach(({\r\n        field,\r\n        value\r\n    }) => {\r\n        templateGr.addQuery(field, value);\r\n    });\r\n    if (sourcesQuery.length) {\r\n        let orQuery = templateGr.addNullQuery('sources');\r\n        sourcesQuery.forEach(({\r\n            field,\r\n            operation,\r\n            value\r\n        }, index) => {\r\n\t\t\torQuery.addOrCondition(field, operation, value);\r\n        });\r\n    }\r\n    if (search) {\r\n        templateGr.addQuery('name', 'CONTAINS', search)\r\n            .addOrCondition('json_content', 'CONTAINS', search)\r\n            .addOrCondition('html_content', 'CONTAINS', search);\r\n    }\r\n    templateGr.orderByDesc(\"sys_updated_on\");\r\n    templateGr.orderByDesc(\"name\");\r\n    templateGr.chooseWindow(windowStart, windowEnd);\r\n    templateGr.query();\r\n\r\n    while (templateGr.next()) {\r\n        const thumbnail = (templateGr.getDisplayValue('thumbnail') + '');\r\n        templates.push({\r\n            title: templateGr.getDisplayValue('name'),\r\n            id: templateGr.getUniqueValue(),\r\n            sysId: templateGr.getUniqueValue(),\r\n            isMyTemplate: true,\r\n            thumbnail: thumbnail,\r\n            thumbnail_large: templateGr.getDisplayValue('thumbnail_large'),\r\n\t\t\tsources: templateGr.getValue('sources'),\r\n\t\t\tsourceTables: templateGr.getDisplayValue('audience_tables')\r\n        });\r\n    }\r\n\r\n    response.setStatus(200);\r\n    response.setBody({\r\n        total,\r\n        templates,\r\n\t\tsysId,\r\n\t\ttype,\r\n\t\tpageSize,\r\n\t\tsearch,\r\n\t\tsourcesQuery,\r\n\t\tquery: templateGr.getEncodedQuery()\r\n    });\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    let {\r\n        pageSize = 50,\r\n            type,\r\n            page = 1,\r\n            search = '',\r\n            sysId\r\n    } = request.queryParams;\r\n    if (!type) {\r\n        response.setStatus(400);\r\n        return response;\r\n    }\r\n\tif (typeof pageSize === 'object'){\r\n\t\tpageSize = pageSize.toString();\r\n\t}\r\n\tif (typeof type === 'object'){\r\n\t\ttype = type.toString();\r\n\t}\r\n\tif (typeof page === 'object'){\r\n\t\tpage = page.toString();\r\n\t}\r\n\tif (typeof search === 'object'){\r\n\t\tsearch = search.toString();\r\n\t}\r\n\tif (typeof sysId === 'object'){\r\n\t\tsysId = sysId.toString();\r\n\t}\r\n\r\n    let sourcesQuery = [];\r\n    if (sysId) {\r\n\t\tconst recordTable = type === 'email' ? 'x_cadso_automate_email' : 'x_cadso_cloud_page'\r\n        const tableGr = new GlideRecordSecure(recordTable);\r\n        if (tableGr.get(sysId)) {\r\n            const sources = tableGr.getValue('sources') ? (tableGr.getValue('sources') + '').split(',') : [];\r\n            if (sources.length) {\r\n                for (var x = 0; x < sources.length; x++) {\r\n                    sourcesQuery.push({\r\n                        field: 'sources',\r\n                        operation: 'CONTAINS',\r\n                        value: sources[x]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    tactic_type = type;\r\n\r\n    const table = 'x_cadso_automate_content_template';\r\n    let total = 0;\r\n    const templates = [];\r\n    const windowStart = Number(pageSize) * (Number(page) - 1);\r\n    const windowEnd = Number(pageSize) * (Number(page));\r\n\r\n    const queries = [{\r\n            field: 'state',\r\n            value: 'published'\r\n        },\r\n        {\r\n            field: 'tactic_type',\r\n            value: type\r\n        },\r\n    ];\r\n\r\n    const templateAgg = new GlideAggregate(table);\r\n    templateAgg.addAggregate('COUNT');\r\n    if (sourcesQuery.length) {\r\n        let orQuery = templateAgg.addNullQuery('sources');\r\n        sourcesQuery.forEach(({\r\n            field,\r\n            operation,\r\n            value\r\n        }, index) => {\r\n\t\t\torQuery.addOrCondition(field, operation, value);\r\n        });\r\n    }\r\n    if (search) {\r\n        templateAgg.addQuery('name', 'CONTAINS', search)\r\n            .addOrCondition('json_content', 'CONTAINS', search)\r\n            .addOrCondition('html_content', 'CONTAINS', search);\r\n    }\r\n    queries.forEach(({\r\n        field,\r\n        value\r\n    }) => {\r\n        templateAgg.addQuery(field, value);\r\n    });\r\n    templateAgg.query();\r\n\r\n    while (templateAgg.next()) {\r\n        total = Number(templateAgg.getAggregate('COUNT'));\r\n    }\r\n\r\n    const templateGr = new GlideRecordSecure(table);\r\n    queries.forEach(({\r\n        field,\r\n        value\r\n    }) => {\r\n        templateGr.addQuery(field, value);\r\n    });\r\n    if (sourcesQuery.length) {\r\n        let orQuery = templateGr.addNullQuery('sources');\r\n        sourcesQuery.forEach(({\r\n            field,\r\n            operation,\r\n            value\r\n        }, index) => {\r\n\t\t\torQuery.addOrCondition(field, operation, value);\r\n        });\r\n    }\r\n    if (search) {\r\n        templateGr.addQuery('name', 'CONTAINS', search)\r\n            .addOrCondition('json_content', 'CONTAINS', search)\r\n            .addOrCondition('html_content', 'CONTAINS', search);\r\n    }\r\n    templateGr.orderByDesc(\"sys_updated_on\");\r\n    templateGr.orderByDesc(\"name\");\r\n    templateGr.chooseWindow(windowStart, windowEnd);\r\n    templateGr.query();\r\n\r\n    while (templateGr.next()) {\r\n        const thumbnail = (templateGr.getDisplayValue('thumbnail') + '');\r\n        templates.push({\r\n            title: templateGr.getDisplayValue('name'),\r\n            id: templateGr.getUniqueValue(),\r\n            sysId: templateGr.getUniqueValue(),\r\n            isMyTemplate: true,\r\n            thumbnail: thumbnail,\r\n            thumbnail_large: templateGr.getDisplayValue('thumbnail_large'),\r\n\t\t\tsources: templateGr.getValue('sources'),\r\n\t\t\tsourceTables: templateGr.getDisplayValue('audience_tables')\r\n        });\r\n    }\r\n\r\n    response.setStatus(200);\r\n    response.setBody({\r\n        total,\r\n        templates,\r\n\t\tsysId,\r\n\t\ttype,\r\n\t\tpageSize,\r\n\t\tsearch,\r\n\t\tsourcesQuery,\r\n\t\tquery: templateGr.getEncodedQuery()\r\n    });\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-06-06 21:02:59",
    "display_value": "2025-06-06 02:02:59 PM"
  },
  "enforce_acl": {
    "value": "cf9d01d3e73003009d6247e603f6a990",
    "display_value": "Scripted REST External Default"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "GET",
    "display_value": "GET"
  },
  "sys_updated_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "operation_uri": {
    "value": "/api/x_cadso_automate/ui/myTemplates",
    "display_value": "/api/x_cadso_automate/ui/myTemplates"
  },
  "sys_created_on": {
    "value": "2025-06-03 03:10:45",
    "display_value": "2025-06-02 08:10:45 PM"
  },
  "sys_name": {
    "value": "myTemplates",
    "display_value": "myTemplates"
  },
  "sys_scope": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "4a222358c3aa425085b196c4e401318e",
    "display_value": "Tenon Automate UI API"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "true",
    "display_value": "true"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "21",
    "display_value": "21"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "5e9f5f8b87420250369f33373cbb3559",
    "display_value": "Tenon Marketing Automation"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_e335349bc3712e50d4ddf1db050131cd",
    "display_value": "sys_ws_operation_e335349bc3712e50d4ddf1db050131cd"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "myTemplates",
    "display_value": "myTemplates"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/myTemplates",
    "display_value": "/myTemplates"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
