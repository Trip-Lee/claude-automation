{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "8e93fbb73389a2107b18bc534d5c7b3b",
    "extracted_at": "2025-09-19T21:48:32.720Z",
    "display_value": "Free Form(Meta)",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "short_description": {
    "value": "",
    "display_value": ""
  },
  "operation_script": {
    "value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '', table = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n    const optionsApi = new x_cadso_core.OptionsApi();\r\n    var newBody = {\r\n        sysId,\r\n        table,\r\n        fields,\r\n    };\r\n\r\n    if (!table || !sysId || !fields) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecord(table);\r\n    const canCreate = tableGr.canCreate();\r\n    const canWrite = tableGr.canWrite();\r\n    if (sysId === -1 || sysId === \"-1\") {\r\n        fields.map(function(field) {\r\n            if (!field || !field.element) return;\r\n\t\t\tlet tableHasElement = false;\r\n\t\t\ttry {\r\n\t\t\t\ttableHasElement = !!tableGr[field.element] && !!tableGr[field.element].canCreate;\r\n\t\t\t} catch (e) {\r\n\t\t\t\ttableHasElement = false;\r\n\t\t\t}\r\n\t\t\tfield.tableHasElement = tableHasElement;\r\n            field.disabled = !canCreate || tableHasElement ? !tableGr[field.element].canCreate() : false;\r\n            if (field.field && field.field.tenonType === \"coreOptions\") {\r\n                field.choices = optionsApi.get({\r\n                    query: field.field.referenceQuery || field.field.query || '',\r\n                    limit: field.field.limit || 7,\r\n                    allowHTML: field.field.allowHTML || false\r\n                });\r\n                if (field.enableSelectFirstOnLoadIfBlankValue && !field.value && field.choices.length) {\r\n                    field.value = field.choices[0].value;\r\n                }\r\n            }\r\n            try {\r\n                const elementObj = tableGr.getElement(field.element);\r\n                const elementED = elementObj.getED();\r\n                const internalType = elementED.getInternalType();\r\n                const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n\t\t\t\t\t\r\n                if (isBool) {\r\n                    field.value = field.value === 'true' || field.value === '1';\r\n                }\r\n                field.internalType = internalType;\r\n            } catch (e2) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else if (tableGr.get(sysId)) {\r\n        fields.map(function(field) {\r\n            try {\r\n                if (field.field && field.field.tenonType === \"coreOptions\") {\r\n                    field.choices = optionsApi.get({\r\n                        query: field.field.referenceQuery || field.field.query || '',\r\n                        limit: field.field.limit || 7,\r\n                        allowHTML: field.field.allowHTML || false\r\n                    });\r\n                    if (field.enableSelectFirstOnLoadIfBlankValue && !field.value && field.choices.length) {\r\n                        field.value = field.choices[0].value;\r\n                    }\r\n                }\r\n                if (!field.useSetValue) {\r\n                    field.value = tableGr.getValue(field.element);\r\n                    field.displayValue = tableGr.getDisplayValue(field.element);\r\n                }\r\n                field.disabled = !canWrite || !tableGr[field.element].canWrite();\r\n                try {\r\n                    const elementObj = tableGr.getElement(field.element);\r\n                    const elementED = elementObj.getED();\r\n                    const internalType = elementED.getInternalType();\r\n                    const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n                    if (isBool) {\r\n                        field.value = field.value === 'true' || field.value === '1';\r\n                    }\r\n                    field.internalType = internalType;\r\n                } catch (e2) {\r\n                    field.error = 'Field is incorrect';\r\n                }\r\n            } catch (e) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else {\r\n        newBody.message = \"Not a valid sysId on this table.\";\r\n    }\r\n\r\n    newBody.fields = fields;\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);",
    "display_value": "(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n\r\n    const {\r\n        sysId = '', table = ''\r\n    } = request.body.data;\r\n    let {\r\n        fields = ''\r\n    } = request.body.data;\r\n    const optionsApi = new x_cadso_core.OptionsApi();\r\n    var newBody = {\r\n        sysId,\r\n        table,\r\n        fields,\r\n    };\r\n\r\n    if (!table || !sysId || !fields) {\r\n        newBody.message = \"Missing 'table', 'fields', and / or 'sysId' fields.\";\r\n        response.setBody(newBody);\r\n        return response;\r\n    }\r\n\r\n    if (typeof fields === 'string') {\r\n        fields = JSON.parse(fields);\r\n    }\r\n\r\n    var tableGr = new GlideRecord(table);\r\n    const canCreate = tableGr.canCreate();\r\n    const canWrite = tableGr.canWrite();\r\n    if (sysId === -1 || sysId === \"-1\") {\r\n        fields.map(function(field) {\r\n            if (!field || !field.element) return;\r\n\t\t\tlet tableHasElement = false;\r\n\t\t\ttry {\r\n\t\t\t\ttableHasElement = !!tableGr[field.element] && !!tableGr[field.element].canCreate;\r\n\t\t\t} catch (e) {\r\n\t\t\t\ttableHasElement = false;\r\n\t\t\t}\r\n\t\t\tfield.tableHasElement = tableHasElement;\r\n            field.disabled = !canCreate || tableHasElement ? !tableGr[field.element].canCreate() : false;\r\n            if (field.field && field.field.tenonType === \"coreOptions\") {\r\n                field.choices = optionsApi.get({\r\n                    query: field.field.referenceQuery || field.field.query || '',\r\n                    limit: field.field.limit || 7,\r\n                    allowHTML: field.field.allowHTML || false\r\n                });\r\n                if (field.enableSelectFirstOnLoadIfBlankValue && !field.value && field.choices.length) {\r\n                    field.value = field.choices[0].value;\r\n                }\r\n            }\r\n            try {\r\n                const elementObj = tableGr.getElement(field.element);\r\n                const elementED = elementObj.getED();\r\n                const internalType = elementED.getInternalType();\r\n                const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n\t\t\t\t\t\r\n                if (isBool) {\r\n                    field.value = field.value === 'true' || field.value === '1';\r\n                }\r\n                field.internalType = internalType;\r\n            } catch (e2) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else if (tableGr.get(sysId)) {\r\n        fields.map(function(field) {\r\n            try {\r\n                if (field.field && field.field.tenonType === \"coreOptions\") {\r\n                    field.choices = optionsApi.get({\r\n                        query: field.field.referenceQuery || field.field.query || '',\r\n                        limit: field.field.limit || 7,\r\n                        allowHTML: field.field.allowHTML || false\r\n                    });\r\n                    if (field.enableSelectFirstOnLoadIfBlankValue && !field.value && field.choices.length) {\r\n                        field.value = field.choices[0].value;\r\n                    }\r\n                }\r\n                if (!field.useSetValue) {\r\n                    field.value = tableGr.getValue(field.element);\r\n                    field.displayValue = tableGr.getDisplayValue(field.element);\r\n                }\r\n                field.disabled = !canWrite || !tableGr[field.element].canWrite();\r\n                try {\r\n                    const elementObj = tableGr.getElement(field.element);\r\n                    const elementED = elementObj.getED();\r\n                    const internalType = elementED.getInternalType();\r\n                    const isBool = internalType === 'boolean' || internalType === \"true/false\";\r\n                    if (isBool) {\r\n                        field.value = field.value === 'true' || field.value === '1';\r\n                    }\r\n                    field.internalType = internalType;\r\n                } catch (e2) {\r\n                    field.error = 'Field is incorrect';\r\n                }\r\n            } catch (e) {\r\n                field.error = 'Field is incorrect';\r\n            }\r\n            return field;\r\n        });\r\n    } else {\r\n        newBody.message = \"Not a valid sysId on this table.\";\r\n    }\r\n\r\n    newBody.fields = fields;\r\n\r\n    response.setBody(newBody);\r\n\r\n})(request, response);"
  },
  "sys_updated_on": {
    "value": "2025-09-16 21:19:57",
    "display_value": "2025-09-16 02:19:57 PM"
  },
  "enforce_acl": {
    "value": "535603d7333026507b18bc534d5c7bcc",
    "display_value": "Core REST Endpoint ACL"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "dennis.huh",
    "display_value": "dennis.huh"
  },
  "operation_uri": {
    "value": "/api/x_cadso_core/component/freeform/meta",
    "display_value": "/api/x_cadso_core/component/freeform/meta"
  },
  "sys_created_on": {
    "value": "2025-04-28 23:26:14",
    "display_value": "2025-04-28 04:26:14 PM"
  },
  "sys_name": {
    "value": "Free Form(Meta)",
    "display_value": "Free Form(Meta)"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "7a28ef3b3349a2107b18bc534d5c7b8f",
    "display_value": "Component"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "false",
    "display_value": "false"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "20",
    "display_value": "20"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_8e93fbb73389a2107b18bc534d5c7b3b",
    "display_value": "sys_ws_operation_8e93fbb73389a2107b18bc534d5c7b3b"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Free Form(Meta)",
    "display_value": "Free Form(Meta)"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/freeform/meta",
    "display_value": "/freeform/meta"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
