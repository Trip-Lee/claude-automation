{
  "_metadata": {
    "table": "sys_ws_operation",
    "sys_id": "4c686b7b3349a2107b18bc534d5c7b97",
    "extracted_at": "2025-09-19T21:48:32.732Z",
    "display_value": "Choice",
    "application": "Tenon_-_Core",
    "scope": {
      "display_value": "Tenon - Core",
      "link": "https://tenonworkstudio.service-now.com/api/now/table/sys_scope/608cd026c374e250d4ddf1db050131bb",
      "value": "608cd026c374e250d4ddf1db050131bb"
    }
  },
  "short_description": {
    "value": "Test",
    "display_value": "Test"
  },
  "operation_script": {
    "value": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n  let { table, query, searchValue, limit, element, isChoice } = request.body.data;\r\n  const optionsApi = new x_cadso_core.OptionsApi();\r\n  let choices = [];\r\n  let tableBeingSearched = \"\";\r\n  if (table === \"sys_dictionary\" && query) {\r\n    // We will return all fields for a table regardless if the table is extended\r\n    const regex = /name=([a-zA-Z]*)/gm;\r\n    const matches = query.match(regex);\r\n    if (matches && matches.length > 0) {\r\n      tableBeingSearched = (matches[0] + \"\").replace(\"name=\", \"\");\r\n      const list = getExtendedTablesList({\r\n        table: tableBeingSearched,\r\n        list: [],\r\n      });\r\n      query = getColectionsEncodedQuery({\r\n        list,\r\n        query,\r\n        matches,\r\n      });\r\n    }\r\n  } else if (isChoice) {\r\n    // If no table is provided; We must be looking for choices\r\n    const list = getExtendedTablesList({\r\n      table,\r\n      list: [],\r\n    });\r\n    if (list && list.length) {\r\n      const tableWithChoicesForField = list.find(function (_table) {\r\n        return isChoiceFn({\r\n          table,\r\n          element,\r\n        });\r\n      });\r\n\r\n      if (tableWithChoicesForField) {\r\n        choices = getChoices({\r\n          table: tableWithChoicesForField,\r\n          element,\r\n          searchValue,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!table || choices.length) {\r\n    // We will return if table is blank to prevent errors or if we are looking for choices.\r\n    response.setBody({\r\n      choices,\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  // Contine to regular logic\r\n  const tableGr = new GlideRecordSecure(table);\r\n  if (query) {\r\n    tableGr.addEncodedQuery(query);\r\n  }\r\n\r\n  const displayField = tableGr.getDisplayName();\r\n  if (searchValue) {\r\n    let queryItem = \"CONTAINS\";\r\n    if (displayField) {\r\n      const isReference = isReferenceField({\r\n        table,\r\n        element: displayField,\r\n      });\r\n      if (isReference) {\r\n        queryItem = \"LIKE\";\r\n      }\r\n    }\r\n    tableGr.addEncodedQuery(displayField + queryItem + searchValue);\r\n  }\r\n\r\n  tableGr.orderBy(displayField);\r\n  tableGr.setLimit(limit || 7);\r\n  tableGr.query();\r\n\r\n  while (tableGr.next()) {\r\n    let choice = {};\r\n    if (table === \"x_cadso_core_option\") {\r\n      choice = optionsApi.get({\r\n        tableGr,\r\n        allowHTML: false,\r\n      });\r\n    } else {\r\n      choice = {\r\n        displayValue: tableGr.getDisplayValue() || \"(Empty Display Value)\",\r\n        value: tableGr.getUniqueValue(),\r\n        sysId: tableGr.getUniqueValue(),\r\n      };\r\n    }\r\n\r\n    if (table === \"sys_dictionary\") {\r\n      const isChoice = isChoiceFn({\r\n        table: tableGr.getValue(\"name\"),\r\n        element: tableGr.getValue(\"element\"),\r\n      });\r\n      choice.field = {\r\n        table: tableGr.getValue(\"name\"),\r\n        element: tableGr.getValue(\"element\"),\r\n        type: isChoice ? \"choice\" : tableGr.getValue(\"internal_type\"),\r\n        required: tableGr.getValue(\"mandatory\"),\r\n        length: tableGr.getValue(\"max_length\"),\r\n        mandatory: tableGr.getValue(\"mandatory\"),\r\n        reference: tableGr.getValue(\"reference\"),\r\n        query: tableGr.getValue(\"reference_qual_condition\"),\r\n        dynamicRefQual: tableGr.getValue(\"dynamic_ref_qual\"),\r\n        referenceQual: tableGr.getValue(\"reference_qual\"),\r\n        useReferenceQualifier: tableGr.getValue(\"use_reference_qualifier\"),\r\n        queryField:\r\n          choice.useReferenceQualifier === \"simple\"\r\n            ? \"query\"\r\n            : choice.useReferenceQualifier === \"advanced\"\r\n              ? \"referenceQual\"\r\n              : \"dynamicRefQual\",\r\n        isChoice,\r\n      };\r\n    }\r\n\r\n    choices.push(choice);\r\n  }\r\n\r\n  response.setBody({\r\n    choices,\r\n  });\r\n\r\n  return response;\r\n\r\n  // Functions below here\r\n  function getExtendedTablesList({ table, list = [] }) {\r\n    list.push(table);\r\n\r\n    var sysDbObjGr = new GlideRecord(\"sys_db_object\");\r\n    sysDbObjGr.addQuery(\"name\", table);\r\n    sysDbObjGr.addEncodedQuery(\"super_classISNOTEMPTY\");\r\n    sysDbObjGr.addEncodedQuery(\"super_class.nameISNOTEMPTY\");\r\n    sysDbObjGr.setLimit(1);\r\n    sysDbObjGr.query();\r\n\r\n    if (sysDbObjGr.next()) {\r\n      const refRecordGr = sysDbObjGr.super_class.getRefRecord();\r\n      if (refRecordGr.isValidRecord()) {\r\n        getExtendedTablesList({\r\n          table: refRecordGr.getValue(\"name\"),\r\n          list,\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  function getColectionsEncodedQuery({ list, query, matches }) {\r\n    let newQuery = query;\r\n    let replaceValue =\r\n      \"elementNOT LIKEsys_^read_only=false^internal_type!=collection^name=\" + list.join(\"^ORname=\");\r\n    newQuery = newQuery.replace(matches[0], replaceValue);\r\n    return newQuery;\r\n  }\r\n\r\n  function getChoices({ table, element, searchValue }) {\r\n    var choiceGr = new GlideRecord(\"sys_choice\");\r\n    choiceGr.addQuery(\"name\", table);\r\n    choiceGr.addQuery(\"element\", element);\r\n\r\n    if (searchValue) {\r\n      choiceGr.addQuery(\"label\", \"CONTAINS\", searchValue);\r\n    }\r\n\r\n    choiceGr.addQuery(\"language\", \"en\");\r\n    choiceGr.orderBy(\"sequence\");\r\n    choiceGr.query();\r\n\r\n    const options = [];\r\n\r\n    while (choiceGr.next()) {\r\n      options.push({\r\n        displayValue: choiceGr.getDisplayValue(),\r\n        value: choiceGr.getValue(\"value\"),\r\n      });\r\n    }\r\n    return options;\r\n  }\r\n\r\n  function isChoiceFn({ table, element }) {\r\n    var agg = new GlideAggregate(\"sys_choice\");\r\n    agg.addAggregate(\"COUNT\");\r\n    agg.addQuery(\"element\", element);\r\n    agg.addQuery(\"name\", table);\r\n    agg.addQuery(\"language\", \"en\");\r\n    agg.query();\r\n    let count = 0;\r\n    while (agg.next()) {\r\n      count = parseInt(agg.getAggregate(\"COUNT\"));\r\n    }\r\n    return count > 0;\r\n  }\r\n\r\n  function isReferenceField({ table, element }) {\r\n    var agg = new GlideAggregate(\"sys_dictionary\");\r\n    agg.addAggregate(\"COUNT\");\r\n    agg.addQuery(\"element\", element);\r\n    agg.addQuery(\"name\", table);\r\n    agg.addQuery(\"internal_type\", \"reference\");\r\n    agg.query();\r\n    let count = 0;\r\n    while (agg.next()) {\r\n      count = parseInt(agg.getAggregate(\"COUNT\"));\r\n    }\r\n    return count > 0;\r\n  }\r\n})(request, response);\r\n",
    "display_value": "(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {\r\n  let { table, query, searchValue, limit, element, isChoice } = request.body.data;\r\n  const optionsApi = new x_cadso_core.OptionsApi();\r\n  let choices = [];\r\n  let tableBeingSearched = \"\";\r\n  if (table === \"sys_dictionary\" && query) {\r\n    // We will return all fields for a table regardless if the table is extended\r\n    const regex = /name=([a-zA-Z]*)/gm;\r\n    const matches = query.match(regex);\r\n    if (matches && matches.length > 0) {\r\n      tableBeingSearched = (matches[0] + \"\").replace(\"name=\", \"\");\r\n      const list = getExtendedTablesList({\r\n        table: tableBeingSearched,\r\n        list: [],\r\n      });\r\n      query = getColectionsEncodedQuery({\r\n        list,\r\n        query,\r\n        matches,\r\n      });\r\n    }\r\n  } else if (isChoice) {\r\n    // If no table is provided; We must be looking for choices\r\n    const list = getExtendedTablesList({\r\n      table,\r\n      list: [],\r\n    });\r\n    if (list && list.length) {\r\n      const tableWithChoicesForField = list.find(function (_table) {\r\n        return isChoiceFn({\r\n          table,\r\n          element,\r\n        });\r\n      });\r\n\r\n      if (tableWithChoicesForField) {\r\n        choices = getChoices({\r\n          table: tableWithChoicesForField,\r\n          element,\r\n          searchValue,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!table || choices.length) {\r\n    // We will return if table is blank to prevent errors or if we are looking for choices.\r\n    response.setBody({\r\n      choices,\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  // Contine to regular logic\r\n  const tableGr = new GlideRecordSecure(table);\r\n  if (query) {\r\n    tableGr.addEncodedQuery(query);\r\n  }\r\n\r\n  const displayField = tableGr.getDisplayName();\r\n  if (searchValue) {\r\n    let queryItem = \"CONTAINS\";\r\n    if (displayField) {\r\n      const isReference = isReferenceField({\r\n        table,\r\n        element: displayField,\r\n      });\r\n      if (isReference) {\r\n        queryItem = \"LIKE\";\r\n      }\r\n    }\r\n    tableGr.addEncodedQuery(displayField + queryItem + searchValue);\r\n  }\r\n\r\n  tableGr.orderBy(displayField);\r\n  tableGr.setLimit(limit || 7);\r\n  tableGr.query();\r\n\r\n  while (tableGr.next()) {\r\n    let choice = {};\r\n    if (table === \"x_cadso_core_option\") {\r\n      choice = optionsApi.get({\r\n        tableGr,\r\n        allowHTML: false,\r\n      });\r\n    } else {\r\n      choice = {\r\n        displayValue: tableGr.getDisplayValue() || \"(Empty Display Value)\",\r\n        value: tableGr.getUniqueValue(),\r\n        sysId: tableGr.getUniqueValue(),\r\n      };\r\n    }\r\n\r\n    if (table === \"sys_dictionary\") {\r\n      const isChoice = isChoiceFn({\r\n        table: tableGr.getValue(\"name\"),\r\n        element: tableGr.getValue(\"element\"),\r\n      });\r\n      choice.field = {\r\n        table: tableGr.getValue(\"name\"),\r\n        element: tableGr.getValue(\"element\"),\r\n        type: isChoice ? \"choice\" : tableGr.getValue(\"internal_type\"),\r\n        required: tableGr.getValue(\"mandatory\"),\r\n        length: tableGr.getValue(\"max_length\"),\r\n        mandatory: tableGr.getValue(\"mandatory\"),\r\n        reference: tableGr.getValue(\"reference\"),\r\n        query: tableGr.getValue(\"reference_qual_condition\"),\r\n        dynamicRefQual: tableGr.getValue(\"dynamic_ref_qual\"),\r\n        referenceQual: tableGr.getValue(\"reference_qual\"),\r\n        useReferenceQualifier: tableGr.getValue(\"use_reference_qualifier\"),\r\n        queryField:\r\n          choice.useReferenceQualifier === \"simple\"\r\n            ? \"query\"\r\n            : choice.useReferenceQualifier === \"advanced\"\r\n              ? \"referenceQual\"\r\n              : \"dynamicRefQual\",\r\n        isChoice,\r\n      };\r\n    }\r\n\r\n    choices.push(choice);\r\n  }\r\n\r\n  response.setBody({\r\n    choices,\r\n  });\r\n\r\n  return response;\r\n\r\n  // Functions below here\r\n  function getExtendedTablesList({ table, list = [] }) {\r\n    list.push(table);\r\n\r\n    var sysDbObjGr = new GlideRecord(\"sys_db_object\");\r\n    sysDbObjGr.addQuery(\"name\", table);\r\n    sysDbObjGr.addEncodedQuery(\"super_classISNOTEMPTY\");\r\n    sysDbObjGr.addEncodedQuery(\"super_class.nameISNOTEMPTY\");\r\n    sysDbObjGr.setLimit(1);\r\n    sysDbObjGr.query();\r\n\r\n    if (sysDbObjGr.next()) {\r\n      const refRecordGr = sysDbObjGr.super_class.getRefRecord();\r\n      if (refRecordGr.isValidRecord()) {\r\n        getExtendedTablesList({\r\n          table: refRecordGr.getValue(\"name\"),\r\n          list,\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  function getColectionsEncodedQuery({ list, query, matches }) {\r\n    let newQuery = query;\r\n    let replaceValue =\r\n      \"elementNOT LIKEsys_^read_only=false^internal_type!=collection^name=\" + list.join(\"^ORname=\");\r\n    newQuery = newQuery.replace(matches[0], replaceValue);\r\n    return newQuery;\r\n  }\r\n\r\n  function getChoices({ table, element, searchValue }) {\r\n    var choiceGr = new GlideRecord(\"sys_choice\");\r\n    choiceGr.addQuery(\"name\", table);\r\n    choiceGr.addQuery(\"element\", element);\r\n\r\n    if (searchValue) {\r\n      choiceGr.addQuery(\"label\", \"CONTAINS\", searchValue);\r\n    }\r\n\r\n    choiceGr.addQuery(\"language\", \"en\");\r\n    choiceGr.orderBy(\"sequence\");\r\n    choiceGr.query();\r\n\r\n    const options = [];\r\n\r\n    while (choiceGr.next()) {\r\n      options.push({\r\n        displayValue: choiceGr.getDisplayValue(),\r\n        value: choiceGr.getValue(\"value\"),\r\n      });\r\n    }\r\n    return options;\r\n  }\r\n\r\n  function isChoiceFn({ table, element }) {\r\n    var agg = new GlideAggregate(\"sys_choice\");\r\n    agg.addAggregate(\"COUNT\");\r\n    agg.addQuery(\"element\", element);\r\n    agg.addQuery(\"name\", table);\r\n    agg.addQuery(\"language\", \"en\");\r\n    agg.query();\r\n    let count = 0;\r\n    while (agg.next()) {\r\n      count = parseInt(agg.getAggregate(\"COUNT\"));\r\n    }\r\n    return count > 0;\r\n  }\r\n\r\n  function isReferenceField({ table, element }) {\r\n    var agg = new GlideAggregate(\"sys_dictionary\");\r\n    agg.addAggregate(\"COUNT\");\r\n    agg.addQuery(\"element\", element);\r\n    agg.addQuery(\"name\", table);\r\n    agg.addQuery(\"internal_type\", \"reference\");\r\n    agg.query();\r\n    let count = 0;\r\n    while (agg.next()) {\r\n      count = parseInt(agg.getAggregate(\"COUNT\"));\r\n    }\r\n    return count > 0;\r\n  }\r\n})(request, response);\r\n"
  },
  "sys_updated_on": {
    "value": "2025-08-11 16:27:13",
    "display_value": "2025-08-11 09:27:13 AM"
  },
  "enforce_acl": {
    "value": "535603d7333026507b18bc534d5c7bcc",
    "display_value": "Core REST Endpoint ACL"
  },
  "web_service_version": {
    "value": "",
    "display_value": ""
  },
  "sys_class_name": {
    "value": "sys_ws_operation",
    "display_value": "Scripted REST Resource"
  },
  "requires_acl_authorization": {
    "value": "true",
    "display_value": "true"
  },
  "request_example": {
    "value": "",
    "display_value": ""
  },
  "http_method": {
    "value": "POST",
    "display_value": "POST"
  },
  "sys_updated_by": {
    "value": "daniel.cudney",
    "display_value": "daniel.cudney"
  },
  "operation_uri": {
    "value": "/api/x_cadso_core/component/choices",
    "display_value": "/api/x_cadso_core/component/choices"
  },
  "sys_created_on": {
    "value": "2025-04-28 22:34:42",
    "display_value": "2025-04-28 03:34:42 PM"
  },
  "sys_name": {
    "value": "Choice",
    "display_value": "Choice"
  },
  "sys_scope": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_created_by": {
    "value": "admin",
    "display_value": "admin"
  },
  "web_service_definition": {
    "value": "7a28ef3b3349a2107b18bc534d5c7b8f",
    "display_value": "Component"
  },
  "consumes": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "x_cadso_api_docs_request_body_schema": {
    "value": "",
    "display_value": ""
  },
  "requires_snc_internal_role": {
    "value": "false",
    "display_value": "false"
  },
  "requires_authentication": {
    "value": "true",
    "display_value": "true"
  },
  "sys_mod_count": {
    "value": "5",
    "display_value": "5"
  },
  "active": {
    "value": "true",
    "display_value": "true"
  },
  "x_cadso_api_docs_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_tags": {
    "value": "",
    "display_value": ""
  },
  "sys_package": {
    "value": "608cd026c374e250d4ddf1db050131bb",
    "display_value": "Tenon - Core"
  },
  "sys_update_name": {
    "value": "sys_ws_operation_4c686b7b3349a2107b18bc534d5c7b97",
    "display_value": "sys_ws_operation_4c686b7b3349a2107b18bc534d5c7b97"
  },
  "consumes_customized": {
    "value": "false",
    "display_value": "false"
  },
  "name": {
    "value": "Choice",
    "display_value": "Choice"
  },
  "produces": {
    "value": "application/json,application/xml,text/xml",
    "display_value": "application/json,application/xml,text/xml"
  },
  "relative_path": {
    "value": "/choices",
    "display_value": "/choices"
  },
  "produces_customized": {
    "value": "false",
    "display_value": "false"
  },
  "default_operation_uri": {
    "value": "",
    "display_value": ""
  },
  "sys_policy": {
    "value": "",
    "display_value": null
  }
}
