{
  "name": "DO NOT PUSH: Create Contacts v2",
  "script": "// Scheduled Job: DO NOT PUSH: Create Contacts\n// This job creates customer contact records in bulk with random data\n\n// Configuration - adjust the number of records to create\nvar recordsToCreate = gs.getProperty('contact.generation.count', '2500000'); // Default 2.5M\nvar batchSize = 1000; // Process in batches to avoid timeout\n\n// Initialize counters\nvar totalRecords = parseInt(recordsToCreate);\nvar processedRecords = 0;\nvar currentBatch = 0;\n\ngs.info('Starting contact generation job - Target: ' + totalRecords + ' records');\n\n// Helper function to generate random string\nfunction generateRandomString(length) {\n    var chars = 'abcdefghijklmnopqrstuvwxyz';\n    var result = '';\n    for (var i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\n// Helper function to capitalize first letter\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// Process records in batches\nwhile (processedRecords < totalRecords) {\n    currentBatch++;\n    var remainingRecords = totalRecords - processedRecords;\n    var currentBatchSize = Math.min(batchSize, remainingRecords);\n\n    gs.info('Processing batch ' + currentBatch + ' - Creating ' + currentBatchSize + ' records');\n\n    // Create batch of customer contacts\n    for (var i = 0; i < currentBatchSize; i++) {\n        try {\n            // Generate random names (5-10 characters)\n            var firstNameLength = Math.floor(Math.random() * 6) + 5; // 5-10 chars\n            var lastNameLength = Math.floor(Math.random() * 6) + 5;  // 5-10 chars\n\n            var firstName = capitalize(generateRandomString(firstNameLength));\n            var lastName = capitalize(generateRandomString(lastNameLength));\n            var userId = firstName.toLowerCase() + '.' + lastName.toLowerCase();\n            var email = userId + '@TenonTest.com';\n\n            // Create customer contact record\n            var contact = new GlideRecord('customer_contact');\n            contact.initialize();\n            contact.first_name = firstName;\n            contact.last_name = lastName;\n            contact.user_id = userId;\n            contact.email = email;\n\n            // Insert the record\n            var sysId = contact.insert();\n\n            if (sysId) {\n                processedRecords++;\n            } else {\n                gs.error('Failed to create contact: ' + firstName + ' ' + lastName);\n            }\n\n        } catch (e) {\n            gs.error('Error creating contact record: ' + e.message);\n        }\n    }\n\n    // Log progress every 10 batches\n    if (currentBatch % 10 === 0) {\n        gs.info('Progress: ' + processedRecords + '/' + totalRecords + ' records created (' +\n                Math.round((processedRecords/totalRecords)*100) + '%)');\n    }\n\n    // Small delay between batches to prevent overwhelming the system\n    if (currentBatch % 50 === 0) {\n        gs.sleep(100); // 100ms pause every 50 batches\n    }\n}\n\ngs.info('Contact generation job completed - Created ' + processedRecords + ' records');",
  "active": "true",
  "run_type": "on_demand",
  "short_description": "Bulk contact generation for testing - DO NOT PUSH",
  "description": "Creates customer contact records with random data. Configurable via contact.generation.count system property. Set the 'contact.generation.count' system property to control how many records to create (default: 2,500,000). DO NOT PUSH TO PRODUCTION.",
  "sys_scope": "608cd026c374e250d4ddf1db050131bb",
  "run_as": "trevor.offen",
  "condition": "",
  "unconditional": "false",
  "upgrade_safe": "false"
}